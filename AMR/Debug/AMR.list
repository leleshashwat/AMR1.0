
AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800fd30  0800fd30  00010d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010358  08010358  00012280  2**0
                  CONTENTS
  4 .ARM          00000008  08010358  08010358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010360  08010360  00012280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010360  08010360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010364  08010364  00011364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  08010368  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f5c  20000280  080105e8  00012280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200031dc  080105e8  000131dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002489b  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000476f  00000000  00000000  00036b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001803  00000000  00000000  0003d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004eac  00000000  00000000  0003e973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240e1  00000000  00000000  0004381f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113e1f  00000000  00000000  00067900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b71f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b7c  00000000  00000000  0017b764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  001852e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd14 	.word	0x0800fd14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	0800fd14 	.word	0x0800fd14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000fec:	f3ef 8211 	mrs	r2, BASEPRI
 8000ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff4:	f383 8811 	msr	BASEPRI, r3
 8000ff8:	f3bf 8f6f 	isb	sy
 8000ffc:	f3bf 8f4f 	dsb	sy
 8001000:	60fa      	str	r2, [r7, #12]
 8001002:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001004:	68fb      	ldr	r3, [r7, #12]
    UBaseType_t uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8001006:	617b      	str	r3, [r7, #20]
    Fan_bit = RxData[0] - 48;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_UART_RxCpltCallback+0x50>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b30      	subs	r3, #48	@ 0x30
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_UART_RxCpltCallback+0x54>)
 8001012:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(&huart2, RxData, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	4907      	ldr	r1, [pc, #28]	@ (8001034 <HAL_UART_RxCpltCallback+0x50>)
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <HAL_UART_RxCpltCallback+0x58>)
 800101a:	f005 fdfb 	bl	8006c14 <HAL_UART_Receive_IT>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001028:	bf00      	nop
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000474 	.word	0x20000474
 8001038:	20000470 	.word	0x20000470
 800103c:	200003dc 	.word	0x200003dc

08001040 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	@ 0x40
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint8_t charbuffer[50] = { };
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	222e      	movs	r2, #46	@ 0x2e
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00a fe6f 	bl	800bd3a <memset>
  sprintf((char *)charbuffer, "%s.txt=\"%s\"", ID, string);
 800105c:	f107 000c 	add.w	r0, r7, #12
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	490d      	ldr	r1, [pc, #52]	@ (800109c <NEXTION_SendString+0x5c>)
 8001066:	f00a fe05 	bl	800bc74 <siprintf>
  HAL_UART_Transmit (&huart1,(uint8_t *) charbuffer, strlen((const char *)charbuffer), HAL_MAX_DELAY);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8fe 	bl	8000270 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <NEXTION_SendString+0x60>)
 8001082:	f005 fd3d 	bl	8006b00 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart1, Cmd_End, 3, HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2203      	movs	r2, #3
 800108c:	4905      	ldr	r1, [pc, #20]	@ (80010a4 <NEXTION_SendString+0x64>)
 800108e:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <NEXTION_SendString+0x60>)
 8001090:	f005 fd36 	bl	8006b00 <HAL_UART_Transmit>
}
 8001094:	bf00      	nop
 8001096:	3740      	adds	r7, #64	@ 0x40
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0800fd54 	.word	0x0800fd54
 80010a0:	20000354 	.word	0x20000354
 80010a4:	20000000 	.word	0x20000000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f001 f967 	bl	800237e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f84e 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 f9c2 	bl	800143c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010b8:	f000 f960 	bl	800137c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010bc:	f000 f98e 	bl	80013dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010c0:	f000 f91c 	bl	80012fc <MX_I2C1_Init>
  MX_ADC1_Init();
 80010c4:	f000 f8a2 	bl	800120c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80010c8:	f000 f894 	bl	80011f4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, RxData, 1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	4914      	ldr	r1, [pc, #80]	@ (8001120 <main+0x78>)
 80010d0:	4814      	ldr	r0, [pc, #80]	@ (8001124 <main+0x7c>)
 80010d2:	f005 fd9f 	bl	8006c14 <HAL_UART_Receive_IT>

  while (MPU6050_Init(&hi2c1) == 1);
 80010d6:	bf00      	nop
 80010d8:	4813      	ldr	r0, [pc, #76]	@ (8001128 <main+0x80>)
 80010da:	f000 fb4b 	bl	8001774 <MPU6050_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d0f9      	beq.n	80010d8 <main+0x30>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010e4:	f007 f8ec 	bl	80082c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <main+0x84>)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4810      	ldr	r0, [pc, #64]	@ (8001130 <main+0x88>)
 80010ee:	f007 f931 	bl	8008354 <osThreadNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <main+0x8c>)
 80010f6:	6013      	str	r3, [r2, #0]

  /* creation of NexDisplay */
  NexDisplayHandle = osThreadNew(StartNexDisplay, NULL, &NexDisplay_attributes);
 80010f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001138 <main+0x90>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <main+0x94>)
 80010fe:	f007 f929 	bl	8008354 <osThreadNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <main+0x98>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of AccelGyro */
  AccelGyroHandle = osThreadNew(StartAccelGyro, NULL, &AccelGyro_attributes);
 8001108:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <main+0x9c>)
 800110a:	2100      	movs	r1, #0
 800110c:	480e      	ldr	r0, [pc, #56]	@ (8001148 <main+0xa0>)
 800110e:	f007 f921 	bl	8008354 <osThreadNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <main+0xa4>)
 8001116:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001118:	f007 f8f6 	bl	8008308 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <main+0x74>
 8001120:	20000474 	.word	0x20000474
 8001124:	200003dc 	.word	0x200003dc
 8001128:	20000300 	.word	0x20000300
 800112c:	0800fe04 	.word	0x0800fe04
 8001130:	080014b9 	.word	0x080014b9
 8001134:	20000464 	.word	0x20000464
 8001138:	0800fe28 	.word	0x0800fe28
 800113c:	0800152d 	.word	0x0800152d
 8001140:	20000468 	.word	0x20000468
 8001144:	0800fe4c 	.word	0x0800fe4c
 8001148:	080016b9 	.word	0x080016b9
 800114c:	2000046c 	.word	0x2000046c

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b096      	sub	sp, #88	@ 0x58
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	2244      	movs	r2, #68	@ 0x44
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f00a fdeb 	bl	800bd3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001172:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001176:	f003 fe6b 	bl	8004e50 <HAL_PWREx_ControlVoltageScaling>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001180:	f000 faf2 	bl	8001768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001184:	2310      	movs	r3, #16
 8001186:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001190:	2360      	movs	r3, #96	@ 0x60
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001198:	2301      	movs	r3, #1
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011a0:	2320      	movs	r3, #32
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011a4:	2307      	movs	r3, #7
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fea1 	bl	8004efc <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011c0:	f000 fad2 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2303      	movs	r3, #3
 80011ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fa69 	bl	80056b4 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011e8:	f000 fabe 	bl	8001768 <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3758      	adds	r7, #88	@ 0x58
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2105      	movs	r1, #5
 80011fc:	2026      	movs	r0, #38	@ 0x26
 80011fe:	f002 fd6f 	bl	8003ce0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001202:	2026      	movs	r0, #38	@ 0x26
 8001204:	f002 fd88 	bl	8003d18 <HAL_NVIC_EnableIRQ>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001230:	4a30      	ldr	r2, [pc, #192]	@ (80012f4 <MX_ADC1_Init+0xe8>)
 8001232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001236:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 800123a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124e:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001250:	2204      	movs	r2, #4
 8001252:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 800125c:	2201      	movs	r2, #1
 800125e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001262:	2201      	movs	r2, #1
 8001264:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001290:	4817      	ldr	r0, [pc, #92]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 8001292:	f001 fadf 	bl	8002854 <HAL_ADC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800129c:	f000 fa64 	bl	8001768 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4811      	ldr	r0, [pc, #68]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 80012ac:	f002 fbb0 	bl	8003a10 <HAL_ADCEx_MultiModeConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012b6:	f000 fa57 	bl	8001768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_ADC1_Init+0xec>)
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012be:	2306      	movs	r3, #6
 80012c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c6:	237f      	movs	r3, #127	@ 0x7f
 80012c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <MX_ADC1_Init+0xe4>)
 80012d8:	f001 fde0 	bl	8002e9c <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80012e2:	f000 fa41 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	@ 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000029c 	.word	0x2000029c
 80012f4:	50040000 	.word	0x50040000
 80012f8:	19200040 	.word	0x19200040

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <MX_I2C1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <MX_I2C1_Init+0x7c>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001338:	f002 ff58 	bl	80041ec <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001342:	f000 fa11 	bl	8001768 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_I2C1_Init+0x74>)
 800134a:	f003 fcdb 	bl	8004d04 <HAL_I2CEx_ConfigAnalogFilter>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001354:	f000 fa08 	bl	8001768 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_I2C1_Init+0x74>)
 800135c:	f003 fd1d 	bl	8004d9a <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 f9ff 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000300 	.word	0x20000300
 8001374:	40005400 	.word	0x40005400
 8001378:	00c12166 	.word	0x00c12166

0800137c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <MX_USART1_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001386:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 8001388:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800138c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USART1_UART_Init+0x58>)
 80013c0:	f005 fb50 	bl	8006a64 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 f9cd 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000354 	.word	0x20000354
 80013d8:	40013800 	.word	0x40013800

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <MX_USART2_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART2_UART_Init+0x58>)
 8001420:	f005 fb20 	bl	8006a64 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f99d 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200003dc 	.word	0x200003dc
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0x78>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <MX_GPIO_Init+0x78>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_GPIO_Init+0x78>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <MX_GPIO_Init+0x78>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <MX_GPIO_Init+0x78>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_GPIO_Init+0x78>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|Fan_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	21e0      	movs	r1, #224	@ 0xe0
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f002 fe7d 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin Fan_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|Fan_Pin;
 800148e:	23e0      	movs	r3, #224	@ 0xe0
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a8:	f002 fcc4 	bl	8003e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000

080014b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014c0:	2120      	movs	r1, #32
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f002 fe77 	bl	80041b8 <HAL_GPIO_TogglePin>

      if(voltage >= 1.5)
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <StartDefaultTask+0x6c>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	db06      	blt.n	80014ec <StartDefaultTask+0x34>
      {
          HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2140      	movs	r1, #64	@ 0x40
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e6:	f002 fe4f 	bl	8004188 <HAL_GPIO_WritePin>
 80014ea:	e005      	b.n	80014f8 <StartDefaultTask+0x40>
      }
      else
      {
          HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f4:	f002 fe48 	bl	8004188 <HAL_GPIO_WritePin>
      }

      if(Fan_bit)
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <StartDefaultTask+0x70>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <StartDefaultTask+0x56>
      {
         HAL_GPIO_WritePin(GPIOA, Fan_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f002 fe3e 	bl	8004188 <HAL_GPIO_WritePin>
 800150c:	e005      	b.n	800151a <StartDefaultTask+0x62>
      }
      else
      {
         HAL_GPIO_WritePin(GPIOA, Fan_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f002 fe37 	bl	8004188 <HAL_GPIO_WritePin>
      }
      osDelay(500);
 800151a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800151e:	f006 ffac 	bl	800847a <osDelay>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001522:	e7cd      	b.n	80014c0 <StartDefaultTask+0x8>
 8001524:	20000480 	.word	0x20000480
 8001528:	20000470 	.word	0x20000470

0800152c <StartNexDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNexDisplay */
void StartNexDisplay(void *argument)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b095      	sub	sp, #84	@ 0x54
 8001530:	af04      	add	r7, sp, #16
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNexDisplay */
  /* Infinite loop */
  for(;;)
  {
    switchvar++;
 8001534:	4b4e      	ldr	r3, [pc, #312]	@ (8001670 <StartNexDisplay+0x144>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <StartNexDisplay+0x144>)
 800153e:	701a      	strb	r2, [r3, #0]
    switch(switchvar)
 8001540:	4b4b      	ldr	r3, [pc, #300]	@ (8001670 <StartNexDisplay+0x144>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	2b06      	cmp	r3, #6
 8001548:	f200 8088 	bhi.w	800165c <StartNexDisplay+0x130>
 800154c:	a201      	add	r2, pc, #4	@ (adr r2, 8001554 <StartNexDisplay+0x28>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001571 	.word	0x08001571
 8001558:	0800157b 	.word	0x0800157b
 800155c:	08001597 	.word	0x08001597
 8001560:	080015a1 	.word	0x080015a1
 8001564:	080015c9 	.word	0x080015c9
 8001568:	08001613 	.word	0x08001613
 800156c:	08001665 	.word	0x08001665
    {
        case 1:
            NEXTION_SendString("t0", "12:00");
 8001570:	4940      	ldr	r1, [pc, #256]	@ (8001674 <StartNexDisplay+0x148>)
 8001572:	4841      	ldr	r0, [pc, #260]	@ (8001678 <StartNexDisplay+0x14c>)
 8001574:	f7ff fd64 	bl	8001040 <NEXTION_SendString>
            break;
 8001578:	e075      	b.n	8001666 <StartNexDisplay+0x13a>
        case 2:
            if(Fan_bit)
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <StartNexDisplay+0x150>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <StartNexDisplay+0x60>
            {
                NEXTION_SendString("t1", "Fan OFF");
 8001582:	493f      	ldr	r1, [pc, #252]	@ (8001680 <StartNexDisplay+0x154>)
 8001584:	483f      	ldr	r0, [pc, #252]	@ (8001684 <StartNexDisplay+0x158>)
 8001586:	f7ff fd5b 	bl	8001040 <NEXTION_SendString>
            }
            else
            {
                NEXTION_SendString("t1", "Fan ON");
            }
            break;
 800158a:	e06c      	b.n	8001666 <StartNexDisplay+0x13a>
                NEXTION_SendString("t1", "Fan ON");
 800158c:	493e      	ldr	r1, [pc, #248]	@ (8001688 <StartNexDisplay+0x15c>)
 800158e:	483d      	ldr	r0, [pc, #244]	@ (8001684 <StartNexDisplay+0x158>)
 8001590:	f7ff fd56 	bl	8001040 <NEXTION_SendString>
            break;
 8001594:	e067      	b.n	8001666 <StartNexDisplay+0x13a>
        case 3:
            NEXTION_SendString("t2", "AMR@123");
 8001596:	493d      	ldr	r1, [pc, #244]	@ (800168c <StartNexDisplay+0x160>)
 8001598:	483d      	ldr	r0, [pc, #244]	@ (8001690 <StartNexDisplay+0x164>)
 800159a:	f7ff fd51 	bl	8001040 <NEXTION_SendString>
            break;
 800159e:	e062      	b.n	8001666 <StartNexDisplay+0x13a>
        case 4:
            if(voltage >= 1.5)
 80015a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <StartNexDisplay+0x168>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	db04      	blt.n	80015be <StartNexDisplay+0x92>
            {
                NEXTION_SendString("t4", "Battery Charged");
 80015b4:	4938      	ldr	r1, [pc, #224]	@ (8001698 <StartNexDisplay+0x16c>)
 80015b6:	4839      	ldr	r0, [pc, #228]	@ (800169c <StartNexDisplay+0x170>)
 80015b8:	f7ff fd42 	bl	8001040 <NEXTION_SendString>
            }
            else
            {
                NEXTION_SendString("t4", "Battery Low");
            }
            break;
 80015bc:	e053      	b.n	8001666 <StartNexDisplay+0x13a>
                NEXTION_SendString("t4", "Battery Low");
 80015be:	4938      	ldr	r1, [pc, #224]	@ (80016a0 <StartNexDisplay+0x174>)
 80015c0:	4836      	ldr	r0, [pc, #216]	@ (800169c <StartNexDisplay+0x170>)
 80015c2:	f7ff fd3d 	bl	8001040 <NEXTION_SendString>
            break;
 80015c6:	e04e      	b.n	8001666 <StartNexDisplay+0x13a>
        case 5:
            uint8_t Abuffer[50] = { };
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	222e      	movs	r2, #46	@ 0x2e
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00a fbb0 	bl	800bd3a <memset>
            sprintf((char *)Abuffer, "ACC:x=%.2f,y=%.2f,z=%.2f", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <StartNexDisplay+0x178>)
 80015dc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <StartNexDisplay+0x178>)
 80015e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015e6:	492f      	ldr	r1, [pc, #188]	@ (80016a4 <StartNexDisplay+0x178>)
 80015e8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80015ec:	f107 060c 	add.w	r6, r7, #12
 80015f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80015f4:	e9cd 2300 	strd	r2, r3, [sp]
 80015f8:	4622      	mov	r2, r4
 80015fa:	462b      	mov	r3, r5
 80015fc:	492a      	ldr	r1, [pc, #168]	@ (80016a8 <StartNexDisplay+0x17c>)
 80015fe:	4630      	mov	r0, r6
 8001600:	f00a fb38 	bl	800bc74 <siprintf>
            NEXTION_SendString("t5",(char *) Abuffer);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	4828      	ldr	r0, [pc, #160]	@ (80016ac <StartNexDisplay+0x180>)
 800160c:	f7ff fd18 	bl	8001040 <NEXTION_SendString>
            break;
 8001610:	e029      	b.n	8001666 <StartNexDisplay+0x13a>
        case 6:
            uint8_t Gbuffer[50] = { };
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	222e      	movs	r2, #46	@ 0x2e
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00a fb8b 	bl	800bd3a <memset>
            sprintf((char *)Gbuffer, "GYRO:x=%.2f,y=%.2f,z=%.2f", MPU6050.Gx, MPU6050.Gy, MPU6050.Gz);
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <StartNexDisplay+0x178>)
 8001626:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <StartNexDisplay+0x178>)
 800162c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001630:	491c      	ldr	r1, [pc, #112]	@ (80016a4 <StartNexDisplay+0x178>)
 8001632:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 8001636:	f107 060c 	add.w	r6, r7, #12
 800163a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800163e:	e9cd 2300 	strd	r2, r3, [sp]
 8001642:	4622      	mov	r2, r4
 8001644:	462b      	mov	r3, r5
 8001646:	491a      	ldr	r1, [pc, #104]	@ (80016b0 <StartNexDisplay+0x184>)
 8001648:	4630      	mov	r0, r6
 800164a:	f00a fb13 	bl	800bc74 <siprintf>
            NEXTION_SendString("t6",(char *) Gbuffer);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <StartNexDisplay+0x188>)
 8001656:	f7ff fcf3 	bl	8001040 <NEXTION_SendString>
            break;
 800165a:	e004      	b.n	8001666 <StartNexDisplay+0x13a>
        case 7:
            break;
        default:
            switchvar = 0;
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <StartNexDisplay+0x144>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
            break;
 8001662:	e000      	b.n	8001666 <StartNexDisplay+0x13a>
            break;
 8001664:	bf00      	nop
    }

    osDelay(100);
 8001666:	2064      	movs	r0, #100	@ 0x64
 8001668:	f006 ff07 	bl	800847a <osDelay>
    switchvar++;
 800166c:	e762      	b.n	8001534 <StartNexDisplay+0x8>
 800166e:	bf00      	nop
 8001670:	20000484 	.word	0x20000484
 8001674:	0800fd60 	.word	0x0800fd60
 8001678:	0800fd68 	.word	0x0800fd68
 800167c:	20000470 	.word	0x20000470
 8001680:	0800fd6c 	.word	0x0800fd6c
 8001684:	0800fd74 	.word	0x0800fd74
 8001688:	0800fd78 	.word	0x0800fd78
 800168c:	0800fd80 	.word	0x0800fd80
 8001690:	0800fd88 	.word	0x0800fd88
 8001694:	20000480 	.word	0x20000480
 8001698:	0800fd8c 	.word	0x0800fd8c
 800169c:	0800fd9c 	.word	0x0800fd9c
 80016a0:	0800fda0 	.word	0x0800fda0
 80016a4:	20000488 	.word	0x20000488
 80016a8:	0800fdac 	.word	0x0800fdac
 80016ac:	0800fdc8 	.word	0x0800fdc8
 80016b0:	0800fdcc 	.word	0x0800fdcc
 80016b4:	0800fde8 	.word	0x0800fde8

080016b8 <StartAccelGyro>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccelGyro */
void StartAccelGyro(void *argument)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccelGyro */
  /* Infinite loop */
  for(;;)
  {
    MPU6050_Read_All(&hi2c1, &MPU6050);
 80016c0:	491b      	ldr	r1, [pc, #108]	@ (8001730 <StartAccelGyro+0x78>)
 80016c2:	481c      	ldr	r0, [pc, #112]	@ (8001734 <StartAccelGyro+0x7c>)
 80016c4:	f000 f8b0 	bl	8001828 <MPU6050_Read_All>
    osDelay(100);
 80016c8:	2064      	movs	r0, #100	@ 0x64
 80016ca:	f006 fed6 	bl	800847a <osDelay>
    //Start ADC Conversion
    HAL_ADC_Start(&hadc1);
 80016ce:	481a      	ldr	r0, [pc, #104]	@ (8001738 <StartAccelGyro+0x80>)
 80016d0:	f001 fa10 	bl	8002af4 <HAL_ADC_Start>
    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	4817      	ldr	r0, [pc, #92]	@ (8001738 <StartAccelGyro+0x80>)
 80016da:	f001 faf9 	bl	8002cd0 <HAL_ADC_PollForConversion>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11a      	bne.n	800171a <StartAccelGyro+0x62>
    {
       // Get ADC value
       uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <StartAccelGyro+0x80>)
 80016e6:	f001 fbcb 	bl	8002e80 <HAL_ADC_GetValue>
 80016ea:	60f8      	str	r0, [r7, #12]
       // Convert ADC value to voltage
       voltage = ((float)(adcValue * 3.3 )/ 4095.0);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7fe ff09 	bl	8000504 <__aeabi_ui2d>
 80016f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001728 <StartAccelGyro+0x70>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff7e 	bl	80005f8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa70 	bl	8000be8 <__aeabi_d2f>
 8001708:	ee06 0a90 	vmov	s13, r0
 800170c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800173c <StartAccelGyro+0x84>
 8001710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <StartAccelGyro+0x88>)
 8001716:	edc3 7a00 	vstr	s15, [r3]
    }
   //Stop ADC Conversion
   HAL_ADC_Stop(&hadc1);
 800171a:	4807      	ldr	r0, [pc, #28]	@ (8001738 <StartAccelGyro+0x80>)
 800171c:	f001 faa4 	bl	8002c68 <HAL_ADC_Stop>
    MPU6050_Read_All(&hi2c1, &MPU6050);
 8001720:	e7ce      	b.n	80016c0 <StartAccelGyro+0x8>
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	66666666 	.word	0x66666666
 800172c:	400a6666 	.word	0x400a6666
 8001730:	20000488 	.word	0x20000488
 8001734:	20000300 	.word	0x20000300
 8001738:	2000029c 	.word	0x2000029c
 800173c:	457ff000 	.word	0x457ff000
 8001740:	20000480 	.word	0x20000480

08001744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001756:	f000 fe2b 	bl	80023b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40014400 	.word	0x40014400

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af04      	add	r7, sp, #16
 800177a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800177c:	2364      	movs	r3, #100	@ 0x64
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	2275      	movs	r2, #117	@ 0x75
 800178e:	21d0      	movs	r1, #208	@ 0xd0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f002 fedb 	bl	800454c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b68      	cmp	r3, #104	@ 0x68
 800179a:	d13d      	bne.n	8001818 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	f107 030e 	add.w	r3, r7, #14
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	226b      	movs	r2, #107	@ 0x6b
 80017b2:	21d0      	movs	r1, #208	@ 0xd0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f002 fdb5 	bl	8004324 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80017ba:	2307      	movs	r3, #7
 80017bc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80017be:	2364      	movs	r3, #100	@ 0x64
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2301      	movs	r3, #1
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030e 	add.w	r3, r7, #14
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	2219      	movs	r2, #25
 80017d0:	21d0      	movs	r1, #208	@ 0xd0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f002 fda6 	bl	8004324 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80017d8:	2300      	movs	r3, #0
 80017da:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017dc:	2364      	movs	r3, #100	@ 0x64
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	f107 030e 	add.w	r3, r7, #14
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	221c      	movs	r2, #28
 80017ee:	21d0      	movs	r1, #208	@ 0xd0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f002 fd97 	bl	8004324 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017fa:	2364      	movs	r3, #100	@ 0x64
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2301      	movs	r3, #1
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	f107 030e 	add.w	r3, r7, #14
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	221b      	movs	r2, #27
 800180c:	21d0      	movs	r1, #208	@ 0xd0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f002 fd88 	bl	8004324 <HAL_I2C_Mem_Write>
        return 0;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <MPU6050_Init+0xa6>
    }
    return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	0000      	movs	r0, r0
 8001824:	0000      	movs	r0, r0
	...

08001828 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182c:	b094      	sub	sp, #80	@ 0x50
 800182e:	af04      	add	r7, sp, #16
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001834:	2364      	movs	r3, #100	@ 0x64
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	230e      	movs	r3, #14
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	223b      	movs	r2, #59	@ 0x3b
 8001846:	21d0      	movs	r1, #208	@ 0xd0
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f002 fe7f 	bl	800454c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800184e:	7a3b      	ldrb	r3, [r7, #8]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	7a7b      	ldrb	r3, [r7, #9]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21a      	sxth	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001860:	7abb      	ldrb	r3, [r7, #10]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21a      	sxth	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001872:	7b3b      	ldrb	r3, [r7, #12]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	7b7b      	ldrb	r3, [r7, #13]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21a      	sxth	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001884:	7bbb      	ldrb	r3, [r7, #14]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001892:	7c3b      	ldrb	r3, [r7, #16]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	b21a      	sxth	r2, r3
 8001898:	7c7b      	ldrb	r3, [r7, #17]
 800189a:	b21b      	sxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b21a      	sxth	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80018a4:	7cbb      	ldrb	r3, [r7, #18]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	7cfb      	ldrb	r3, [r7, #19]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80018b6:	7d3b      	ldrb	r3, [r7, #20]
 80018b8:	021b      	lsls	r3, r3, #8
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	7d7b      	ldrb	r3, [r7, #21]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe28 	bl	8000524 <__aeabi_i2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4bbd      	ldr	r3, [pc, #756]	@ (8001bd0 <MPU6050_Read_All+0x3a8>)
 80018da:	f7fe ffb7 	bl	800084c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe18 	bl	8000524 <__aeabi_i2d>
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4bb5      	ldr	r3, [pc, #724]	@ (8001bd0 <MPU6050_Read_All+0x3a8>)
 80018fa:	f7fe ffa7 	bl	800084c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe08 	bl	8000524 <__aeabi_i2d>
 8001914:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001bb8 <MPU6050_Read_All+0x390>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe ff97 	bl	800084c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001928:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001bd4 <MPU6050_Read_All+0x3ac>
 8001938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001bd8 <MPU6050_Read_All+0x3b0>
 8001940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fde7 	bl	8000524 <__aeabi_i2d>
 8001956:	a39a      	add	r3, pc, #616	@ (adr r3, 8001bc0 <MPU6050_Read_All+0x398>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe ff76 	bl	800084c <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdd7 	bl	8000524 <__aeabi_i2d>
 8001976:	a392      	add	r3, pc, #584	@ (adr r3, 8001bc0 <MPU6050_Read_All+0x398>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe ff66 	bl	800084c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdc7 	bl	8000524 <__aeabi_i2d>
 8001996:	a38a      	add	r3, pc, #552	@ (adr r3, 8001bc0 <MPU6050_Read_All+0x398>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff56 	bl	800084c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80019aa:	f000 fd15 	bl	80023d8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bdc <MPU6050_Read_All+0x3b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fda4 	bl	8000504 <__aeabi_ui2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b87      	ldr	r3, [pc, #540]	@ (8001be0 <MPU6050_Read_All+0x3b8>)
 80019c2:	f7fe ff43 	bl	800084c <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80019ce:	f000 fd03 	bl	80023d8 <HAL_GetTick>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a81      	ldr	r2, [pc, #516]	@ (8001bdc <MPU6050_Read_All+0x3b4>)
 80019d6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	fb03 f202 	mul.w	r2, r3, r2
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd90 	bl	8000524 <__aeabi_i2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f00d fdc4 	bl	800f598 <sqrt>
 8001a10:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a20:	f7ff f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11f      	bne.n	8001a6a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd77 	bl	8000524 <__aeabi_i2d>
 8001a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3a:	f7fe ff07 	bl	800084c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	ec43 2b17 	vmov	d7, r2, r3
 8001a46:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4a:	eef0 0a67 	vmov.f32	s1, s15
 8001a4e:	f00d fdcf 	bl	800f5f0 <atan>
 8001a52:	ec51 0b10 	vmov	r0, r1, d0
 8001a56:	a35c      	add	r3, pc, #368	@ (adr r3, 8001bc8 <MPU6050_Read_All+0x3a0>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001a68:	e005      	b.n	8001a76 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd50 	bl	8000524 <__aeabi_i2d>
 8001a84:	4682      	mov	sl, r0
 8001a86:	468b      	mov	fp, r1
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd48 	bl	8000524 <__aeabi_i2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ec43 2b11 	vmov	d1, r2, r3
 8001a9c:	ec4b ab10 	vmov	d0, sl, fp
 8001aa0:	f00d fd78 	bl	800f594 <atan2>
 8001aa4:	ec51 0b10 	vmov	r0, r1, d0
 8001aa8:	a347      	add	r3, pc, #284	@ (adr r3, 8001bc8 <MPU6050_Read_All+0x3a0>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fda3 	bl	80005f8 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b49      	ldr	r3, [pc, #292]	@ (8001be4 <MPU6050_Read_All+0x3bc>)
 8001ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ac4:	f7ff f80a 	bl	8000adc <__aeabi_dcmplt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <MPU6050_Read_All+0x2bc>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <MPU6050_Read_All+0x3c0>)
 8001ada:	f7ff f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d114      	bne.n	8001b0e <MPU6050_Read_All+0x2e6>
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8001be8 <MPU6050_Read_All+0x3c0>)
 8001aea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aee:	f7ff f813 	bl	8000b18 <__aeabi_dcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d015      	beq.n	8001b24 <MPU6050_Read_All+0x2fc>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <MPU6050_Read_All+0x3bc>)
 8001b04:	f7fe ffea 	bl	8000adc <__aeabi_dcmplt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001b0e:	4937      	ldr	r1, [pc, #220]	@ (8001bec <MPU6050_Read_All+0x3c4>)
 8001b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b14:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b18:	6839      	ldr	r1, [r7, #0]
 8001b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001b22:	e014      	b.n	8001b4e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001b2a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001b2e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b32:	eef0 1a67 	vmov.f32	s3, s15
 8001b36:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b3a:	482c      	ldr	r0, [pc, #176]	@ (8001bec <MPU6050_Read_All+0x3c4>)
 8001b3c:	f000 f85a 	bl	8001bf4 <Kalman_getAngle>
 8001b40:	eeb0 7a40 	vmov.f32	s14, s0
 8001b44:	eef0 7a60 	vmov.f32	s15, s1
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001b54:	4690      	mov	r8, r2
 8001b56:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <MPU6050_Read_All+0x3c0>)
 8001b60:	4640      	mov	r0, r8
 8001b62:	4649      	mov	r1, r9
 8001b64:	f7fe ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001b74:	4614      	mov	r4, r2
 8001b76:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001b86:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001b8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b8e:	eef0 1a67 	vmov.f32	s3, s15
 8001b92:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001b96:	4816      	ldr	r0, [pc, #88]	@ (8001bf0 <MPU6050_Read_All+0x3c8>)
 8001b98:	f000 f82c 	bl	8001bf4 <Kalman_getAngle>
 8001b9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba0:	eef0 7a60 	vmov.f32	s15, s1
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001baa:	bf00      	nop
 8001bac:	3740      	adds	r7, #64	@ 0x40
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40cc2900 	.word	0x40cc2900
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40606000 	.word	0x40606000
 8001bc8:	1a63c1f8 	.word	0x1a63c1f8
 8001bcc:	404ca5dc 	.word	0x404ca5dc
 8001bd0:	40d00000 	.word	0x40d00000
 8001bd4:	43aa0000 	.word	0x43aa0000
 8001bd8:	42121eb8 	.word	0x42121eb8
 8001bdc:	200004e0 	.word	0x200004e0
 8001be0:	408f4000 	.word	0x408f4000
 8001be4:	c0568000 	.word	0xc0568000
 8001be8:	40568000 	.word	0x40568000
 8001bec:	20000050 	.word	0x20000050
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b096      	sub	sp, #88	@ 0x58
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	61f8      	str	r0, [r7, #28]
 8001bfc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c00:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c04:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c12:	f7fe fb39 	bl	8000288 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c2c:	f7fe fce4 	bl	80005f8 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4620      	mov	r0, r4
 8001c36:	4629      	mov	r1, r5
 8001c38:	f7fe fb28 	bl	800028c <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	69f9      	ldr	r1, [r7, #28]
 8001c42:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001c68:	f7fe fb0e 	bl	8000288 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001c7a:	f7fe fb05 	bl	8000288 <__aeabi_dsub>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fafe 	bl	800028c <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c9c:	f7fe fcac 	bl	80005f8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe faf0 	bl	800028c <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	69f9      	ldr	r1, [r7, #28]
 8001cb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f7fe fad9 	bl	8000288 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf0:	f7fe fc82 	bl	80005f8 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fac4 	bl	8000288 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	69f9      	ldr	r1, [r7, #28]
 8001d06:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fab1 	bl	800028c <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	69f9      	ldr	r1, [r7, #28]
 8001d30:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d40:	f7fe faa4 	bl	800028c <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001d52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d56:	f7fe fd79 	bl	800084c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d6c:	f7fe fd6e 	bl	800084c <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d82:	f7fe fa81 	bl	8000288 <__aeabi_dsub>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	69f9      	ldr	r1, [r7, #28]
 8001db2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001dbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dc4:	f7fe fc18 	bl	80005f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fa5c 	bl	800028c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	69f9      	ldr	r1, [r7, #28]
 8001dda:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001de4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001dee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001df8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e00:	f7fe fbfa 	bl	80005f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe fa3c 	bl	8000288 <__aeabi_dsub>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	69f9      	ldr	r1, [r7, #28]
 8001e16:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001e20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e28:	f7fe fbe6 	bl	80005f8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fa28 	bl	8000288 <__aeabi_dsub>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	69f9      	ldr	r1, [r7, #28]
 8001e3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001e48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e50:	f7fe fbd2 	bl	80005f8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fa14 	bl	8000288 <__aeabi_dsub>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	69f9      	ldr	r1, [r7, #28]
 8001e66:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001e70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e78:	f7fe fbbe 	bl	80005f8 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fa00 	bl	8000288 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	69f9      	ldr	r1, [r7, #28]
 8001e8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e98:	ec43 2b17 	vmov	d7, r2, r3
};
 8001e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea0:	eef0 0a67 	vmov.f32	s1, s15
 8001ea4:	3758      	adds	r7, #88	@ 0x58
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_MspInit+0x4c>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	f06f 0001 	mvn.w	r0, #1
 8001eea:	f001 fef9 	bl	8003ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0ac      	sub	sp, #176	@ 0xb0
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2288      	movs	r2, #136	@ 0x88
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f009 ff0c 	bl	800bd3a <memset>
  if(hadc->Instance==ADC1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <HAL_ADC_MspInit+0xc8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d147      	bne.n	8001fbc <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001f36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 8001f42:	2320      	movs	r3, #32
 8001f44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f46:	2307      	movs	r3, #7
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 fdff 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001f68:	f7ff fbfe 	bl	8001768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f6c:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f70:	4a15      	ldr	r2, [pc, #84]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_ADC_MspInit+0xcc>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fa2:	230b      	movs	r3, #11
 8001fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb8:	f001 ff3c 	bl	8003e34 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fbc:	bf00      	nop
 8001fbe:	37b0      	adds	r7, #176	@ 0xb0
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	50040000 	.word	0x50040000
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0ac      	sub	sp, #176	@ 0xb0
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2288      	movs	r2, #136	@ 0x88
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f009 fea4 	bl	800bd3a <memset>
  if(hi2c->Instance==I2C1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a21      	ldr	r2, [pc, #132]	@ (800207c <HAL_I2C_MspInit+0xb0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d13b      	bne.n	8002074 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ffc:	2340      	movs	r3, #64	@ 0x40
 8001ffe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fda9 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002014:	f7ff fba8 	bl	8001768 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002030:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002038:	2312      	movs	r3, #18
 800203a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204a:	2304      	movs	r3, #4
 800204c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002054:	4619      	mov	r1, r3
 8002056:	480b      	ldr	r0, [pc, #44]	@ (8002084 <HAL_I2C_MspInit+0xb8>)
 8002058:	f001 feec 	bl	8003e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002060:	4a07      	ldr	r2, [pc, #28]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002066:	6593      	str	r3, [r2, #88]	@ 0x58
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_I2C_MspInit+0xb4>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002074:	bf00      	nop
 8002076:	37b0      	adds	r7, #176	@ 0xb0
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40005400 	.word	0x40005400
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400

08002088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0ae      	sub	sp, #184	@ 0xb8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	2288      	movs	r2, #136	@ 0x88
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 fe46 	bl	800bd3a <memset>
  if(huart->Instance==USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a43      	ldr	r2, [pc, #268]	@ (80021c0 <HAL_UART_MspInit+0x138>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d13d      	bne.n	8002134 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020bc:	2300      	movs	r3, #0
 80020be:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fd4b 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020d0:	f7ff fb4a 	bl	8001768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d4:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d8:	4a3a      	ldr	r2, [pc, #232]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020de:	6613      	str	r3, [r2, #96]	@ 0x60
 80020e0:	4b38      	ldr	r3, [pc, #224]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b35      	ldr	r3, [pc, #212]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f0:	4a34      	ldr	r2, [pc, #208]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f8:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 80020fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002104:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800211e:	2307      	movs	r3, #7
 8002120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212e:	f001 fe81 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002132:	e040      	b.n	80021b6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_UART_MspInit+0x140>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d13b      	bne.n	80021b6 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800213e:	2302      	movs	r3, #2
 8002140:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002142:	2300      	movs	r3, #0
 8002144:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fd08 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002156:	f7ff fb07 	bl	8001768 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	6593      	str	r3, [r2, #88]	@ 0x58
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_UART_MspInit+0x13c>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800218a:	230c      	movs	r3, #12
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a2:	2307      	movs	r3, #7
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b2:	f001 fe3f 	bl	8003e34 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	37b8      	adds	r7, #184	@ 0xb8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40004400 	.word	0x40004400

080021cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	@ 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80021da:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <HAL_InitTick+0xc8>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <HAL_InitTick+0xc8>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <HAL_InitTick+0xc8>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fc1d 	bl	8005a3c <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002202:	f003 fc05 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8002206:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220a:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <HAL_InitTick+0xcc>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	3b01      	subs	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002216:	4b21      	ldr	r3, [pc, #132]	@ (800229c <HAL_InitTick+0xd0>)
 8002218:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_InitTick+0xd4>)
 800221a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <HAL_InitTick+0xd0>)
 800221e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002222:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <HAL_InitTick+0xd0>)
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800222a:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <HAL_InitTick+0xd0>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_InitTick+0xd0>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_InitTick+0xd0>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800223c:	4817      	ldr	r0, [pc, #92]	@ (800229c <HAL_InitTick+0xd0>)
 800223e:	f004 f94b 	bl	80064d8 <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002248:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11b      	bne.n	8002288 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002250:	4812      	ldr	r0, [pc, #72]	@ (800229c <HAL_InitTick+0xd0>)
 8002252:	f004 f9a3 	bl	800659c <HAL_TIM_Base_Start_IT>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800225c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002264:	2019      	movs	r0, #25
 8002266:	f001 fd57 	bl	8003d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d808      	bhi.n	8002282 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	2019      	movs	r0, #25
 8002276:	f001 fd33 	bl	8003ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_InitTick+0xd8>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e002      	b.n	8002288 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800228c:	4618      	mov	r0, r3
 800228e:	3730      	adds	r7, #48	@ 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	431bde83 	.word	0x431bde83
 800229c:	200004e4 	.word	0x200004e4
 80022a0:	40014400 	.word	0x40014400
 80022a4:	2000009c 	.word	0x2000009c

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <NMI_Handler+0x4>

080022b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <MemManage_Handler+0x4>

080022c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <UsageFault_Handler+0x4>

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022e6:	f004 f9c9 	bl	800667c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200004e4 	.word	0x200004e4

080022f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <USART2_IRQHandler+0x10>)
 80022fa:	f004 fcd7 	bl	8006cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200003dc 	.word	0x200003dc

08002308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <SystemInit+0x20>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	4a05      	ldr	r2, [pc, #20]	@ (8002328 <SystemInit+0x20>)
 8002314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002364 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002330:	f7ff ffea 	bl	8002308 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480c      	ldr	r0, [pc, #48]	@ (8002368 <LoopForever+0x6>)
  ldr r1, =_edata
 8002336:	490d      	ldr	r1, [pc, #52]	@ (800236c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002338:	4a0d      	ldr	r2, [pc, #52]	@ (8002370 <LoopForever+0xe>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800234c:	4c0a      	ldr	r4, [pc, #40]	@ (8002378 <LoopForever+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235a:	f009 fd97 	bl	800be8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800235e:	f7fe fea3 	bl	80010a8 <main>

08002362 <LoopForever>:

LoopForever:
    b LoopForever
 8002362:	e7fe      	b.n	8002362 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002364:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002370:	08010368 	.word	0x08010368
  ldr r2, =_sbss
 8002374:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002378:	200031dc 	.word	0x200031dc

0800237c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC1_2_IRQHandler>

0800237e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f001 fc9e 	bl	8003cca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238e:	200f      	movs	r0, #15
 8002390:	f7ff ff1c 	bl	80021cc <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e001      	b.n	80023a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a0:	f7ff fd84 	bl	8001eac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200000a0 	.word	0x200000a0
 80023d4:	20000530 	.word	0x20000530

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000530 	.word	0x20000530

080023f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3360      	adds	r3, #96	@ 0x60
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <LL_ADC_SetOffset+0x44>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	4313      	orrs	r3, r2
 8002488:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	03fff000 	.word	0x03fff000

080024a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3360      	adds	r3, #96	@ 0x60
 80024ae:	461a      	mov	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3360      	adds	r3, #96	@ 0x60
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3330      	adds	r3, #48	@ 0x30
 8002538:	461a      	mov	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	4413      	add	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	211f      	movs	r1, #31
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 011f 	and.w	r1, r3, #31
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	431a      	orrs	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002574:	bf00      	nop
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3314      	adds	r3, #20
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	0e5b      	lsrs	r3, r3, #25
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	4413      	add	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	0d1b      	lsrs	r3, r3, #20
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2107      	movs	r1, #7
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	401a      	ands	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	0d1b      	lsrs	r3, r3, #20
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	43db      	mvns	r3, r3
 80025f2:	401a      	ands	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0318 	and.w	r3, r3, #24
 80025fa:	4908      	ldr	r1, [pc, #32]	@ (800261c <LL_ADC_SetChannelSingleDiff+0x44>)
 80025fc:	40d9      	lsrs	r1, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	400b      	ands	r3, r1
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	431a      	orrs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	0007ffff 	.word	0x0007ffff

08002620 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 031f 	and.w	r3, r3, #31
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002668:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6093      	str	r3, [r2, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002704:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <LL_ADC_IsEnabled+0x18>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <LL_ADC_IsEnabled+0x1a>
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d101      	bne.n	8002782 <LL_ADC_IsDisableOngoing+0x18>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_ADC_IsDisableOngoing+0x1a>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002816:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d101      	bne.n	8002846 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b089      	sub	sp, #36	@ 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e130      	b.n	8002ad0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fb3d 	bl	8001efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fef1 	bl	800267c <LL_ADC_IsDeepPowerDownEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fed7 	bl	8002658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff0c 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fef0 	bl	80026a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c4:	4b84      	ldr	r3, [pc, #528]	@ (8002ad8 <HAL_ADC_Init+0x284>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	4a84      	ldr	r2, [pc, #528]	@ (8002adc <HAL_ADC_Init+0x288>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028d8:	e002      	b.n	80028e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f9      	bne.n	80028da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff feee 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff62 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 800291c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80c9 	bne.w	8002abe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 80c5 	bne.w	8002abe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800293c:	f043 0202 	orr.w	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fefb 	bl	8002744 <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d115      	bne.n	8002980 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002954:	4862      	ldr	r0, [pc, #392]	@ (8002ae0 <HAL_ADC_Init+0x28c>)
 8002956:	f7ff fef5 	bl	8002744 <LL_ADC_IsEnabled>
 800295a:	4604      	mov	r4, r0
 800295c:	4861      	ldr	r0, [pc, #388]	@ (8002ae4 <HAL_ADC_Init+0x290>)
 800295e:	f7ff fef1 	bl	8002744 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	431c      	orrs	r4, r3
 8002966:	4860      	ldr	r0, [pc, #384]	@ (8002ae8 <HAL_ADC_Init+0x294>)
 8002968:	f7ff feec 	bl	8002744 <LL_ADC_IsEnabled>
 800296c:	4603      	mov	r3, r0
 800296e:	4323      	orrs	r3, r4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4619      	mov	r1, r3
 800297a:	485c      	ldr	r0, [pc, #368]	@ (8002aec <HAL_ADC_Init+0x298>)
 800297c:	f7ff fd38 	bl	80023f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e5b      	ldrb	r3, [r3, #25]
 8002984:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800298a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002990:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002996:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d106      	bne.n	80029bc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	045b      	lsls	r3, r3, #17
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	4b44      	ldr	r3, [pc, #272]	@ (8002af0 <HAL_ADC_Init+0x29c>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff1c 	bl	800282e <LL_ADC_INJ_IsConversionOngoing>
 80029f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d13d      	bne.n	8002a7a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d13a      	bne.n	8002a7a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a08:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a10:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	69b9      	ldr	r1, [r7, #24]
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d118      	bne.n	8002a6a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a54:	4311      	orrs	r1, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	611a      	str	r2, [r3, #16]
 8002a68:	e007      	b.n	8002a7a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10c      	bne.n	8002a9c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	f023 010f 	bic.w	r1, r3, #15
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a9a:	e007      	b.n	8002aac <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 020f 	bic.w	r2, r2, #15
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54
 8002abc:	e007      	b.n	8002ace <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3724      	adds	r7, #36	@ 0x24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	20000098 	.word	0x20000098
 8002adc:	053e2d63 	.word	0x053e2d63
 8002ae0:	50040000 	.word	0x50040000
 8002ae4:	50040100 	.word	0x50040100
 8002ae8:	50040200 	.word	0x50040200
 8002aec:	50040300 	.word	0x50040300
 8002af0:	fff0c007 	.word	0xfff0c007

08002af4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afc:	4857      	ldr	r0, [pc, #348]	@ (8002c5c <HAL_ADC_Start+0x168>)
 8002afe:	f7ff fd8f 	bl	8002620 <LL_ADC_GetMultimode>
 8002b02:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fe69 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 809c 	bne.w	8002c4e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_Start+0x30>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e097      	b.n	8002c54 <HAL_ADC_Start+0x160>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fe63 	bl	80037f8 <ADC_Enable>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 8083 	bne.w	8002c44 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a42      	ldr	r2, [pc, #264]	@ (8002c60 <HAL_ADC_Start+0x16c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_Start+0x6e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_Start+0x70>
 8002b62:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <HAL_ADC_Start+0x170>)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d002      	beq.n	8002b72 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8a:	d106      	bne.n	8002b9a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	f023 0206 	bic.w	r2, r3, #6
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b98:	e002      	b.n	8002ba0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	221c      	movs	r2, #28
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c60 <HAL_ADC_Start+0x16c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <HAL_ADC_Start+0xcc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_Start+0xce>
 8002bc0:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <HAL_ADC_Start+0x170>)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d008      	beq.n	8002bdc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d002      	beq.n	8002bdc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b09      	cmp	r3, #9
 8002bda:	d114      	bne.n	8002c06 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bf2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fdc6 	bl	8002790 <LL_ADC_REG_StartConversion>
 8002c04:	e025      	b.n	8002c52 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <HAL_ADC_Start+0x16c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d002      	beq.n	8002c22 <HAL_ADC_Start+0x12e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	e000      	b.n	8002c24 <HAL_ADC_Start+0x130>
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_ADC_Start+0x170>)
 8002c24:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00f      	beq.n	8002c52 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c42:	e006      	b.n	8002c52 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c4c:	e001      	b.n	8002c52 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	50040300 	.word	0x50040300
 8002c60:	50040100 	.word	0x50040100
 8002c64:	50040000 	.word	0x50040000

08002c68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Stop+0x16>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e023      	b.n	8002cc6 <HAL_ADC_Stop+0x5e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c86:	2103      	movs	r1, #3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fcf9 	bl	8003680 <ADC_ConversionStop>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d111      	bne.n	8002cbc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fe33 	bl	8003904 <ADC_Disable>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cda:	4866      	ldr	r0, [pc, #408]	@ (8002e74 <HAL_ADC_PollForConversion+0x1a4>)
 8002cdc:	f7ff fca0 	bl	8002620 <LL_ADC_GetMultimode>
 8002ce0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d102      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cea:	2308      	movs	r3, #8
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e02a      	b.n	8002d46 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d002      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b09      	cmp	r3, #9
 8002d00:	d111      	bne.n	8002d26 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0a4      	b.n	8002e6a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d20:	2304      	movs	r3, #4
 8002d22:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d24:	e00f      	b.n	8002d46 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d26:	4853      	ldr	r0, [pc, #332]	@ (8002e74 <HAL_ADC_PollForConversion+0x1a4>)
 8002d28:	f7ff fc88 	bl	800263c <LL_ADC_GetMultiDMATransfer>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e093      	b.n	8002e6a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d42:	2304      	movs	r3, #4
 8002d44:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d46:	f7ff fb47 	bl	80023d8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d4c:	e021      	b.n	8002d92 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d01d      	beq.n	8002d92 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d56:	f7ff fb3f 	bl	80023d8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <HAL_ADC_PollForConversion+0x9c>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d112      	bne.n	8002d92 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e06b      	b.n	8002e6a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0d6      	beq.n	8002d4e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fba6 	bl	8002502 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e5b      	ldrb	r3, [r3, #25]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d118      	bne.n	8002df6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d111      	bne.n	8002df6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002e78 <HAL_ADC_PollForConversion+0x1a8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d002      	beq.n	8002e06 <HAL_ADC_PollForConversion+0x136>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e000      	b.n	8002e08 <HAL_ADC_PollForConversion+0x138>
 8002e06:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_ADC_PollForConversion+0x1ac>)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d008      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d002      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d104      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e00c      	b.n	8002e46 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <HAL_ADC_PollForConversion+0x1a8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d002      	beq.n	8002e3c <HAL_ADC_PollForConversion+0x16c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	e000      	b.n	8002e3e <HAL_ADC_PollForConversion+0x16e>
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <HAL_ADC_PollForConversion+0x1ac>)
 8002e3e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d104      	bne.n	8002e56 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2208      	movs	r2, #8
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e008      	b.n	8002e68 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	220c      	movs	r2, #12
 8002e66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	50040300 	.word	0x50040300
 8002e78:	50040100 	.word	0x50040100
 8002e7c:	50040000 	.word	0x50040000

08002e80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0b6      	sub	sp, #216	@ 0xd8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x22>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e3c9      	b.n	8003652 <HAL_ADC_ConfigChannel+0x7b6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fc88 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 83aa 	bne.w	800362c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d824      	bhi.n	8002f32 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	3b02      	subs	r3, #2
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d81b      	bhi.n	8002f2a <HAL_ADC_ConfigChannel+0x8e>
 8002ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_ADC_ConfigChannel+0x5c>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f11 	.word	0x08002f11
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f21 	.word	0x08002f21
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f08:	230c      	movs	r3, #12
 8002f0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f0e:	e010      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f10:	2312      	movs	r3, #18
 8002f12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f16:	e00c      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f18:	2318      	movs	r3, #24
 8002f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f1e:	e008      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f30:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f40:	f7ff faf2 	bl	8002528 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fc49 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fc69 	bl	800282e <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 81a4 	bne.w	80032b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 819f 	bne.w	80032b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f7ff fafd 	bl	8002580 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d00a      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6919      	ldr	r1, [r3, #16]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fb8:	f7ff fa4e 	bl	8002458 <LL_ADC_SetOffset>
 8002fbc:	e179      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fa6b 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x14e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fa60 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	e01e      	b.n	8003028 <HAL_ADC_ConfigChannel+0x18c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fa55 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800300c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800301c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1a4>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	e018      	b.n	8003072 <HAL_ADC_ConfigChannel+0x1d6>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800305c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e004      	b.n	8003072 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800306c:	fab3 f383 	clz	r3, r3
 8003070:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003072:	429a      	cmp	r2, r3
 8003074:	d106      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fa24 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fa08 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x214>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f9fd 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	e01e      	b.n	80030ee <HAL_ADC_ConfigChannel+0x252>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff f9f2 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 80030bc:	4603      	mov	r3, r0
 80030be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80030ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80030d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80030e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x26a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	e018      	b.n	8003138 <HAL_ADC_ConfigChannel+0x29c>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800311a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800311e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003122:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800312e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f9c1 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f9a5 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x2da>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f99a 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	e01e      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x318>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2102      	movs	r1, #2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff f98f 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e004      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x330>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	e014      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x35a>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80031da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80031e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e004      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f962 	bl	80024cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f946 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x398>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f93b 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 021f 	and.w	r2, r3, #31
 8003232:	e017      	b.n	8003264 <HAL_ADC_ConfigChannel+0x3c8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2103      	movs	r1, #3
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f930 	bl	80024a0 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800324c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800325a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_ConfigChannel+0x3e0>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	e011      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x404>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800328a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800328e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2103      	movs	r1, #3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f90d 	bl	80024cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fa44 	bl	8002744 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 8140 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff f981 	bl	80025d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a8f      	ldr	r2, [pc, #572]	@ (8003518 <HAL_ADC_ConfigChannel+0x67c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	f040 8131 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_ADC_ConfigChannel+0x46e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	3301      	adds	r3, #1
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b09      	cmp	r3, #9
 8003300:	bf94      	ite	ls
 8003302:	2301      	movls	r3, #1
 8003304:	2300      	movhi	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e019      	b.n	800333e <HAL_ADC_ConfigChannel+0x4a2>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800331c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2b09      	cmp	r3, #9
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	2b00      	cmp	r3, #0
 8003340:	d079      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_ADC_ConfigChannel+0x4c2>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335c:	e015      	b.n	800338a <HAL_ADC_ConfigChannel+0x4ee>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800336c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800336e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e003      	b.n	8003382 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800337a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x50e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	3301      	adds	r3, #1
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	e017      	b.n	80033da <HAL_ADC_ConfigChannel+0x53e>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80033c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	ea42 0103 	orr.w	r1, r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x564>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	f003 021f 	and.w	r2, r3, #31
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	e018      	b.n	8003432 <HAL_ADC_ConfigChannel+0x596>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800341c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003432:	430b      	orrs	r3, r1
 8003434:	e081      	b.n	800353a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x5b6>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	3301      	adds	r3, #1
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003450:	e015      	b.n	800347e <HAL_ADC_ConfigChannel+0x5e2>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e003      	b.n	8003476 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_ADC_ConfigChannel+0x602>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	0e9b      	lsrs	r3, r3, #26
 8003490:	3301      	adds	r3, #1
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	e017      	b.n	80034ce <HAL_ADC_ConfigChannel+0x632>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
  return result;
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x65e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 021f 	and.w	r2, r3, #31
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	3b1e      	subs	r3, #30
 80034f2:	051b      	lsls	r3, r3, #20
 80034f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034f8:	e01e      	b.n	8003538 <HAL_ADC_ConfigChannel+0x69c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	60fb      	str	r3, [r7, #12]
  return result;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e006      	b.n	8003524 <HAL_ADC_ConfigChannel+0x688>
 8003516:	bf00      	nop
 8003518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f003 021f 	and.w	r2, r3, #31
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	3b1e      	subs	r3, #30
 8003532:	051b      	lsls	r3, r3, #20
 8003534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003538:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353e:	4619      	mov	r1, r3
 8003540:	f7ff f81e 	bl	8002580 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_ADC_ConfigChannel+0x7c0>)
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d07a      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003550:	4843      	ldr	r0, [pc, #268]	@ (8003660 <HAL_ADC_ConfigChannel+0x7c4>)
 8003552:	f7fe ff73 	bl	800243c <LL_ADC_GetCommonPathInternalCh>
 8003556:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a41      	ldr	r2, [pc, #260]	@ (8003664 <HAL_ADC_ConfigChannel+0x7c8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d12c      	bne.n	80035be <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003568:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d126      	bne.n	80035be <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3c      	ldr	r2, [pc, #240]	@ (8003668 <HAL_ADC_ConfigChannel+0x7cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x6e8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_ADC_ConfigChannel+0x7d0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d15d      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800358c:	4619      	mov	r1, r3
 800358e:	4834      	ldr	r0, [pc, #208]	@ (8003660 <HAL_ADC_ConfigChannel+0x7c4>)
 8003590:	f7fe ff41 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <HAL_ADC_ConfigChannel+0x7d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	4a36      	ldr	r2, [pc, #216]	@ (8003674 <HAL_ADC_ConfigChannel+0x7d8>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035ae:	e002      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f9      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035bc:	e040      	b.n	8003640 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <HAL_ADC_ConfigChannel+0x7dc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d118      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d112      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a23      	ldr	r2, [pc, #140]	@ (8003668 <HAL_ADC_ConfigChannel+0x7cc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_ADC_ConfigChannel+0x74c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_ADC_ConfigChannel+0x7d0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d12d      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f0:	4619      	mov	r1, r3
 80035f2:	481b      	ldr	r0, [pc, #108]	@ (8003660 <HAL_ADC_ConfigChannel+0x7c4>)
 80035f4:	f7fe ff0f 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f8:	e024      	b.n	8003644 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1f      	ldr	r2, [pc, #124]	@ (800367c <HAL_ADC_ConfigChannel+0x7e0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d120      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11a      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	@ (8003668 <HAL_ADC_ConfigChannel+0x7cc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d115      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800361a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800361e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003622:	4619      	mov	r1, r3
 8003624:	480e      	ldr	r0, [pc, #56]	@ (8003660 <HAL_ADC_ConfigChannel+0x7c4>)
 8003626:	f7fe fef6 	bl	8002416 <LL_ADC_SetCommonPathInternalCh>
 800362a:	e00c      	b.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800363e:	e002      	b.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003640:	bf00      	nop
 8003642:	e000      	b.n	8003646 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800364e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003652:	4618      	mov	r0, r3
 8003654:	37d8      	adds	r7, #216	@ 0xd8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	80080000 	.word	0x80080000
 8003660:	50040300 	.word	0x50040300
 8003664:	c7520000 	.word	0xc7520000
 8003668:	50040000 	.word	0x50040000
 800366c:	50040200 	.word	0x50040200
 8003670:	20000098 	.word	0x20000098
 8003674:	053e2d63 	.word	0x053e2d63
 8003678:	cb840000 	.word	0xcb840000
 800367c:	80000001 	.word	0x80000001

08003680 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f8a2 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 800369c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f8c3 	bl	800282e <LL_ADC_INJ_IsConversionOngoing>
 80036a8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8098 	beq.w	80037e8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02a      	beq.n	800371c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7e5b      	ldrb	r3, [r3, #25]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d126      	bne.n	800371c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7e1b      	ldrb	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d122      	bne.n	800371c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036da:	e014      	b.n	8003706 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4a45      	ldr	r2, [pc, #276]	@ (80037f4 <ADC_ConversionStop+0x174>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d90d      	bls.n	8003700 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e074      	b.n	80037ea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	3301      	adds	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d1e3      	bne.n	80036dc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2240      	movs	r2, #64	@ 0x40
 800371a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d014      	beq.n	800374c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f85a 	bl	80027e0 <LL_ADC_REG_IsConversionOngoing>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f817 	bl	800276a <LL_ADC_IsDisableOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f836 	bl	80027b8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d014      	beq.n	800377c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f869 	bl	800282e <LL_ADC_INJ_IsConversionOngoing>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe ffff 	bl	800276a <LL_ADC_IsDisableOngoing>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f845 	bl	8002806 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d005      	beq.n	800378e <ADC_ConversionStop+0x10e>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d105      	bne.n	8003794 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003788:	230c      	movs	r3, #12
 800378a:	617b      	str	r3, [r7, #20]
        break;
 800378c:	e005      	b.n	800379a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800378e:	2308      	movs	r3, #8
 8003790:	617b      	str	r3, [r7, #20]
        break;
 8003792:	e002      	b.n	800379a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003794:	2304      	movs	r3, #4
 8003796:	617b      	str	r3, [r7, #20]
        break;
 8003798:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800379a:	f7fe fe1d 	bl	80023d8 <HAL_GetTick>
 800379e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037a0:	e01b      	b.n	80037da <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037a2:	f7fe fe19 	bl	80023d8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d914      	bls.n	80037da <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e007      	b.n	80037ea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1dc      	bne.n	80037a2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	a33fffff 	.word	0xa33fffff

080037f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe ff9b 	bl	8002744 <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d169      	bne.n	80038e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4b36      	ldr	r3, [pc, #216]	@ (80038f4 <ADC_Enable+0xfc>)
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f043 0210 	orr.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e055      	b.n	80038ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe ff56 	bl	80026f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003848:	482b      	ldr	r0, [pc, #172]	@ (80038f8 <ADC_Enable+0x100>)
 800384a:	f7fe fdf7 	bl	800243c <LL_ADC_GetCommonPathInternalCh>
 800384e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003858:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <ADC_Enable+0x104>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	4a28      	ldr	r2, [pc, #160]	@ (8003900 <ADC_Enable+0x108>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003872:	e002      	b.n	800387a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003880:	f7fe fdaa 	bl	80023d8 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003886:	e028      	b.n	80038da <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe ff59 	bl	8002744 <LL_ADC_IsEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ff29 	bl	80026f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038a2:	f7fe fd99 	bl	80023d8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d914      	bls.n	80038da <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d00d      	beq.n	80038da <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	f043 0210 	orr.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e007      	b.n	80038ea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d1cf      	bne.n	8003888 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	8000003f 	.word	0x8000003f
 80038f8:	50040300 	.word	0x50040300
 80038fc:	20000098 	.word	0x20000098
 8003900:	053e2d63 	.word	0x053e2d63

08003904 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff2a 	bl	800276a <LL_ADC_IsDisableOngoing>
 8003916:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe ff11 	bl	8002744 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d047      	beq.n	80039b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d144      	bne.n	80039b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030d 	and.w	r3, r3, #13
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe feeb 	bl	800271c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2203      	movs	r2, #3
 800394c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800394e:	f7fe fd43 	bl	80023d8 <HAL_GetTick>
 8003952:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003954:	e029      	b.n	80039aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	f043 0210 	orr.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e023      	b.n	80039ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003972:	f7fe fd31 	bl	80023d8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d914      	bls.n	80039aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e007      	b.n	80039ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1dc      	bne.n	8003972 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <LL_ADC_IsEnabled>:
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <LL_ADC_IsEnabled+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_IsEnabled+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_REG_IsConversionOngoing>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d101      	bne.n	8003a00 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b09f      	sub	sp, #124	@ 0x7c
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e093      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a36:	2300      	movs	r3, #0
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a47      	ldr	r2, [pc, #284]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d102      	bne.n	8003a4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a48:	4b46      	ldr	r3, [pc, #280]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	e001      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e072      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ffb8 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8003a78:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff ffb2 	bl	80039e8 <LL_ADC_REG_IsConversionOngoing>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d154      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d151      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a90:	4b35      	ldr	r3, [pc, #212]	@ (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003a92:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02c      	beq.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003aae:	035b      	lsls	r3, r3, #13
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ab8:	4829      	ldr	r0, [pc, #164]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003aba:	f7ff ff82 	bl	80039c2 <LL_ADC_IsEnabled>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	4828      	ldr	r0, [pc, #160]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ac2:	f7ff ff7e 	bl	80039c2 <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	431c      	orrs	r4, r3
 8003aca:	4828      	ldr	r0, [pc, #160]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003acc:	f7ff ff79 	bl	80039c2 <LL_ADC_IsEnabled>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4323      	orrs	r3, r4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d137      	bne.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ae0:	f023 030f 	bic.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	6811      	ldr	r1, [r2, #0]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	431a      	orrs	r2, r3
 8003af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003af4:	e028      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b02:	4817      	ldr	r0, [pc, #92]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b04:	f7ff ff5d 	bl	80039c2 <LL_ADC_IsEnabled>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	4816      	ldr	r0, [pc, #88]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b0c:	f7ff ff59 	bl	80039c2 <LL_ADC_IsEnabled>
 8003b10:	4603      	mov	r3, r0
 8003b12:	431c      	orrs	r4, r3
 8003b14:	4815      	ldr	r0, [pc, #84]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b16:	f7ff ff54 	bl	80039c2 <LL_ADC_IsEnabled>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4323      	orrs	r3, r4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d112      	bne.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b2a:	f023 030f 	bic.w	r3, r3, #15
 8003b2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b30:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b32:	e009      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003b46:	e000      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b52:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	377c      	adds	r7, #124	@ 0x7c
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	50040000 	.word	0x50040000
 8003b64:	50040100 	.word	0x50040100
 8003b68:	50040300 	.word	0x50040300
 8003b6c:	50040200 	.word	0x50040200

08003b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	@ (8003bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bbc:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 0307 	and.w	r3, r3, #7
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db0b      	blt.n	8003bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	4907      	ldr	r1, [pc, #28]	@ (8003c0c <__NVIC_EnableIRQ+0x38>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	@ (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	@ (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	@ 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
         );
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	@ 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff4c 	bl	8003b70 <__NVIC_SetPriorityGrouping>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf2:	f7ff ff61 	bl	8003bb8 <__NVIC_GetPriorityGrouping>
 8003cf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f7ff ffb1 	bl	8003c64 <NVIC_EncodePriority>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff80 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ff54 	bl	8003bd4 <__NVIC_EnableIRQ>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d008      	beq.n	8003d5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e022      	b.n	8003da4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 020e 	bic.w	r2, r2, #14
 8003d6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	f003 021c 	and.w	r2, r3, #28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d005      	beq.n	8003dd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e029      	b.n	8003e28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 020e 	bic.w	r2, r2, #14
 8003de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df8:	f003 021c 	and.w	r2, r3, #28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
    }
  }
  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e17f      	b.n	8004144 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8171 	beq.w	800413e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d005      	beq.n	8003e74 <HAL_GPIO_Init+0x40>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0201 	and.w	r2, r3, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d118      	bne.n	8003f14 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ee8:	2201      	movs	r2, #1
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0201 	and.w	r2, r3, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d017      	beq.n	8003f50 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d123      	bne.n	8003fa4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80ac 	beq.w	800413e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	4a5e      	ldr	r2, [pc, #376]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_GPIO_Init+0x334>)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	3302      	adds	r3, #2
 8004006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	220f      	movs	r2, #15
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004028:	d025      	beq.n	8004076 <HAL_GPIO_Init+0x242>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	@ (800416c <HAL_GPIO_Init+0x338>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <HAL_GPIO_Init+0x23e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4e      	ldr	r2, [pc, #312]	@ (8004170 <HAL_GPIO_Init+0x33c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d019      	beq.n	800406e <HAL_GPIO_Init+0x23a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4d      	ldr	r2, [pc, #308]	@ (8004174 <HAL_GPIO_Init+0x340>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0x236>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4c      	ldr	r2, [pc, #304]	@ (8004178 <HAL_GPIO_Init+0x344>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00d      	beq.n	8004066 <HAL_GPIO_Init+0x232>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <HAL_GPIO_Init+0x348>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <HAL_GPIO_Init+0x22e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4a      	ldr	r2, [pc, #296]	@ (8004180 <HAL_GPIO_Init+0x34c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <HAL_GPIO_Init+0x22a>
 800405a:	2306      	movs	r3, #6
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800405e:	2307      	movs	r3, #7
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x244>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x244>
 8004076:	2300      	movs	r3, #0
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004088:	4937      	ldr	r1, [pc, #220]	@ (8004168 <HAL_GPIO_Init+0x334>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004096:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ba:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c0:	4b30      	ldr	r3, [pc, #192]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <HAL_GPIO_Init+0x350>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800410e:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004114:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <HAL_GPIO_Init+0x350>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004138:	4a12      	ldr	r2, [pc, #72]	@ (8004184 <HAL_GPIO_Init+0x350>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f47f ae78 	bne.w	8003e44 <HAL_GPIO_Init+0x10>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	40010000 	.word	0x40010000
 800416c:	48000400 	.word	0x48000400
 8004170:	48000800 	.word	0x48000800
 8004174:	48000c00 	.word	0x48000c00
 8004178:	48001000 	.word	0x48001000
 800417c:	48001400 	.word	0x48001400
 8004180:	48001800 	.word	0x48001800
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43d9      	mvns	r1, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	400b      	ands	r3, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08d      	b.n	800431a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fd feda 	bl	8001fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	@ 0x24
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800423c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800424c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e006      	b.n	8004274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d108      	bne.n	800428e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	e007      	b.n	800429e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800429c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69d9      	ldr	r1, [r3, #28]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	460b      	mov	r3, r1
 8004338:	813b      	strh	r3, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	f040 80f9 	bne.w	800453e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_I2C_Mem_Write+0x34>
 8004352:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800435e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0ed      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_I2C_Mem_Write+0x4e>
 800436e:	2302      	movs	r3, #2
 8004370:	e0e6      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800437a:	f7fe f82d 	bl	80023d8 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2319      	movs	r3, #25
 8004386:	2201      	movs	r2, #1
 8004388:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fac3 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0d1      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2221      	movs	r2, #33	@ 0x21
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2240      	movs	r2, #64	@ 0x40
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043c4:	88f8      	ldrh	r0, [r7, #6]
 80043c6:	893a      	ldrh	r2, [r7, #8]
 80043c8:	8979      	ldrh	r1, [r7, #10]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4603      	mov	r3, r0
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f9d3 	bl	8004780 <I2C_RequestMemoryWrite>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a9      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	d90e      	bls.n	8004414 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	@ 0xff
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	b2da      	uxtb	r2, r3
 8004402:	8979      	ldrh	r1, [r7, #10]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fc47 	bl	8004ca0 <I2C_TransferConfig>
 8004412:	e00f      	b.n	8004434 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fc36 	bl	8004ca0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fac6 	bl	80049ca <I2C_WaitOnTXISFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e07b      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d034      	beq.n	80044ec <HAL_I2C_Mem_Write+0x1c8>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d130      	bne.n	80044ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	@ 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fa3f 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04d      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2bff      	cmp	r3, #255	@ 0xff
 80044ac:	d90e      	bls.n	80044cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	22ff      	movs	r2, #255	@ 0xff
 80044b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	8979      	ldrh	r1, [r7, #10]
 80044bc:	2300      	movs	r3, #0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fbeb 	bl	8004ca0 <I2C_TransferConfig>
 80044ca:	e00f      	b.n	80044ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	8979      	ldrh	r1, [r7, #10]
 80044de:	2300      	movs	r3, #0
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fbda 	bl	8004ca0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d19e      	bne.n	8004434 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 faac 	bl	8004a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e01a      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2220      	movs	r2, #32
 8004510:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <HAL_I2C_Mem_Write+0x224>)
 800451e:	400b      	ands	r3, r1
 8004520:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	e000      	b.n	8004540 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
  }
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	fe00e800 	.word	0xfe00e800

0800454c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	f040 80fd 	bne.w	800476e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_I2C_Mem_Read+0x34>
 800457a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004586:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0f1      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_I2C_Mem_Read+0x4e>
 8004596:	2302      	movs	r3, #2
 8004598:	e0ea      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045a2:	f7fd ff19 	bl	80023d8 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2319      	movs	r3, #25
 80045ae:	2201      	movs	r2, #1
 80045b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f9af 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0d5      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2222      	movs	r2, #34	@ 0x22
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2240      	movs	r2, #64	@ 0x40
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ec:	88f8      	ldrh	r0, [r7, #6]
 80045ee:	893a      	ldrh	r2, [r7, #8]
 80045f0:	8979      	ldrh	r1, [r7, #10]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	4603      	mov	r3, r0
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f913 	bl	8004828 <I2C_RequestMemoryRead>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0ad      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2bff      	cmp	r3, #255	@ 0xff
 800461c:	d90e      	bls.n	800463c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004628:	b2da      	uxtb	r2, r3
 800462a:	8979      	ldrh	r1, [r7, #10]
 800462c:	4b52      	ldr	r3, [pc, #328]	@ (8004778 <HAL_I2C_Mem_Read+0x22c>)
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fb33 	bl	8004ca0 <I2C_TransferConfig>
 800463a:	e00f      	b.n	800465c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464a:	b2da      	uxtb	r2, r3
 800464c:	8979      	ldrh	r1, [r7, #10]
 800464e:	4b4a      	ldr	r3, [pc, #296]	@ (8004778 <HAL_I2C_Mem_Read+0x22c>)
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fb22 	bl	8004ca0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	2200      	movs	r2, #0
 8004664:	2104      	movs	r1, #4
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f956 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07c      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d034      	beq.n	800471c <HAL_I2C_Mem_Read+0x1d0>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d130      	bne.n	800471c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	@ 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f927 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04d      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2bff      	cmp	r3, #255	@ 0xff
 80046dc:	d90e      	bls.n	80046fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fad3 	bl	8004ca0 <I2C_TransferConfig>
 80046fa:	e00f      	b.n	800471c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	b2da      	uxtb	r2, r3
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	2300      	movs	r3, #0
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fac2 	bl	8004ca0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d19a      	bne.n	800465c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f994 	bl	8004a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e01a      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2220      	movs	r2, #32
 8004740:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_I2C_Mem_Read+0x230>)
 800474e:	400b      	ands	r3, r1
 8004750:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	80002400 	.word	0x80002400
 800477c:	fe00e800 	.word	0xfe00e800

08004780 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	461a      	mov	r2, r3
 800478e:	4603      	mov	r3, r0
 8004790:	817b      	strh	r3, [r7, #10]
 8004792:	460b      	mov	r3, r1
 8004794:	813b      	strh	r3, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	8979      	ldrh	r1, [r7, #10]
 80047a0:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <I2C_RequestMemoryWrite+0xa4>)
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fa79 	bl	8004ca0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f909 	bl	80049ca <I2C_WaitOnTXISFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02c      	b.n	800481c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047c8:	893b      	ldrh	r3, [r7, #8]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d2:	e015      	b.n	8004800 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047d4:	893b      	ldrh	r3, [r7, #8]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	69b9      	ldr	r1, [r7, #24]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8ef 	bl	80049ca <I2C_WaitOnTXISFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e012      	b.n	800481c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f6:	893b      	ldrh	r3, [r7, #8]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2200      	movs	r2, #0
 8004808:	2180      	movs	r1, #128	@ 0x80
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f884 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	80002000 	.word	0x80002000

08004828 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	4603      	mov	r3, r0
 8004838:	817b      	strh	r3, [r7, #10]
 800483a:	460b      	mov	r3, r1
 800483c:	813b      	strh	r3, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	8979      	ldrh	r1, [r7, #10]
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <I2C_RequestMemoryRead+0xa4>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2300      	movs	r3, #0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa26 	bl	8004ca0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f8b6 	bl	80049ca <I2C_WaitOnTXISFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e02c      	b.n	80048c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800486e:	893b      	ldrh	r3, [r7, #8]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	629a      	str	r2, [r3, #40]	@ 0x28
 8004878:	e015      	b.n	80048a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800487a:	893b      	ldrh	r3, [r7, #8]
 800487c:	0a1b      	lsrs	r3, r3, #8
 800487e:	b29b      	uxth	r3, r3
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	69b9      	ldr	r1, [r7, #24]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f89c 	bl	80049ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e012      	b.n	80048c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2140      	movs	r1, #64	@ 0x40
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f831 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	80002000 	.word	0x80002000

080048d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d103      	bne.n	80048ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d007      	beq.n	800490c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	619a      	str	r2, [r3, #24]
  }
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e03b      	b.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8d6 	bl	8004ae0 <I2C_IsErrorOccurred>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e041      	b.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d02d      	beq.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd fd47 	bl	80023d8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d122      	bne.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d113      	bne.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e00f      	b.n	80049c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d0b4      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d6:	e033      	b.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f87f 	bl	8004ae0 <I2C_IsErrorOccurred>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e031      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d025      	beq.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fd fcf0 	bl	80023d8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11a      	bne.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d013      	beq.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d1c4      	bne.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a64:	e02f      	b.n	8004ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f838 	bl	8004ae0 <I2C_IsErrorOccurred>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e02d      	b.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7fd fcad 	bl	80023d8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11a      	bne.n	8004ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d013      	beq.n	8004ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e007      	b.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d1c8      	bne.n	8004a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	@ 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d068      	beq.n	8004bde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b14:	e049      	b.n	8004baa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d045      	beq.n	8004baa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fd fc5b 	bl	80023d8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_IsErrorOccurred+0x54>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d13a      	bne.n	8004baa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b56:	d121      	bne.n	8004b9c <I2C_IsErrorOccurred+0xbc>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5e:	d01d      	beq.n	8004b9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d01a      	beq.n	8004b9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b76:	f7fd fc2f 	bl	80023d8 <HAL_GetTick>
 8004b7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b7c:	e00e      	b.n	8004b9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b7e:	f7fd fc2b 	bl	80023d8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b19      	cmp	r3, #25
 8004b8a:	d907      	bls.n	8004b9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	f043 0320 	orr.w	r3, r3, #32
 8004b92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b9a:	e006      	b.n	8004baa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d1e9      	bne.n	8004b7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d003      	beq.n	8004bc0 <I2C_IsErrorOccurred+0xe0>
 8004bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0aa      	beq.n	8004b16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f043 0308 	orr.w	r3, r3, #8
 8004c18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	f043 0302 	orr.w	r3, r3, #2
 8004c3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01c      	beq.n	8004c8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fe3b 	bl	80048d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0d      	ldr	r3, [pc, #52]	@ (8004c9c <I2C_IsErrorOccurred+0x1bc>)
 8004c66:	400b      	ands	r3, r1
 8004c68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3728      	adds	r7, #40	@ 0x28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	fe00e800 	.word	0xfe00e800

08004ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	817b      	strh	r3, [r7, #10]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cb2:	897b      	ldrh	r3, [r7, #10]
 8004cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cb8:	7a7b      	ldrb	r3, [r7, #9]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	0d5b      	lsrs	r3, r3, #21
 8004cda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cde:	4b08      	ldr	r3, [pc, #32]	@ (8004d00 <I2C_TransferConfig+0x60>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	ea02 0103 	and.w	r1, r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	03ff63ff 	.word	0x03ff63ff

08004d04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d138      	bne.n	8004d8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e032      	b.n	8004d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	@ 0x24
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d8c:	2302      	movs	r3, #2
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d139      	bne.n	8004e24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e033      	b.n	8004e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2224      	movs	r2, #36	@ 0x24
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e38:	4b04      	ldr	r3, [pc, #16]	@ (8004e4c <HAL_PWREx_GetVoltageRange+0x18>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40007000 	.word	0x40007000

08004e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5e:	d130      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e60:	4b23      	ldr	r3, [pc, #140]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d038      	beq.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e6e:	4b20      	ldr	r3, [pc, #128]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e76:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2232      	movs	r2, #50	@ 0x32
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	0c9b      	lsrs	r3, r3, #18
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e94:	e002      	b.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	d102      	bne.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f2      	bne.n	8004e96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebc:	d110      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e00f      	b.n	8004ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ece:	d007      	beq.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ed8:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ede:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40007000 	.word	0x40007000
 8004ef4:	20000098 	.word	0x20000098
 8004ef8:	431bde83 	.word	0x431bde83

08004efc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e3ca      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0e:	4b97      	ldr	r3, [pc, #604]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f18:	4b94      	ldr	r3, [pc, #592]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80e4 	beq.w	80050f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4a>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	f040 808b 	bne.w	8005054 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	f040 8087 	bne.w	8005054 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f46:	4b89      	ldr	r3, [pc, #548]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x62>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e3a2      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	4b82      	ldr	r3, [pc, #520]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_RCC_OscConfig+0x7c>
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_OscConfig+0x88>
 8004f78:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d223      	bcs.n	8004fd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fd87 	bl	8005aa0 <RCC_SetFlashLatencyFromMSIRange>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e383      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9c:	4b73      	ldr	r3, [pc, #460]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a72      	ldr	r2, [pc, #456]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b70      	ldr	r3, [pc, #448]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	496d      	ldr	r1, [pc, #436]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fba:	4b6c      	ldr	r3, [pc, #432]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	4968      	ldr	r1, [pc, #416]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
 8004fce:	e025      	b.n	800501c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fd0:	4b66      	ldr	r3, [pc, #408]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fd6:	f043 0308 	orr.w	r3, r3, #8
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b63      	ldr	r3, [pc, #396]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	4960      	ldr	r1, [pc, #384]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fee:	4b5f      	ldr	r3, [pc, #380]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	495b      	ldr	r1, [pc, #364]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fd47 	bl	8005aa0 <RCC_SetFlashLatencyFromMSIRange>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e343      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800501c:	f000 fc4a 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005020:	4602      	mov	r2, r0
 8005022:	4b52      	ldr	r3, [pc, #328]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	4950      	ldr	r1, [pc, #320]	@ (8005170 <HAL_RCC_OscConfig+0x274>)
 800502e:	5ccb      	ldrb	r3, [r1, r3]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	4a4e      	ldr	r2, [pc, #312]	@ (8005174 <HAL_RCC_OscConfig+0x278>)
 800503a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800503c:	4b4e      	ldr	r3, [pc, #312]	@ (8005178 <HAL_RCC_OscConfig+0x27c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fd f8c3 	bl	80021cc <HAL_InitTick>
 8005046:	4603      	mov	r3, r0
 8005048:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d052      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	e327      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d032      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800505c:	4b43      	ldr	r3, [pc, #268]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a42      	ldr	r2, [pc, #264]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005068:	f7fd f9b6 	bl	80023d8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005070:	f7fd f9b2 	bl	80023d8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e310      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005082:	4b3a      	ldr	r3, [pc, #232]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800508e:	4b37      	ldr	r3, [pc, #220]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a36      	ldr	r2, [pc, #216]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005094:	f043 0308 	orr.w	r3, r3, #8
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b34      	ldr	r3, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4931      	ldr	r1, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ac:	4b2f      	ldr	r3, [pc, #188]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	492c      	ldr	r1, [pc, #176]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	e01a      	b.n	80050f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050c2:	4b2a      	ldr	r3, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a29      	ldr	r2, [pc, #164]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050c8:	f023 0301 	bic.w	r3, r3, #1
 80050cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ce:	f7fd f983 	bl	80023d8 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050d6:	f7fd f97f 	bl	80023d8 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e2dd      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050e8:	4b20      	ldr	r3, [pc, #128]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <HAL_RCC_OscConfig+0x1da>
 80050f4:	e000      	b.n	80050f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d074      	beq.n	80051ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x21a>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b0c      	cmp	r3, #12
 800510e:	d10e      	bne.n	800512e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b03      	cmp	r3, #3
 8005114:	d10b      	bne.n	800512e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005116:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d064      	beq.n	80051ec <HAL_RCC_OscConfig+0x2f0>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d160      	bne.n	80051ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e2ba      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x24a>
 8005138:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0b      	ldr	r2, [pc, #44]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 800513e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	e026      	b.n	8005194 <HAL_RCC_OscConfig+0x298>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800514e:	d115      	bne.n	800517c <HAL_RCC_OscConfig+0x280>
 8005150:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a05      	ldr	r2, [pc, #20]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005156:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4b03      	ldr	r3, [pc, #12]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a02      	ldr	r2, [pc, #8]	@ (800516c <HAL_RCC_OscConfig+0x270>)
 8005162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e014      	b.n	8005194 <HAL_RCC_OscConfig+0x298>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	0800fe70 	.word	0x0800fe70
 8005174:	20000098 	.word	0x20000098
 8005178:	2000009c 	.word	0x2000009c
 800517c:	4ba0      	ldr	r3, [pc, #640]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a9f      	ldr	r2, [pc, #636]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b9d      	ldr	r3, [pc, #628]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a9c      	ldr	r2, [pc, #624]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800518e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd f91c 	bl	80023d8 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fd f918 	bl	80023d8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	@ 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e276      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b6:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x2a8>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd f908 	bl	80023d8 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fd f904 	bl	80023d8 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	@ 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e262      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x2d0>
 80051ea:	e000      	b.n	80051ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d060      	beq.n	80052bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d005      	beq.n	800520c <HAL_RCC_OscConfig+0x310>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d119      	bne.n	800523a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d116      	bne.n	800523a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800520c:	4b7c      	ldr	r3, [pc, #496]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_OscConfig+0x328>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e23f      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b76      	ldr	r3, [pc, #472]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	4973      	ldr	r1, [pc, #460]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005238:	e040      	b.n	80052bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d023      	beq.n	800528a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005242:	4b6f      	ldr	r3, [pc, #444]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a6e      	ldr	r2, [pc, #440]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fd f8c3 	bl	80023d8 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005256:	f7fd f8bf 	bl	80023d8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e21d      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	4b65      	ldr	r3, [pc, #404]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4b62      	ldr	r3, [pc, #392]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	495f      	ldr	r1, [pc, #380]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
 8005288:	e018      	b.n	80052bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528a:	4b5d      	ldr	r3, [pc, #372]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a5c      	ldr	r2, [pc, #368]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fd f89f 	bl	80023d8 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529e:	f7fd f89b 	bl	80023d8 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e1f9      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b0:	4b53      	ldr	r3, [pc, #332]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d03c      	beq.n	8005342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01c      	beq.n	800530a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e0:	f7fd f87a 	bl	80023d8 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e8:	f7fd f876 	bl	80023d8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1d4      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052fa:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ef      	beq.n	80052e8 <HAL_RCC_OscConfig+0x3ec>
 8005308:	e01b      	b.n	8005342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800530a:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	4a3b      	ldr	r2, [pc, #236]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fd f85d 	bl	80023d8 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fd f859 	bl	80023d8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1b7      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005334:	4b32      	ldr	r3, [pc, #200]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ef      	bne.n	8005322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80a6 	beq.w	800549c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005350:	2300      	movs	r3, #0
 8005352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005354:	4b2a      	ldr	r3, [pc, #168]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005360:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 8005366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536a:	6593      	str	r3, [r2, #88]	@ 0x58
 800536c:	4b24      	ldr	r3, [pc, #144]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	4b21      	ldr	r3, [pc, #132]	@ (8005404 <HAL_RCC_OscConfig+0x508>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d118      	bne.n	80053ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005388:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <HAL_RCC_OscConfig+0x508>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1d      	ldr	r2, [pc, #116]	@ (8005404 <HAL_RCC_OscConfig+0x508>)
 800538e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005394:	f7fd f820 	bl	80023d8 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd f81c 	bl	80023d8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e17a      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ae:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_RCC_OscConfig+0x508>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d108      	bne.n	80053d4 <HAL_RCC_OscConfig+0x4d8>
 80053c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053d2:	e029      	b.n	8005428 <HAL_RCC_OscConfig+0x52c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d115      	bne.n	8005408 <HAL_RCC_OscConfig+0x50c>
 80053dc:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	4a03      	ldr	r2, [pc, #12]	@ (8005400 <HAL_RCC_OscConfig+0x504>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053fc:	e014      	b.n	8005428 <HAL_RCC_OscConfig+0x52c>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	40007000 	.word	0x40007000
 8005408:	4b9c      	ldr	r3, [pc, #624]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	4a9b      	ldr	r2, [pc, #620]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005418:	4b98      	ldr	r3, [pc, #608]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541e:	4a97      	ldr	r2, [pc, #604]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fc ffd2 	bl	80023d8 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005436:	e00a      	b.n	800544e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005438:	f7fc ffce 	bl	80023d8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e12a      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544e:	4b8b      	ldr	r3, [pc, #556]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ed      	beq.n	8005438 <HAL_RCC_OscConfig+0x53c>
 800545c:	e015      	b.n	800548a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fc ffbb 	bl	80023d8 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fc ffb7 	bl	80023d8 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e113      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800547c:	4b7f      	ldr	r3, [pc, #508]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1ed      	bne.n	8005466 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800548a:	7ffb      	ldrb	r3, [r7, #31]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d105      	bne.n	800549c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005490:	4b7a      	ldr	r3, [pc, #488]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005494:	4a79      	ldr	r2, [pc, #484]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80fe 	beq.w	80056a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	f040 80d0 	bne.w	8005650 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054b0:	4b72      	ldr	r3, [pc, #456]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0203 	and.w	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d130      	bne.n	8005526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	3b01      	subs	r3, #1
 80054d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d127      	bne.n	8005526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d11f      	bne.n	8005526 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054f0:	2a07      	cmp	r2, #7
 80054f2:	bf14      	ite	ne
 80054f4:	2201      	movne	r2, #1
 80054f6:	2200      	moveq	r2, #0
 80054f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d113      	bne.n	8005526 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	3b01      	subs	r3, #1
 800550c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d109      	bne.n	8005526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	3b01      	subs	r3, #1
 8005520:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d06e      	beq.n	8005604 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b0c      	cmp	r3, #12
 800552a:	d069      	beq.n	8005600 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800552c:	4b53      	ldr	r3, [pc, #332]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005538:	4b50      	ldr	r3, [pc, #320]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0ad      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005548:	4b4c      	ldr	r3, [pc, #304]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a4b      	ldr	r2, [pc, #300]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800554e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005552:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005554:	f7fc ff40 	bl	80023d8 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555c:	f7fc ff3c 	bl	80023d8 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e09a      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556e:	4b43      	ldr	r3, [pc, #268]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557a:	4b40      	ldr	r3, [pc, #256]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	4b40      	ldr	r3, [pc, #256]	@ (8005680 <HAL_RCC_OscConfig+0x784>)
 8005580:	4013      	ands	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800558a:	3a01      	subs	r2, #1
 800558c:	0112      	lsls	r2, r2, #4
 800558e:	4311      	orrs	r1, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005594:	0212      	lsls	r2, r2, #8
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800559c:	0852      	lsrs	r2, r2, #1
 800559e:	3a01      	subs	r2, #1
 80055a0:	0552      	lsls	r2, r2, #21
 80055a2:	4311      	orrs	r1, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055a8:	0852      	lsrs	r2, r2, #1
 80055aa:	3a01      	subs	r2, #1
 80055ac:	0652      	lsls	r2, r2, #25
 80055ae:	4311      	orrs	r1, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055b4:	0912      	lsrs	r2, r2, #4
 80055b6:	0452      	lsls	r2, r2, #17
 80055b8:	430a      	orrs	r2, r1
 80055ba:	4930      	ldr	r1, [pc, #192]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055c0:	4b2e      	ldr	r3, [pc, #184]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2d      	ldr	r2, [pc, #180]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055cc:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a2a      	ldr	r2, [pc, #168]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055d8:	f7fc fefe 	bl	80023d8 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc fefa 	bl	80023d8 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e058      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	4b22      	ldr	r3, [pc, #136]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055fe:	e050      	b.n	80056a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e04f      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d148      	bne.n	80056a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005610:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a19      	ldr	r2, [pc, #100]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800561a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800561c:	4b17      	ldr	r3, [pc, #92]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a16      	ldr	r2, [pc, #88]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005628:	f7fc fed6 	bl	80023d8 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc fed2 	bl	80023d8 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e030      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005642:	4b0e      	ldr	r3, [pc, #56]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x734>
 800564e:	e028      	b.n	80056a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d023      	beq.n	800569e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a08      	ldr	r2, [pc, #32]	@ (800567c <HAL_RCC_OscConfig+0x780>)
 800565c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7fc feb9 	bl	80023d8 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005668:	e00c      	b.n	8005684 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566a:	f7fc feb5 	bl	80023d8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d905      	bls.n	8005684 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e013      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
 800567c:	40021000 	.word	0x40021000
 8005680:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005684:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <HAL_RCC_OscConfig+0x7b0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ec      	bne.n	800566a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_RCC_OscConfig+0x7b0>)
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4905      	ldr	r1, [pc, #20]	@ (80056ac <HAL_RCC_OscConfig+0x7b0>)
 8005696:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <HAL_RCC_OscConfig+0x7b4>)
 8005698:	4013      	ands	r3, r2
 800569a:	60cb      	str	r3, [r1, #12]
 800569c:	e001      	b.n	80056a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	feeefffc 	.word	0xfeeefffc

080056b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0e7      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c8:	4b75      	ldr	r3, [pc, #468]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d910      	bls.n	80056f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b72      	ldr	r3, [pc, #456]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 0207 	bic.w	r2, r3, #7
 80056de:	4970      	ldr	r1, [pc, #448]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b6e      	ldr	r3, [pc, #440]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cf      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b66      	ldr	r3, [pc, #408]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005710:	429a      	cmp	r2, r3
 8005712:	d908      	bls.n	8005726 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005714:	4b63      	ldr	r3, [pc, #396]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4960      	ldr	r1, [pc, #384]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04c      	beq.n	80057cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	4b5a      	ldr	r3, [pc, #360]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d121      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e0a6      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005752:	4b54      	ldr	r3, [pc, #336]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d115      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e09a      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800576a:	4b4e      	ldr	r3, [pc, #312]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e08e      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800577a:	4b4a      	ldr	r3, [pc, #296]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e086      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b46      	ldr	r3, [pc, #280]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4943      	ldr	r1, [pc, #268]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579c:	f7fc fe1c 	bl	80023d8 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fc fe18 	bl	80023d8 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e06e      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b3a      	ldr	r3, [pc, #232]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d208      	bcs.n	80057fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	492b      	ldr	r1, [pc, #172]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057fa:	4b29      	ldr	r3, [pc, #164]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d210      	bcs.n	800582a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005808:	4b25      	ldr	r3, [pc, #148]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 0207 	bic.w	r2, r3, #7
 8005810:	4923      	ldr	r1, [pc, #140]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005818:	4b21      	ldr	r3, [pc, #132]	@ (80058a0 <HAL_RCC_ClockConfig+0x1ec>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e036      	b.n	8005898 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005836:	4b1b      	ldr	r3, [pc, #108]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4918      	ldr	r1, [pc, #96]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005854:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4910      	ldr	r1, [pc, #64]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005864:	4313      	orrs	r3, r2
 8005866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005868:	f000 f824 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f0>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	490b      	ldr	r1, [pc, #44]	@ (80058a8 <HAL_RCC_ClockConfig+0x1f4>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <HAL_RCC_ClockConfig+0x1f8>)
 8005886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <HAL_RCC_ClockConfig+0x1fc>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fc fc9d 	bl	80021cc <HAL_InitTick>
 8005892:	4603      	mov	r3, r0
 8005894:	72fb      	strb	r3, [r7, #11]

  return status;
 8005896:	7afb      	ldrb	r3, [r7, #11]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40021000 	.word	0x40021000
 80058a8:	0800fe70 	.word	0x0800fe70
 80058ac:	20000098 	.word	0x20000098
 80058b0:	2000009c 	.word	0x2000009c

080058b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	@ 0x24
 80058b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c2:	4b3e      	ldr	r3, [pc, #248]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058cc:	4b3b      	ldr	r3, [pc, #236]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x34>
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d121      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11e      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058e8:	4b34      	ldr	r3, [pc, #208]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d107      	bne.n	8005904 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058f4:	4b31      	ldr	r3, [pc, #196]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e005      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005904:	4b2d      	ldr	r3, [pc, #180]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005910:	4a2b      	ldr	r2, [pc, #172]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005924:	e00a      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d102      	bne.n	8005932 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800592c:	4b25      	ldr	r3, [pc, #148]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e004      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d101      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005938:	4b23      	ldr	r3, [pc, #140]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800593a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d134      	bne.n	80059ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005942:	4b1e      	ldr	r3, [pc, #120]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0xa6>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d003      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0xac>
 8005958:	e005      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800595a:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800595c:	617b      	str	r3, [r7, #20]
      break;
 800595e:	e005      	b.n	800596c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005960:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005962:	617b      	str	r3, [r7, #20]
      break;
 8005964:	e002      	b.n	800596c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	617b      	str	r3, [r7, #20]
      break;
 800596a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800596c:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	3301      	adds	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800597a:	4b10      	ldr	r3, [pc, #64]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	fb03 f202 	mul.w	r2, r3, r2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005992:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x108>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	0e5b      	lsrs	r3, r3, #25
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	3301      	adds	r3, #1
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059ac:	69bb      	ldr	r3, [r7, #24]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3724      	adds	r7, #36	@ 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	0800fe88 	.word	0x0800fe88
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	007a1200 	.word	0x007a1200

080059cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000098 	.word	0x20000098

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059e8:	f7ff fff0 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4904      	ldr	r1, [pc, #16]	@ (8005a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	0800fe80 	.word	0x0800fe80

08005a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a14:	f7ff ffda 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4904      	ldr	r1, [pc, #16]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000
 8005a38:	0800fe80 	.word	0x0800fe80

08005a3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	220f      	movs	r2, #15
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005a4c:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0203 	and.w	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005a58:	4b0f      	ldr	r3, [pc, #60]	@ (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005a64:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005a70:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <HAL_RCC_GetClockConfig+0x60>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0207 	and.w	r2, r3, #7
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40022000 	.word	0x40022000

08005aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005aac:	4b2a      	ldr	r3, [pc, #168]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ab8:	f7ff f9bc 	bl	8004e34 <HAL_PWREx_GetVoltageRange>
 8005abc:	6178      	str	r0, [r7, #20]
 8005abe:	e014      	b.n	8005aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac0:	4b25      	ldr	r3, [pc, #148]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	4a24      	ldr	r2, [pc, #144]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8005acc:	4b22      	ldr	r3, [pc, #136]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ad8:	f7ff f9ac 	bl	8004e34 <HAL_PWREx_GetVoltageRange>
 8005adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af0:	d10b      	bne.n	8005b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b80      	cmp	r3, #128	@ 0x80
 8005af6:	d919      	bls.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2ba0      	cmp	r3, #160	@ 0xa0
 8005afc:	d902      	bls.n	8005b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005afe:	2302      	movs	r3, #2
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e013      	b.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b04:	2301      	movs	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	e010      	b.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b80      	cmp	r3, #128	@ 0x80
 8005b0e:	d902      	bls.n	8005b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b10:	2303      	movs	r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e00a      	b.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b80      	cmp	r3, #128	@ 0x80
 8005b1a:	d102      	bne.n	8005b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e004      	b.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b70      	cmp	r3, #112	@ 0x70
 8005b26:	d101      	bne.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b28:	2301      	movs	r3, #1
 8005b2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 0207 	bic.w	r2, r3, #7
 8005b34:	4909      	ldr	r1, [pc, #36]	@ (8005b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b3c:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d001      	beq.n	8005b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40022000 	.word	0x40022000

08005b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b68:	2300      	movs	r3, #0
 8005b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d041      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b84:	d02a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b8a:	d824      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b90:	d008      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b96:	d81e      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba0:	d010      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ba2:	e018      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ba4:	4b86      	ldr	r3, [pc, #536]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a85      	ldr	r2, [pc, #532]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bb0:	e015      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fabb 	bl	8006134 <RCCEx_PLLSAI1_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bc2:	e00c      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3320      	adds	r3, #32
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fba6 	bl	800631c <RCCEx_PLLSAI2_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8005bda:	e000      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be4:	4b76      	ldr	r3, [pc, #472]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf2:	4973      	ldr	r1, [pc, #460]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005bfa:	e001      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d041      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c14:	d02a      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c1a:	d824      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c20:	d008      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c26:	d81e      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c30:	d010      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c32:	e018      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c34:	4b62      	ldr	r3, [pc, #392]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a61      	ldr	r2, [pc, #388]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c40:	e015      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fa73 	bl	8006134 <RCCEx_PLLSAI1_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c52:	e00c      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3320      	adds	r3, #32
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fb5e 	bl	800631c <RCCEx_PLLSAI2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	74fb      	strb	r3, [r7, #19]
      break;
 8005c6a:	e000      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c74:	4b52      	ldr	r3, [pc, #328]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c82:	494f      	ldr	r1, [pc, #316]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005c8a:	e001      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80a0 	beq.w	8005dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ca2:	4b47      	ldr	r3, [pc, #284]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb8:	4b41      	ldr	r3, [pc, #260]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbc:	4a40      	ldr	r2, [pc, #256]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc fb7a 	bl	80023d8 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ce6:	e009      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce8:	f7fc fb76 	bl	80023d8 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d902      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8005cfa:	e005      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005cfc:	4b31      	ldr	r3, [pc, #196]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ef      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d15c      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01f      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d019      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d38:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3e:	4a20      	ldr	r2, [pc, #128]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d48:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d58:	4a19      	ldr	r2, [pc, #100]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6a:	f7fc fb35 	bl	80023d8 <HAL_GetTick>
 8005d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d70:	e00b      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d72:	f7fc fb31 	bl	80023d8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d902      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	74fb      	strb	r3, [r7, #19]
            break;
 8005d88:	e006      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ec      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dae:	4904      	ldr	r1, [pc, #16]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005db6:	e009      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	74bb      	strb	r3, [r7, #18]
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	7cfb      	ldrb	r3, [r7, #19]
 8005dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dcc:	7c7b      	ldrb	r3, [r7, #17]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d105      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd2:	4b9e      	ldr	r3, [pc, #632]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	4a9d      	ldr	r2, [pc, #628]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005dea:	4b98      	ldr	r3, [pc, #608]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df0:	f023 0203 	bic.w	r2, r3, #3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	4994      	ldr	r1, [pc, #592]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e12:	f023 020c 	bic.w	r2, r3, #12
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1a:	498c      	ldr	r1, [pc, #560]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e2e:	4b87      	ldr	r3, [pc, #540]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	4983      	ldr	r1, [pc, #524]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e50:	4b7e      	ldr	r3, [pc, #504]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	497b      	ldr	r1, [pc, #492]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e72:	4b76      	ldr	r3, [pc, #472]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e80:	4972      	ldr	r1, [pc, #456]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e94:	4b6d      	ldr	r3, [pc, #436]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea2:	496a      	ldr	r1, [pc, #424]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eb6:	4b65      	ldr	r3, [pc, #404]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec4:	4961      	ldr	r1, [pc, #388]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee6:	4959      	ldr	r1, [pc, #356]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005efa:	4b54      	ldr	r3, [pc, #336]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f08:	4950      	ldr	r1, [pc, #320]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	4948      	ldr	r1, [pc, #288]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f3e:	4b43      	ldr	r3, [pc, #268]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4c:	493f      	ldr	r1, [pc, #252]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d028      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f60:	4b3a      	ldr	r3, [pc, #232]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6e:	4937      	ldr	r1, [pc, #220]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f80:	4b32      	ldr	r3, [pc, #200]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a31      	ldr	r2, [pc, #196]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f8a:	60d3      	str	r3, [r2, #12]
 8005f8c:	e011      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f96:	d10c      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 f8c8 	bl	8006134 <RCCEx_PLLSAI1_Config>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005fae:	7cfb      	ldrb	r3, [r7, #19]
 8005fb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d028      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005fbe:	4b23      	ldr	r3, [pc, #140]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fcc:	491f      	ldr	r1, [pc, #124]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fde:	4b1b      	ldr	r3, [pc, #108]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fe8:	60d3      	str	r3, [r2, #12]
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 f899 	bl	8006134 <RCCEx_PLLSAI1_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02b      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602a:	4908      	ldr	r1, [pc, #32]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800603a:	d109      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b03      	ldr	r3, [pc, #12]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a02      	ldr	r2, [pc, #8]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
 8006048:	e014      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006058:	d10c      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2101      	movs	r1, #1
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f867 	bl	8006134 <RCCEx_PLLSAI1_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800606a:	7cfb      	ldrb	r3, [r7, #19]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006080:	4b2b      	ldr	r3, [pc, #172]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006086:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800608e:	4928      	ldr	r1, [pc, #160]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800609a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800609e:	d10d      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f844 	bl	8006134 <RCCEx_PLLSAI1_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80060b6:	7cfb      	ldrb	r3, [r7, #19]
 80060b8:	74bb      	strb	r3, [r7, #18]
 80060ba:	e011      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3320      	adds	r3, #32
 80060ca:	2102      	movs	r1, #2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f925 	bl	800631c <RCCEx_PLLSAI2_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80060ec:	4b10      	ldr	r3, [pc, #64]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060fa:	490d      	ldr	r1, [pc, #52]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800610e:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006114:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800611e:	4904      	ldr	r1, [pc, #16]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006126:	7cbb      	ldrb	r3, [r7, #18]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40021000 	.word	0x40021000

08006134 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006142:	4b75      	ldr	r3, [pc, #468]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d018      	beq.n	8006180 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800614e:	4b72      	ldr	r3, [pc, #456]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0203 	and.w	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d10d      	bne.n	800617a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
       ||
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006166:	4b6c      	ldr	r3, [pc, #432]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
       ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d047      	beq.n	800620a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	73fb      	strb	r3, [r7, #15]
 800617e:	e044      	b.n	800620a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d018      	beq.n	80061ba <RCCEx_PLLSAI1_Config+0x86>
 8006188:	2b03      	cmp	r3, #3
 800618a:	d825      	bhi.n	80061d8 <RCCEx_PLLSAI1_Config+0xa4>
 800618c:	2b01      	cmp	r3, #1
 800618e:	d002      	beq.n	8006196 <RCCEx_PLLSAI1_Config+0x62>
 8006190:	2b02      	cmp	r3, #2
 8006192:	d009      	beq.n	80061a8 <RCCEx_PLLSAI1_Config+0x74>
 8006194:	e020      	b.n	80061d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006196:	4b60      	ldr	r3, [pc, #384]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11d      	bne.n	80061de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a6:	e01a      	b.n	80061de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d116      	bne.n	80061e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061b8:	e013      	b.n	80061e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061ba:	4b57      	ldr	r3, [pc, #348]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10f      	bne.n	80061e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061c6:	4b54      	ldr	r3, [pc, #336]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061d6:	e006      	b.n	80061e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e004      	b.n	80061e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80061e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6819      	ldr	r1, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	430b      	orrs	r3, r1
 8006204:	4944      	ldr	r1, [pc, #272]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006206:	4313      	orrs	r3, r2
 8006208:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d17d      	bne.n	800630c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006210:	4b41      	ldr	r3, [pc, #260]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a40      	ldr	r2, [pc, #256]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006216:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800621a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800621c:	f7fc f8dc 	bl	80023d8 <HAL_GetTick>
 8006220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006222:	e009      	b.n	8006238 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006224:	f7fc f8d8 	bl	80023d8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d902      	bls.n	8006238 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	73fb      	strb	r3, [r7, #15]
        break;
 8006236:	e005      	b.n	8006244 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006238:	4b37      	ldr	r3, [pc, #220]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1ef      	bne.n	8006224 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d160      	bne.n	800630c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d111      	bne.n	8006274 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006250:	4b31      	ldr	r3, [pc, #196]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6892      	ldr	r2, [r2, #8]
 8006260:	0211      	lsls	r1, r2, #8
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	68d2      	ldr	r2, [r2, #12]
 8006266:	0912      	lsrs	r2, r2, #4
 8006268:	0452      	lsls	r2, r2, #17
 800626a:	430a      	orrs	r2, r1
 800626c:	492a      	ldr	r1, [pc, #168]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	610b      	str	r3, [r1, #16]
 8006272:	e027      	b.n	80062c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d112      	bne.n	80062a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800627a:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006282:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6892      	ldr	r2, [r2, #8]
 800628a:	0211      	lsls	r1, r2, #8
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6912      	ldr	r2, [r2, #16]
 8006290:	0852      	lsrs	r2, r2, #1
 8006292:	3a01      	subs	r2, #1
 8006294:	0552      	lsls	r2, r2, #21
 8006296:	430a      	orrs	r2, r1
 8006298:	491f      	ldr	r1, [pc, #124]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	610b      	str	r3, [r1, #16]
 800629e:	e011      	b.n	80062c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80062a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6892      	ldr	r2, [r2, #8]
 80062b0:	0211      	lsls	r1, r2, #8
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6952      	ldr	r2, [r2, #20]
 80062b6:	0852      	lsrs	r2, r2, #1
 80062b8:	3a01      	subs	r2, #1
 80062ba:	0652      	lsls	r2, r2, #25
 80062bc:	430a      	orrs	r2, r1
 80062be:	4916      	ldr	r1, [pc, #88]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80062c4:	4b14      	ldr	r3, [pc, #80]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a13      	ldr	r2, [pc, #76]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc f882 	bl	80023d8 <HAL_GetTick>
 80062d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062d6:	e009      	b.n	80062ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062d8:	f7fc f87e 	bl	80023d8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d902      	bls.n	80062ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	73fb      	strb	r3, [r7, #15]
          break;
 80062ea:	e005      	b.n	80062f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ef      	beq.n	80062d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80062fe:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4904      	ldr	r1, [pc, #16]	@ (8006318 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006308:	4313      	orrs	r3, r2
 800630a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40021000 	.word	0x40021000

0800631c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800632a:	4b6a      	ldr	r3, [pc, #424]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d018      	beq.n	8006368 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006336:	4b67      	ldr	r3, [pc, #412]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0203 	and.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d10d      	bne.n	8006362 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
       ||
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800634e:	4b61      	ldr	r3, [pc, #388]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	091b      	lsrs	r3, r3, #4
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
       ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d047      	beq.n	80063f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	73fb      	strb	r3, [r7, #15]
 8006366:	e044      	b.n	80063f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d018      	beq.n	80063a2 <RCCEx_PLLSAI2_Config+0x86>
 8006370:	2b03      	cmp	r3, #3
 8006372:	d825      	bhi.n	80063c0 <RCCEx_PLLSAI2_Config+0xa4>
 8006374:	2b01      	cmp	r3, #1
 8006376:	d002      	beq.n	800637e <RCCEx_PLLSAI2_Config+0x62>
 8006378:	2b02      	cmp	r3, #2
 800637a:	d009      	beq.n	8006390 <RCCEx_PLLSAI2_Config+0x74>
 800637c:	e020      	b.n	80063c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800637e:	4b55      	ldr	r3, [pc, #340]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d11d      	bne.n	80063c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800638e:	e01a      	b.n	80063c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006390:	4b50      	ldr	r3, [pc, #320]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006398:	2b00      	cmp	r3, #0
 800639a:	d116      	bne.n	80063ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a0:	e013      	b.n	80063ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063a2:	4b4c      	ldr	r3, [pc, #304]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063ae:	4b49      	ldr	r3, [pc, #292]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063be:	e006      	b.n	80063ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      break;
 80063c4:	e004      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063c6:	bf00      	nop
 80063c8:	e002      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80063ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063d6:	4b3f      	ldr	r3, [pc, #252]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6819      	ldr	r1, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	430b      	orrs	r3, r1
 80063ec:	4939      	ldr	r1, [pc, #228]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d167      	bne.n	80064c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80063f8:	4b36      	ldr	r3, [pc, #216]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a35      	ldr	r2, [pc, #212]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006404:	f7fb ffe8 	bl	80023d8 <HAL_GetTick>
 8006408:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800640a:	e009      	b.n	8006420 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800640c:	f7fb ffe4 	bl	80023d8 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d902      	bls.n	8006420 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	73fb      	strb	r3, [r7, #15]
        break;
 800641e:	e005      	b.n	800642c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006420:	4b2c      	ldr	r3, [pc, #176]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1ef      	bne.n	800640c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d14a      	bne.n	80064c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d111      	bne.n	800645c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006438:	4b26      	ldr	r3, [pc, #152]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6892      	ldr	r2, [r2, #8]
 8006448:	0211      	lsls	r1, r2, #8
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	68d2      	ldr	r2, [r2, #12]
 800644e:	0912      	lsrs	r2, r2, #4
 8006450:	0452      	lsls	r2, r2, #17
 8006452:	430a      	orrs	r2, r1
 8006454:	491f      	ldr	r1, [pc, #124]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006456:	4313      	orrs	r3, r2
 8006458:	614b      	str	r3, [r1, #20]
 800645a:	e011      	b.n	8006480 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800645c:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006464:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	0211      	lsls	r1, r2, #8
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6912      	ldr	r2, [r2, #16]
 8006472:	0852      	lsrs	r2, r2, #1
 8006474:	3a01      	subs	r2, #1
 8006476:	0652      	lsls	r2, r2, #25
 8006478:	430a      	orrs	r2, r1
 800647a:	4916      	ldr	r1, [pc, #88]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800647c:	4313      	orrs	r3, r2
 800647e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006480:	4b14      	ldr	r3, [pc, #80]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fb ffa4 	bl	80023d8 <HAL_GetTick>
 8006490:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006492:	e009      	b.n	80064a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006494:	f7fb ffa0 	bl	80023d8 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d902      	bls.n	80064a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	73fb      	strb	r3, [r7, #15]
          break;
 80064a6:	e005      	b.n	80064b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80064a8:	4b0a      	ldr	r3, [pc, #40]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0ef      	beq.n	8006494 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80064ba:	4b06      	ldr	r3, [pc, #24]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	4904      	ldr	r1, [pc, #16]	@ (80064d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000

080064d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e049      	b.n	800657e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f841 	bl	8006586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f000 f9e0 	bl	80068dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d001      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e04f      	b.n	8006654 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <HAL_TIM_Base_Start_IT+0xc4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01d      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065de:	d018      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006664 <HAL_TIM_Base_Start_IT+0xc8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_TIM_Base_Start_IT+0xcc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	@ (800666c <HAL_TIM_Base_Start_IT+0xd0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_TIM_Base_Start_IT+0xd4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIM_Base_Start_IT+0x76>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a19      	ldr	r2, [pc, #100]	@ (8006674 <HAL_TIM_Base_Start_IT+0xd8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d115      	bne.n	800663e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	4b17      	ldr	r3, [pc, #92]	@ (8006678 <HAL_TIM_Base_Start_IT+0xdc>)
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b06      	cmp	r3, #6
 8006622:	d015      	beq.n	8006650 <HAL_TIM_Base_Start_IT+0xb4>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662a:	d011      	beq.n	8006650 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	e008      	b.n	8006650 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e000      	b.n	8006652 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40013400 	.word	0x40013400
 8006674:	40014000 	.word	0x40014000
 8006678:	00010007 	.word	0x00010007

0800667c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d020      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0202 	mvn.w	r2, #2
 80066b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8e9 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8db 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8ec 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d020      	beq.n	800672c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0204 	mvn.w	r2, #4
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f8c3 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8b5 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f8c6 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01b      	beq.n	8006778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0208 	mvn.w	r2, #8
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2204      	movs	r2, #4
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f89d 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f88f 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f8a0 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0210 	mvn.w	r2, #16
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2208      	movs	r2, #8
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f877 	bl	800689e <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f869 	bl	800688a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f87a 	bl	80068b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0201 	mvn.w	r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fa ffae 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f913 	bl	8006a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f90b 	bl	8006a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f834 	bl	80068c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00c      	beq.n	8006882 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0220 	mvn.w	r2, #32
 800687a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8d3 	bl	8006a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a46      	ldr	r2, [pc, #280]	@ (8006a08 <TIM_Base_SetConfig+0x12c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d013      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fa:	d00f      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a43      	ldr	r2, [pc, #268]	@ (8006a0c <TIM_Base_SetConfig+0x130>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00b      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a42      	ldr	r2, [pc, #264]	@ (8006a10 <TIM_Base_SetConfig+0x134>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d007      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a41      	ldr	r2, [pc, #260]	@ (8006a14 <TIM_Base_SetConfig+0x138>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a40      	ldr	r2, [pc, #256]	@ (8006a18 <TIM_Base_SetConfig+0x13c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a35      	ldr	r2, [pc, #212]	@ (8006a08 <TIM_Base_SetConfig+0x12c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01f      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693c:	d01b      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a32      	ldr	r2, [pc, #200]	@ (8006a0c <TIM_Base_SetConfig+0x130>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d017      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a31      	ldr	r2, [pc, #196]	@ (8006a10 <TIM_Base_SetConfig+0x134>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a30      	ldr	r2, [pc, #192]	@ (8006a14 <TIM_Base_SetConfig+0x138>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00f      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2f      	ldr	r2, [pc, #188]	@ (8006a18 <TIM_Base_SetConfig+0x13c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00b      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2e      	ldr	r2, [pc, #184]	@ (8006a1c <TIM_Base_SetConfig+0x140>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d007      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2d      	ldr	r2, [pc, #180]	@ (8006a20 <TIM_Base_SetConfig+0x144>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2c      	ldr	r2, [pc, #176]	@ (8006a24 <TIM_Base_SetConfig+0x148>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a16      	ldr	r2, [pc, #88]	@ (8006a08 <TIM_Base_SetConfig+0x12c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a18      	ldr	r2, [pc, #96]	@ (8006a18 <TIM_Base_SetConfig+0x13c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a17      	ldr	r2, [pc, #92]	@ (8006a1c <TIM_Base_SetConfig+0x140>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <TIM_Base_SetConfig+0x144>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0xf8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <TIM_Base_SetConfig+0x148>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d105      	bne.n	80069fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	611a      	str	r2, [r3, #16]
  }
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40013400 	.word	0x40013400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800

08006a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e040      	b.n	8006af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fb fafe 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2224      	movs	r2, #36	@ 0x24
 8006a90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fedc 	bl	8007868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fc21 	bl	80072f8 <UART_SetConfig>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e01b      	b.n	8006af8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 ff5b 	bl	80079ac <UART_CheckIdleState>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d177      	bne.n	8006c08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_UART_Transmit+0x24>
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e070      	b.n	8006c0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2221      	movs	r2, #33	@ 0x21
 8006b34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b36:	f7fb fc4f 	bl	80023d8 <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b54:	d108      	bne.n	8006b68 <HAL_UART_Transmit+0x68>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e003      	b.n	8006b70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b70:	e02f      	b.n	8006bd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	@ 0x80
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 ffbd 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e03b      	b.n	8006c0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	3302      	adds	r3, #2
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	e007      	b.n	8006bc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1c9      	bne.n	8006b72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2200      	movs	r2, #0
 8006be6:	2140      	movs	r1, #64	@ 0x40
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 ff87 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e005      	b.n	8006c0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e000      	b.n	8006c0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006c08:	2302      	movs	r3, #2
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	@ 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d137      	bne.n	8006c9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_UART_Receive_IT+0x24>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e030      	b.n	8006c9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_UART_Receive_IT+0x94>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01f      	beq.n	8006c8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d018      	beq.n	8006c8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	613b      	str	r3, [r7, #16]
   return(result);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	623b      	str	r3, [r7, #32]
 8006c7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	69f9      	ldr	r1, [r7, #28]
 8006c7e:	6a3a      	ldr	r2, [r7, #32]
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e6      	bne.n	8006c5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 ffa0 	bl	8007bd8 <UART_Start_Receive_IT>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	e000      	b.n	8006c9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	@ 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40008000 	.word	0x40008000

08006cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b0ba      	sub	sp, #232	@ 0xe8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006cd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006cda:	4013      	ands	r3, r2
 8006cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d115      	bne.n	8006d14 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00f      	beq.n	8006d14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 82ca 	beq.w	800729e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
      }
      return;
 8006d12:	e2c4      	b.n	800729e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8117 	beq.w	8006f4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d2e:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_UART_IRQHandler+0x298>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 810a 	beq.w	8006f4c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d011      	beq.n	8006d68 <HAL_UART_IRQHandler+0xbc>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2201      	movs	r2, #1
 8006d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d011      	beq.n	8006d98 <HAL_UART_IRQHandler+0xec>
 8006d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2202      	movs	r2, #2
 8006d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d8e:	f043 0204 	orr.w	r2, r3, #4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x11c>
 8006da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2204      	movs	r2, #4
 8006db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dbe:	f043 0202 	orr.w	r2, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d017      	beq.n	8006e04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d105      	bne.n	8006dec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dfa:	f043 0208 	orr.w	r2, r3, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d012      	beq.n	8006e36 <HAL_UART_IRQHandler+0x18a>
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 8230 	beq.w	80072a2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00d      	beq.n	8006e6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d005      	beq.n	8006e8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d04f      	beq.n	8006f2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 ff68 	bl	8007d64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	d141      	bne.n	8006f26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ece:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1d9      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d013      	beq.n	8006f1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006efa:	4a13      	ldr	r2, [pc, #76]	@ (8006f48 <HAL_UART_IRQHandler+0x29c>)
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fc ff54 	bl	8003db0 <HAL_DMA_Abort_IT>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d017      	beq.n	8006f3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	e00f      	b.n	8006f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9d4 	bl	80072cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f24:	e00b      	b.n	8006f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f9d0 	bl	80072cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	e007      	b.n	8006f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9cc 	bl	80072cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006f3c:	e1b1      	b.n	80072a2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3e:	bf00      	nop
    return;
 8006f40:	e1af      	b.n	80072a2 <HAL_UART_IRQHandler+0x5f6>
 8006f42:	bf00      	nop
 8006f44:	04000120 	.word	0x04000120
 8006f48:	08007e2d 	.word	0x08007e2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	f040 816a 	bne.w	800722a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8163 	beq.w	800722a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 815c 	beq.w	800722a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b40      	cmp	r3, #64	@ 0x40
 8006f86:	f040 80d4 	bne.w	8007132 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80ad 	beq.w	80070fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006faa:	429a      	cmp	r2, r3
 8006fac:	f080 80a5 	bcs.w	80070fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f040 8086 	bne.w	80070d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ffa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007002:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800700e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1da      	bne.n	8006fcc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800703a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800703e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007042:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800704c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e1      	bne.n	8007016 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800707c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e3      	bne.n	8007052 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070a8:	f023 0310 	bic.w	r3, r3, #16
 80070ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e4      	bne.n	8007098 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fc fe2e 	bl	8003d34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f8f4 	bl	80072e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80070f8:	e0d5      	b.n	80072a6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007100:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007104:	429a      	cmp	r2, r3
 8007106:	f040 80ce 	bne.w	80072a6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b20      	cmp	r3, #32
 8007118:	f040 80c5 	bne.w	80072a6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8d8 	bl	80072e0 <HAL_UARTEx_RxEventCallback>
      return;
 8007130:	e0b9      	b.n	80072a6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800713e:	b29b      	uxth	r3, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80ab 	beq.w	80072aa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a6 	beq.w	80072aa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e4      	bne.n	800715e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	623b      	str	r3, [r7, #32]
   return(result);
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f023 0301 	bic.w	r3, r3, #1
 80071aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80071ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e3      	bne.n	8007194 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f023 0310 	bic.w	r3, r3, #16
 80071f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	617b      	str	r3, [r7, #20]
   return(result);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e4      	bne.n	80071e0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800721c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f85c 	bl	80072e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007228:	e03f      	b.n	80072aa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800722e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00e      	beq.n	8007254 <HAL_UART_IRQHandler+0x5a8>
 8007236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d008      	beq.n	8007254 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800724a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 ffe9 	bl	8008224 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007252:	e02d      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01c      	beq.n	80072ae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
    }
    return;
 800727c:	e017      	b.n	80072ae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <HAL_UART_IRQHandler+0x604>
 800728a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800728e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00c      	beq.n	80072b0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fdde 	bl	8007e58 <UART_EndTransmit_IT>
    return;
 800729c:	e008      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
      return;
 800729e:	bf00      	nop
 80072a0:	e006      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
    return;
 80072a2:	bf00      	nop
 80072a4:	e004      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
      return;
 80072a6:	bf00      	nop
 80072a8:	e002      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
      return;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <HAL_UART_IRQHandler+0x604>
    return;
 80072ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072b0:	37e8      	adds	r7, #232	@ 0xe8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop

080072b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072fc:	b08a      	sub	sp, #40	@ 0x28
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	431a      	orrs	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	431a      	orrs	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4313      	orrs	r3, r2
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4ba4      	ldr	r3, [pc, #656]	@ (80075b8 <UART_SetConfig+0x2c0>)
 8007328:	4013      	ands	r3, r2
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007330:	430b      	orrs	r3, r1
 8007332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a99      	ldr	r2, [pc, #612]	@ (80075bc <UART_SetConfig+0x2c4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007360:	4313      	orrs	r3, r2
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	430a      	orrs	r2, r1
 8007376:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a90      	ldr	r2, [pc, #576]	@ (80075c0 <UART_SetConfig+0x2c8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d126      	bne.n	80073d0 <UART_SetConfig+0xd8>
 8007382:	4b90      	ldr	r3, [pc, #576]	@ (80075c4 <UART_SetConfig+0x2cc>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	2b03      	cmp	r3, #3
 800738e:	d81b      	bhi.n	80073c8 <UART_SetConfig+0xd0>
 8007390:	a201      	add	r2, pc, #4	@ (adr r2, 8007398 <UART_SetConfig+0xa0>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073c1 	.word	0x080073c1
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ae:	e116      	b.n	80075de <UART_SetConfig+0x2e6>
 80073b0:	2302      	movs	r3, #2
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073b6:	e112      	b.n	80075de <UART_SetConfig+0x2e6>
 80073b8:	2304      	movs	r3, #4
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073be:	e10e      	b.n	80075de <UART_SetConfig+0x2e6>
 80073c0:	2308      	movs	r3, #8
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073c6:	e10a      	b.n	80075de <UART_SetConfig+0x2e6>
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073ce:	e106      	b.n	80075de <UART_SetConfig+0x2e6>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a7c      	ldr	r2, [pc, #496]	@ (80075c8 <UART_SetConfig+0x2d0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d138      	bne.n	800744c <UART_SetConfig+0x154>
 80073da:	4b7a      	ldr	r3, [pc, #488]	@ (80075c4 <UART_SetConfig+0x2cc>)
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e0:	f003 030c 	and.w	r3, r3, #12
 80073e4:	2b0c      	cmp	r3, #12
 80073e6:	d82d      	bhi.n	8007444 <UART_SetConfig+0x14c>
 80073e8:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <UART_SetConfig+0xf8>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007425 	.word	0x08007425
 80073f4:	08007445 	.word	0x08007445
 80073f8:	08007445 	.word	0x08007445
 80073fc:	08007445 	.word	0x08007445
 8007400:	08007435 	.word	0x08007435
 8007404:	08007445 	.word	0x08007445
 8007408:	08007445 	.word	0x08007445
 800740c:	08007445 	.word	0x08007445
 8007410:	0800742d 	.word	0x0800742d
 8007414:	08007445 	.word	0x08007445
 8007418:	08007445 	.word	0x08007445
 800741c:	08007445 	.word	0x08007445
 8007420:	0800743d 	.word	0x0800743d
 8007424:	2300      	movs	r3, #0
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742a:	e0d8      	b.n	80075de <UART_SetConfig+0x2e6>
 800742c:	2302      	movs	r3, #2
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007432:	e0d4      	b.n	80075de <UART_SetConfig+0x2e6>
 8007434:	2304      	movs	r3, #4
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743a:	e0d0      	b.n	80075de <UART_SetConfig+0x2e6>
 800743c:	2308      	movs	r3, #8
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007442:	e0cc      	b.n	80075de <UART_SetConfig+0x2e6>
 8007444:	2310      	movs	r3, #16
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800744a:	e0c8      	b.n	80075de <UART_SetConfig+0x2e6>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a5e      	ldr	r2, [pc, #376]	@ (80075cc <UART_SetConfig+0x2d4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d125      	bne.n	80074a2 <UART_SetConfig+0x1aa>
 8007456:	4b5b      	ldr	r3, [pc, #364]	@ (80075c4 <UART_SetConfig+0x2cc>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007460:	2b30      	cmp	r3, #48	@ 0x30
 8007462:	d016      	beq.n	8007492 <UART_SetConfig+0x19a>
 8007464:	2b30      	cmp	r3, #48	@ 0x30
 8007466:	d818      	bhi.n	800749a <UART_SetConfig+0x1a2>
 8007468:	2b20      	cmp	r3, #32
 800746a:	d00a      	beq.n	8007482 <UART_SetConfig+0x18a>
 800746c:	2b20      	cmp	r3, #32
 800746e:	d814      	bhi.n	800749a <UART_SetConfig+0x1a2>
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <UART_SetConfig+0x182>
 8007474:	2b10      	cmp	r3, #16
 8007476:	d008      	beq.n	800748a <UART_SetConfig+0x192>
 8007478:	e00f      	b.n	800749a <UART_SetConfig+0x1a2>
 800747a:	2300      	movs	r3, #0
 800747c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007480:	e0ad      	b.n	80075de <UART_SetConfig+0x2e6>
 8007482:	2302      	movs	r3, #2
 8007484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007488:	e0a9      	b.n	80075de <UART_SetConfig+0x2e6>
 800748a:	2304      	movs	r3, #4
 800748c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007490:	e0a5      	b.n	80075de <UART_SetConfig+0x2e6>
 8007492:	2308      	movs	r3, #8
 8007494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007498:	e0a1      	b.n	80075de <UART_SetConfig+0x2e6>
 800749a:	2310      	movs	r3, #16
 800749c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a0:	e09d      	b.n	80075de <UART_SetConfig+0x2e6>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a4a      	ldr	r2, [pc, #296]	@ (80075d0 <UART_SetConfig+0x2d8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d125      	bne.n	80074f8 <UART_SetConfig+0x200>
 80074ac:	4b45      	ldr	r3, [pc, #276]	@ (80075c4 <UART_SetConfig+0x2cc>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80074b8:	d016      	beq.n	80074e8 <UART_SetConfig+0x1f0>
 80074ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80074bc:	d818      	bhi.n	80074f0 <UART_SetConfig+0x1f8>
 80074be:	2b80      	cmp	r3, #128	@ 0x80
 80074c0:	d00a      	beq.n	80074d8 <UART_SetConfig+0x1e0>
 80074c2:	2b80      	cmp	r3, #128	@ 0x80
 80074c4:	d814      	bhi.n	80074f0 <UART_SetConfig+0x1f8>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <UART_SetConfig+0x1d8>
 80074ca:	2b40      	cmp	r3, #64	@ 0x40
 80074cc:	d008      	beq.n	80074e0 <UART_SetConfig+0x1e8>
 80074ce:	e00f      	b.n	80074f0 <UART_SetConfig+0x1f8>
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d6:	e082      	b.n	80075de <UART_SetConfig+0x2e6>
 80074d8:	2302      	movs	r3, #2
 80074da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074de:	e07e      	b.n	80075de <UART_SetConfig+0x2e6>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e6:	e07a      	b.n	80075de <UART_SetConfig+0x2e6>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ee:	e076      	b.n	80075de <UART_SetConfig+0x2e6>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f6:	e072      	b.n	80075de <UART_SetConfig+0x2e6>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a35      	ldr	r2, [pc, #212]	@ (80075d4 <UART_SetConfig+0x2dc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d12a      	bne.n	8007558 <UART_SetConfig+0x260>
 8007502:	4b30      	ldr	r3, [pc, #192]	@ (80075c4 <UART_SetConfig+0x2cc>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800750c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007510:	d01a      	beq.n	8007548 <UART_SetConfig+0x250>
 8007512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007516:	d81b      	bhi.n	8007550 <UART_SetConfig+0x258>
 8007518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751c:	d00c      	beq.n	8007538 <UART_SetConfig+0x240>
 800751e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007522:	d815      	bhi.n	8007550 <UART_SetConfig+0x258>
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <UART_SetConfig+0x238>
 8007528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800752c:	d008      	beq.n	8007540 <UART_SetConfig+0x248>
 800752e:	e00f      	b.n	8007550 <UART_SetConfig+0x258>
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007536:	e052      	b.n	80075de <UART_SetConfig+0x2e6>
 8007538:	2302      	movs	r3, #2
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753e:	e04e      	b.n	80075de <UART_SetConfig+0x2e6>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007546:	e04a      	b.n	80075de <UART_SetConfig+0x2e6>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754e:	e046      	b.n	80075de <UART_SetConfig+0x2e6>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007556:	e042      	b.n	80075de <UART_SetConfig+0x2e6>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	@ (80075bc <UART_SetConfig+0x2c4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d13a      	bne.n	80075d8 <UART_SetConfig+0x2e0>
 8007562:	4b18      	ldr	r3, [pc, #96]	@ (80075c4 <UART_SetConfig+0x2cc>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007568:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800756c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007570:	d01a      	beq.n	80075a8 <UART_SetConfig+0x2b0>
 8007572:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007576:	d81b      	bhi.n	80075b0 <UART_SetConfig+0x2b8>
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800757c:	d00c      	beq.n	8007598 <UART_SetConfig+0x2a0>
 800757e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007582:	d815      	bhi.n	80075b0 <UART_SetConfig+0x2b8>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <UART_SetConfig+0x298>
 8007588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758c:	d008      	beq.n	80075a0 <UART_SetConfig+0x2a8>
 800758e:	e00f      	b.n	80075b0 <UART_SetConfig+0x2b8>
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007596:	e022      	b.n	80075de <UART_SetConfig+0x2e6>
 8007598:	2302      	movs	r3, #2
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759e:	e01e      	b.n	80075de <UART_SetConfig+0x2e6>
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a6:	e01a      	b.n	80075de <UART_SetConfig+0x2e6>
 80075a8:	2308      	movs	r3, #8
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ae:	e016      	b.n	80075de <UART_SetConfig+0x2e6>
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b6:	e012      	b.n	80075de <UART_SetConfig+0x2e6>
 80075b8:	efff69f3 	.word	0xefff69f3
 80075bc:	40008000 	.word	0x40008000
 80075c0:	40013800 	.word	0x40013800
 80075c4:	40021000 	.word	0x40021000
 80075c8:	40004400 	.word	0x40004400
 80075cc:	40004800 	.word	0x40004800
 80075d0:	40004c00 	.word	0x40004c00
 80075d4:	40005000 	.word	0x40005000
 80075d8:	2310      	movs	r3, #16
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a9f      	ldr	r2, [pc, #636]	@ (8007860 <UART_SetConfig+0x568>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d17a      	bne.n	80076de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d824      	bhi.n	800763a <UART_SetConfig+0x342>
 80075f0:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <UART_SetConfig+0x300>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	0800763b 	.word	0x0800763b
 8007600:	08007625 	.word	0x08007625
 8007604:	0800763b 	.word	0x0800763b
 8007608:	0800762b 	.word	0x0800762b
 800760c:	0800763b 	.word	0x0800763b
 8007610:	0800763b 	.word	0x0800763b
 8007614:	0800763b 	.word	0x0800763b
 8007618:	08007633 	.word	0x08007633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800761c:	f7fe f9e2 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007620:	61f8      	str	r0, [r7, #28]
        break;
 8007622:	e010      	b.n	8007646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007624:	4b8f      	ldr	r3, [pc, #572]	@ (8007864 <UART_SetConfig+0x56c>)
 8007626:	61fb      	str	r3, [r7, #28]
        break;
 8007628:	e00d      	b.n	8007646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762a:	f7fe f943 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 800762e:	61f8      	str	r0, [r7, #28]
        break;
 8007630:	e009      	b.n	8007646 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007636:	61fb      	str	r3, [r7, #28]
        break;
 8007638:	e005      	b.n	8007646 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80fb 	beq.w	8007844 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	429a      	cmp	r2, r3
 800765c:	d305      	bcc.n	800766a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007670:	e0e8      	b.n	8007844 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2200      	movs	r2, #0
 8007676:	461c      	mov	r4, r3
 8007678:	4615      	mov	r5, r2
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	022b      	lsls	r3, r5, #8
 8007684:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007688:	0222      	lsls	r2, r4, #8
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	6849      	ldr	r1, [r1, #4]
 800768e:	0849      	lsrs	r1, r1, #1
 8007690:	2000      	movs	r0, #0
 8007692:	4688      	mov	r8, r1
 8007694:	4681      	mov	r9, r0
 8007696:	eb12 0a08 	adds.w	sl, r2, r8
 800769a:	eb43 0b09 	adc.w	fp, r3, r9
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076ac:	4650      	mov	r0, sl
 80076ae:	4659      	mov	r1, fp
 80076b0:	f7f9 faea 	bl	8000c88 <__aeabi_uldivmod>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4613      	mov	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076c2:	d308      	bcc.n	80076d6 <UART_SetConfig+0x3de>
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ca:	d204      	bcs.n	80076d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	60da      	str	r2, [r3, #12]
 80076d4:	e0b6      	b.n	8007844 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076dc:	e0b2      	b.n	8007844 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e6:	d15e      	bne.n	80077a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80076e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d828      	bhi.n	8007742 <UART_SetConfig+0x44a>
 80076f0:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <UART_SetConfig+0x400>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007725 	.word	0x08007725
 8007700:	0800772d 	.word	0x0800772d
 8007704:	08007743 	.word	0x08007743
 8007708:	08007733 	.word	0x08007733
 800770c:	08007743 	.word	0x08007743
 8007710:	08007743 	.word	0x08007743
 8007714:	08007743 	.word	0x08007743
 8007718:	0800773b 	.word	0x0800773b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800771c:	f7fe f962 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007720:	61f8      	str	r0, [r7, #28]
        break;
 8007722:	e014      	b.n	800774e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007724:	f7fe f974 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8007728:	61f8      	str	r0, [r7, #28]
        break;
 800772a:	e010      	b.n	800774e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800772c:	4b4d      	ldr	r3, [pc, #308]	@ (8007864 <UART_SetConfig+0x56c>)
 800772e:	61fb      	str	r3, [r7, #28]
        break;
 8007730:	e00d      	b.n	800774e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007732:	f7fe f8bf 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8007736:	61f8      	str	r0, [r7, #28]
        break;
 8007738:	e009      	b.n	800774e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800773e:	61fb      	str	r3, [r7, #28]
        break;
 8007740:	e005      	b.n	800774e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800774c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d077      	beq.n	8007844 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	005a      	lsls	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	441a      	add	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d916      	bls.n	800779e <UART_SetConfig+0x4a6>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007776:	d212      	bcs.n	800779e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	b29b      	uxth	r3, r3
 800777c:	f023 030f 	bic.w	r3, r3, #15
 8007780:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	085b      	lsrs	r3, r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	b29a      	uxth	r2, r3
 800778e:	8afb      	ldrh	r3, [r7, #22]
 8007790:	4313      	orrs	r3, r2
 8007792:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	8afa      	ldrh	r2, [r7, #22]
 800779a:	60da      	str	r2, [r3, #12]
 800779c:	e052      	b.n	8007844 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077a4:	e04e      	b.n	8007844 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d827      	bhi.n	80077fe <UART_SetConfig+0x506>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <UART_SetConfig+0x4bc>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	080077ff 	.word	0x080077ff
 80077c4:	080077ef 	.word	0x080077ef
 80077c8:	080077ff 	.word	0x080077ff
 80077cc:	080077ff 	.word	0x080077ff
 80077d0:	080077ff 	.word	0x080077ff
 80077d4:	080077f7 	.word	0x080077f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077d8:	f7fe f904 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 80077dc:	61f8      	str	r0, [r7, #28]
        break;
 80077de:	e014      	b.n	800780a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e0:	f7fe f916 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 80077e4:	61f8      	str	r0, [r7, #28]
        break;
 80077e6:	e010      	b.n	800780a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007864 <UART_SetConfig+0x56c>)
 80077ea:	61fb      	str	r3, [r7, #28]
        break;
 80077ec:	e00d      	b.n	800780a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ee:	f7fe f861 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 80077f2:	61f8      	str	r0, [r7, #28]
        break;
 80077f4:	e009      	b.n	800780a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077fa:	61fb      	str	r3, [r7, #28]
        break;
 80077fc:	e005      	b.n	800780a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007808:	bf00      	nop
    }

    if (pclk != 0U)
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d019      	beq.n	8007844 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	085a      	lsrs	r2, r3, #1
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007822:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d909      	bls.n	800783e <UART_SetConfig+0x546>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007830:	d205      	bcs.n	800783e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60da      	str	r2, [r3, #12]
 800783c:	e002      	b.n	8007844 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007850:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007854:	4618      	mov	r0, r3
 8007856:	3728      	adds	r7, #40	@ 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800785e:	bf00      	nop
 8007860:	40008000 	.word	0x40008000
 8007864:	00f42400 	.word	0x00f42400

08007868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01a      	beq.n	800797e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007966:	d10a      	bne.n	800797e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b098      	sub	sp, #96	@ 0x60
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079bc:	f7fa fd0c 	bl	80023d8 <HAL_GetTick>
 80079c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d12e      	bne.n	8007a2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d8:	2200      	movs	r2, #0
 80079da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f88c 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d021      	beq.n	8007a2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e6      	bne.n	80079ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e062      	b.n	8007af4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d149      	bne.n	8007ad0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a44:	2200      	movs	r2, #0
 8007a46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f856 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d03c      	beq.n	8007ad0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	623b      	str	r3, [r7, #32]
   return(result);
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e6      	bne.n	8007a56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aa8:	61fa      	str	r2, [r7, #28]
 8007aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	69b9      	ldr	r1, [r7, #24]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e5      	bne.n	8007a88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e011      	b.n	8007af4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3758      	adds	r7, #88	@ 0x58
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0c:	e04f      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d04b      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b16:	f7fa fc5f 	bl	80023d8 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e04e      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d037      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b80      	cmp	r3, #128	@ 0x80
 8007b42:	d034      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b40      	cmp	r3, #64	@ 0x40
 8007b48:	d031      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d110      	bne.n	8007b7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f8ff 	bl	8007d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2208      	movs	r2, #8
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e029      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b88:	d111      	bne.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f8e5 	bl	8007d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e00f      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2301      	moveq	r3, #1
 8007bc0:	2300      	movne	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d0a0      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b097      	sub	sp, #92	@ 0x5c
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0a:	d10e      	bne.n	8007c2a <UART_Start_Receive_IT+0x52>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <UART_Start_Receive_IT+0x48>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c1e:	e02d      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22ff      	movs	r2, #255	@ 0xff
 8007c24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c28:	e028      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10d      	bne.n	8007c4e <UART_Start_Receive_IT+0x76>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <UART_Start_Receive_IT+0x6c>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	22ff      	movs	r2, #255	@ 0xff
 8007c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c42:	e01b      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	227f      	movs	r2, #127	@ 0x7f
 8007c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c4c:	e016      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c56:	d10d      	bne.n	8007c74 <UART_Start_Receive_IT+0x9c>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <UART_Start_Receive_IT+0x92>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	227f      	movs	r2, #127	@ 0x7f
 8007c64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c68:	e008      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	223f      	movs	r2, #63	@ 0x3f
 8007c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c72:	e003      	b.n	8007c7c <UART_Start_Receive_IT+0xa4>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2222      	movs	r2, #34	@ 0x22
 8007c88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cac:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007cae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc8:	d107      	bne.n	8007cda <UART_Start_Receive_IT+0x102>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a21      	ldr	r2, [pc, #132]	@ (8007d5c <UART_Start_Receive_IT+0x184>)
 8007cd6:	669a      	str	r2, [r3, #104]	@ 0x68
 8007cd8:	e002      	b.n	8007ce0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4a20      	ldr	r2, [pc, #128]	@ (8007d60 <UART_Start_Receive_IT+0x188>)
 8007cde:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d019      	beq.n	8007d1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e6      	bne.n	8007ce8 <UART_Start_Receive_IT+0x110>
 8007d1a:	e018      	b.n	8007d4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f043 0320 	orr.w	r3, r3, #32
 8007d30:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d3a:	623b      	str	r3, [r7, #32]
 8007d3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69f9      	ldr	r1, [r7, #28]
 8007d40:	6a3a      	ldr	r2, [r7, #32]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	375c      	adds	r7, #92	@ 0x5c
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	08008069 	.word	0x08008069
 8007d60:	08007ead 	.word	0x08007ead

08007d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b095      	sub	sp, #84	@ 0x54
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d118      	bne.n	8007e0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f023 0310 	bic.w	r3, r3, #16
 8007dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6979      	ldr	r1, [r7, #20]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	613b      	str	r3, [r7, #16]
   return(result);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e6      	bne.n	8007dda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e20:	bf00      	nop
 8007e22:	3754      	adds	r7, #84	@ 0x54
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fa3e 	bl	80072cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6979      	ldr	r1, [r7, #20]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e6      	bne.n	8007e60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fa0a 	bl	80072b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea4:	bf00      	nop
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b09c      	sub	sp, #112	@ 0x70
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007eba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec4:	2b22      	cmp	r3, #34	@ 0x22
 8007ec6:	f040 80be 	bne.w	8008046 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ed0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ed4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ed8:	b2d9      	uxtb	r1, r3
 8007eda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee4:	400a      	ands	r2, r1
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 80a3 	bne.w	800805a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e5      	bne.n	8007f46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a34      	ldr	r2, [pc, #208]	@ (8008064 <UART_RxISR_8BIT+0x1b8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d01f      	beq.n	8007fd8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d018      	beq.n	8007fd8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fba:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d12e      	bne.n	800803e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008004:	61fb      	str	r3, [r7, #28]
 8008006:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	d103      	bne.n	800802e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2210      	movs	r2, #16
 800802c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff f952 	bl	80072e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800803c:	e00d      	b.n	800805a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7f8 ffd0 	bl	8000fe4 <HAL_UART_RxCpltCallback>
}
 8008044:	e009      	b.n	800805a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	8b1b      	ldrh	r3, [r3, #24]
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0208 	orr.w	r2, r2, #8
 8008056:	b292      	uxth	r2, r2
 8008058:	831a      	strh	r2, [r3, #24]
}
 800805a:	bf00      	nop
 800805c:	3770      	adds	r7, #112	@ 0x70
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40008000 	.word	0x40008000

08008068 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b09c      	sub	sp, #112	@ 0x70
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008076:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008080:	2b22      	cmp	r3, #34	@ 0x22
 8008082:	f040 80be 	bne.w	8008202 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800808c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008094:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008096:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800809a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800809e:	4013      	ands	r3, r2
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080aa:	1c9a      	adds	r2, r3, #2
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f040 80a3 	bne.w	8008216 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80080f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80080fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e6      	bne.n	80080d0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	663b      	str	r3, [r7, #96]	@ 0x60
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008122:	643a      	str	r2, [r7, #64]	@ 0x40
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a34      	ldr	r2, [pc, #208]	@ (8008220 <UART_RxISR_16BIT+0x1b8>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d01f      	beq.n	8008194 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d018      	beq.n	8008194 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008176:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008182:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e6      	bne.n	8008162 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008198:	2b01      	cmp	r3, #1
 800819a:	d12e      	bne.n	80081fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0310 	bic.w	r3, r3, #16
 80081b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	613b      	str	r3, [r7, #16]
   return(result);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e6      	bne.n	80081a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b10      	cmp	r3, #16
 80081e0:	d103      	bne.n	80081ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2210      	movs	r2, #16
 80081e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff f874 	bl	80072e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081f8:	e00d      	b.n	8008216 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7f8 fef2 	bl	8000fe4 <HAL_UART_RxCpltCallback>
}
 8008200:	e009      	b.n	8008216 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	8b1b      	ldrh	r3, [r3, #24]
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0208 	orr.w	r2, r2, #8
 8008212:	b292      	uxth	r2, r2
 8008214:	831a      	strh	r2, [r3, #24]
}
 8008216:	bf00      	nop
 8008218:	3770      	adds	r7, #112	@ 0x70
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40008000 	.word	0x40008000

08008224 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <__NVIC_SetPriority>:
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008248:	2b00      	cmp	r3, #0
 800824a:	db0a      	blt.n	8008262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	b2da      	uxtb	r2, r3
 8008250:	490c      	ldr	r1, [pc, #48]	@ (8008284 <__NVIC_SetPriority+0x4c>)
 8008252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008256:	0112      	lsls	r2, r2, #4
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	440b      	add	r3, r1
 800825c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008260:	e00a      	b.n	8008278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	4908      	ldr	r1, [pc, #32]	@ (8008288 <__NVIC_SetPriority+0x50>)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	3b04      	subs	r3, #4
 8008270:	0112      	lsls	r2, r2, #4
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	440b      	add	r3, r1
 8008276:	761a      	strb	r2, [r3, #24]
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	e000e100 	.word	0xe000e100
 8008288:	e000ed00 	.word	0xe000ed00

0800828c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008290:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <SysTick_Handler+0x1c>)
 8008292:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008294:	f001 fd46 	bl	8009d24 <xTaskGetSchedulerState>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d001      	beq.n	80082a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800829e:	f002 fb3b 	bl	800a918 <xPortSysTickHandler>
  }
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	e000e010 	.word	0xe000e010

080082ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80082b0:	2100      	movs	r1, #0
 80082b2:	f06f 0004 	mvn.w	r0, #4
 80082b6:	f7ff ffbf 	bl	8008238 <__NVIC_SetPriority>
#endif
}
 80082ba:	bf00      	nop
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c6:	f3ef 8305 	mrs	r3, IPSR
 80082ca:	603b      	str	r3, [r7, #0]
  return(result);
 80082cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e00c      	b.n	80082f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082da:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <osKernelInitialize+0x44>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082e2:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <osKernelInitialize+0x44>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	e002      	b.n	80082f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082f4:	687b      	ldr	r3, [r7, #4]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000534 	.word	0x20000534

08008308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800830e:	f3ef 8305 	mrs	r3, IPSR
 8008312:	603b      	str	r3, [r7, #0]
  return(result);
 8008314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <osKernelStart+0x1a>
    stat = osErrorISR;
 800831a:	f06f 0305 	mvn.w	r3, #5
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	e010      	b.n	8008344 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008322:	4b0b      	ldr	r3, [pc, #44]	@ (8008350 <osKernelStart+0x48>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d109      	bne.n	800833e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800832a:	f7ff ffbf 	bl	80082ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800832e:	4b08      	ldr	r3, [pc, #32]	@ (8008350 <osKernelStart+0x48>)
 8008330:	2202      	movs	r2, #2
 8008332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008334:	f001 f892 	bl	800945c <vTaskStartScheduler>
      stat = osOK;
 8008338:	2300      	movs	r3, #0
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	e002      	b.n	8008344 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800833e:	f04f 33ff 	mov.w	r3, #4294967295
 8008342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008344:	687b      	ldr	r3, [r7, #4]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000534 	.word	0x20000534

08008354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b08e      	sub	sp, #56	@ 0x38
 8008358:	af04      	add	r7, sp, #16
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008364:	f3ef 8305 	mrs	r3, IPSR
 8008368:	617b      	str	r3, [r7, #20]
  return(result);
 800836a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800836c:	2b00      	cmp	r3, #0
 800836e:	d17f      	bne.n	8008470 <osThreadNew+0x11c>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d07c      	beq.n	8008470 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800837a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800837c:	2318      	movs	r3, #24
 800837e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008384:	f04f 33ff 	mov.w	r3, #4294967295
 8008388:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d045      	beq.n	800841c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <osThreadNew+0x4a>
        name = attr->name;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <osThreadNew+0x70>
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b38      	cmp	r3, #56	@ 0x38
 80083b6:	d805      	bhi.n	80083c4 <osThreadNew+0x70>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <osThreadNew+0x74>
        return (NULL);
 80083c4:	2300      	movs	r3, #0
 80083c6:	e054      	b.n	8008472 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	089b      	lsrs	r3, r3, #2
 80083d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <osThreadNew+0xaa>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2ba7      	cmp	r3, #167	@ 0xa7
 80083e6:	d90a      	bls.n	80083fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d006      	beq.n	80083fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <osThreadNew+0xaa>
        mem = 1;
 80083f8:	2301      	movs	r3, #1
 80083fa:	61bb      	str	r3, [r7, #24]
 80083fc:	e010      	b.n	8008420 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10c      	bne.n	8008420 <osThreadNew+0xcc>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d108      	bne.n	8008420 <osThreadNew+0xcc>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d104      	bne.n	8008420 <osThreadNew+0xcc>
          mem = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	e001      	b.n	8008420 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d110      	bne.n	8008448 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800842e:	9202      	str	r2, [sp, #8]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6a3a      	ldr	r2, [r7, #32]
 800843a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fe19 	bl	8009074 <xTaskCreateStatic>
 8008442:	4603      	mov	r3, r0
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	e013      	b.n	8008470 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d110      	bne.n	8008470 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	b29a      	uxth	r2, r3
 8008452:	f107 0310 	add.w	r3, r7, #16
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fe67 	bl	8009134 <xTaskCreate>
 8008466:	4603      	mov	r3, r0
 8008468:	2b01      	cmp	r3, #1
 800846a:	d001      	beq.n	8008470 <osThreadNew+0x11c>
            hTask = NULL;
 800846c:	2300      	movs	r3, #0
 800846e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008470:	693b      	ldr	r3, [r7, #16]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3728      	adds	r7, #40	@ 0x28
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008482:	f3ef 8305 	mrs	r3, IPSR
 8008486:	60bb      	str	r3, [r7, #8]
  return(result);
 8008488:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <osDelay+0x1c>
    stat = osErrorISR;
 800848e:	f06f 0305 	mvn.w	r3, #5
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e007      	b.n	80084a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 ffa5 	bl	80093f0 <vTaskDelay>
    }
  }

  return (stat);
 80084a6:	68fb      	ldr	r3, [r7, #12]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a07      	ldr	r2, [pc, #28]	@ (80084dc <vApplicationGetIdleTaskMemory+0x2c>)
 80084c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4a06      	ldr	r2, [pc, #24]	@ (80084e0 <vApplicationGetIdleTaskMemory+0x30>)
 80084c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084ce:	601a      	str	r2, [r3, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000538 	.word	0x20000538
 80084e0:	200005e0 	.word	0x200005e0

080084e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a07      	ldr	r2, [pc, #28]	@ (8008510 <vApplicationGetTimerTaskMemory+0x2c>)
 80084f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a06      	ldr	r2, [pc, #24]	@ (8008514 <vApplicationGetTimerTaskMemory+0x30>)
 80084fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	200009e0 	.word	0x200009e0
 8008514:	20000a88 	.word	0x20000a88

08008518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0208 	add.w	r2, r3, #8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f04f 32ff 	mov.w	r2, #4294967295
 8008530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f103 0208 	add.w	r2, r3, #8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0208 	add.w	r2, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008566:	bf00      	nop
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d103      	bne.n	80085da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e00c      	b.n	80085f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3308      	adds	r3, #8
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e002      	b.n	80085e8 <vListInsert+0x2e>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d2f6      	bcs.n	80085e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6892      	ldr	r2, [r2, #8]
 8008642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6852      	ldr	r2, [r2, #4]
 800864c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d103      	bne.n	8008660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	1e5a      	subs	r2, r3, #1
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueGenericReset+0x2c>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60bb      	str	r3, [r7, #8]
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80086ac:	f002 f8a4 	bl	800a7f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	3b01      	subs	r3, #1
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	441a      	add	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	22ff      	movs	r2, #255	@ 0xff
 80086f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	22ff      	movs	r2, #255	@ 0xff
 80086f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d114      	bne.n	800872c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01a      	beq.n	8008740 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3310      	adds	r3, #16
 800870e:	4618      	mov	r0, r3
 8008710:	f001 f942 	bl	8009998 <xTaskRemoveFromEventList>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d012      	beq.n	8008740 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <xQueueGenericReset+0xd0>)
 800871c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	e009      	b.n	8008740 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3310      	adds	r3, #16
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fef1 	bl	8008518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3324      	adds	r3, #36	@ 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff feec 	bl	8008518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008740:	f002 f88c 	bl	800a85c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008744:	2301      	movs	r3, #1
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	@ 0x38
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <xQueueGenericCreateStatic+0x56>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <xQueueGenericCreateStatic+0x5a>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericCreateStatic+0x5c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	623b      	str	r3, [r7, #32]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <xQueueGenericCreateStatic+0x84>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <xQueueGenericCreateStatic+0x88>
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <xQueueGenericCreateStatic+0x8a>
 80087dc:	2300      	movs	r3, #0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61fb      	str	r3, [r7, #28]
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087fa:	2350      	movs	r3, #80	@ 0x50
 80087fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b50      	cmp	r3, #80	@ 0x50
 8008802:	d00b      	beq.n	800881c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	61bb      	str	r3, [r7, #24]
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	e7fd      	b.n	8008818 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800881c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008830:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f805 	bl	800884e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008846:	4618      	mov	r0, r3
 8008848:	3730      	adds	r7, #48	@ 0x30
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
 800885a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e002      	b.n	8008870 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800887c:	2101      	movs	r1, #1
 800887e:	69b8      	ldr	r0, [r7, #24]
 8008880:	f7ff fefe 	bl	8008680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	@ 0x38
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088a2:	2300      	movs	r3, #0
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <xQueueGenericSend+0x34>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <xQueueGenericSend+0x42>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <xQueueGenericSend+0x46>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <xQueueGenericSend+0x48>
 80088da:	2300      	movs	r3, #0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <xQueueGenericSend+0x64>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d103      	bne.n	8008906 <xQueueGenericSend+0x72>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <xQueueGenericSend+0x76>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <xQueueGenericSend+0x78>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10b      	bne.n	8008928 <xQueueGenericSend+0x94>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	623b      	str	r3, [r7, #32]
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008928:	f001 f9fc 	bl	8009d24 <xTaskGetSchedulerState>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <xQueueGenericSend+0xa4>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <xQueueGenericSend+0xa8>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <xQueueGenericSend+0xaa>
 800893c:	2300      	movs	r3, #0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <xQueueGenericSend+0xc6>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	61fb      	str	r3, [r7, #28]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800895a:	f001 ff4d 	bl	800a7f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008966:	429a      	cmp	r2, r3
 8008968:	d302      	bcc.n	8008970 <xQueueGenericSend+0xdc>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d129      	bne.n	80089c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008976:	f000 fa0f 	bl	8008d98 <prvCopyDataToQueue>
 800897a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	3324      	adds	r3, #36	@ 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f001 f805 	bl	8009998 <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d013      	beq.n	80089bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008994:	4b3f      	ldr	r3, [pc, #252]	@ (8008a94 <xQueueGenericSend+0x200>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	e00a      	b.n	80089bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80089ac:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <xQueueGenericSend+0x200>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089bc:	f001 ff4e 	bl	800a85c <vPortExitCritical>
				return pdPASS;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e063      	b.n	8008a8c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ca:	f001 ff47 	bl	800a85c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e05c      	b.n	8008a8c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 f83f 	bl	8009a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089e6:	f001 ff39 	bl	800a85c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ea:	f000 fda7 	bl	800953c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ee:	f001 ff03 	bl	800a7f8 <vPortEnterCritical>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089f8:	b25b      	sxtb	r3, r3
 80089fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fe:	d103      	bne.n	8008a08 <xQueueGenericSend+0x174>
 8008a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a0e:	b25b      	sxtb	r3, r3
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d103      	bne.n	8008a1e <xQueueGenericSend+0x18a>
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a1e:	f001 ff1d 	bl	800a85c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a22:	1d3a      	adds	r2, r7, #4
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 f82e 	bl	8009a8c <xTaskCheckForTimeOut>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d124      	bne.n	8008a80 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a38:	f000 faa6 	bl	8008f88 <prvIsQueueFull>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d018      	beq.n	8008a74 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	3310      	adds	r3, #16
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ff52 	bl	80098f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a52:	f000 fa31 	bl	8008eb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a56:	f000 fd7f 	bl	8009558 <xTaskResumeAll>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f47f af7c 	bne.w	800895a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a62:	4b0c      	ldr	r3, [pc, #48]	@ (8008a94 <xQueueGenericSend+0x200>)
 8008a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	e772      	b.n	800895a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a76:	f000 fa1f 	bl	8008eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a7a:	f000 fd6d 	bl	8009558 <xTaskResumeAll>
 8008a7e:	e76c      	b.n	800895a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a82:	f000 fa19 	bl	8008eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a86:	f000 fd67 	bl	8009558 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3738      	adds	r7, #56	@ 0x38
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	e000ed04 	.word	0xe000ed04

08008a98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b090      	sub	sp, #64	@ 0x40
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	e7fd      	b.n	8008ac4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <xQueueGenericSendFromISR+0x3e>
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <xQueueGenericSendFromISR+0x42>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <xQueueGenericSendFromISR+0x44>
 8008ada:	2300      	movs	r3, #0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008af2:	bf00      	nop
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d103      	bne.n	8008b06 <xQueueGenericSendFromISR+0x6e>
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <xQueueGenericSendFromISR+0x72>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueGenericSendFromISR+0x74>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	623b      	str	r3, [r7, #32]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b28:	f001 ff46 	bl	800a9b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61fa      	str	r2, [r7, #28]
 8008b42:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008b44:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b46:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d302      	bcc.n	8008b5a <xQueueGenericSendFromISR+0xc2>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d12f      	bne.n	8008bba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	68b9      	ldr	r1, [r7, #8]
 8008b6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b70:	f000 f912 	bl	8008d98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b74:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7c:	d112      	bne.n	8008ba4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d016      	beq.n	8008bb4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	3324      	adds	r3, #36	@ 0x24
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 ff04 	bl	8009998 <xTaskRemoveFromEventList>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00e      	beq.n	8008bb4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e007      	b.n	8008bb4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ba8:	3301      	adds	r3, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	b25a      	sxtb	r2, r3
 8008bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008bb8:	e001      	b.n	8008bbe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc0:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f383 8811 	msr	BASEPRI, r3
}
 8008bc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3740      	adds	r7, #64	@ 0x40
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08c      	sub	sp, #48	@ 0x30
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10b      	bne.n	8008c06 <xQueueReceive+0x32>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	623b      	str	r3, [r7, #32]
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	e7fd      	b.n	8008c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <xQueueReceive+0x40>
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <xQueueReceive+0x44>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <xQueueReceive+0x46>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <xQueueReceive+0x62>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	61fb      	str	r3, [r7, #28]
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	e7fd      	b.n	8008c32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c36:	f001 f875 	bl	8009d24 <xTaskGetSchedulerState>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <xQueueReceive+0x72>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <xQueueReceive+0x76>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <xQueueReceive+0x78>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xQueueReceive+0x94>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	61bb      	str	r3, [r7, #24]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c68:	f001 fdc6 	bl	800a7f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01f      	beq.n	8008cb8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c7c:	f000 f8f6 	bl	8008e6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	1e5a      	subs	r2, r3, #1
 8008c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00f      	beq.n	8008cb0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c92:	3310      	adds	r3, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fe7f 	bl	8009998 <xTaskRemoveFromEventList>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8008d94 <xQueueReceive+0x1c0>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cb0:	f001 fdd4 	bl	800a85c <vPortExitCritical>
				return pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e069      	b.n	8008d8c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d103      	bne.n	8008cc6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cbe:	f001 fdcd 	bl	800a85c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e062      	b.n	8008d8c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ccc:	f107 0310 	add.w	r3, r7, #16
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fec5 	bl	8009a60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cda:	f001 fdbf 	bl	800a85c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cde:	f000 fc2d 	bl	800953c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ce2:	f001 fd89 	bl	800a7f8 <vPortEnterCritical>
 8008ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cec:	b25b      	sxtb	r3, r3
 8008cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf2:	d103      	bne.n	8008cfc <xQueueReceive+0x128>
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d02:	b25b      	sxtb	r3, r3
 8008d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d08:	d103      	bne.n	8008d12 <xQueueReceive+0x13e>
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d12:	f001 fda3 	bl	800a85c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d16:	1d3a      	adds	r2, r7, #4
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 feb4 	bl	8009a8c <xTaskCheckForTimeOut>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d123      	bne.n	8008d72 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2c:	f000 f916 	bl	8008f5c <prvIsQueueEmpty>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d017      	beq.n	8008d66 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d38:	3324      	adds	r3, #36	@ 0x24
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fdd8 	bl	80098f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d46:	f000 f8b7 	bl	8008eb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d4a:	f000 fc05 	bl	8009558 <xTaskResumeAll>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d189      	bne.n	8008c68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d54:	4b0f      	ldr	r3, [pc, #60]	@ (8008d94 <xQueueReceive+0x1c0>)
 8008d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	e780      	b.n	8008c68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d68:	f000 f8a6 	bl	8008eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d6c:	f000 fbf4 	bl	8009558 <xTaskResumeAll>
 8008d70:	e77a      	b.n	8008c68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d74:	f000 f8a0 	bl	8008eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d78:	f000 fbee 	bl	8009558 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d7e:	f000 f8ed 	bl	8008f5c <prvIsQueueEmpty>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f43f af6f 	beq.w	8008c68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3730      	adds	r7, #48	@ 0x30
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	e000ed04 	.word	0xe000ed04

08008d98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10d      	bne.n	8008dd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d14d      	bne.n	8008e5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 ffcc 	bl	8009d60 <xTaskPriorityDisinherit>
 8008dc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	609a      	str	r2, [r3, #8]
 8008dd0:	e043      	b.n	8008e5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d119      	bne.n	8008e0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6858      	ldr	r0, [r3, #4]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de0:	461a      	mov	r2, r3
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	f003 f879 	bl	800beda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d32b      	bcc.n	8008e5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	605a      	str	r2, [r3, #4]
 8008e0a:	e026      	b.n	8008e5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68d8      	ldr	r0, [r3, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e14:	461a      	mov	r2, r3
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	f003 f85f 	bl	800beda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e24:	425b      	negs	r3, r3
 8008e26:	441a      	add	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d207      	bcs.n	8008e48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	425b      	negs	r3, r3
 8008e42:	441a      	add	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d105      	bne.n	8008e5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d018      	beq.n	8008eb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d303      	bcc.n	8008ea0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68d9      	ldr	r1, [r3, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	6838      	ldr	r0, [r7, #0]
 8008eac:	f003 f815 	bl	800beda <memcpy>
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ec0:	f001 fc9a 	bl	800a7f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ecc:	e011      	b.n	8008ef2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d012      	beq.n	8008efc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3324      	adds	r3, #36	@ 0x24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fd5c 	bl	8009998 <xTaskRemoveFromEventList>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ee6:	f000 fe35 	bl	8009b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dce9      	bgt.n	8008ece <prvUnlockQueue+0x16>
 8008efa:	e000      	b.n	8008efe <prvUnlockQueue+0x46>
					break;
 8008efc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	22ff      	movs	r2, #255	@ 0xff
 8008f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f06:	f001 fca9 	bl	800a85c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f0a:	f001 fc75 	bl	800a7f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f16:	e011      	b.n	8008f3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d012      	beq.n	8008f46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3310      	adds	r3, #16
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fd37 	bl	8009998 <xTaskRemoveFromEventList>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f30:	f000 fe10 	bl	8009b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dce9      	bgt.n	8008f18 <prvUnlockQueue+0x60>
 8008f44:	e000      	b.n	8008f48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	22ff      	movs	r2, #255	@ 0xff
 8008f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f50:	f001 fc84 	bl	800a85c <vPortExitCritical>
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f64:	f001 fc48 	bl	800a7f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e001      	b.n	8008f7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f7a:	f001 fc6f 	bl	800a85c <vPortExitCritical>

	return xReturn;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f90:	f001 fc32 	bl	800a7f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d102      	bne.n	8008fa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e001      	b.n	8008faa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008faa:	f001 fc57 	bl	800a85c <vPortExitCritical>

	return xReturn;
 8008fae:	68fb      	ldr	r3, [r7, #12]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	e014      	b.n	8008ff2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8009008 <vQueueAddToRegistry+0x50>)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10b      	bne.n	8008fec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fd4:	490c      	ldr	r1, [pc, #48]	@ (8009008 <vQueueAddToRegistry+0x50>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fde:	4a0a      	ldr	r2, [pc, #40]	@ (8009008 <vQueueAddToRegistry+0x50>)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fea:	e006      	b.n	8008ffa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b07      	cmp	r3, #7
 8008ff6:	d9e7      	bls.n	8008fc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20001288 	.word	0x20001288

0800900c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800901c:	f001 fbec 	bl	800a7f8 <vPortEnterCritical>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009026:	b25b      	sxtb	r3, r3
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d103      	bne.n	8009036 <vQueueWaitForMessageRestricted+0x2a>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800903c:	b25b      	sxtb	r3, r3
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d103      	bne.n	800904c <vQueueWaitForMessageRestricted+0x40>
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800904c:	f001 fc06 	bl	800a85c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d106      	bne.n	8009066 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	3324      	adds	r3, #36	@ 0x24
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fc6d 	bl	8009940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009066:	6978      	ldr	r0, [r7, #20]
 8009068:	f7ff ff26 	bl	8008eb8 <prvUnlockQueue>
	}
 800906c:	bf00      	nop
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08e      	sub	sp, #56	@ 0x38
 8009078:	af04      	add	r7, sp, #16
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	623b      	str	r3, [r7, #32]
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	e7fd      	b.n	800909c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <xTaskCreateStatic+0x4a>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	61fb      	str	r3, [r7, #28]
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	e7fd      	b.n	80090ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090be:	23a8      	movs	r3, #168	@ 0xa8
 80090c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80090c6:	d00b      	beq.n	80090e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	61bb      	str	r3, [r7, #24]
}
 80090da:	bf00      	nop
 80090dc:	bf00      	nop
 80090de:	e7fd      	b.n	80090dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01e      	beq.n	8009126 <xTaskCreateStatic+0xb2>
 80090e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d01b      	beq.n	8009126 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009100:	2300      	movs	r3, #0
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f851 	bl	80091c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800911e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009120:	f000 f8f6 	bl	8009310 <prvAddNewTaskToReadyList>
 8009124:	e001      	b.n	800912a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800912a:	697b      	ldr	r3, [r7, #20]
	}
 800912c:	4618      	mov	r0, r3
 800912e:	3728      	adds	r7, #40	@ 0x28
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08c      	sub	sp, #48	@ 0x30
 8009138:	af04      	add	r7, sp, #16
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	4613      	mov	r3, r2
 8009142:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f001 fc77 	bl	800aa3c <pvPortMalloc>
 800914e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009156:	20a8      	movs	r0, #168	@ 0xa8
 8009158:	f001 fc70 	bl	800aa3c <pvPortMalloc>
 800915c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	631a      	str	r2, [r3, #48]	@ 0x30
 800916a:	e005      	b.n	8009178 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800916c:	6978      	ldr	r0, [r7, #20]
 800916e:	f001 fd33 	bl	800abd8 <vPortFree>
 8009172:	e001      	b.n	8009178 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d017      	beq.n	80091ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009186:	88fa      	ldrh	r2, [r7, #6]
 8009188:	2300      	movs	r3, #0
 800918a:	9303      	str	r3, [sp, #12]
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 f80f 	bl	80091c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091a2:	69f8      	ldr	r0, [r7, #28]
 80091a4:	f000 f8b4 	bl	8009310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091a8:	2301      	movs	r3, #1
 80091aa:	61bb      	str	r3, [r7, #24]
 80091ac:	e002      	b.n	80091b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091ae:	f04f 33ff 	mov.w	r3, #4294967295
 80091b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091b4:	69bb      	ldr	r3, [r7, #24]
	}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	461a      	mov	r2, r3
 80091d8:	21a5      	movs	r1, #165	@ 0xa5
 80091da:	f002 fdae 	bl	800bd3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091e8:	3b01      	subs	r3, #1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f023 0307 	bic.w	r3, r3, #7
 80091f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	617b      	str	r3, [r7, #20]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01f      	beq.n	8009260 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e012      	b.n	800924c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	7819      	ldrb	r1, [r3, #0]
 800922e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	3334      	adds	r3, #52	@ 0x34
 8009236:	460a      	mov	r2, r1
 8009238:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d006      	beq.n	8009254 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	3301      	adds	r3, #1
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b0f      	cmp	r3, #15
 8009250:	d9e9      	bls.n	8009226 <prvInitialiseNewTask+0x66>
 8009252:	e000      	b.n	8009256 <prvInitialiseNewTask+0x96>
			{
				break;
 8009254:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800925e:	e003      	b.n	8009268 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	2b37      	cmp	r3, #55	@ 0x37
 800926c:	d901      	bls.n	8009272 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800926e:	2337      	movs	r3, #55	@ 0x37
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009276:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800927c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	2200      	movs	r2, #0
 8009282:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff f965 	bl	8008558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	3318      	adds	r3, #24
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff f960 	bl	8008558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800929c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b0:	2200      	movs	r2, #0
 80092b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	3354      	adds	r3, #84	@ 0x54
 80092c2:	224c      	movs	r2, #76	@ 0x4c
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f002 fd37 	bl	800bd3a <memset>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009304 <prvInitialiseNewTask+0x144>)
 80092d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009308 <prvInitialiseNewTask+0x148>)
 80092d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	4a0c      	ldr	r2, [pc, #48]	@ (800930c <prvInitialiseNewTask+0x14c>)
 80092dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	68f9      	ldr	r1, [r7, #12]
 80092e2:	69b8      	ldr	r0, [r7, #24]
 80092e4:	f001 f95a 	bl	800a59c <pxPortInitialiseStack>
 80092e8:	4602      	mov	r2, r0
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092fa:	bf00      	nop
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	2000308c 	.word	0x2000308c
 8009308:	200030f4 	.word	0x200030f4
 800930c:	2000315c 	.word	0x2000315c

08009310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009318:	f001 fa6e 	bl	800a7f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800931c:	4b2d      	ldr	r3, [pc, #180]	@ (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3301      	adds	r3, #1
 8009322:	4a2c      	ldr	r2, [pc, #176]	@ (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 8009324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009326:	4b2c      	ldr	r3, [pc, #176]	@ (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800932e:	4a2a      	ldr	r2, [pc, #168]	@ (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009334:	4b27      	ldr	r3, [pc, #156]	@ (80093d4 <prvAddNewTaskToReadyList+0xc4>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d110      	bne.n	800935e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800933c:	f000 fc2e 	bl	8009b9c <prvInitialiseTaskLists>
 8009340:	e00d      	b.n	800935e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009342:	4b26      	ldr	r3, [pc, #152]	@ (80093dc <prvAddNewTaskToReadyList+0xcc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800934a:	4b23      	ldr	r3, [pc, #140]	@ (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	429a      	cmp	r2, r3
 8009356:	d802      	bhi.n	800935e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009358:	4a1f      	ldr	r2, [pc, #124]	@ (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800935e:	4b20      	ldr	r3, [pc, #128]	@ (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a1e      	ldr	r2, [pc, #120]	@ (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 8009366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009368:	4b1d      	ldr	r3, [pc, #116]	@ (80093e0 <prvAddNewTaskToReadyList+0xd0>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009374:	4b1b      	ldr	r3, [pc, #108]	@ (80093e4 <prvAddNewTaskToReadyList+0xd4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d903      	bls.n	8009384 <prvAddNewTaskToReadyList+0x74>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <prvAddNewTaskToReadyList+0xd4>)
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <prvAddNewTaskToReadyList+0xd8>)
 8009392:	441a      	add	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3304      	adds	r3, #4
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7ff f8e9 	bl	8008572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093a0:	f001 fa5c 	bl	800a85c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093a4:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <prvAddNewTaskToReadyList+0xcc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00e      	beq.n	80093ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ac:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <prvAddNewTaskToReadyList+0xc8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d207      	bcs.n	80093ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093ba:	4b0c      	ldr	r3, [pc, #48]	@ (80093ec <prvAddNewTaskToReadyList+0xdc>)
 80093bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	2000179c 	.word	0x2000179c
 80093d8:	200012c8 	.word	0x200012c8
 80093dc:	200017a8 	.word	0x200017a8
 80093e0:	200017b8 	.word	0x200017b8
 80093e4:	200017a4 	.word	0x200017a4
 80093e8:	200012cc 	.word	0x200012cc
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009402:	4b14      	ldr	r3, [pc, #80]	@ (8009454 <vTaskDelay+0x64>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <vTaskDelay+0x32>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	60bb      	str	r3, [r7, #8]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009422:	f000 f88b 	bl	800953c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009426:	2100      	movs	r1, #0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fd09 	bl	8009e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800942e:	f000 f893 	bl	8009558 <xTaskResumeAll>
 8009432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d107      	bne.n	800944a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800943a:	4b07      	ldr	r3, [pc, #28]	@ (8009458 <vTaskDelay+0x68>)
 800943c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200017c4 	.word	0x200017c4
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	@ 0x28
 8009460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800946a:	463a      	mov	r2, r7
 800946c:	1d39      	adds	r1, r7, #4
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff f81c 	bl	80084b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	9202      	str	r2, [sp, #8]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	460a      	mov	r2, r1
 800948a:	4924      	ldr	r1, [pc, #144]	@ (800951c <vTaskStartScheduler+0xc0>)
 800948c:	4824      	ldr	r0, [pc, #144]	@ (8009520 <vTaskStartScheduler+0xc4>)
 800948e:	f7ff fdf1 	bl	8009074 <xTaskCreateStatic>
 8009492:	4603      	mov	r3, r0
 8009494:	4a23      	ldr	r2, [pc, #140]	@ (8009524 <vTaskStartScheduler+0xc8>)
 8009496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009498:	4b22      	ldr	r3, [pc, #136]	@ (8009524 <vTaskStartScheduler+0xc8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e001      	b.n	80094aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d102      	bne.n	80094b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094b0:	f000 fd1a 	bl	8009ee8 <xTimerCreateTimerTask>
 80094b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d11b      	bne.n	80094f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094d0:	4b15      	ldr	r3, [pc, #84]	@ (8009528 <vTaskStartScheduler+0xcc>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3354      	adds	r3, #84	@ 0x54
 80094d6:	4a15      	ldr	r2, [pc, #84]	@ (800952c <vTaskStartScheduler+0xd0>)
 80094d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094da:	4b15      	ldr	r3, [pc, #84]	@ (8009530 <vTaskStartScheduler+0xd4>)
 80094dc:	f04f 32ff 	mov.w	r2, #4294967295
 80094e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094e2:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <vTaskStartScheduler+0xd8>)
 80094e4:	2201      	movs	r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094e8:	4b13      	ldr	r3, [pc, #76]	@ (8009538 <vTaskStartScheduler+0xdc>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094ee:	f001 f8df 	bl	800a6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094f2:	e00f      	b.n	8009514 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d10b      	bne.n	8009514 <vTaskStartScheduler+0xb8>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60fb      	str	r3, [r7, #12]
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <vTaskStartScheduler+0xb4>
}
 8009514:	bf00      	nop
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	0800fdec 	.word	0x0800fdec
 8009520:	08009b6d 	.word	0x08009b6d
 8009524:	200017c0 	.word	0x200017c0
 8009528:	200012c8 	.word	0x200012c8
 800952c:	200000b4 	.word	0x200000b4
 8009530:	200017bc 	.word	0x200017bc
 8009534:	200017a8 	.word	0x200017a8
 8009538:	200017a0 	.word	0x200017a0

0800953c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009540:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <vTaskSuspendAll+0x18>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	4a03      	ldr	r2, [pc, #12]	@ (8009554 <vTaskSuspendAll+0x18>)
 8009548:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800954a:	bf00      	nop
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	200017c4 	.word	0x200017c4

08009558 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009562:	2300      	movs	r3, #0
 8009564:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009566:	4b42      	ldr	r3, [pc, #264]	@ (8009670 <xTaskResumeAll+0x118>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10b      	bne.n	8009586 <xTaskResumeAll+0x2e>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	603b      	str	r3, [r7, #0]
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009586:	f001 f937 	bl	800a7f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800958a:	4b39      	ldr	r3, [pc, #228]	@ (8009670 <xTaskResumeAll+0x118>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3b01      	subs	r3, #1
 8009590:	4a37      	ldr	r2, [pc, #220]	@ (8009670 <xTaskResumeAll+0x118>)
 8009592:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009594:	4b36      	ldr	r3, [pc, #216]	@ (8009670 <xTaskResumeAll+0x118>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d162      	bne.n	8009662 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800959c:	4b35      	ldr	r3, [pc, #212]	@ (8009674 <xTaskResumeAll+0x11c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d05e      	beq.n	8009662 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a4:	e02f      	b.n	8009606 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a6:	4b34      	ldr	r3, [pc, #208]	@ (8009678 <xTaskResumeAll+0x120>)
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3318      	adds	r3, #24
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff f83a 	bl	800862c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff f835 	bl	800862c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c6:	4b2d      	ldr	r3, [pc, #180]	@ (800967c <xTaskResumeAll+0x124>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d903      	bls.n	80095d6 <xTaskResumeAll+0x7e>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d2:	4a2a      	ldr	r2, [pc, #168]	@ (800967c <xTaskResumeAll+0x124>)
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4a27      	ldr	r2, [pc, #156]	@ (8009680 <xTaskResumeAll+0x128>)
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4619      	mov	r1, r3
 80095ec:	4610      	mov	r0, r2
 80095ee:	f7fe ffc0 	bl	8008572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f6:	4b23      	ldr	r3, [pc, #140]	@ (8009684 <xTaskResumeAll+0x12c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d302      	bcc.n	8009606 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009600:	4b21      	ldr	r3, [pc, #132]	@ (8009688 <xTaskResumeAll+0x130>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009606:	4b1c      	ldr	r3, [pc, #112]	@ (8009678 <xTaskResumeAll+0x120>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1cb      	bne.n	80095a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009614:	f000 fb66 	bl	8009ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009618:	4b1c      	ldr	r3, [pc, #112]	@ (800968c <xTaskResumeAll+0x134>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009624:	f000 f846 	bl	80096b4 <xTaskIncrementTick>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800962e:	4b16      	ldr	r3, [pc, #88]	@ (8009688 <xTaskResumeAll+0x130>)
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3b01      	subs	r3, #1
 8009638:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f1      	bne.n	8009624 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009640:	4b12      	ldr	r3, [pc, #72]	@ (800968c <xTaskResumeAll+0x134>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009646:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <xTaskResumeAll+0x130>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009652:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <xTaskResumeAll+0x138>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009662:	f001 f8fb 	bl	800a85c <vPortExitCritical>

	return xAlreadyYielded;
 8009666:	68bb      	ldr	r3, [r7, #8]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	200017c4 	.word	0x200017c4
 8009674:	2000179c 	.word	0x2000179c
 8009678:	2000175c 	.word	0x2000175c
 800967c:	200017a4 	.word	0x200017a4
 8009680:	200012cc 	.word	0x200012cc
 8009684:	200012c8 	.word	0x200012c8
 8009688:	200017b0 	.word	0x200017b0
 800968c:	200017ac 	.word	0x200017ac
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800969a:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <xTaskGetTickCount+0x1c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096a0:	687b      	ldr	r3, [r7, #4]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	200017a0 	.word	0x200017a0

080096b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096be:	4b4f      	ldr	r3, [pc, #316]	@ (80097fc <xTaskIncrementTick+0x148>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 8090 	bne.w	80097e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009800 <xTaskIncrementTick+0x14c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3301      	adds	r3, #1
 80096ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096d0:	4a4b      	ldr	r2, [pc, #300]	@ (8009800 <xTaskIncrementTick+0x14c>)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d121      	bne.n	8009720 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80096dc:	4b49      	ldr	r3, [pc, #292]	@ (8009804 <xTaskIncrementTick+0x150>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00b      	beq.n	80096fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	603b      	str	r3, [r7, #0]
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <xTaskIncrementTick+0x46>
 80096fe:	4b41      	ldr	r3, [pc, #260]	@ (8009804 <xTaskIncrementTick+0x150>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	4b40      	ldr	r3, [pc, #256]	@ (8009808 <xTaskIncrementTick+0x154>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a3e      	ldr	r2, [pc, #248]	@ (8009804 <xTaskIncrementTick+0x150>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	4a3e      	ldr	r2, [pc, #248]	@ (8009808 <xTaskIncrementTick+0x154>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	4b3e      	ldr	r3, [pc, #248]	@ (800980c <xTaskIncrementTick+0x158>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	4a3c      	ldr	r2, [pc, #240]	@ (800980c <xTaskIncrementTick+0x158>)
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	f000 fae2 	bl	8009ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009720:	4b3b      	ldr	r3, [pc, #236]	@ (8009810 <xTaskIncrementTick+0x15c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	d349      	bcc.n	80097be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800972a:	4b36      	ldr	r3, [pc, #216]	@ (8009804 <xTaskIncrementTick+0x150>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d104      	bne.n	800973e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009734:	4b36      	ldr	r3, [pc, #216]	@ (8009810 <xTaskIncrementTick+0x15c>)
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	601a      	str	r2, [r3, #0]
					break;
 800973c:	e03f      	b.n	80097be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973e:	4b31      	ldr	r3, [pc, #196]	@ (8009804 <xTaskIncrementTick+0x150>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d203      	bcs.n	800975e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009756:	4a2e      	ldr	r2, [pc, #184]	@ (8009810 <xTaskIncrementTick+0x15c>)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800975c:	e02f      	b.n	80097be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe ff62 	bl	800862c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d004      	beq.n	800977a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	3318      	adds	r3, #24
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe ff59 	bl	800862c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977e:	4b25      	ldr	r3, [pc, #148]	@ (8009814 <xTaskIncrementTick+0x160>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d903      	bls.n	800978e <xTaskIncrementTick+0xda>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	4a22      	ldr	r2, [pc, #136]	@ (8009814 <xTaskIncrementTick+0x160>)
 800978c:	6013      	str	r3, [r2, #0]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4a1f      	ldr	r2, [pc, #124]	@ (8009818 <xTaskIncrementTick+0x164>)
 800979c:	441a      	add	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fe fee4 	bl	8008572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ae:	4b1b      	ldr	r3, [pc, #108]	@ (800981c <xTaskIncrementTick+0x168>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d3b8      	bcc.n	800972a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097bc:	e7b5      	b.n	800972a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097be:	4b17      	ldr	r3, [pc, #92]	@ (800981c <xTaskIncrementTick+0x168>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c4:	4914      	ldr	r1, [pc, #80]	@ (8009818 <xTaskIncrementTick+0x164>)
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d901      	bls.n	80097da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097da:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <xTaskIncrementTick+0x16c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e004      	b.n	80097f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009824 <xTaskIncrementTick+0x170>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009824 <xTaskIncrementTick+0x170>)
 80097f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097f2:	697b      	ldr	r3, [r7, #20]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200017c4 	.word	0x200017c4
 8009800:	200017a0 	.word	0x200017a0
 8009804:	20001754 	.word	0x20001754
 8009808:	20001758 	.word	0x20001758
 800980c:	200017b4 	.word	0x200017b4
 8009810:	200017bc 	.word	0x200017bc
 8009814:	200017a4 	.word	0x200017a4
 8009818:	200012cc 	.word	0x200012cc
 800981c:	200012c8 	.word	0x200012c8
 8009820:	200017b0 	.word	0x200017b0
 8009824:	200017ac 	.word	0x200017ac

08009828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800982e:	4b2b      	ldr	r3, [pc, #172]	@ (80098dc <vTaskSwitchContext+0xb4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009836:	4b2a      	ldr	r3, [pc, #168]	@ (80098e0 <vTaskSwitchContext+0xb8>)
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800983c:	e047      	b.n	80098ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800983e:	4b28      	ldr	r3, [pc, #160]	@ (80098e0 <vTaskSwitchContext+0xb8>)
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009844:	4b27      	ldr	r3, [pc, #156]	@ (80098e4 <vTaskSwitchContext+0xbc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e011      	b.n	8009870 <vTaskSwitchContext+0x48>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10b      	bne.n	800986a <vTaskSwitchContext+0x42>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	607b      	str	r3, [r7, #4]
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	e7fd      	b.n	8009866 <vTaskSwitchContext+0x3e>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3b01      	subs	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	491d      	ldr	r1, [pc, #116]	@ (80098e8 <vTaskSwitchContext+0xc0>)
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	440b      	add	r3, r1
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0e3      	beq.n	800984c <vTaskSwitchContext+0x24>
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a16      	ldr	r2, [pc, #88]	@ (80098e8 <vTaskSwitchContext+0xc0>)
 8009890:	4413      	add	r3, r2
 8009892:	60bb      	str	r3, [r7, #8]
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	685a      	ldr	r2, [r3, #4]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	3308      	adds	r3, #8
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d104      	bne.n	80098b4 <vTaskSwitchContext+0x8c>
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	605a      	str	r2, [r3, #4]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	4a0c      	ldr	r2, [pc, #48]	@ (80098ec <vTaskSwitchContext+0xc4>)
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	4a09      	ldr	r2, [pc, #36]	@ (80098e4 <vTaskSwitchContext+0xbc>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098c4:	4b09      	ldr	r3, [pc, #36]	@ (80098ec <vTaskSwitchContext+0xc4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3354      	adds	r3, #84	@ 0x54
 80098ca:	4a09      	ldr	r2, [pc, #36]	@ (80098f0 <vTaskSwitchContext+0xc8>)
 80098cc:	6013      	str	r3, [r2, #0]
}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	200017c4 	.word	0x200017c4
 80098e0:	200017b0 	.word	0x200017b0
 80098e4:	200017a4 	.word	0x200017a4
 80098e8:	200012cc 	.word	0x200012cc
 80098ec:	200012c8 	.word	0x200012c8
 80098f0:	200000b4 	.word	0x200000b4

080098f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10b      	bne.n	800991c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60fb      	str	r3, [r7, #12]
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	e7fd      	b.n	8009918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800991c:	4b07      	ldr	r3, [pc, #28]	@ (800993c <vTaskPlaceOnEventList+0x48>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3318      	adds	r3, #24
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe fe48 	bl	80085ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800992a:	2101      	movs	r1, #1
 800992c:	6838      	ldr	r0, [r7, #0]
 800992e:	f000 fa87 	bl	8009e40 <prvAddCurrentTaskToDelayedList>
}
 8009932:	bf00      	nop
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200012c8 	.word	0x200012c8

08009940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10b      	bne.n	800996a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	617b      	str	r3, [r7, #20]
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800996a:	4b0a      	ldr	r3, [pc, #40]	@ (8009994 <vTaskPlaceOnEventListRestricted+0x54>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3318      	adds	r3, #24
 8009970:	4619      	mov	r1, r3
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7fe fdfd 	bl	8008572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800997e:	f04f 33ff 	mov.w	r3, #4294967295
 8009982:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	68b8      	ldr	r0, [r7, #8]
 8009988:	f000 fa5a 	bl	8009e40 <prvAddCurrentTaskToDelayedList>
	}
 800998c:	bf00      	nop
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	200012c8 	.word	0x200012c8

08009998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60fb      	str	r3, [r7, #12]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	3318      	adds	r3, #24
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fe2e 	bl	800862c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a48 <xTaskRemoveFromEventList+0xb0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11d      	bne.n	8009a14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3304      	adds	r3, #4
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fe25 	bl	800862c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e6:	4b19      	ldr	r3, [pc, #100]	@ (8009a4c <xTaskRemoveFromEventList+0xb4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d903      	bls.n	80099f6 <xTaskRemoveFromEventList+0x5e>
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	4a16      	ldr	r2, [pc, #88]	@ (8009a4c <xTaskRemoveFromEventList+0xb4>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a13      	ldr	r2, [pc, #76]	@ (8009a50 <xTaskRemoveFromEventList+0xb8>)
 8009a04:	441a      	add	r2, r3
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fe fdb0 	bl	8008572 <vListInsertEnd>
 8009a12:	e005      	b.n	8009a20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	3318      	adds	r3, #24
 8009a18:	4619      	mov	r1, r3
 8009a1a:	480e      	ldr	r0, [pc, #56]	@ (8009a54 <xTaskRemoveFromEventList+0xbc>)
 8009a1c:	f7fe fda9 	bl	8008572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a24:	4b0c      	ldr	r3, [pc, #48]	@ (8009a58 <xTaskRemoveFromEventList+0xc0>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d905      	bls.n	8009a3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <xTaskRemoveFromEventList+0xc4>)
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e001      	b.n	8009a3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a3e:	697b      	ldr	r3, [r7, #20]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	200017c4 	.word	0x200017c4
 8009a4c:	200017a4 	.word	0x200017a4
 8009a50:	200012cc 	.word	0x200012cc
 8009a54:	2000175c 	.word	0x2000175c
 8009a58:	200012c8 	.word	0x200012c8
 8009a5c:	200017b0 	.word	0x200017b0

08009a60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a68:	4b06      	ldr	r3, [pc, #24]	@ (8009a84 <vTaskInternalSetTimeOutState+0x24>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a70:	4b05      	ldr	r3, [pc, #20]	@ (8009a88 <vTaskInternalSetTimeOutState+0x28>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	605a      	str	r2, [r3, #4]
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	200017b4 	.word	0x200017b4
 8009a88:	200017a0 	.word	0x200017a0

08009a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10b      	bne.n	8009ab4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	613b      	str	r3, [r7, #16]
}
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	e7fd      	b.n	8009ab0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60fb      	str	r3, [r7, #12]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ad2:	f000 fe91 	bl	800a7f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8009b4c <xTaskCheckForTimeOut+0xc0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d102      	bne.n	8009af6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
 8009af4:	e023      	b.n	8009b3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	4b15      	ldr	r3, [pc, #84]	@ (8009b50 <xTaskCheckForTimeOut+0xc4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d007      	beq.n	8009b12 <xTaskCheckForTimeOut+0x86>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d302      	bcc.n	8009b12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	61fb      	str	r3, [r7, #28]
 8009b10:	e015      	b.n	8009b3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d20b      	bcs.n	8009b34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	1ad2      	subs	r2, r2, r3
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff ff99 	bl	8009a60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	e004      	b.n	8009b3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b3e:	f000 fe8d 	bl	800a85c <vPortExitCritical>

	return xReturn;
 8009b42:	69fb      	ldr	r3, [r7, #28]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3720      	adds	r7, #32
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200017a0 	.word	0x200017a0
 8009b50:	200017b4 	.word	0x200017b4

08009b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b58:	4b03      	ldr	r3, [pc, #12]	@ (8009b68 <vTaskMissedYield+0x14>)
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]
}
 8009b5e:	bf00      	nop
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	200017b0 	.word	0x200017b0

08009b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b74:	f000 f852 	bl	8009c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b78:	4b06      	ldr	r3, [pc, #24]	@ (8009b94 <prvIdleTask+0x28>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d9f9      	bls.n	8009b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b80:	4b05      	ldr	r3, [pc, #20]	@ (8009b98 <prvIdleTask+0x2c>)
 8009b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b90:	e7f0      	b.n	8009b74 <prvIdleTask+0x8>
 8009b92:	bf00      	nop
 8009b94:	200012cc 	.word	0x200012cc
 8009b98:	e000ed04 	.word	0xe000ed04

08009b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	607b      	str	r3, [r7, #4]
 8009ba6:	e00c      	b.n	8009bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4613      	mov	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4a12      	ldr	r2, [pc, #72]	@ (8009bfc <prvInitialiseTaskLists+0x60>)
 8009bb4:	4413      	add	r3, r2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fcae 	bl	8008518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	607b      	str	r3, [r7, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b37      	cmp	r3, #55	@ 0x37
 8009bc6:	d9ef      	bls.n	8009ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bc8:	480d      	ldr	r0, [pc, #52]	@ (8009c00 <prvInitialiseTaskLists+0x64>)
 8009bca:	f7fe fca5 	bl	8008518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bce:	480d      	ldr	r0, [pc, #52]	@ (8009c04 <prvInitialiseTaskLists+0x68>)
 8009bd0:	f7fe fca2 	bl	8008518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009bd4:	480c      	ldr	r0, [pc, #48]	@ (8009c08 <prvInitialiseTaskLists+0x6c>)
 8009bd6:	f7fe fc9f 	bl	8008518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bda:	480c      	ldr	r0, [pc, #48]	@ (8009c0c <prvInitialiseTaskLists+0x70>)
 8009bdc:	f7fe fc9c 	bl	8008518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009be0:	480b      	ldr	r0, [pc, #44]	@ (8009c10 <prvInitialiseTaskLists+0x74>)
 8009be2:	f7fe fc99 	bl	8008518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <prvInitialiseTaskLists+0x78>)
 8009be8:	4a05      	ldr	r2, [pc, #20]	@ (8009c00 <prvInitialiseTaskLists+0x64>)
 8009bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <prvInitialiseTaskLists+0x7c>)
 8009bee:	4a05      	ldr	r2, [pc, #20]	@ (8009c04 <prvInitialiseTaskLists+0x68>)
 8009bf0:	601a      	str	r2, [r3, #0]
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200012cc 	.word	0x200012cc
 8009c00:	2000172c 	.word	0x2000172c
 8009c04:	20001740 	.word	0x20001740
 8009c08:	2000175c 	.word	0x2000175c
 8009c0c:	20001770 	.word	0x20001770
 8009c10:	20001788 	.word	0x20001788
 8009c14:	20001754 	.word	0x20001754
 8009c18:	20001758 	.word	0x20001758

08009c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c22:	e019      	b.n	8009c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c24:	f000 fde8 	bl	800a7f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c28:	4b10      	ldr	r3, [pc, #64]	@ (8009c6c <prvCheckTasksWaitingTermination+0x50>)
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fcf9 	bl	800862c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <prvCheckTasksWaitingTermination+0x54>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	4a0b      	ldr	r2, [pc, #44]	@ (8009c70 <prvCheckTasksWaitingTermination+0x54>)
 8009c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <prvCheckTasksWaitingTermination+0x58>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009c74 <prvCheckTasksWaitingTermination+0x58>)
 8009c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c4e:	f000 fe05 	bl	800a85c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f810 	bl	8009c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c58:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <prvCheckTasksWaitingTermination+0x58>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e1      	bne.n	8009c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20001770 	.word	0x20001770
 8009c70:	2000179c 	.word	0x2000179c
 8009c74:	20001784 	.word	0x20001784

08009c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3354      	adds	r3, #84	@ 0x54
 8009c84:	4618      	mov	r0, r3
 8009c86:	f002 f875 	bl	800bd74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d108      	bne.n	8009ca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 ff9d 	bl	800abd8 <vPortFree>
				vPortFree( pxTCB );
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 ff9a 	bl	800abd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ca4:	e019      	b.n	8009cda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d103      	bne.n	8009cb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 ff91 	bl	800abd8 <vPortFree>
	}
 8009cb6:	e010      	b.n	8009cda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d00b      	beq.n	8009cda <prvDeleteTCB+0x62>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	60fb      	str	r3, [r7, #12]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <prvDeleteTCB+0x5e>
	}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cea:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <prvResetNextTaskUnblockTime+0x38>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d20 <prvResetNextTaskUnblockTime+0x3c>)
 8009cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cfc:	e008      	b.n	8009d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfe:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <prvResetNextTaskUnblockTime+0x38>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4a04      	ldr	r2, [pc, #16]	@ (8009d20 <prvResetNextTaskUnblockTime+0x3c>)
 8009d0e:	6013      	str	r3, [r2, #0]
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20001754 	.word	0x20001754
 8009d20:	200017bc 	.word	0x200017bc

08009d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d58 <xTaskGetSchedulerState+0x34>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d32:	2301      	movs	r3, #1
 8009d34:	607b      	str	r3, [r7, #4]
 8009d36:	e008      	b.n	8009d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d38:	4b08      	ldr	r3, [pc, #32]	@ (8009d5c <xTaskGetSchedulerState+0x38>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d40:	2302      	movs	r3, #2
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	e001      	b.n	8009d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d4a:	687b      	ldr	r3, [r7, #4]
	}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	200017a8 	.word	0x200017a8
 8009d5c:	200017c4 	.word	0x200017c4

08009d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d058      	beq.n	8009e28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d76:	4b2f      	ldr	r3, [pc, #188]	@ (8009e34 <xTaskPriorityDisinherit+0xd4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d00b      	beq.n	8009d98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60fb      	str	r3, [r7, #12]
}
 8009d92:	bf00      	nop
 8009d94:	bf00      	nop
 8009d96:	e7fd      	b.n	8009d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10b      	bne.n	8009db8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60bb      	str	r3, [r7, #8]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d02c      	beq.n	8009e28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d128      	bne.n	8009e28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fc26 	bl	800862c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e38 <xTaskPriorityDisinherit+0xd8>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d903      	bls.n	8009e08 <xTaskPriorityDisinherit+0xa8>
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	4a0c      	ldr	r2, [pc, #48]	@ (8009e38 <xTaskPriorityDisinherit+0xd8>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4a09      	ldr	r2, [pc, #36]	@ (8009e3c <xTaskPriorityDisinherit+0xdc>)
 8009e16:	441a      	add	r2, r3
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f7fe fba7 	bl	8008572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e28:	697b      	ldr	r3, [r7, #20]
	}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	200012c8 	.word	0x200012c8
 8009e38:	200017a4 	.word	0x200017a4
 8009e3c:	200012cc 	.word	0x200012cc

08009e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e4a:	4b21      	ldr	r3, [pc, #132]	@ (8009ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e50:	4b20      	ldr	r3, [pc, #128]	@ (8009ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe fbe8 	bl	800862c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e62:	d10a      	bne.n	8009e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d007      	beq.n	8009e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3304      	adds	r3, #4
 8009e70:	4619      	mov	r1, r3
 8009e72:	4819      	ldr	r0, [pc, #100]	@ (8009ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e74:	f7fe fb7d 	bl	8008572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e78:	e026      	b.n	8009ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4413      	add	r3, r2
 8009e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e82:	4b14      	ldr	r3, [pc, #80]	@ (8009ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d209      	bcs.n	8009ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	f7fe fb8b 	bl	80085ba <vListInsert>
}
 8009ea4:	e010      	b.n	8009ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f7fe fb81 	bl	80085ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d202      	bcs.n	8009ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009ec2:	4a08      	ldr	r2, [pc, #32]	@ (8009ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6013      	str	r3, [r2, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	200017a0 	.word	0x200017a0
 8009ed4:	200012c8 	.word	0x200012c8
 8009ed8:	20001788 	.word	0x20001788
 8009edc:	20001758 	.word	0x20001758
 8009ee0:	20001754 	.word	0x20001754
 8009ee4:	200017bc 	.word	0x200017bc

08009ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08a      	sub	sp, #40	@ 0x28
 8009eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ef2:	f000 fb13 	bl	800a51c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f6c <xTimerCreateTimerTask+0x84>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d021      	beq.n	8009f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f06:	1d3a      	adds	r2, r7, #4
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	f107 030c 	add.w	r3, r7, #12
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe fae7 	bl	80084e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	2302      	movs	r3, #2
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	2300      	movs	r3, #0
 8009f26:	460a      	mov	r2, r1
 8009f28:	4911      	ldr	r1, [pc, #68]	@ (8009f70 <xTimerCreateTimerTask+0x88>)
 8009f2a:	4812      	ldr	r0, [pc, #72]	@ (8009f74 <xTimerCreateTimerTask+0x8c>)
 8009f2c:	f7ff f8a2 	bl	8009074 <xTaskCreateStatic>
 8009f30:	4603      	mov	r3, r0
 8009f32:	4a11      	ldr	r2, [pc, #68]	@ (8009f78 <xTimerCreateTimerTask+0x90>)
 8009f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f36:	4b10      	ldr	r3, [pc, #64]	@ (8009f78 <xTimerCreateTimerTask+0x90>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	613b      	str	r3, [r7, #16]
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f60:	697b      	ldr	r3, [r7, #20]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200017f8 	.word	0x200017f8
 8009f70:	0800fdf4 	.word	0x0800fdf4
 8009f74:	0800a0b5 	.word	0x0800a0b5
 8009f78:	200017fc 	.word	0x200017fc

08009f7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	@ 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <xTimerGenericCommand+0x30>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fac:	4b19      	ldr	r3, [pc, #100]	@ (800a014 <xTimerGenericCommand+0x98>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02a      	beq.n	800a00a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	dc18      	bgt.n	8009ff8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fc6:	f7ff fead 	bl	8009d24 <xTaskGetSchedulerState>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d109      	bne.n	8009fe4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fd0:	4b10      	ldr	r3, [pc, #64]	@ (800a014 <xTimerGenericCommand+0x98>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	f107 0110 	add.w	r1, r7, #16
 8009fd8:	2300      	movs	r3, #0
 8009fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fdc:	f7fe fc5a 	bl	8008894 <xQueueGenericSend>
 8009fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fe2:	e012      	b.n	800a00a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fe4:	4b0b      	ldr	r3, [pc, #44]	@ (800a014 <xTimerGenericCommand+0x98>)
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	f107 0110 	add.w	r1, r7, #16
 8009fec:	2300      	movs	r3, #0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f7fe fc50 	bl	8008894 <xQueueGenericSend>
 8009ff4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ff6:	e008      	b.n	800a00a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ff8:	4b06      	ldr	r3, [pc, #24]	@ (800a014 <xTimerGenericCommand+0x98>)
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	f107 0110 	add.w	r1, r7, #16
 800a000:	2300      	movs	r3, #0
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	f7fe fd48 	bl	8008a98 <xQueueGenericSendFromISR>
 800a008:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3728      	adds	r7, #40	@ 0x28
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	200017f8 	.word	0x200017f8

0800a018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a022:	4b23      	ldr	r3, [pc, #140]	@ (800a0b0 <prvProcessExpiredTimer+0x98>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fafb 	bl	800862c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d023      	beq.n	800a08c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	18d1      	adds	r1, r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	6978      	ldr	r0, [r7, #20]
 800a052:	f000 f8d5 	bl	800a200 <prvInsertTimerInActiveList>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d020      	beq.n	800a09e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a05c:	2300      	movs	r3, #0
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	2100      	movs	r1, #0
 800a066:	6978      	ldr	r0, [r7, #20]
 800a068:	f7ff ff88 	bl	8009f7c <xTimerGenericCommand>
 800a06c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d114      	bne.n	800a09e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	bf00      	nop
 800a08a:	e7fd      	b.n	800a088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	b2da      	uxtb	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	6978      	ldr	r0, [r7, #20]
 800a0a4:	4798      	blx	r3
}
 800a0a6:	bf00      	nop
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	200017f0 	.word	0x200017f0

0800a0b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0bc:	f107 0308 	add.w	r3, r7, #8
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 f859 	bl	800a178 <prvGetNextExpireTime>
 800a0c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f805 	bl	800a0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0d2:	f000 f8d7 	bl	800a284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0d6:	bf00      	nop
 800a0d8:	e7f0      	b.n	800a0bc <prvTimerTask+0x8>
	...

0800a0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0e6:	f7ff fa29 	bl	800953c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ea:	f107 0308 	add.w	r3, r7, #8
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 f866 	bl	800a1c0 <prvSampleTimeNow>
 800a0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d130      	bne.n	800a15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	429a      	cmp	r2, r3
 800a108:	d806      	bhi.n	800a118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a10a:	f7ff fa25 	bl	8009558 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff81 	bl	800a018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a116:	e024      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a11e:	4b13      	ldr	r3, [pc, #76]	@ (800a16c <prvProcessTimerOrBlockTask+0x90>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <prvProcessTimerOrBlockTask+0x50>
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <prvProcessTimerOrBlockTask+0x52>
 800a12c:	2300      	movs	r3, #0
 800a12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a130:	4b0f      	ldr	r3, [pc, #60]	@ (800a170 <prvProcessTimerOrBlockTask+0x94>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	f7fe ff65 	bl	800900c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a142:	f7ff fa09 	bl	8009558 <xTaskResumeAll>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a14c:	4b09      	ldr	r3, [pc, #36]	@ (800a174 <prvProcessTimerOrBlockTask+0x98>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
}
 800a15c:	e001      	b.n	800a162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a15e:	f7ff f9fb 	bl	8009558 <xTaskResumeAll>
}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	200017f4 	.word	0x200017f4
 800a170:	200017f8 	.word	0x200017f8
 800a174:	e000ed04 	.word	0xe000ed04

0800a178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a180:	4b0e      	ldr	r3, [pc, #56]	@ (800a1bc <prvGetNextExpireTime+0x44>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <prvGetNextExpireTime+0x16>
 800a18a:	2201      	movs	r2, #1
 800a18c:	e000      	b.n	800a190 <prvGetNextExpireTime+0x18>
 800a18e:	2200      	movs	r2, #0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d105      	bne.n	800a1a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a19c:	4b07      	ldr	r3, [pc, #28]	@ (800a1bc <prvGetNextExpireTime+0x44>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	e001      	b.n	800a1ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	200017f0 	.word	0x200017f0

0800a1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1c8:	f7ff fa64 	bl	8009694 <xTaskGetTickCount>
 800a1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a1fc <prvSampleTimeNow+0x3c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d205      	bcs.n	800a1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1d8:	f000 f93a 	bl	800a450 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1ea:	4a04      	ldr	r2, [pc, #16]	@ (800a1fc <prvSampleTimeNow+0x3c>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20001800 	.word	0x20001800

0800a200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d812      	bhi.n	800a24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	429a      	cmp	r2, r3
 800a232:	d302      	bcc.n	800a23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a234:	2301      	movs	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e01b      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a23a:	4b10      	ldr	r3, [pc, #64]	@ (800a27c <prvInsertTimerInActiveList+0x7c>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3304      	adds	r3, #4
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fe f9b8 	bl	80085ba <vListInsert>
 800a24a:	e012      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d206      	bcs.n	800a262 <prvInsertTimerInActiveList+0x62>
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e007      	b.n	800a272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <prvInsertTimerInActiveList+0x80>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3304      	adds	r3, #4
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f7fe f9a4 	bl	80085ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a272:	697b      	ldr	r3, [r7, #20]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	200017f4 	.word	0x200017f4
 800a280:	200017f0 	.word	0x200017f0

0800a284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08e      	sub	sp, #56	@ 0x38
 800a288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a28a:	e0ce      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da19      	bge.n	800a2c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a292:	1d3b      	adds	r3, r7, #4
 800a294:	3304      	adds	r3, #4
 800a296:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10b      	bne.n	800a2b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	61fb      	str	r3, [r7, #28]
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2bc:	6850      	ldr	r0, [r2, #4]
 800a2be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2c0:	6892      	ldr	r2, [r2, #8]
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f2c0 80ae 	blt.w	800a42a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d004      	beq.n	800a2e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	3304      	adds	r3, #4
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe f9a4 	bl	800862c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff ff6a 	bl	800a1c0 <prvSampleTimeNow>
 800a2ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b09      	cmp	r3, #9
 800a2f2:	f200 8097 	bhi.w	800a424 <prvProcessReceivedCommands+0x1a0>
 800a2f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <prvProcessReceivedCommands+0x78>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a325 	.word	0x0800a325
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a39b 	.word	0x0800a39b
 800a30c:	0800a3af 	.word	0x0800a3af
 800a310:	0800a3fb 	.word	0x0800a3fb
 800a314:	0800a325 	.word	0x0800a325
 800a318:	0800a325 	.word	0x0800a325
 800a31c:	0800a39b 	.word	0x0800a39b
 800a320:	0800a3af 	.word	0x0800a3af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	b2da      	uxtb	r2, r3
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	18d1      	adds	r1, r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a344:	f7ff ff5c 	bl	800a200 <prvInsertTimerInActiveList>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d06c      	beq.n	800a428 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a35c:	f003 0304 	and.w	r3, r3, #4
 800a360:	2b00      	cmp	r3, #0
 800a362:	d061      	beq.n	800a428 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	441a      	add	r2, r3
 800a36c:	2300      	movs	r3, #0
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2300      	movs	r3, #0
 800a372:	2100      	movs	r1, #0
 800a374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a376:	f7ff fe01 	bl	8009f7c <xTimerGenericCommand>
 800a37a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d152      	bne.n	800a428 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	61bb      	str	r3, [r7, #24]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3ac:	e03d      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3b4:	f043 0301 	orr.w	r3, r3, #1
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10b      	bne.n	800a3e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	617b      	str	r3, [r7, #20]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	18d1      	adds	r1, r2, r3
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3f4:	f7ff ff04 	bl	800a200 <prvInsertTimerInActiveList>
					break;
 800a3f8:	e017      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a40a:	f000 fbe5 	bl	800abd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a40e:	e00c      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a416:	f023 0301 	bic.w	r3, r3, #1
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a422:	e002      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a424:	bf00      	nop
 800a426:	e000      	b.n	800a42a <prvProcessReceivedCommands+0x1a6>
					break;
 800a428:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a42a:	4b08      	ldr	r3, [pc, #32]	@ (800a44c <prvProcessReceivedCommands+0x1c8>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	1d39      	adds	r1, r7, #4
 800a430:	2200      	movs	r2, #0
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fbce 	bl	8008bd4 <xQueueReceive>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f47f af26 	bne.w	800a28c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	3730      	adds	r7, #48	@ 0x30
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200017f8 	.word	0x200017f8

0800a450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a456:	e049      	b.n	800a4ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a458:	4b2e      	ldr	r3, [pc, #184]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a462:	4b2c      	ldr	r3, [pc, #176]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3304      	adds	r3, #4
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe f8db 	bl	800862c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d02f      	beq.n	800a4ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	4413      	add	r3, r2
 800a494:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d90e      	bls.n	800a4bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7fe f880 	bl	80085ba <vListInsert>
 800a4ba:	e017      	b.n	800a4ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4bc:	2300      	movs	r3, #0
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fd58 	bl	8009f7c <xTimerGenericCommand>
 800a4cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	603b      	str	r3, [r7, #0]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4ec:	4b09      	ldr	r3, [pc, #36]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1b0      	bne.n	800a458 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4f6:	4b07      	ldr	r3, [pc, #28]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	@ (800a518 <prvSwitchTimerLists+0xc8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a04      	ldr	r2, [pc, #16]	@ (800a514 <prvSwitchTimerLists+0xc4>)
 800a502:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a504:	4a04      	ldr	r2, [pc, #16]	@ (800a518 <prvSwitchTimerLists+0xc8>)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	6013      	str	r3, [r2, #0]
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200017f0 	.word	0x200017f0
 800a518:	200017f4 	.word	0x200017f4

0800a51c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a522:	f000 f969 	bl	800a7f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a526:	4b15      	ldr	r3, [pc, #84]	@ (800a57c <prvCheckForValidListAndQueue+0x60>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d120      	bne.n	800a570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a52e:	4814      	ldr	r0, [pc, #80]	@ (800a580 <prvCheckForValidListAndQueue+0x64>)
 800a530:	f7fd fff2 	bl	8008518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a534:	4813      	ldr	r0, [pc, #76]	@ (800a584 <prvCheckForValidListAndQueue+0x68>)
 800a536:	f7fd ffef 	bl	8008518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a53a:	4b13      	ldr	r3, [pc, #76]	@ (800a588 <prvCheckForValidListAndQueue+0x6c>)
 800a53c:	4a10      	ldr	r2, [pc, #64]	@ (800a580 <prvCheckForValidListAndQueue+0x64>)
 800a53e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a540:	4b12      	ldr	r3, [pc, #72]	@ (800a58c <prvCheckForValidListAndQueue+0x70>)
 800a542:	4a10      	ldr	r2, [pc, #64]	@ (800a584 <prvCheckForValidListAndQueue+0x68>)
 800a544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a546:	2300      	movs	r3, #0
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	4b11      	ldr	r3, [pc, #68]	@ (800a590 <prvCheckForValidListAndQueue+0x74>)
 800a54c:	4a11      	ldr	r2, [pc, #68]	@ (800a594 <prvCheckForValidListAndQueue+0x78>)
 800a54e:	2110      	movs	r1, #16
 800a550:	200a      	movs	r0, #10
 800a552:	f7fe f8ff 	bl	8008754 <xQueueGenericCreateStatic>
 800a556:	4603      	mov	r3, r0
 800a558:	4a08      	ldr	r2, [pc, #32]	@ (800a57c <prvCheckForValidListAndQueue+0x60>)
 800a55a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a55c:	4b07      	ldr	r3, [pc, #28]	@ (800a57c <prvCheckForValidListAndQueue+0x60>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a564:	4b05      	ldr	r3, [pc, #20]	@ (800a57c <prvCheckForValidListAndQueue+0x60>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	490b      	ldr	r1, [pc, #44]	@ (800a598 <prvCheckForValidListAndQueue+0x7c>)
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fd24 	bl	8008fb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a570:	f000 f974 	bl	800a85c <vPortExitCritical>
}
 800a574:	bf00      	nop
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200017f8 	.word	0x200017f8
 800a580:	200017c8 	.word	0x200017c8
 800a584:	200017dc 	.word	0x200017dc
 800a588:	200017f0 	.word	0x200017f0
 800a58c:	200017f4 	.word	0x200017f4
 800a590:	200018a4 	.word	0x200018a4
 800a594:	20001804 	.word	0x20001804
 800a598:	0800fdfc 	.word	0x0800fdfc

0800a59c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3b04      	subs	r3, #4
 800a5ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b04      	subs	r3, #4
 800a5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a600 <pxPortInitialiseStack+0x64>)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b14      	subs	r3, #20
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3b04      	subs	r3, #4
 800a5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f06f 0202 	mvn.w	r2, #2
 800a5ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3b20      	subs	r3, #32
 800a5f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	0800a605 	.word	0x0800a605

0800a604 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a60e:	4b13      	ldr	r3, [pc, #76]	@ (800a65c <prvTaskExitError+0x58>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d00b      	beq.n	800a630 <prvTaskExitError+0x2c>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	60fb      	str	r3, [r7, #12]
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <prvTaskExitError+0x28>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	60bb      	str	r3, [r7, #8]
}
 800a642:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a644:	bf00      	nop
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d0fc      	beq.n	800a646 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a64c:	bf00      	nop
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	200000a4 	.word	0x200000a4

0800a660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a660:	4b07      	ldr	r3, [pc, #28]	@ (800a680 <pxCurrentTCBConst2>)
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	6808      	ldr	r0, [r1, #0]
 800a666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	f380 8809 	msr	PSP, r0
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f04f 0000 	mov.w	r0, #0
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	4770      	bx	lr
 800a67c:	f3af 8000 	nop.w

0800a680 <pxCurrentTCBConst2>:
 800a680:	200012c8 	.word	0x200012c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop

0800a688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a688:	4808      	ldr	r0, [pc, #32]	@ (800a6ac <prvPortStartFirstTask+0x24>)
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	f380 8808 	msr	MSP, r0
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8814 	msr	CONTROL, r0
 800a69a:	b662      	cpsie	i
 800a69c:	b661      	cpsie	f
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	df00      	svc	0
 800a6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed08 	.word	0xe000ed08

0800a6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6b6:	4b47      	ldr	r3, [pc, #284]	@ (800a7d4 <xPortStartScheduler+0x124>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a47      	ldr	r2, [pc, #284]	@ (800a7d8 <xPortStartScheduler+0x128>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d10b      	bne.n	800a6d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
}
 800a6d2:	bf00      	nop
 800a6d4:	bf00      	nop
 800a6d6:	e7fd      	b.n	800a6d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7d4 <xPortStartScheduler+0x124>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a7dc <xPortStartScheduler+0x12c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d10b      	bne.n	800a6fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60fb      	str	r3, [r7, #12]
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6fa:	4b39      	ldr	r3, [pc, #228]	@ (800a7e0 <xPortStartScheduler+0x130>)
 800a6fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	22ff      	movs	r2, #255	@ 0xff
 800a70a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	4b31      	ldr	r3, [pc, #196]	@ (800a7e4 <xPortStartScheduler+0x134>)
 800a720:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a722:	4b31      	ldr	r3, [pc, #196]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a724:	2207      	movs	r2, #7
 800a726:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a728:	e009      	b.n	800a73e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a72a:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3b01      	subs	r3, #1
 800a730:	4a2d      	ldr	r2, [pc, #180]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a732:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a746:	2b80      	cmp	r3, #128	@ 0x80
 800a748:	d0ef      	beq.n	800a72a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a74a:	4b27      	ldr	r3, [pc, #156]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f1c3 0307 	rsb	r3, r3, #7
 800a752:	2b04      	cmp	r3, #4
 800a754:	d00b      	beq.n	800a76e <xPortStartScheduler+0xbe>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	60bb      	str	r3, [r7, #8]
}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	e7fd      	b.n	800a76a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a76e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	021b      	lsls	r3, r3, #8
 800a774:	4a1c      	ldr	r2, [pc, #112]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a778:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a780:	4a19      	ldr	r2, [pc, #100]	@ (800a7e8 <xPortStartScheduler+0x138>)
 800a782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	b2da      	uxtb	r2, r3
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a78c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ec <xPortStartScheduler+0x13c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a16      	ldr	r2, [pc, #88]	@ (800a7ec <xPortStartScheduler+0x13c>)
 800a792:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a798:	4b14      	ldr	r3, [pc, #80]	@ (800a7ec <xPortStartScheduler+0x13c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a13      	ldr	r2, [pc, #76]	@ (800a7ec <xPortStartScheduler+0x13c>)
 800a79e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a7a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7a4:	f000 f8da 	bl	800a95c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7a8:	4b11      	ldr	r3, [pc, #68]	@ (800a7f0 <xPortStartScheduler+0x140>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7ae:	f000 f8f9 	bl	800a9a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7b2:	4b10      	ldr	r3, [pc, #64]	@ (800a7f4 <xPortStartScheduler+0x144>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a7f4 <xPortStartScheduler+0x144>)
 800a7b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a7bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7be:	f7ff ff63 	bl	800a688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7c2:	f7ff f831 	bl	8009828 <vTaskSwitchContext>
	prvTaskExitError();
 800a7c6:	f7ff ff1d 	bl	800a604 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	e000ed00 	.word	0xe000ed00
 800a7d8:	410fc271 	.word	0x410fc271
 800a7dc:	410fc270 	.word	0x410fc270
 800a7e0:	e000e400 	.word	0xe000e400
 800a7e4:	200018f4 	.word	0x200018f4
 800a7e8:	200018f8 	.word	0x200018f8
 800a7ec:	e000ed20 	.word	0xe000ed20
 800a7f0:	200000a4 	.word	0x200000a4
 800a7f4:	e000ef34 	.word	0xe000ef34

0800a7f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	607b      	str	r3, [r7, #4]
}
 800a810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a812:	4b10      	ldr	r3, [pc, #64]	@ (800a854 <vPortEnterCritical+0x5c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	4a0e      	ldr	r2, [pc, #56]	@ (800a854 <vPortEnterCritical+0x5c>)
 800a81a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a81c:	4b0d      	ldr	r3, [pc, #52]	@ (800a854 <vPortEnterCritical+0x5c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d110      	bne.n	800a846 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a824:	4b0c      	ldr	r3, [pc, #48]	@ (800a858 <vPortEnterCritical+0x60>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <vPortEnterCritical+0x4e>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	603b      	str	r3, [r7, #0]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <vPortEnterCritical+0x4a>
	}
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	200000a4 	.word	0x200000a4
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a862:	4b12      	ldr	r3, [pc, #72]	@ (800a8ac <vPortExitCritical+0x50>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10b      	bne.n	800a882 <vPortExitCritical+0x26>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	607b      	str	r3, [r7, #4]
}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	e7fd      	b.n	800a87e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a882:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <vPortExitCritical+0x50>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3b01      	subs	r3, #1
 800a888:	4a08      	ldr	r2, [pc, #32]	@ (800a8ac <vPortExitCritical+0x50>)
 800a88a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a88c:	4b07      	ldr	r3, [pc, #28]	@ (800a8ac <vPortExitCritical+0x50>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <vPortExitCritical+0x44>
 800a894:	2300      	movs	r3, #0
 800a896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f383 8811 	msr	BASEPRI, r3
}
 800a89e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	200000a4 	.word	0x200000a4

0800a8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8b0:	f3ef 8009 	mrs	r0, PSP
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	4b15      	ldr	r3, [pc, #84]	@ (800a910 <pxCurrentTCBConst>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	f01e 0f10 	tst.w	lr, #16
 800a8c0:	bf08      	it	eq
 800a8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8d4:	f380 8811 	msr	BASEPRI, r0
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f7fe ffa2 	bl	8009828 <vTaskSwitchContext>
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f380 8811 	msr	BASEPRI, r0
 800a8ec:	bc09      	pop	{r0, r3}
 800a8ee:	6819      	ldr	r1, [r3, #0]
 800a8f0:	6808      	ldr	r0, [r1, #0]
 800a8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f6:	f01e 0f10 	tst.w	lr, #16
 800a8fa:	bf08      	it	eq
 800a8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a900:	f380 8809 	msr	PSP, r0
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst>:
 800a910:	200012c8 	.word	0x200012c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop

0800a918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
}
 800a930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a932:	f7fe febf 	bl	80096b4 <xTaskIncrementTick>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a93c:	4b06      	ldr	r3, [pc, #24]	@ (800a958 <xPortSysTickHandler+0x40>)
 800a93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	2300      	movs	r3, #0
 800a946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	f383 8811 	msr	BASEPRI, r3
}
 800a94e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a960:	4b0b      	ldr	r3, [pc, #44]	@ (800a990 <vPortSetupTimerInterrupt+0x34>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a966:	4b0b      	ldr	r3, [pc, #44]	@ (800a994 <vPortSetupTimerInterrupt+0x38>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <vPortSetupTimerInterrupt+0x3c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0a      	ldr	r2, [pc, #40]	@ (800a99c <vPortSetupTimerInterrupt+0x40>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	099b      	lsrs	r3, r3, #6
 800a978:	4a09      	ldr	r2, [pc, #36]	@ (800a9a0 <vPortSetupTimerInterrupt+0x44>)
 800a97a:	3b01      	subs	r3, #1
 800a97c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a97e:	4b04      	ldr	r3, [pc, #16]	@ (800a990 <vPortSetupTimerInterrupt+0x34>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
}
 800a984:	bf00      	nop
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	e000e010 	.word	0xe000e010
 800a994:	e000e018 	.word	0xe000e018
 800a998:	20000098 	.word	0x20000098
 800a99c:	10624dd3 	.word	0x10624dd3
 800a9a0:	e000e014 	.word	0xe000e014

0800a9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a9b4 <vPortEnableVFP+0x10>
 800a9a8:	6801      	ldr	r1, [r0, #0]
 800a9aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a9ae:	6001      	str	r1, [r0, #0]
 800a9b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9b2:	bf00      	nop
 800a9b4:	e000ed88 	.word	0xe000ed88

0800a9b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9be:	f3ef 8305 	mrs	r3, IPSR
 800a9c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b0f      	cmp	r3, #15
 800a9c8:	d915      	bls.n	800a9f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ca:	4a18      	ldr	r2, [pc, #96]	@ (800aa2c <vPortValidateInterruptPriority+0x74>)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9d4:	4b16      	ldr	r3, [pc, #88]	@ (800aa30 <vPortValidateInterruptPriority+0x78>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	7afa      	ldrb	r2, [r7, #11]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d20b      	bcs.n	800a9f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	607b      	str	r3, [r7, #4]
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	e7fd      	b.n	800a9f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa34 <vPortValidateInterruptPriority+0x7c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800aa38 <vPortValidateInterruptPriority+0x80>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d90b      	bls.n	800aa1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	603b      	str	r3, [r7, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <vPortValidateInterruptPriority+0x62>
	}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	e000e3f0 	.word	0xe000e3f0
 800aa30:	200018f4 	.word	0x200018f4
 800aa34:	e000ed0c 	.word	0xe000ed0c
 800aa38:	200018f8 	.word	0x200018f8

0800aa3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08a      	sub	sp, #40	@ 0x28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa48:	f7fe fd78 	bl	800953c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa4c:	4b5c      	ldr	r3, [pc, #368]	@ (800abc0 <pvPortMalloc+0x184>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa54:	f000 f924 	bl	800aca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa58:	4b5a      	ldr	r3, [pc, #360]	@ (800abc4 <pvPortMalloc+0x188>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4013      	ands	r3, r2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 8095 	bne.w	800ab90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01e      	beq.n	800aaaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa6c:	2208      	movs	r2, #8
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4413      	add	r3, r2
 800aa72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d015      	beq.n	800aaaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f023 0307 	bic.w	r3, r3, #7
 800aa84:	3308      	adds	r3, #8
 800aa86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f003 0307 	and.w	r3, r3, #7
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00b      	beq.n	800aaaa <pvPortMalloc+0x6e>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	617b      	str	r3, [r7, #20]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d06f      	beq.n	800ab90 <pvPortMalloc+0x154>
 800aab0:	4b45      	ldr	r3, [pc, #276]	@ (800abc8 <pvPortMalloc+0x18c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d86a      	bhi.n	800ab90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aaba:	4b44      	ldr	r3, [pc, #272]	@ (800abcc <pvPortMalloc+0x190>)
 800aabc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aabe:	4b43      	ldr	r3, [pc, #268]	@ (800abcc <pvPortMalloc+0x190>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aac4:	e004      	b.n	800aad0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d903      	bls.n	800aae2 <pvPortMalloc+0xa6>
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1f1      	bne.n	800aac6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aae2:	4b37      	ldr	r3, [pc, #220]	@ (800abc0 <pvPortMalloc+0x184>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d051      	beq.n	800ab90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2208      	movs	r2, #8
 800aaf2:	4413      	add	r3, r2
 800aaf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	2308      	movs	r3, #8
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d920      	bls.n	800ab50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4413      	add	r3, r2
 800ab14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <pvPortMalloc+0xfc>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	613b      	str	r3, [r7, #16]
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab4a:	69b8      	ldr	r0, [r7, #24]
 800ab4c:	f000 f90a 	bl	800ad64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab50:	4b1d      	ldr	r3, [pc, #116]	@ (800abc8 <pvPortMalloc+0x18c>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	4a1b      	ldr	r2, [pc, #108]	@ (800abc8 <pvPortMalloc+0x18c>)
 800ab5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab5e:	4b1a      	ldr	r3, [pc, #104]	@ (800abc8 <pvPortMalloc+0x18c>)
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b1b      	ldr	r3, [pc, #108]	@ (800abd0 <pvPortMalloc+0x194>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d203      	bcs.n	800ab72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab6a:	4b17      	ldr	r3, [pc, #92]	@ (800abc8 <pvPortMalloc+0x18c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a18      	ldr	r2, [pc, #96]	@ (800abd0 <pvPortMalloc+0x194>)
 800ab70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b13      	ldr	r3, [pc, #76]	@ (800abc4 <pvPortMalloc+0x188>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab86:	4b13      	ldr	r3, [pc, #76]	@ (800abd4 <pvPortMalloc+0x198>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	4a11      	ldr	r2, [pc, #68]	@ (800abd4 <pvPortMalloc+0x198>)
 800ab8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab90:	f7fe fce2 	bl	8009558 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00b      	beq.n	800abb6 <pvPortMalloc+0x17a>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <pvPortMalloc+0x176>
	return pvReturn;
 800abb6:	69fb      	ldr	r3, [r7, #28]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3728      	adds	r7, #40	@ 0x28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	20003074 	.word	0x20003074
 800abc4:	20003088 	.word	0x20003088
 800abc8:	20003078 	.word	0x20003078
 800abcc:	2000306c 	.word	0x2000306c
 800abd0:	2000307c 	.word	0x2000307c
 800abd4:	20003080 	.word	0x20003080

0800abd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d04f      	beq.n	800ac8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abea:	2308      	movs	r3, #8
 800abec:	425b      	negs	r3, r3
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	4413      	add	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	4b25      	ldr	r3, [pc, #148]	@ (800ac94 <vPortFree+0xbc>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4013      	ands	r3, r2
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10b      	bne.n	800ac1e <vPortFree+0x46>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	60fb      	str	r3, [r7, #12]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <vPortFree+0x66>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	60bb      	str	r3, [r7, #8]
}
 800ac38:	bf00      	nop
 800ac3a:	bf00      	nop
 800ac3c:	e7fd      	b.n	800ac3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	4b14      	ldr	r3, [pc, #80]	@ (800ac94 <vPortFree+0xbc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4013      	ands	r3, r2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01e      	beq.n	800ac8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d11a      	bne.n	800ac8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <vPortFree+0xbc>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	43db      	mvns	r3, r3
 800ac5e:	401a      	ands	r2, r3
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac64:	f7fe fc6a 	bl	800953c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <vPortFree+0xc0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4413      	add	r3, r2
 800ac72:	4a09      	ldr	r2, [pc, #36]	@ (800ac98 <vPortFree+0xc0>)
 800ac74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac76:	6938      	ldr	r0, [r7, #16]
 800ac78:	f000 f874 	bl	800ad64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac7c:	4b07      	ldr	r3, [pc, #28]	@ (800ac9c <vPortFree+0xc4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3301      	adds	r3, #1
 800ac82:	4a06      	ldr	r2, [pc, #24]	@ (800ac9c <vPortFree+0xc4>)
 800ac84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac86:	f7fe fc67 	bl	8009558 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac8a:	bf00      	nop
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20003088 	.word	0x20003088
 800ac98:	20003078 	.word	0x20003078
 800ac9c:	20003084 	.word	0x20003084

0800aca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aca6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800acaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800acac:	4b27      	ldr	r3, [pc, #156]	@ (800ad4c <prvHeapInit+0xac>)
 800acae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f003 0307 	and.w	r3, r3, #7
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00c      	beq.n	800acd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3307      	adds	r3, #7
 800acbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 0307 	bic.w	r3, r3, #7
 800acc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	4a1f      	ldr	r2, [pc, #124]	@ (800ad4c <prvHeapInit+0xac>)
 800acd0:	4413      	add	r3, r2
 800acd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ad50 <prvHeapInit+0xb0>)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acde:	4b1c      	ldr	r3, [pc, #112]	@ (800ad50 <prvHeapInit+0xb0>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	4413      	add	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acec:	2208      	movs	r2, #8
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	1a9b      	subs	r3, r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0307 	bic.w	r3, r3, #7
 800acfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4a15      	ldr	r2, [pc, #84]	@ (800ad54 <prvHeapInit+0xb4>)
 800ad00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad02:	4b14      	ldr	r3, [pc, #80]	@ (800ad54 <prvHeapInit+0xb4>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2200      	movs	r2, #0
 800ad08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad0a:	4b12      	ldr	r3, [pc, #72]	@ (800ad54 <prvHeapInit+0xb4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	1ad2      	subs	r2, r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad20:	4b0c      	ldr	r3, [pc, #48]	@ (800ad54 <prvHeapInit+0xb4>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ad58 <prvHeapInit+0xb8>)
 800ad2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	4a09      	ldr	r2, [pc, #36]	@ (800ad5c <prvHeapInit+0xbc>)
 800ad36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad38:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <prvHeapInit+0xc0>)
 800ad3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad3e:	601a      	str	r2, [r3, #0]
}
 800ad40:	bf00      	nop
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	200018fc 	.word	0x200018fc
 800ad50:	2000306c 	.word	0x2000306c
 800ad54:	20003074 	.word	0x20003074
 800ad58:	2000307c 	.word	0x2000307c
 800ad5c:	20003078 	.word	0x20003078
 800ad60:	20003088 	.word	0x20003088

0800ad64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad6c:	4b28      	ldr	r3, [pc, #160]	@ (800ae10 <prvInsertBlockIntoFreeList+0xac>)
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e002      	b.n	800ad78 <prvInsertBlockIntoFreeList+0x14>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d8f7      	bhi.n	800ad72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d108      	bne.n	800ada6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	441a      	add	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	441a      	add	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d118      	bne.n	800adec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	4b15      	ldr	r3, [pc, #84]	@ (800ae14 <prvInsertBlockIntoFreeList+0xb0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d00d      	beq.n	800ade2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	441a      	add	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	e008      	b.n	800adf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ade2:	4b0c      	ldr	r3, [pc, #48]	@ (800ae14 <prvInsertBlockIntoFreeList+0xb0>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	e003      	b.n	800adf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d002      	beq.n	800ae02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	2000306c 	.word	0x2000306c
 800ae14:	20003074 	.word	0x20003074

0800ae18 <__cvt>:
 800ae18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	ec57 6b10 	vmov	r6, r7, d0
 800ae20:	2f00      	cmp	r7, #0
 800ae22:	460c      	mov	r4, r1
 800ae24:	4619      	mov	r1, r3
 800ae26:	463b      	mov	r3, r7
 800ae28:	bfbb      	ittet	lt
 800ae2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ae2e:	461f      	movlt	r7, r3
 800ae30:	2300      	movge	r3, #0
 800ae32:	232d      	movlt	r3, #45	@ 0x2d
 800ae34:	700b      	strb	r3, [r1, #0]
 800ae36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ae3c:	4691      	mov	r9, r2
 800ae3e:	f023 0820 	bic.w	r8, r3, #32
 800ae42:	bfbc      	itt	lt
 800ae44:	4632      	movlt	r2, r6
 800ae46:	4616      	movlt	r6, r2
 800ae48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae4c:	d005      	beq.n	800ae5a <__cvt+0x42>
 800ae4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ae52:	d100      	bne.n	800ae56 <__cvt+0x3e>
 800ae54:	3401      	adds	r4, #1
 800ae56:	2102      	movs	r1, #2
 800ae58:	e000      	b.n	800ae5c <__cvt+0x44>
 800ae5a:	2103      	movs	r1, #3
 800ae5c:	ab03      	add	r3, sp, #12
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	ab02      	add	r3, sp, #8
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	ec47 6b10 	vmov	d0, r6, r7
 800ae68:	4653      	mov	r3, sl
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	f001 f8d4 	bl	800c018 <_dtoa_r>
 800ae70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ae74:	4605      	mov	r5, r0
 800ae76:	d119      	bne.n	800aeac <__cvt+0x94>
 800ae78:	f019 0f01 	tst.w	r9, #1
 800ae7c:	d00e      	beq.n	800ae9c <__cvt+0x84>
 800ae7e:	eb00 0904 	add.w	r9, r0, r4
 800ae82:	2200      	movs	r2, #0
 800ae84:	2300      	movs	r3, #0
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae8e:	b108      	cbz	r0, 800ae94 <__cvt+0x7c>
 800ae90:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae94:	2230      	movs	r2, #48	@ 0x30
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	454b      	cmp	r3, r9
 800ae9a:	d31e      	bcc.n	800aeda <__cvt+0xc2>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aea0:	1b5b      	subs	r3, r3, r5
 800aea2:	4628      	mov	r0, r5
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	b004      	add	sp, #16
 800aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aeb0:	eb00 0904 	add.w	r9, r0, r4
 800aeb4:	d1e5      	bne.n	800ae82 <__cvt+0x6a>
 800aeb6:	7803      	ldrb	r3, [r0, #0]
 800aeb8:	2b30      	cmp	r3, #48	@ 0x30
 800aeba:	d10a      	bne.n	800aed2 <__cvt+0xba>
 800aebc:	2200      	movs	r2, #0
 800aebe:	2300      	movs	r3, #0
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 800aec8:	b918      	cbnz	r0, 800aed2 <__cvt+0xba>
 800aeca:	f1c4 0401 	rsb	r4, r4, #1
 800aece:	f8ca 4000 	str.w	r4, [sl]
 800aed2:	f8da 3000 	ldr.w	r3, [sl]
 800aed6:	4499      	add	r9, r3
 800aed8:	e7d3      	b.n	800ae82 <__cvt+0x6a>
 800aeda:	1c59      	adds	r1, r3, #1
 800aedc:	9103      	str	r1, [sp, #12]
 800aede:	701a      	strb	r2, [r3, #0]
 800aee0:	e7d9      	b.n	800ae96 <__cvt+0x7e>

0800aee2 <__exponent>:
 800aee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aee4:	2900      	cmp	r1, #0
 800aee6:	bfba      	itte	lt
 800aee8:	4249      	neglt	r1, r1
 800aeea:	232d      	movlt	r3, #45	@ 0x2d
 800aeec:	232b      	movge	r3, #43	@ 0x2b
 800aeee:	2909      	cmp	r1, #9
 800aef0:	7002      	strb	r2, [r0, #0]
 800aef2:	7043      	strb	r3, [r0, #1]
 800aef4:	dd29      	ble.n	800af4a <__exponent+0x68>
 800aef6:	f10d 0307 	add.w	r3, sp, #7
 800aefa:	461d      	mov	r5, r3
 800aefc:	270a      	movs	r7, #10
 800aefe:	461a      	mov	r2, r3
 800af00:	fbb1 f6f7 	udiv	r6, r1, r7
 800af04:	fb07 1416 	mls	r4, r7, r6, r1
 800af08:	3430      	adds	r4, #48	@ 0x30
 800af0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af0e:	460c      	mov	r4, r1
 800af10:	2c63      	cmp	r4, #99	@ 0x63
 800af12:	f103 33ff 	add.w	r3, r3, #4294967295
 800af16:	4631      	mov	r1, r6
 800af18:	dcf1      	bgt.n	800aefe <__exponent+0x1c>
 800af1a:	3130      	adds	r1, #48	@ 0x30
 800af1c:	1e94      	subs	r4, r2, #2
 800af1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af22:	1c41      	adds	r1, r0, #1
 800af24:	4623      	mov	r3, r4
 800af26:	42ab      	cmp	r3, r5
 800af28:	d30a      	bcc.n	800af40 <__exponent+0x5e>
 800af2a:	f10d 0309 	add.w	r3, sp, #9
 800af2e:	1a9b      	subs	r3, r3, r2
 800af30:	42ac      	cmp	r4, r5
 800af32:	bf88      	it	hi
 800af34:	2300      	movhi	r3, #0
 800af36:	3302      	adds	r3, #2
 800af38:	4403      	add	r3, r0
 800af3a:	1a18      	subs	r0, r3, r0
 800af3c:	b003      	add	sp, #12
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800af48:	e7ed      	b.n	800af26 <__exponent+0x44>
 800af4a:	2330      	movs	r3, #48	@ 0x30
 800af4c:	3130      	adds	r1, #48	@ 0x30
 800af4e:	7083      	strb	r3, [r0, #2]
 800af50:	70c1      	strb	r1, [r0, #3]
 800af52:	1d03      	adds	r3, r0, #4
 800af54:	e7f1      	b.n	800af3a <__exponent+0x58>
	...

0800af58 <_printf_float>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	b08d      	sub	sp, #52	@ 0x34
 800af5e:	460c      	mov	r4, r1
 800af60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800af64:	4616      	mov	r6, r2
 800af66:	461f      	mov	r7, r3
 800af68:	4605      	mov	r5, r0
 800af6a:	f000 feef 	bl	800bd4c <_localeconv_r>
 800af6e:	6803      	ldr	r3, [r0, #0]
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	4618      	mov	r0, r3
 800af74:	f7f5 f97c 	bl	8000270 <strlen>
 800af78:	2300      	movs	r3, #0
 800af7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af7c:	f8d8 3000 	ldr.w	r3, [r8]
 800af80:	9005      	str	r0, [sp, #20]
 800af82:	3307      	adds	r3, #7
 800af84:	f023 0307 	bic.w	r3, r3, #7
 800af88:	f103 0208 	add.w	r2, r3, #8
 800af8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af90:	f8d4 b000 	ldr.w	fp, [r4]
 800af94:	f8c8 2000 	str.w	r2, [r8]
 800af98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800afa0:	9307      	str	r3, [sp, #28]
 800afa2:	f8cd 8018 	str.w	r8, [sp, #24]
 800afa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800afaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afae:	4b9c      	ldr	r3, [pc, #624]	@ (800b220 <_printf_float+0x2c8>)
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295
 800afb4:	f7f5 fdba 	bl	8000b2c <__aeabi_dcmpun>
 800afb8:	bb70      	cbnz	r0, 800b018 <_printf_float+0xc0>
 800afba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afbe:	4b98      	ldr	r3, [pc, #608]	@ (800b220 <_printf_float+0x2c8>)
 800afc0:	f04f 32ff 	mov.w	r2, #4294967295
 800afc4:	f7f5 fd94 	bl	8000af0 <__aeabi_dcmple>
 800afc8:	bb30      	cbnz	r0, 800b018 <_printf_float+0xc0>
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	4640      	mov	r0, r8
 800afd0:	4649      	mov	r1, r9
 800afd2:	f7f5 fd83 	bl	8000adc <__aeabi_dcmplt>
 800afd6:	b110      	cbz	r0, 800afde <_printf_float+0x86>
 800afd8:	232d      	movs	r3, #45	@ 0x2d
 800afda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afde:	4a91      	ldr	r2, [pc, #580]	@ (800b224 <_printf_float+0x2cc>)
 800afe0:	4b91      	ldr	r3, [pc, #580]	@ (800b228 <_printf_float+0x2d0>)
 800afe2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800afe6:	bf94      	ite	ls
 800afe8:	4690      	movls	r8, r2
 800afea:	4698      	movhi	r8, r3
 800afec:	2303      	movs	r3, #3
 800afee:	6123      	str	r3, [r4, #16]
 800aff0:	f02b 0304 	bic.w	r3, fp, #4
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	f04f 0900 	mov.w	r9, #0
 800affa:	9700      	str	r7, [sp, #0]
 800affc:	4633      	mov	r3, r6
 800affe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f9d2 	bl	800b3ac <_printf_common>
 800b008:	3001      	adds	r0, #1
 800b00a:	f040 808d 	bne.w	800b128 <_printf_float+0x1d0>
 800b00e:	f04f 30ff 	mov.w	r0, #4294967295
 800b012:	b00d      	add	sp, #52	@ 0x34
 800b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b018:	4642      	mov	r2, r8
 800b01a:	464b      	mov	r3, r9
 800b01c:	4640      	mov	r0, r8
 800b01e:	4649      	mov	r1, r9
 800b020:	f7f5 fd84 	bl	8000b2c <__aeabi_dcmpun>
 800b024:	b140      	cbz	r0, 800b038 <_printf_float+0xe0>
 800b026:	464b      	mov	r3, r9
 800b028:	2b00      	cmp	r3, #0
 800b02a:	bfbc      	itt	lt
 800b02c:	232d      	movlt	r3, #45	@ 0x2d
 800b02e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b032:	4a7e      	ldr	r2, [pc, #504]	@ (800b22c <_printf_float+0x2d4>)
 800b034:	4b7e      	ldr	r3, [pc, #504]	@ (800b230 <_printf_float+0x2d8>)
 800b036:	e7d4      	b.n	800afe2 <_printf_float+0x8a>
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b03e:	9206      	str	r2, [sp, #24]
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	d13b      	bne.n	800b0bc <_printf_float+0x164>
 800b044:	2306      	movs	r3, #6
 800b046:	6063      	str	r3, [r4, #4]
 800b048:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b04c:	2300      	movs	r3, #0
 800b04e:	6022      	str	r2, [r4, #0]
 800b050:	9303      	str	r3, [sp, #12]
 800b052:	ab0a      	add	r3, sp, #40	@ 0x28
 800b054:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b058:	ab09      	add	r3, sp, #36	@ 0x24
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	6861      	ldr	r1, [r4, #4]
 800b05e:	ec49 8b10 	vmov	d0, r8, r9
 800b062:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b066:	4628      	mov	r0, r5
 800b068:	f7ff fed6 	bl	800ae18 <__cvt>
 800b06c:	9b06      	ldr	r3, [sp, #24]
 800b06e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b070:	2b47      	cmp	r3, #71	@ 0x47
 800b072:	4680      	mov	r8, r0
 800b074:	d129      	bne.n	800b0ca <_printf_float+0x172>
 800b076:	1cc8      	adds	r0, r1, #3
 800b078:	db02      	blt.n	800b080 <_printf_float+0x128>
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	4299      	cmp	r1, r3
 800b07e:	dd41      	ble.n	800b104 <_printf_float+0x1ac>
 800b080:	f1aa 0a02 	sub.w	sl, sl, #2
 800b084:	fa5f fa8a 	uxtb.w	sl, sl
 800b088:	3901      	subs	r1, #1
 800b08a:	4652      	mov	r2, sl
 800b08c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b090:	9109      	str	r1, [sp, #36]	@ 0x24
 800b092:	f7ff ff26 	bl	800aee2 <__exponent>
 800b096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b098:	1813      	adds	r3, r2, r0
 800b09a:	2a01      	cmp	r2, #1
 800b09c:	4681      	mov	r9, r0
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	dc02      	bgt.n	800b0a8 <_printf_float+0x150>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	07d2      	lsls	r2, r2, #31
 800b0a6:	d501      	bpl.n	800b0ac <_printf_float+0x154>
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0a2      	beq.n	800affa <_printf_float+0xa2>
 800b0b4:	232d      	movs	r3, #45	@ 0x2d
 800b0b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0ba:	e79e      	b.n	800affa <_printf_float+0xa2>
 800b0bc:	9a06      	ldr	r2, [sp, #24]
 800b0be:	2a47      	cmp	r2, #71	@ 0x47
 800b0c0:	d1c2      	bne.n	800b048 <_printf_float+0xf0>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1c0      	bne.n	800b048 <_printf_float+0xf0>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e7bd      	b.n	800b046 <_printf_float+0xee>
 800b0ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0ce:	d9db      	bls.n	800b088 <_printf_float+0x130>
 800b0d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b0d4:	d118      	bne.n	800b108 <_printf_float+0x1b0>
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	6863      	ldr	r3, [r4, #4]
 800b0da:	dd0b      	ble.n	800b0f4 <_printf_float+0x19c>
 800b0dc:	6121      	str	r1, [r4, #16]
 800b0de:	b913      	cbnz	r3, 800b0e6 <_printf_float+0x18e>
 800b0e0:	6822      	ldr	r2, [r4, #0]
 800b0e2:	07d0      	lsls	r0, r2, #31
 800b0e4:	d502      	bpl.n	800b0ec <_printf_float+0x194>
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	440b      	add	r3, r1
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	e7db      	b.n	800b0ac <_printf_float+0x154>
 800b0f4:	b913      	cbnz	r3, 800b0fc <_printf_float+0x1a4>
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	07d2      	lsls	r2, r2, #31
 800b0fa:	d501      	bpl.n	800b100 <_printf_float+0x1a8>
 800b0fc:	3302      	adds	r3, #2
 800b0fe:	e7f4      	b.n	800b0ea <_printf_float+0x192>
 800b100:	2301      	movs	r3, #1
 800b102:	e7f2      	b.n	800b0ea <_printf_float+0x192>
 800b104:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b10a:	4299      	cmp	r1, r3
 800b10c:	db05      	blt.n	800b11a <_printf_float+0x1c2>
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	6121      	str	r1, [r4, #16]
 800b112:	07d8      	lsls	r0, r3, #31
 800b114:	d5ea      	bpl.n	800b0ec <_printf_float+0x194>
 800b116:	1c4b      	adds	r3, r1, #1
 800b118:	e7e7      	b.n	800b0ea <_printf_float+0x192>
 800b11a:	2900      	cmp	r1, #0
 800b11c:	bfd4      	ite	le
 800b11e:	f1c1 0202 	rsble	r2, r1, #2
 800b122:	2201      	movgt	r2, #1
 800b124:	4413      	add	r3, r2
 800b126:	e7e0      	b.n	800b0ea <_printf_float+0x192>
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	055a      	lsls	r2, r3, #21
 800b12c:	d407      	bmi.n	800b13e <_printf_float+0x1e6>
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	4642      	mov	r2, r8
 800b132:	4631      	mov	r1, r6
 800b134:	4628      	mov	r0, r5
 800b136:	47b8      	blx	r7
 800b138:	3001      	adds	r0, #1
 800b13a:	d12b      	bne.n	800b194 <_printf_float+0x23c>
 800b13c:	e767      	b.n	800b00e <_printf_float+0xb6>
 800b13e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b142:	f240 80dd 	bls.w	800b300 <_printf_float+0x3a8>
 800b146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b14a:	2200      	movs	r2, #0
 800b14c:	2300      	movs	r3, #0
 800b14e:	f7f5 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b152:	2800      	cmp	r0, #0
 800b154:	d033      	beq.n	800b1be <_printf_float+0x266>
 800b156:	4a37      	ldr	r2, [pc, #220]	@ (800b234 <_printf_float+0x2dc>)
 800b158:	2301      	movs	r3, #1
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b8      	blx	r7
 800b160:	3001      	adds	r0, #1
 800b162:	f43f af54 	beq.w	800b00e <_printf_float+0xb6>
 800b166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b16a:	4543      	cmp	r3, r8
 800b16c:	db02      	blt.n	800b174 <_printf_float+0x21c>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	07d8      	lsls	r0, r3, #31
 800b172:	d50f      	bpl.n	800b194 <_printf_float+0x23c>
 800b174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b178:	4631      	mov	r1, r6
 800b17a:	4628      	mov	r0, r5
 800b17c:	47b8      	blx	r7
 800b17e:	3001      	adds	r0, #1
 800b180:	f43f af45 	beq.w	800b00e <_printf_float+0xb6>
 800b184:	f04f 0900 	mov.w	r9, #0
 800b188:	f108 38ff 	add.w	r8, r8, #4294967295
 800b18c:	f104 0a1a 	add.w	sl, r4, #26
 800b190:	45c8      	cmp	r8, r9
 800b192:	dc09      	bgt.n	800b1a8 <_printf_float+0x250>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	079b      	lsls	r3, r3, #30
 800b198:	f100 8103 	bmi.w	800b3a2 <_printf_float+0x44a>
 800b19c:	68e0      	ldr	r0, [r4, #12]
 800b19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a0:	4298      	cmp	r0, r3
 800b1a2:	bfb8      	it	lt
 800b1a4:	4618      	movlt	r0, r3
 800b1a6:	e734      	b.n	800b012 <_printf_float+0xba>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b8      	blx	r7
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	f43f af2b 	beq.w	800b00e <_printf_float+0xb6>
 800b1b8:	f109 0901 	add.w	r9, r9, #1
 800b1bc:	e7e8      	b.n	800b190 <_printf_float+0x238>
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc39      	bgt.n	800b238 <_printf_float+0x2e0>
 800b1c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b234 <_printf_float+0x2dc>)
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	f43f af1d 	beq.w	800b00e <_printf_float+0xb6>
 800b1d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b1d8:	ea59 0303 	orrs.w	r3, r9, r3
 800b1dc:	d102      	bne.n	800b1e4 <_printf_float+0x28c>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	07d9      	lsls	r1, r3, #31
 800b1e2:	d5d7      	bpl.n	800b194 <_printf_float+0x23c>
 800b1e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b8      	blx	r7
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	f43f af0d 	beq.w	800b00e <_printf_float+0xb6>
 800b1f4:	f04f 0a00 	mov.w	sl, #0
 800b1f8:	f104 0b1a 	add.w	fp, r4, #26
 800b1fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1fe:	425b      	negs	r3, r3
 800b200:	4553      	cmp	r3, sl
 800b202:	dc01      	bgt.n	800b208 <_printf_float+0x2b0>
 800b204:	464b      	mov	r3, r9
 800b206:	e793      	b.n	800b130 <_printf_float+0x1d8>
 800b208:	2301      	movs	r3, #1
 800b20a:	465a      	mov	r2, fp
 800b20c:	4631      	mov	r1, r6
 800b20e:	4628      	mov	r0, r5
 800b210:	47b8      	blx	r7
 800b212:	3001      	adds	r0, #1
 800b214:	f43f aefb 	beq.w	800b00e <_printf_float+0xb6>
 800b218:	f10a 0a01 	add.w	sl, sl, #1
 800b21c:	e7ee      	b.n	800b1fc <_printf_float+0x2a4>
 800b21e:	bf00      	nop
 800b220:	7fefffff 	.word	0x7fefffff
 800b224:	0800feb8 	.word	0x0800feb8
 800b228:	0800febc 	.word	0x0800febc
 800b22c:	0800fec0 	.word	0x0800fec0
 800b230:	0800fec4 	.word	0x0800fec4
 800b234:	0800fec8 	.word	0x0800fec8
 800b238:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b23a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b23e:	4553      	cmp	r3, sl
 800b240:	bfa8      	it	ge
 800b242:	4653      	movge	r3, sl
 800b244:	2b00      	cmp	r3, #0
 800b246:	4699      	mov	r9, r3
 800b248:	dc36      	bgt.n	800b2b8 <_printf_float+0x360>
 800b24a:	f04f 0b00 	mov.w	fp, #0
 800b24e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b252:	f104 021a 	add.w	r2, r4, #26
 800b256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b258:	9306      	str	r3, [sp, #24]
 800b25a:	eba3 0309 	sub.w	r3, r3, r9
 800b25e:	455b      	cmp	r3, fp
 800b260:	dc31      	bgt.n	800b2c6 <_printf_float+0x36e>
 800b262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b264:	459a      	cmp	sl, r3
 800b266:	dc3a      	bgt.n	800b2de <_printf_float+0x386>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	07da      	lsls	r2, r3, #31
 800b26c:	d437      	bmi.n	800b2de <_printf_float+0x386>
 800b26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b270:	ebaa 0903 	sub.w	r9, sl, r3
 800b274:	9b06      	ldr	r3, [sp, #24]
 800b276:	ebaa 0303 	sub.w	r3, sl, r3
 800b27a:	4599      	cmp	r9, r3
 800b27c:	bfa8      	it	ge
 800b27e:	4699      	movge	r9, r3
 800b280:	f1b9 0f00 	cmp.w	r9, #0
 800b284:	dc33      	bgt.n	800b2ee <_printf_float+0x396>
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b28e:	f104 0b1a 	add.w	fp, r4, #26
 800b292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b294:	ebaa 0303 	sub.w	r3, sl, r3
 800b298:	eba3 0309 	sub.w	r3, r3, r9
 800b29c:	4543      	cmp	r3, r8
 800b29e:	f77f af79 	ble.w	800b194 <_printf_float+0x23c>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	465a      	mov	r2, fp
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	f43f aeae 	beq.w	800b00e <_printf_float+0xb6>
 800b2b2:	f108 0801 	add.w	r8, r8, #1
 800b2b6:	e7ec      	b.n	800b292 <_printf_float+0x33a>
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d1c2      	bne.n	800b24a <_printf_float+0x2f2>
 800b2c4:	e6a3      	b.n	800b00e <_printf_float+0xb6>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	9206      	str	r2, [sp, #24]
 800b2ce:	47b8      	blx	r7
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f43f ae9c 	beq.w	800b00e <_printf_float+0xb6>
 800b2d6:	9a06      	ldr	r2, [sp, #24]
 800b2d8:	f10b 0b01 	add.w	fp, fp, #1
 800b2dc:	e7bb      	b.n	800b256 <_printf_float+0x2fe>
 800b2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b8      	blx	r7
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d1c0      	bne.n	800b26e <_printf_float+0x316>
 800b2ec:	e68f      	b.n	800b00e <_printf_float+0xb6>
 800b2ee:	9a06      	ldr	r2, [sp, #24]
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	4442      	add	r2, r8
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d1c3      	bne.n	800b286 <_printf_float+0x32e>
 800b2fe:	e686      	b.n	800b00e <_printf_float+0xb6>
 800b300:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b304:	f1ba 0f01 	cmp.w	sl, #1
 800b308:	dc01      	bgt.n	800b30e <_printf_float+0x3b6>
 800b30a:	07db      	lsls	r3, r3, #31
 800b30c:	d536      	bpl.n	800b37c <_printf_float+0x424>
 800b30e:	2301      	movs	r3, #1
 800b310:	4642      	mov	r2, r8
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f ae78 	beq.w	800b00e <_printf_float+0xb6>
 800b31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f ae70 	beq.w	800b00e <_printf_float+0xb6>
 800b32e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b332:	2200      	movs	r2, #0
 800b334:	2300      	movs	r3, #0
 800b336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b33a:	f7f5 fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b33e:	b9c0      	cbnz	r0, 800b372 <_printf_float+0x41a>
 800b340:	4653      	mov	r3, sl
 800b342:	f108 0201 	add.w	r2, r8, #1
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	d10c      	bne.n	800b36a <_printf_float+0x412>
 800b350:	e65d      	b.n	800b00e <_printf_float+0xb6>
 800b352:	2301      	movs	r3, #1
 800b354:	465a      	mov	r2, fp
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	f43f ae56 	beq.w	800b00e <_printf_float+0xb6>
 800b362:	f108 0801 	add.w	r8, r8, #1
 800b366:	45d0      	cmp	r8, sl
 800b368:	dbf3      	blt.n	800b352 <_printf_float+0x3fa>
 800b36a:	464b      	mov	r3, r9
 800b36c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b370:	e6df      	b.n	800b132 <_printf_float+0x1da>
 800b372:	f04f 0800 	mov.w	r8, #0
 800b376:	f104 0b1a 	add.w	fp, r4, #26
 800b37a:	e7f4      	b.n	800b366 <_printf_float+0x40e>
 800b37c:	2301      	movs	r3, #1
 800b37e:	4642      	mov	r2, r8
 800b380:	e7e1      	b.n	800b346 <_printf_float+0x3ee>
 800b382:	2301      	movs	r3, #1
 800b384:	464a      	mov	r2, r9
 800b386:	4631      	mov	r1, r6
 800b388:	4628      	mov	r0, r5
 800b38a:	47b8      	blx	r7
 800b38c:	3001      	adds	r0, #1
 800b38e:	f43f ae3e 	beq.w	800b00e <_printf_float+0xb6>
 800b392:	f108 0801 	add.w	r8, r8, #1
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b39a:	1a5b      	subs	r3, r3, r1
 800b39c:	4543      	cmp	r3, r8
 800b39e:	dcf0      	bgt.n	800b382 <_printf_float+0x42a>
 800b3a0:	e6fc      	b.n	800b19c <_printf_float+0x244>
 800b3a2:	f04f 0800 	mov.w	r8, #0
 800b3a6:	f104 0919 	add.w	r9, r4, #25
 800b3aa:	e7f4      	b.n	800b396 <_printf_float+0x43e>

0800b3ac <_printf_common>:
 800b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	4616      	mov	r6, r2
 800b3b2:	4698      	mov	r8, r3
 800b3b4:	688a      	ldr	r2, [r1, #8]
 800b3b6:	690b      	ldr	r3, [r1, #16]
 800b3b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	bfb8      	it	lt
 800b3c0:	4613      	movlt	r3, r2
 800b3c2:	6033      	str	r3, [r6, #0]
 800b3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	b10a      	cbz	r2, 800b3d2 <_printf_common+0x26>
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	6033      	str	r3, [r6, #0]
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	0699      	lsls	r1, r3, #26
 800b3d6:	bf42      	ittt	mi
 800b3d8:	6833      	ldrmi	r3, [r6, #0]
 800b3da:	3302      	addmi	r3, #2
 800b3dc:	6033      	strmi	r3, [r6, #0]
 800b3de:	6825      	ldr	r5, [r4, #0]
 800b3e0:	f015 0506 	ands.w	r5, r5, #6
 800b3e4:	d106      	bne.n	800b3f4 <_printf_common+0x48>
 800b3e6:	f104 0a19 	add.w	sl, r4, #25
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	6832      	ldr	r2, [r6, #0]
 800b3ee:	1a9b      	subs	r3, r3, r2
 800b3f0:	42ab      	cmp	r3, r5
 800b3f2:	dc26      	bgt.n	800b442 <_printf_common+0x96>
 800b3f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	3b00      	subs	r3, #0
 800b3fc:	bf18      	it	ne
 800b3fe:	2301      	movne	r3, #1
 800b400:	0692      	lsls	r2, r2, #26
 800b402:	d42b      	bmi.n	800b45c <_printf_common+0xb0>
 800b404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b408:	4641      	mov	r1, r8
 800b40a:	4638      	mov	r0, r7
 800b40c:	47c8      	blx	r9
 800b40e:	3001      	adds	r0, #1
 800b410:	d01e      	beq.n	800b450 <_printf_common+0xa4>
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	6922      	ldr	r2, [r4, #16]
 800b416:	f003 0306 	and.w	r3, r3, #6
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	bf02      	ittt	eq
 800b41e:	68e5      	ldreq	r5, [r4, #12]
 800b420:	6833      	ldreq	r3, [r6, #0]
 800b422:	1aed      	subeq	r5, r5, r3
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	bf0c      	ite	eq
 800b428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b42c:	2500      	movne	r5, #0
 800b42e:	4293      	cmp	r3, r2
 800b430:	bfc4      	itt	gt
 800b432:	1a9b      	subgt	r3, r3, r2
 800b434:	18ed      	addgt	r5, r5, r3
 800b436:	2600      	movs	r6, #0
 800b438:	341a      	adds	r4, #26
 800b43a:	42b5      	cmp	r5, r6
 800b43c:	d11a      	bne.n	800b474 <_printf_common+0xc8>
 800b43e:	2000      	movs	r0, #0
 800b440:	e008      	b.n	800b454 <_printf_common+0xa8>
 800b442:	2301      	movs	r3, #1
 800b444:	4652      	mov	r2, sl
 800b446:	4641      	mov	r1, r8
 800b448:	4638      	mov	r0, r7
 800b44a:	47c8      	blx	r9
 800b44c:	3001      	adds	r0, #1
 800b44e:	d103      	bne.n	800b458 <_printf_common+0xac>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b458:	3501      	adds	r5, #1
 800b45a:	e7c6      	b.n	800b3ea <_printf_common+0x3e>
 800b45c:	18e1      	adds	r1, r4, r3
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	2030      	movs	r0, #48	@ 0x30
 800b462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b466:	4422      	add	r2, r4
 800b468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b46c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b470:	3302      	adds	r3, #2
 800b472:	e7c7      	b.n	800b404 <_printf_common+0x58>
 800b474:	2301      	movs	r3, #1
 800b476:	4622      	mov	r2, r4
 800b478:	4641      	mov	r1, r8
 800b47a:	4638      	mov	r0, r7
 800b47c:	47c8      	blx	r9
 800b47e:	3001      	adds	r0, #1
 800b480:	d0e6      	beq.n	800b450 <_printf_common+0xa4>
 800b482:	3601      	adds	r6, #1
 800b484:	e7d9      	b.n	800b43a <_printf_common+0x8e>
	...

0800b488 <_printf_i>:
 800b488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b48c:	7e0f      	ldrb	r7, [r1, #24]
 800b48e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b490:	2f78      	cmp	r7, #120	@ 0x78
 800b492:	4691      	mov	r9, r2
 800b494:	4680      	mov	r8, r0
 800b496:	460c      	mov	r4, r1
 800b498:	469a      	mov	sl, r3
 800b49a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b49e:	d807      	bhi.n	800b4b0 <_printf_i+0x28>
 800b4a0:	2f62      	cmp	r7, #98	@ 0x62
 800b4a2:	d80a      	bhi.n	800b4ba <_printf_i+0x32>
 800b4a4:	2f00      	cmp	r7, #0
 800b4a6:	f000 80d2 	beq.w	800b64e <_printf_i+0x1c6>
 800b4aa:	2f58      	cmp	r7, #88	@ 0x58
 800b4ac:	f000 80b9 	beq.w	800b622 <_printf_i+0x19a>
 800b4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4b8:	e03a      	b.n	800b530 <_printf_i+0xa8>
 800b4ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4be:	2b15      	cmp	r3, #21
 800b4c0:	d8f6      	bhi.n	800b4b0 <_printf_i+0x28>
 800b4c2:	a101      	add	r1, pc, #4	@ (adr r1, 800b4c8 <_printf_i+0x40>)
 800b4c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4c8:	0800b521 	.word	0x0800b521
 800b4cc:	0800b535 	.word	0x0800b535
 800b4d0:	0800b4b1 	.word	0x0800b4b1
 800b4d4:	0800b4b1 	.word	0x0800b4b1
 800b4d8:	0800b4b1 	.word	0x0800b4b1
 800b4dc:	0800b4b1 	.word	0x0800b4b1
 800b4e0:	0800b535 	.word	0x0800b535
 800b4e4:	0800b4b1 	.word	0x0800b4b1
 800b4e8:	0800b4b1 	.word	0x0800b4b1
 800b4ec:	0800b4b1 	.word	0x0800b4b1
 800b4f0:	0800b4b1 	.word	0x0800b4b1
 800b4f4:	0800b635 	.word	0x0800b635
 800b4f8:	0800b55f 	.word	0x0800b55f
 800b4fc:	0800b5ef 	.word	0x0800b5ef
 800b500:	0800b4b1 	.word	0x0800b4b1
 800b504:	0800b4b1 	.word	0x0800b4b1
 800b508:	0800b657 	.word	0x0800b657
 800b50c:	0800b4b1 	.word	0x0800b4b1
 800b510:	0800b55f 	.word	0x0800b55f
 800b514:	0800b4b1 	.word	0x0800b4b1
 800b518:	0800b4b1 	.word	0x0800b4b1
 800b51c:	0800b5f7 	.word	0x0800b5f7
 800b520:	6833      	ldr	r3, [r6, #0]
 800b522:	1d1a      	adds	r2, r3, #4
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6032      	str	r2, [r6, #0]
 800b528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b52c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b530:	2301      	movs	r3, #1
 800b532:	e09d      	b.n	800b670 <_printf_i+0x1e8>
 800b534:	6833      	ldr	r3, [r6, #0]
 800b536:	6820      	ldr	r0, [r4, #0]
 800b538:	1d19      	adds	r1, r3, #4
 800b53a:	6031      	str	r1, [r6, #0]
 800b53c:	0606      	lsls	r6, r0, #24
 800b53e:	d501      	bpl.n	800b544 <_printf_i+0xbc>
 800b540:	681d      	ldr	r5, [r3, #0]
 800b542:	e003      	b.n	800b54c <_printf_i+0xc4>
 800b544:	0645      	lsls	r5, r0, #25
 800b546:	d5fb      	bpl.n	800b540 <_printf_i+0xb8>
 800b548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b54c:	2d00      	cmp	r5, #0
 800b54e:	da03      	bge.n	800b558 <_printf_i+0xd0>
 800b550:	232d      	movs	r3, #45	@ 0x2d
 800b552:	426d      	negs	r5, r5
 800b554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b558:	4859      	ldr	r0, [pc, #356]	@ (800b6c0 <_printf_i+0x238>)
 800b55a:	230a      	movs	r3, #10
 800b55c:	e011      	b.n	800b582 <_printf_i+0xfa>
 800b55e:	6821      	ldr	r1, [r4, #0]
 800b560:	6833      	ldr	r3, [r6, #0]
 800b562:	0608      	lsls	r0, r1, #24
 800b564:	f853 5b04 	ldr.w	r5, [r3], #4
 800b568:	d402      	bmi.n	800b570 <_printf_i+0xe8>
 800b56a:	0649      	lsls	r1, r1, #25
 800b56c:	bf48      	it	mi
 800b56e:	b2ad      	uxthmi	r5, r5
 800b570:	2f6f      	cmp	r7, #111	@ 0x6f
 800b572:	4853      	ldr	r0, [pc, #332]	@ (800b6c0 <_printf_i+0x238>)
 800b574:	6033      	str	r3, [r6, #0]
 800b576:	bf14      	ite	ne
 800b578:	230a      	movne	r3, #10
 800b57a:	2308      	moveq	r3, #8
 800b57c:	2100      	movs	r1, #0
 800b57e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b582:	6866      	ldr	r6, [r4, #4]
 800b584:	60a6      	str	r6, [r4, #8]
 800b586:	2e00      	cmp	r6, #0
 800b588:	bfa2      	ittt	ge
 800b58a:	6821      	ldrge	r1, [r4, #0]
 800b58c:	f021 0104 	bicge.w	r1, r1, #4
 800b590:	6021      	strge	r1, [r4, #0]
 800b592:	b90d      	cbnz	r5, 800b598 <_printf_i+0x110>
 800b594:	2e00      	cmp	r6, #0
 800b596:	d04b      	beq.n	800b630 <_printf_i+0x1a8>
 800b598:	4616      	mov	r6, r2
 800b59a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b59e:	fb03 5711 	mls	r7, r3, r1, r5
 800b5a2:	5dc7      	ldrb	r7, [r0, r7]
 800b5a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5a8:	462f      	mov	r7, r5
 800b5aa:	42bb      	cmp	r3, r7
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	d9f4      	bls.n	800b59a <_printf_i+0x112>
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	d10b      	bne.n	800b5cc <_printf_i+0x144>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	07df      	lsls	r7, r3, #31
 800b5b8:	d508      	bpl.n	800b5cc <_printf_i+0x144>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	6861      	ldr	r1, [r4, #4]
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	bfde      	ittt	le
 800b5c2:	2330      	movle	r3, #48	@ 0x30
 800b5c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5cc:	1b92      	subs	r2, r2, r6
 800b5ce:	6122      	str	r2, [r4, #16]
 800b5d0:	f8cd a000 	str.w	sl, [sp]
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	aa03      	add	r2, sp, #12
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4640      	mov	r0, r8
 800b5dc:	f7ff fee6 	bl	800b3ac <_printf_common>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d14a      	bne.n	800b67a <_printf_i+0x1f2>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e8:	b004      	add	sp, #16
 800b5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	f043 0320 	orr.w	r3, r3, #32
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	4833      	ldr	r0, [pc, #204]	@ (800b6c4 <_printf_i+0x23c>)
 800b5f8:	2778      	movs	r7, #120	@ 0x78
 800b5fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	6831      	ldr	r1, [r6, #0]
 800b602:	061f      	lsls	r7, r3, #24
 800b604:	f851 5b04 	ldr.w	r5, [r1], #4
 800b608:	d402      	bmi.n	800b610 <_printf_i+0x188>
 800b60a:	065f      	lsls	r7, r3, #25
 800b60c:	bf48      	it	mi
 800b60e:	b2ad      	uxthmi	r5, r5
 800b610:	6031      	str	r1, [r6, #0]
 800b612:	07d9      	lsls	r1, r3, #31
 800b614:	bf44      	itt	mi
 800b616:	f043 0320 	orrmi.w	r3, r3, #32
 800b61a:	6023      	strmi	r3, [r4, #0]
 800b61c:	b11d      	cbz	r5, 800b626 <_printf_i+0x19e>
 800b61e:	2310      	movs	r3, #16
 800b620:	e7ac      	b.n	800b57c <_printf_i+0xf4>
 800b622:	4827      	ldr	r0, [pc, #156]	@ (800b6c0 <_printf_i+0x238>)
 800b624:	e7e9      	b.n	800b5fa <_printf_i+0x172>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	f023 0320 	bic.w	r3, r3, #32
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	e7f6      	b.n	800b61e <_printf_i+0x196>
 800b630:	4616      	mov	r6, r2
 800b632:	e7bd      	b.n	800b5b0 <_printf_i+0x128>
 800b634:	6833      	ldr	r3, [r6, #0]
 800b636:	6825      	ldr	r5, [r4, #0]
 800b638:	6961      	ldr	r1, [r4, #20]
 800b63a:	1d18      	adds	r0, r3, #4
 800b63c:	6030      	str	r0, [r6, #0]
 800b63e:	062e      	lsls	r6, r5, #24
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	d501      	bpl.n	800b648 <_printf_i+0x1c0>
 800b644:	6019      	str	r1, [r3, #0]
 800b646:	e002      	b.n	800b64e <_printf_i+0x1c6>
 800b648:	0668      	lsls	r0, r5, #25
 800b64a:	d5fb      	bpl.n	800b644 <_printf_i+0x1bc>
 800b64c:	8019      	strh	r1, [r3, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	6123      	str	r3, [r4, #16]
 800b652:	4616      	mov	r6, r2
 800b654:	e7bc      	b.n	800b5d0 <_printf_i+0x148>
 800b656:	6833      	ldr	r3, [r6, #0]
 800b658:	1d1a      	adds	r2, r3, #4
 800b65a:	6032      	str	r2, [r6, #0]
 800b65c:	681e      	ldr	r6, [r3, #0]
 800b65e:	6862      	ldr	r2, [r4, #4]
 800b660:	2100      	movs	r1, #0
 800b662:	4630      	mov	r0, r6
 800b664:	f7f4 fdb4 	bl	80001d0 <memchr>
 800b668:	b108      	cbz	r0, 800b66e <_printf_i+0x1e6>
 800b66a:	1b80      	subs	r0, r0, r6
 800b66c:	6060      	str	r0, [r4, #4]
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	2300      	movs	r3, #0
 800b674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b678:	e7aa      	b.n	800b5d0 <_printf_i+0x148>
 800b67a:	6923      	ldr	r3, [r4, #16]
 800b67c:	4632      	mov	r2, r6
 800b67e:	4649      	mov	r1, r9
 800b680:	4640      	mov	r0, r8
 800b682:	47d0      	blx	sl
 800b684:	3001      	adds	r0, #1
 800b686:	d0ad      	beq.n	800b5e4 <_printf_i+0x15c>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	079b      	lsls	r3, r3, #30
 800b68c:	d413      	bmi.n	800b6b6 <_printf_i+0x22e>
 800b68e:	68e0      	ldr	r0, [r4, #12]
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	4298      	cmp	r0, r3
 800b694:	bfb8      	it	lt
 800b696:	4618      	movlt	r0, r3
 800b698:	e7a6      	b.n	800b5e8 <_printf_i+0x160>
 800b69a:	2301      	movs	r3, #1
 800b69c:	4632      	mov	r2, r6
 800b69e:	4649      	mov	r1, r9
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	47d0      	blx	sl
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d09d      	beq.n	800b5e4 <_printf_i+0x15c>
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	68e3      	ldr	r3, [r4, #12]
 800b6ac:	9903      	ldr	r1, [sp, #12]
 800b6ae:	1a5b      	subs	r3, r3, r1
 800b6b0:	42ab      	cmp	r3, r5
 800b6b2:	dcf2      	bgt.n	800b69a <_printf_i+0x212>
 800b6b4:	e7eb      	b.n	800b68e <_printf_i+0x206>
 800b6b6:	2500      	movs	r5, #0
 800b6b8:	f104 0619 	add.w	r6, r4, #25
 800b6bc:	e7f5      	b.n	800b6aa <_printf_i+0x222>
 800b6be:	bf00      	nop
 800b6c0:	0800feca 	.word	0x0800feca
 800b6c4:	0800fedb 	.word	0x0800fedb

0800b6c8 <_scanf_float>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	b087      	sub	sp, #28
 800b6ce:	4617      	mov	r7, r2
 800b6d0:	9303      	str	r3, [sp, #12]
 800b6d2:	688b      	ldr	r3, [r1, #8]
 800b6d4:	1e5a      	subs	r2, r3, #1
 800b6d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b6da:	bf81      	itttt	hi
 800b6dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b6e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b6e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b6e8:	608b      	strhi	r3, [r1, #8]
 800b6ea:	680b      	ldr	r3, [r1, #0]
 800b6ec:	460a      	mov	r2, r1
 800b6ee:	f04f 0500 	mov.w	r5, #0
 800b6f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b6f6:	f842 3b1c 	str.w	r3, [r2], #28
 800b6fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b6fe:	4680      	mov	r8, r0
 800b700:	460c      	mov	r4, r1
 800b702:	bf98      	it	ls
 800b704:	f04f 0b00 	movls.w	fp, #0
 800b708:	9201      	str	r2, [sp, #4]
 800b70a:	4616      	mov	r6, r2
 800b70c:	46aa      	mov	sl, r5
 800b70e:	46a9      	mov	r9, r5
 800b710:	9502      	str	r5, [sp, #8]
 800b712:	68a2      	ldr	r2, [r4, #8]
 800b714:	b152      	cbz	r2, 800b72c <_scanf_float+0x64>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b71c:	d864      	bhi.n	800b7e8 <_scanf_float+0x120>
 800b71e:	2b40      	cmp	r3, #64	@ 0x40
 800b720:	d83c      	bhi.n	800b79c <_scanf_float+0xd4>
 800b722:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b726:	b2c8      	uxtb	r0, r1
 800b728:	280e      	cmp	r0, #14
 800b72a:	d93a      	bls.n	800b7a2 <_scanf_float+0xda>
 800b72c:	f1b9 0f00 	cmp.w	r9, #0
 800b730:	d003      	beq.n	800b73a <_scanf_float+0x72>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b73e:	f1ba 0f01 	cmp.w	sl, #1
 800b742:	f200 8117 	bhi.w	800b974 <_scanf_float+0x2ac>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	429e      	cmp	r6, r3
 800b74a:	f200 8108 	bhi.w	800b95e <_scanf_float+0x296>
 800b74e:	2001      	movs	r0, #1
 800b750:	b007      	add	sp, #28
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b75a:	2a0d      	cmp	r2, #13
 800b75c:	d8e6      	bhi.n	800b72c <_scanf_float+0x64>
 800b75e:	a101      	add	r1, pc, #4	@ (adr r1, 800b764 <_scanf_float+0x9c>)
 800b760:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b764:	0800b8ab 	.word	0x0800b8ab
 800b768:	0800b72d 	.word	0x0800b72d
 800b76c:	0800b72d 	.word	0x0800b72d
 800b770:	0800b72d 	.word	0x0800b72d
 800b774:	0800b90b 	.word	0x0800b90b
 800b778:	0800b8e3 	.word	0x0800b8e3
 800b77c:	0800b72d 	.word	0x0800b72d
 800b780:	0800b72d 	.word	0x0800b72d
 800b784:	0800b8b9 	.word	0x0800b8b9
 800b788:	0800b72d 	.word	0x0800b72d
 800b78c:	0800b72d 	.word	0x0800b72d
 800b790:	0800b72d 	.word	0x0800b72d
 800b794:	0800b72d 	.word	0x0800b72d
 800b798:	0800b871 	.word	0x0800b871
 800b79c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b7a0:	e7db      	b.n	800b75a <_scanf_float+0x92>
 800b7a2:	290e      	cmp	r1, #14
 800b7a4:	d8c2      	bhi.n	800b72c <_scanf_float+0x64>
 800b7a6:	a001      	add	r0, pc, #4	@ (adr r0, 800b7ac <_scanf_float+0xe4>)
 800b7a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7ac:	0800b861 	.word	0x0800b861
 800b7b0:	0800b72d 	.word	0x0800b72d
 800b7b4:	0800b861 	.word	0x0800b861
 800b7b8:	0800b8f7 	.word	0x0800b8f7
 800b7bc:	0800b72d 	.word	0x0800b72d
 800b7c0:	0800b809 	.word	0x0800b809
 800b7c4:	0800b847 	.word	0x0800b847
 800b7c8:	0800b847 	.word	0x0800b847
 800b7cc:	0800b847 	.word	0x0800b847
 800b7d0:	0800b847 	.word	0x0800b847
 800b7d4:	0800b847 	.word	0x0800b847
 800b7d8:	0800b847 	.word	0x0800b847
 800b7dc:	0800b847 	.word	0x0800b847
 800b7e0:	0800b847 	.word	0x0800b847
 800b7e4:	0800b847 	.word	0x0800b847
 800b7e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b7ea:	d809      	bhi.n	800b800 <_scanf_float+0x138>
 800b7ec:	2b60      	cmp	r3, #96	@ 0x60
 800b7ee:	d8b2      	bhi.n	800b756 <_scanf_float+0x8e>
 800b7f0:	2b54      	cmp	r3, #84	@ 0x54
 800b7f2:	d07b      	beq.n	800b8ec <_scanf_float+0x224>
 800b7f4:	2b59      	cmp	r3, #89	@ 0x59
 800b7f6:	d199      	bne.n	800b72c <_scanf_float+0x64>
 800b7f8:	2d07      	cmp	r5, #7
 800b7fa:	d197      	bne.n	800b72c <_scanf_float+0x64>
 800b7fc:	2508      	movs	r5, #8
 800b7fe:	e02c      	b.n	800b85a <_scanf_float+0x192>
 800b800:	2b74      	cmp	r3, #116	@ 0x74
 800b802:	d073      	beq.n	800b8ec <_scanf_float+0x224>
 800b804:	2b79      	cmp	r3, #121	@ 0x79
 800b806:	e7f6      	b.n	800b7f6 <_scanf_float+0x12e>
 800b808:	6821      	ldr	r1, [r4, #0]
 800b80a:	05c8      	lsls	r0, r1, #23
 800b80c:	d51b      	bpl.n	800b846 <_scanf_float+0x17e>
 800b80e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b812:	6021      	str	r1, [r4, #0]
 800b814:	f109 0901 	add.w	r9, r9, #1
 800b818:	f1bb 0f00 	cmp.w	fp, #0
 800b81c:	d003      	beq.n	800b826 <_scanf_float+0x15e>
 800b81e:	3201      	adds	r2, #1
 800b820:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b824:	60a2      	str	r2, [r4, #8]
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	3b01      	subs	r3, #1
 800b82a:	60a3      	str	r3, [r4, #8]
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	3301      	adds	r3, #1
 800b830:	6123      	str	r3, [r4, #16]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3b01      	subs	r3, #1
 800b836:	2b00      	cmp	r3, #0
 800b838:	607b      	str	r3, [r7, #4]
 800b83a:	f340 8087 	ble.w	800b94c <_scanf_float+0x284>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	3301      	adds	r3, #1
 800b842:	603b      	str	r3, [r7, #0]
 800b844:	e765      	b.n	800b712 <_scanf_float+0x4a>
 800b846:	eb1a 0105 	adds.w	r1, sl, r5
 800b84a:	f47f af6f 	bne.w	800b72c <_scanf_float+0x64>
 800b84e:	6822      	ldr	r2, [r4, #0]
 800b850:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b854:	6022      	str	r2, [r4, #0]
 800b856:	460d      	mov	r5, r1
 800b858:	468a      	mov	sl, r1
 800b85a:	f806 3b01 	strb.w	r3, [r6], #1
 800b85e:	e7e2      	b.n	800b826 <_scanf_float+0x15e>
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	0610      	lsls	r0, r2, #24
 800b864:	f57f af62 	bpl.w	800b72c <_scanf_float+0x64>
 800b868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b86c:	6022      	str	r2, [r4, #0]
 800b86e:	e7f4      	b.n	800b85a <_scanf_float+0x192>
 800b870:	f1ba 0f00 	cmp.w	sl, #0
 800b874:	d10e      	bne.n	800b894 <_scanf_float+0x1cc>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	d10e      	bne.n	800b89a <_scanf_float+0x1d2>
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b882:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b886:	d108      	bne.n	800b89a <_scanf_float+0x1d2>
 800b888:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b88c:	6022      	str	r2, [r4, #0]
 800b88e:	f04f 0a01 	mov.w	sl, #1
 800b892:	e7e2      	b.n	800b85a <_scanf_float+0x192>
 800b894:	f1ba 0f02 	cmp.w	sl, #2
 800b898:	d055      	beq.n	800b946 <_scanf_float+0x27e>
 800b89a:	2d01      	cmp	r5, #1
 800b89c:	d002      	beq.n	800b8a4 <_scanf_float+0x1dc>
 800b89e:	2d04      	cmp	r5, #4
 800b8a0:	f47f af44 	bne.w	800b72c <_scanf_float+0x64>
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	b2ed      	uxtb	r5, r5
 800b8a8:	e7d7      	b.n	800b85a <_scanf_float+0x192>
 800b8aa:	f1ba 0f01 	cmp.w	sl, #1
 800b8ae:	f47f af3d 	bne.w	800b72c <_scanf_float+0x64>
 800b8b2:	f04f 0a02 	mov.w	sl, #2
 800b8b6:	e7d0      	b.n	800b85a <_scanf_float+0x192>
 800b8b8:	b97d      	cbnz	r5, 800b8da <_scanf_float+0x212>
 800b8ba:	f1b9 0f00 	cmp.w	r9, #0
 800b8be:	f47f af38 	bne.w	800b732 <_scanf_float+0x6a>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b8c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b8cc:	f040 8108 	bne.w	800bae0 <_scanf_float+0x418>
 800b8d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b8d4:	6022      	str	r2, [r4, #0]
 800b8d6:	2501      	movs	r5, #1
 800b8d8:	e7bf      	b.n	800b85a <_scanf_float+0x192>
 800b8da:	2d03      	cmp	r5, #3
 800b8dc:	d0e2      	beq.n	800b8a4 <_scanf_float+0x1dc>
 800b8de:	2d05      	cmp	r5, #5
 800b8e0:	e7de      	b.n	800b8a0 <_scanf_float+0x1d8>
 800b8e2:	2d02      	cmp	r5, #2
 800b8e4:	f47f af22 	bne.w	800b72c <_scanf_float+0x64>
 800b8e8:	2503      	movs	r5, #3
 800b8ea:	e7b6      	b.n	800b85a <_scanf_float+0x192>
 800b8ec:	2d06      	cmp	r5, #6
 800b8ee:	f47f af1d 	bne.w	800b72c <_scanf_float+0x64>
 800b8f2:	2507      	movs	r5, #7
 800b8f4:	e7b1      	b.n	800b85a <_scanf_float+0x192>
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	0591      	lsls	r1, r2, #22
 800b8fa:	f57f af17 	bpl.w	800b72c <_scanf_float+0x64>
 800b8fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b902:	6022      	str	r2, [r4, #0]
 800b904:	f8cd 9008 	str.w	r9, [sp, #8]
 800b908:	e7a7      	b.n	800b85a <_scanf_float+0x192>
 800b90a:	6822      	ldr	r2, [r4, #0]
 800b90c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b910:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b914:	d006      	beq.n	800b924 <_scanf_float+0x25c>
 800b916:	0550      	lsls	r0, r2, #21
 800b918:	f57f af08 	bpl.w	800b72c <_scanf_float+0x64>
 800b91c:	f1b9 0f00 	cmp.w	r9, #0
 800b920:	f000 80de 	beq.w	800bae0 <_scanf_float+0x418>
 800b924:	0591      	lsls	r1, r2, #22
 800b926:	bf58      	it	pl
 800b928:	9902      	ldrpl	r1, [sp, #8]
 800b92a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b92e:	bf58      	it	pl
 800b930:	eba9 0101 	subpl.w	r1, r9, r1
 800b934:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b938:	bf58      	it	pl
 800b93a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	f04f 0900 	mov.w	r9, #0
 800b944:	e789      	b.n	800b85a <_scanf_float+0x192>
 800b946:	f04f 0a03 	mov.w	sl, #3
 800b94a:	e786      	b.n	800b85a <_scanf_float+0x192>
 800b94c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b950:	4639      	mov	r1, r7
 800b952:	4640      	mov	r0, r8
 800b954:	4798      	blx	r3
 800b956:	2800      	cmp	r0, #0
 800b958:	f43f aedb 	beq.w	800b712 <_scanf_float+0x4a>
 800b95c:	e6e6      	b.n	800b72c <_scanf_float+0x64>
 800b95e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b966:	463a      	mov	r2, r7
 800b968:	4640      	mov	r0, r8
 800b96a:	4798      	blx	r3
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	3b01      	subs	r3, #1
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	e6e8      	b.n	800b746 <_scanf_float+0x7e>
 800b974:	1e6b      	subs	r3, r5, #1
 800b976:	2b06      	cmp	r3, #6
 800b978:	d824      	bhi.n	800b9c4 <_scanf_float+0x2fc>
 800b97a:	2d02      	cmp	r5, #2
 800b97c:	d836      	bhi.n	800b9ec <_scanf_float+0x324>
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	429e      	cmp	r6, r3
 800b982:	f67f aee4 	bls.w	800b74e <_scanf_float+0x86>
 800b986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b98a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b98e:	463a      	mov	r2, r7
 800b990:	4640      	mov	r0, r8
 800b992:	4798      	blx	r3
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	3b01      	subs	r3, #1
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	e7f0      	b.n	800b97e <_scanf_float+0x2b6>
 800b99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b9a4:	463a      	mov	r2, r7
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4798      	blx	r3
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9b4:	fa5f fa8a 	uxtb.w	sl, sl
 800b9b8:	f1ba 0f02 	cmp.w	sl, #2
 800b9bc:	d1ee      	bne.n	800b99c <_scanf_float+0x2d4>
 800b9be:	3d03      	subs	r5, #3
 800b9c0:	b2ed      	uxtb	r5, r5
 800b9c2:	1b76      	subs	r6, r6, r5
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	05da      	lsls	r2, r3, #23
 800b9c8:	d530      	bpl.n	800ba2c <_scanf_float+0x364>
 800b9ca:	055b      	lsls	r3, r3, #21
 800b9cc:	d511      	bpl.n	800b9f2 <_scanf_float+0x32a>
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	429e      	cmp	r6, r3
 800b9d2:	f67f aebc 	bls.w	800b74e <_scanf_float+0x86>
 800b9d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9de:	463a      	mov	r2, r7
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	4798      	blx	r3
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	e7f0      	b.n	800b9ce <_scanf_float+0x306>
 800b9ec:	46aa      	mov	sl, r5
 800b9ee:	46b3      	mov	fp, r6
 800b9f0:	e7de      	b.n	800b9b0 <_scanf_float+0x2e8>
 800b9f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	2965      	cmp	r1, #101	@ 0x65
 800b9fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba02:	6123      	str	r3, [r4, #16]
 800ba04:	d00c      	beq.n	800ba20 <_scanf_float+0x358>
 800ba06:	2945      	cmp	r1, #69	@ 0x45
 800ba08:	d00a      	beq.n	800ba20 <_scanf_float+0x358>
 800ba0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba0e:	463a      	mov	r2, r7
 800ba10:	4640      	mov	r0, r8
 800ba12:	4798      	blx	r3
 800ba14:	6923      	ldr	r3, [r4, #16]
 800ba16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	1eb5      	subs	r5, r6, #2
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba24:	463a      	mov	r2, r7
 800ba26:	4640      	mov	r0, r8
 800ba28:	4798      	blx	r3
 800ba2a:	462e      	mov	r6, r5
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	f012 0210 	ands.w	r2, r2, #16
 800ba32:	d001      	beq.n	800ba38 <_scanf_float+0x370>
 800ba34:	2000      	movs	r0, #0
 800ba36:	e68b      	b.n	800b750 <_scanf_float+0x88>
 800ba38:	7032      	strb	r2, [r6, #0]
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ba40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba44:	d11c      	bne.n	800ba80 <_scanf_float+0x3b8>
 800ba46:	9b02      	ldr	r3, [sp, #8]
 800ba48:	454b      	cmp	r3, r9
 800ba4a:	eba3 0209 	sub.w	r2, r3, r9
 800ba4e:	d123      	bne.n	800ba98 <_scanf_float+0x3d0>
 800ba50:	9901      	ldr	r1, [sp, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	4640      	mov	r0, r8
 800ba56:	f002 fc57 	bl	800e308 <_strtod_r>
 800ba5a:	9b03      	ldr	r3, [sp, #12]
 800ba5c:	6821      	ldr	r1, [r4, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f011 0f02 	tst.w	r1, #2
 800ba64:	ec57 6b10 	vmov	r6, r7, d0
 800ba68:	f103 0204 	add.w	r2, r3, #4
 800ba6c:	d01f      	beq.n	800baae <_scanf_float+0x3e6>
 800ba6e:	9903      	ldr	r1, [sp, #12]
 800ba70:	600a      	str	r2, [r1, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	e9c3 6700 	strd	r6, r7, [r3]
 800ba78:	68e3      	ldr	r3, [r4, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60e3      	str	r3, [r4, #12]
 800ba7e:	e7d9      	b.n	800ba34 <_scanf_float+0x36c>
 800ba80:	9b04      	ldr	r3, [sp, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0e4      	beq.n	800ba50 <_scanf_float+0x388>
 800ba86:	9905      	ldr	r1, [sp, #20]
 800ba88:	230a      	movs	r3, #10
 800ba8a:	3101      	adds	r1, #1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	f002 fcbb 	bl	800e408 <_strtol_r>
 800ba92:	9b04      	ldr	r3, [sp, #16]
 800ba94:	9e05      	ldr	r6, [sp, #20]
 800ba96:	1ac2      	subs	r2, r0, r3
 800ba98:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ba9c:	429e      	cmp	r6, r3
 800ba9e:	bf28      	it	cs
 800baa0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800baa4:	4910      	ldr	r1, [pc, #64]	@ (800bae8 <_scanf_float+0x420>)
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 f8e4 	bl	800bc74 <siprintf>
 800baac:	e7d0      	b.n	800ba50 <_scanf_float+0x388>
 800baae:	f011 0f04 	tst.w	r1, #4
 800bab2:	9903      	ldr	r1, [sp, #12]
 800bab4:	600a      	str	r2, [r1, #0]
 800bab6:	d1dc      	bne.n	800ba72 <_scanf_float+0x3aa>
 800bab8:	681d      	ldr	r5, [r3, #0]
 800baba:	4632      	mov	r2, r6
 800babc:	463b      	mov	r3, r7
 800babe:	4630      	mov	r0, r6
 800bac0:	4639      	mov	r1, r7
 800bac2:	f7f5 f833 	bl	8000b2c <__aeabi_dcmpun>
 800bac6:	b128      	cbz	r0, 800bad4 <_scanf_float+0x40c>
 800bac8:	4808      	ldr	r0, [pc, #32]	@ (800baec <_scanf_float+0x424>)
 800baca:	f000 fa15 	bl	800bef8 <nanf>
 800bace:	ed85 0a00 	vstr	s0, [r5]
 800bad2:	e7d1      	b.n	800ba78 <_scanf_float+0x3b0>
 800bad4:	4630      	mov	r0, r6
 800bad6:	4639      	mov	r1, r7
 800bad8:	f7f5 f886 	bl	8000be8 <__aeabi_d2f>
 800badc:	6028      	str	r0, [r5, #0]
 800bade:	e7cb      	b.n	800ba78 <_scanf_float+0x3b0>
 800bae0:	f04f 0900 	mov.w	r9, #0
 800bae4:	e629      	b.n	800b73a <_scanf_float+0x72>
 800bae6:	bf00      	nop
 800bae8:	0800feec 	.word	0x0800feec
 800baec:	08010285 	.word	0x08010285

0800baf0 <std>:
 800baf0:	2300      	movs	r3, #0
 800baf2:	b510      	push	{r4, lr}
 800baf4:	4604      	mov	r4, r0
 800baf6:	e9c0 3300 	strd	r3, r3, [r0]
 800bafa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bafe:	6083      	str	r3, [r0, #8]
 800bb00:	8181      	strh	r1, [r0, #12]
 800bb02:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb04:	81c2      	strh	r2, [r0, #14]
 800bb06:	6183      	str	r3, [r0, #24]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	305c      	adds	r0, #92	@ 0x5c
 800bb0e:	f000 f914 	bl	800bd3a <memset>
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <std+0x58>)
 800bb14:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb16:	4b0d      	ldr	r3, [pc, #52]	@ (800bb4c <std+0x5c>)
 800bb18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb50 <std+0x60>)
 800bb1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb54 <std+0x64>)
 800bb20:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <std+0x68>)
 800bb24:	6224      	str	r4, [r4, #32]
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d006      	beq.n	800bb38 <std+0x48>
 800bb2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb2e:	4294      	cmp	r4, r2
 800bb30:	d002      	beq.n	800bb38 <std+0x48>
 800bb32:	33d0      	adds	r3, #208	@ 0xd0
 800bb34:	429c      	cmp	r4, r3
 800bb36:	d105      	bne.n	800bb44 <std+0x54>
 800bb38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb40:	f000 b9c8 	b.w	800bed4 <__retarget_lock_init_recursive>
 800bb44:	bd10      	pop	{r4, pc}
 800bb46:	bf00      	nop
 800bb48:	0800bcb5 	.word	0x0800bcb5
 800bb4c:	0800bcd7 	.word	0x0800bcd7
 800bb50:	0800bd0f 	.word	0x0800bd0f
 800bb54:	0800bd33 	.word	0x0800bd33
 800bb58:	2000308c 	.word	0x2000308c

0800bb5c <stdio_exit_handler>:
 800bb5c:	4a02      	ldr	r2, [pc, #8]	@ (800bb68 <stdio_exit_handler+0xc>)
 800bb5e:	4903      	ldr	r1, [pc, #12]	@ (800bb6c <stdio_exit_handler+0x10>)
 800bb60:	4803      	ldr	r0, [pc, #12]	@ (800bb70 <stdio_exit_handler+0x14>)
 800bb62:	f000 b869 	b.w	800bc38 <_fwalk_sglue>
 800bb66:	bf00      	nop
 800bb68:	200000a8 	.word	0x200000a8
 800bb6c:	0800e7c5 	.word	0x0800e7c5
 800bb70:	200000b8 	.word	0x200000b8

0800bb74 <cleanup_stdio>:
 800bb74:	6841      	ldr	r1, [r0, #4]
 800bb76:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <cleanup_stdio+0x34>)
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	b510      	push	{r4, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	d001      	beq.n	800bb84 <cleanup_stdio+0x10>
 800bb80:	f002 fe20 	bl	800e7c4 <_fflush_r>
 800bb84:	68a1      	ldr	r1, [r4, #8]
 800bb86:	4b09      	ldr	r3, [pc, #36]	@ (800bbac <cleanup_stdio+0x38>)
 800bb88:	4299      	cmp	r1, r3
 800bb8a:	d002      	beq.n	800bb92 <cleanup_stdio+0x1e>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f002 fe19 	bl	800e7c4 <_fflush_r>
 800bb92:	68e1      	ldr	r1, [r4, #12]
 800bb94:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <cleanup_stdio+0x3c>)
 800bb96:	4299      	cmp	r1, r3
 800bb98:	d004      	beq.n	800bba4 <cleanup_stdio+0x30>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba0:	f002 be10 	b.w	800e7c4 <_fflush_r>
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	bf00      	nop
 800bba8:	2000308c 	.word	0x2000308c
 800bbac:	200030f4 	.word	0x200030f4
 800bbb0:	2000315c 	.word	0x2000315c

0800bbb4 <global_stdio_init.part.0>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe4 <global_stdio_init.part.0+0x30>)
 800bbb8:	4c0b      	ldr	r4, [pc, #44]	@ (800bbe8 <global_stdio_init.part.0+0x34>)
 800bbba:	4a0c      	ldr	r2, [pc, #48]	@ (800bbec <global_stdio_init.part.0+0x38>)
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2104      	movs	r1, #4
 800bbc4:	f7ff ff94 	bl	800baf0 <std>
 800bbc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbcc:	2201      	movs	r2, #1
 800bbce:	2109      	movs	r1, #9
 800bbd0:	f7ff ff8e 	bl	800baf0 <std>
 800bbd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbd8:	2202      	movs	r2, #2
 800bbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbde:	2112      	movs	r1, #18
 800bbe0:	f7ff bf86 	b.w	800baf0 <std>
 800bbe4:	200031c4 	.word	0x200031c4
 800bbe8:	2000308c 	.word	0x2000308c
 800bbec:	0800bb5d 	.word	0x0800bb5d

0800bbf0 <__sfp_lock_acquire>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__sfp_lock_acquire+0x8>)
 800bbf2:	f000 b970 	b.w	800bed6 <__retarget_lock_acquire_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	200031cd 	.word	0x200031cd

0800bbfc <__sfp_lock_release>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <__sfp_lock_release+0x8>)
 800bbfe:	f000 b96b 	b.w	800bed8 <__retarget_lock_release_recursive>
 800bc02:	bf00      	nop
 800bc04:	200031cd 	.word	0x200031cd

0800bc08 <__sinit>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	f7ff fff0 	bl	800bbf0 <__sfp_lock_acquire>
 800bc10:	6a23      	ldr	r3, [r4, #32]
 800bc12:	b11b      	cbz	r3, 800bc1c <__sinit+0x14>
 800bc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc18:	f7ff bff0 	b.w	800bbfc <__sfp_lock_release>
 800bc1c:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <__sinit+0x28>)
 800bc1e:	6223      	str	r3, [r4, #32]
 800bc20:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <__sinit+0x2c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1f5      	bne.n	800bc14 <__sinit+0xc>
 800bc28:	f7ff ffc4 	bl	800bbb4 <global_stdio_init.part.0>
 800bc2c:	e7f2      	b.n	800bc14 <__sinit+0xc>
 800bc2e:	bf00      	nop
 800bc30:	0800bb75 	.word	0x0800bb75
 800bc34:	200031c4 	.word	0x200031c4

0800bc38 <_fwalk_sglue>:
 800bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	4688      	mov	r8, r1
 800bc40:	4614      	mov	r4, r2
 800bc42:	2600      	movs	r6, #0
 800bc44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc48:	f1b9 0901 	subs.w	r9, r9, #1
 800bc4c:	d505      	bpl.n	800bc5a <_fwalk_sglue+0x22>
 800bc4e:	6824      	ldr	r4, [r4, #0]
 800bc50:	2c00      	cmp	r4, #0
 800bc52:	d1f7      	bne.n	800bc44 <_fwalk_sglue+0xc>
 800bc54:	4630      	mov	r0, r6
 800bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d907      	bls.n	800bc70 <_fwalk_sglue+0x38>
 800bc60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc64:	3301      	adds	r3, #1
 800bc66:	d003      	beq.n	800bc70 <_fwalk_sglue+0x38>
 800bc68:	4629      	mov	r1, r5
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	47c0      	blx	r8
 800bc6e:	4306      	orrs	r6, r0
 800bc70:	3568      	adds	r5, #104	@ 0x68
 800bc72:	e7e9      	b.n	800bc48 <_fwalk_sglue+0x10>

0800bc74 <siprintf>:
 800bc74:	b40e      	push	{r1, r2, r3}
 800bc76:	b500      	push	{lr}
 800bc78:	b09c      	sub	sp, #112	@ 0x70
 800bc7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc7c:	9002      	str	r0, [sp, #8]
 800bc7e:	9006      	str	r0, [sp, #24]
 800bc80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc84:	4809      	ldr	r0, [pc, #36]	@ (800bcac <siprintf+0x38>)
 800bc86:	9107      	str	r1, [sp, #28]
 800bc88:	9104      	str	r1, [sp, #16]
 800bc8a:	4909      	ldr	r1, [pc, #36]	@ (800bcb0 <siprintf+0x3c>)
 800bc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	6800      	ldr	r0, [r0, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	a902      	add	r1, sp, #8
 800bc98:	f002 fc14 	bl	800e4c4 <_svfiprintf_r>
 800bc9c:	9b02      	ldr	r3, [sp, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	b01c      	add	sp, #112	@ 0x70
 800bca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca8:	b003      	add	sp, #12
 800bcaa:	4770      	bx	lr
 800bcac:	200000b4 	.word	0x200000b4
 800bcb0:	ffff0208 	.word	0xffff0208

0800bcb4 <__sread>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	f000 f8c2 	bl	800be44 <_read_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcc8:	181b      	addge	r3, r3, r0
 800bcca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcce:	bfac      	ite	ge
 800bcd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcd2:	81a3      	strhlt	r3, [r4, #12]
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <__swrite>:
 800bcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	461f      	mov	r7, r3
 800bcdc:	898b      	ldrh	r3, [r1, #12]
 800bcde:	05db      	lsls	r3, r3, #23
 800bce0:	4605      	mov	r5, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	4616      	mov	r6, r2
 800bce6:	d505      	bpl.n	800bcf4 <__swrite+0x1e>
 800bce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcec:	2302      	movs	r3, #2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f000 f896 	bl	800be20 <_lseek_r>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcfe:	81a3      	strh	r3, [r4, #12]
 800bd00:	4632      	mov	r2, r6
 800bd02:	463b      	mov	r3, r7
 800bd04:	4628      	mov	r0, r5
 800bd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0a:	f000 b8ad 	b.w	800be68 <_write_r>

0800bd0e <__sseek>:
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	460c      	mov	r4, r1
 800bd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd16:	f000 f883 	bl	800be20 <_lseek_r>
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	bf15      	itete	ne
 800bd20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd2a:	81a3      	strheq	r3, [r4, #12]
 800bd2c:	bf18      	it	ne
 800bd2e:	81a3      	strhne	r3, [r4, #12]
 800bd30:	bd10      	pop	{r4, pc}

0800bd32 <__sclose>:
 800bd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd36:	f000 b80d 	b.w	800bd54 <_close_r>

0800bd3a <memset>:
 800bd3a:	4402      	add	r2, r0
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d100      	bne.n	800bd44 <memset+0xa>
 800bd42:	4770      	bx	lr
 800bd44:	f803 1b01 	strb.w	r1, [r3], #1
 800bd48:	e7f9      	b.n	800bd3e <memset+0x4>
	...

0800bd4c <_localeconv_r>:
 800bd4c:	4800      	ldr	r0, [pc, #0]	@ (800bd50 <_localeconv_r+0x4>)
 800bd4e:	4770      	bx	lr
 800bd50:	200001f4 	.word	0x200001f4

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	@ (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f003 ff88 	bl	800fc74 <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200031c8 	.word	0x200031c8

0800bd74 <_reclaim_reent>:
 800bd74:	4b29      	ldr	r3, [pc, #164]	@ (800be1c <_reclaim_reent+0xa8>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4283      	cmp	r3, r0
 800bd7a:	b570      	push	{r4, r5, r6, lr}
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	d04b      	beq.n	800be18 <_reclaim_reent+0xa4>
 800bd80:	69c3      	ldr	r3, [r0, #28]
 800bd82:	b1ab      	cbz	r3, 800bdb0 <_reclaim_reent+0x3c>
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	b16b      	cbz	r3, 800bda4 <_reclaim_reent+0x30>
 800bd88:	2500      	movs	r5, #0
 800bd8a:	69e3      	ldr	r3, [r4, #28]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	5959      	ldr	r1, [r3, r5]
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d13b      	bne.n	800be0c <_reclaim_reent+0x98>
 800bd94:	3504      	adds	r5, #4
 800bd96:	2d80      	cmp	r5, #128	@ 0x80
 800bd98:	d1f7      	bne.n	800bd8a <_reclaim_reent+0x16>
 800bd9a:	69e3      	ldr	r3, [r4, #28]
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	68d9      	ldr	r1, [r3, #12]
 800bda0:	f000 fefe 	bl	800cba0 <_free_r>
 800bda4:	69e3      	ldr	r3, [r4, #28]
 800bda6:	6819      	ldr	r1, [r3, #0]
 800bda8:	b111      	cbz	r1, 800bdb0 <_reclaim_reent+0x3c>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 fef8 	bl	800cba0 <_free_r>
 800bdb0:	6961      	ldr	r1, [r4, #20]
 800bdb2:	b111      	cbz	r1, 800bdba <_reclaim_reent+0x46>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f000 fef3 	bl	800cba0 <_free_r>
 800bdba:	69e1      	ldr	r1, [r4, #28]
 800bdbc:	b111      	cbz	r1, 800bdc4 <_reclaim_reent+0x50>
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 feee 	bl	800cba0 <_free_r>
 800bdc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bdc6:	b111      	cbz	r1, 800bdce <_reclaim_reent+0x5a>
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fee9 	bl	800cba0 <_free_r>
 800bdce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd0:	b111      	cbz	r1, 800bdd8 <_reclaim_reent+0x64>
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 fee4 	bl	800cba0 <_free_r>
 800bdd8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bdda:	b111      	cbz	r1, 800bde2 <_reclaim_reent+0x6e>
 800bddc:	4620      	mov	r0, r4
 800bdde:	f000 fedf 	bl	800cba0 <_free_r>
 800bde2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bde4:	b111      	cbz	r1, 800bdec <_reclaim_reent+0x78>
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 feda 	bl	800cba0 <_free_r>
 800bdec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bdee:	b111      	cbz	r1, 800bdf6 <_reclaim_reent+0x82>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 fed5 	bl	800cba0 <_free_r>
 800bdf6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bdf8:	b111      	cbz	r1, 800be00 <_reclaim_reent+0x8c>
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 fed0 	bl	800cba0 <_free_r>
 800be00:	6a23      	ldr	r3, [r4, #32]
 800be02:	b14b      	cbz	r3, 800be18 <_reclaim_reent+0xa4>
 800be04:	4620      	mov	r0, r4
 800be06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be0a:	4718      	bx	r3
 800be0c:	680e      	ldr	r6, [r1, #0]
 800be0e:	4620      	mov	r0, r4
 800be10:	f000 fec6 	bl	800cba0 <_free_r>
 800be14:	4631      	mov	r1, r6
 800be16:	e7bb      	b.n	800bd90 <_reclaim_reent+0x1c>
 800be18:	bd70      	pop	{r4, r5, r6, pc}
 800be1a:	bf00      	nop
 800be1c:	200000b4 	.word	0x200000b4

0800be20 <_lseek_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	@ (800be40 <_lseek_r+0x20>)
 800be24:	4604      	mov	r4, r0
 800be26:	4608      	mov	r0, r1
 800be28:	4611      	mov	r1, r2
 800be2a:	2200      	movs	r2, #0
 800be2c:	602a      	str	r2, [r5, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	f003 ff48 	bl	800fcc4 <_lseek>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_lseek_r+0x1e>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_lseek_r+0x1e>
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	200031c8 	.word	0x200031c8

0800be44 <_read_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	@ (800be64 <_read_r+0x20>)
 800be48:	4604      	mov	r4, r0
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	602a      	str	r2, [r5, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f003 ff3e 	bl	800fcd4 <_read>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_read_r+0x1e>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_read_r+0x1e>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	200031c8 	.word	0x200031c8

0800be68 <_write_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	@ (800be88 <_write_r+0x20>)
 800be6c:	4604      	mov	r4, r0
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	2200      	movs	r2, #0
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f003 ff42 	bl	800fd00 <_write>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_write_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_write_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	200031c8 	.word	0x200031c8

0800be8c <__libc_init_array>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	4d0d      	ldr	r5, [pc, #52]	@ (800bec4 <__libc_init_array+0x38>)
 800be90:	4c0d      	ldr	r4, [pc, #52]	@ (800bec8 <__libc_init_array+0x3c>)
 800be92:	1b64      	subs	r4, r4, r5
 800be94:	10a4      	asrs	r4, r4, #2
 800be96:	2600      	movs	r6, #0
 800be98:	42a6      	cmp	r6, r4
 800be9a:	d109      	bne.n	800beb0 <__libc_init_array+0x24>
 800be9c:	4d0b      	ldr	r5, [pc, #44]	@ (800becc <__libc_init_array+0x40>)
 800be9e:	4c0c      	ldr	r4, [pc, #48]	@ (800bed0 <__libc_init_array+0x44>)
 800bea0:	f003 ff38 	bl	800fd14 <_init>
 800bea4:	1b64      	subs	r4, r4, r5
 800bea6:	10a4      	asrs	r4, r4, #2
 800bea8:	2600      	movs	r6, #0
 800beaa:	42a6      	cmp	r6, r4
 800beac:	d105      	bne.n	800beba <__libc_init_array+0x2e>
 800beae:	bd70      	pop	{r4, r5, r6, pc}
 800beb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb4:	4798      	blx	r3
 800beb6:	3601      	adds	r6, #1
 800beb8:	e7ee      	b.n	800be98 <__libc_init_array+0xc>
 800beba:	f855 3b04 	ldr.w	r3, [r5], #4
 800bebe:	4798      	blx	r3
 800bec0:	3601      	adds	r6, #1
 800bec2:	e7f2      	b.n	800beaa <__libc_init_array+0x1e>
 800bec4:	08010360 	.word	0x08010360
 800bec8:	08010360 	.word	0x08010360
 800becc:	08010360 	.word	0x08010360
 800bed0:	08010364 	.word	0x08010364

0800bed4 <__retarget_lock_init_recursive>:
 800bed4:	4770      	bx	lr

0800bed6 <__retarget_lock_acquire_recursive>:
 800bed6:	4770      	bx	lr

0800bed8 <__retarget_lock_release_recursive>:
 800bed8:	4770      	bx	lr

0800beda <memcpy>:
 800beda:	440a      	add	r2, r1
 800bedc:	4291      	cmp	r1, r2
 800bede:	f100 33ff 	add.w	r3, r0, #4294967295
 800bee2:	d100      	bne.n	800bee6 <memcpy+0xc>
 800bee4:	4770      	bx	lr
 800bee6:	b510      	push	{r4, lr}
 800bee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bef0:	4291      	cmp	r1, r2
 800bef2:	d1f9      	bne.n	800bee8 <memcpy+0xe>
 800bef4:	bd10      	pop	{r4, pc}
	...

0800bef8 <nanf>:
 800bef8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf00 <nanf+0x8>
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	7fc00000 	.word	0x7fc00000

0800bf04 <quorem>:
 800bf04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	6903      	ldr	r3, [r0, #16]
 800bf0a:	690c      	ldr	r4, [r1, #16]
 800bf0c:	42a3      	cmp	r3, r4
 800bf0e:	4607      	mov	r7, r0
 800bf10:	db7e      	blt.n	800c010 <quorem+0x10c>
 800bf12:	3c01      	subs	r4, #1
 800bf14:	f101 0814 	add.w	r8, r1, #20
 800bf18:	00a3      	lsls	r3, r4, #2
 800bf1a:	f100 0514 	add.w	r5, r0, #20
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	429a      	cmp	r2, r3
 800bf32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf36:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf3a:	d32e      	bcc.n	800bf9a <quorem+0x96>
 800bf3c:	f04f 0a00 	mov.w	sl, #0
 800bf40:	46c4      	mov	ip, r8
 800bf42:	46ae      	mov	lr, r5
 800bf44:	46d3      	mov	fp, sl
 800bf46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf4a:	b298      	uxth	r0, r3
 800bf4c:	fb06 a000 	mla	r0, r6, r0, sl
 800bf50:	0c02      	lsrs	r2, r0, #16
 800bf52:	0c1b      	lsrs	r3, r3, #16
 800bf54:	fb06 2303 	mla	r3, r6, r3, r2
 800bf58:	f8de 2000 	ldr.w	r2, [lr]
 800bf5c:	b280      	uxth	r0, r0
 800bf5e:	b292      	uxth	r2, r2
 800bf60:	1a12      	subs	r2, r2, r0
 800bf62:	445a      	add	r2, fp
 800bf64:	f8de 0000 	ldr.w	r0, [lr]
 800bf68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf76:	b292      	uxth	r2, r2
 800bf78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf7c:	45e1      	cmp	r9, ip
 800bf7e:	f84e 2b04 	str.w	r2, [lr], #4
 800bf82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf86:	d2de      	bcs.n	800bf46 <quorem+0x42>
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	58eb      	ldr	r3, [r5, r3]
 800bf8c:	b92b      	cbnz	r3, 800bf9a <quorem+0x96>
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	3b04      	subs	r3, #4
 800bf92:	429d      	cmp	r5, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	d32f      	bcc.n	800bff8 <quorem+0xf4>
 800bf98:	613c      	str	r4, [r7, #16]
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f001 f9c4 	bl	800d328 <__mcmp>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	db25      	blt.n	800bff0 <quorem+0xec>
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfac:	f8d1 c000 	ldr.w	ip, [r1]
 800bfb0:	fa1f fe82 	uxth.w	lr, r2
 800bfb4:	fa1f f38c 	uxth.w	r3, ip
 800bfb8:	eba3 030e 	sub.w	r3, r3, lr
 800bfbc:	4403      	add	r3, r0
 800bfbe:	0c12      	lsrs	r2, r2, #16
 800bfc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bfc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfce:	45c1      	cmp	r9, r8
 800bfd0:	f841 3b04 	str.w	r3, [r1], #4
 800bfd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bfd8:	d2e6      	bcs.n	800bfa8 <quorem+0xa4>
 800bfda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfe2:	b922      	cbnz	r2, 800bfee <quorem+0xea>
 800bfe4:	3b04      	subs	r3, #4
 800bfe6:	429d      	cmp	r5, r3
 800bfe8:	461a      	mov	r2, r3
 800bfea:	d30b      	bcc.n	800c004 <quorem+0x100>
 800bfec:	613c      	str	r4, [r7, #16]
 800bfee:	3601      	adds	r6, #1
 800bff0:	4630      	mov	r0, r6
 800bff2:	b003      	add	sp, #12
 800bff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	3b04      	subs	r3, #4
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	d1cb      	bne.n	800bf98 <quorem+0x94>
 800c000:	3c01      	subs	r4, #1
 800c002:	e7c6      	b.n	800bf92 <quorem+0x8e>
 800c004:	6812      	ldr	r2, [r2, #0]
 800c006:	3b04      	subs	r3, #4
 800c008:	2a00      	cmp	r2, #0
 800c00a:	d1ef      	bne.n	800bfec <quorem+0xe8>
 800c00c:	3c01      	subs	r4, #1
 800c00e:	e7ea      	b.n	800bfe6 <quorem+0xe2>
 800c010:	2000      	movs	r0, #0
 800c012:	e7ee      	b.n	800bff2 <quorem+0xee>
 800c014:	0000      	movs	r0, r0
	...

0800c018 <_dtoa_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	69c7      	ldr	r7, [r0, #28]
 800c01e:	b099      	sub	sp, #100	@ 0x64
 800c020:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c024:	ec55 4b10 	vmov	r4, r5, d0
 800c028:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c02a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c02c:	4683      	mov	fp, r0
 800c02e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c030:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c032:	b97f      	cbnz	r7, 800c054 <_dtoa_r+0x3c>
 800c034:	2010      	movs	r0, #16
 800c036:	f000 fdfd 	bl	800cc34 <malloc>
 800c03a:	4602      	mov	r2, r0
 800c03c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c040:	b920      	cbnz	r0, 800c04c <_dtoa_r+0x34>
 800c042:	4ba7      	ldr	r3, [pc, #668]	@ (800c2e0 <_dtoa_r+0x2c8>)
 800c044:	21ef      	movs	r1, #239	@ 0xef
 800c046:	48a7      	ldr	r0, [pc, #668]	@ (800c2e4 <_dtoa_r+0x2cc>)
 800c048:	f002 fc2e 	bl	800e8a8 <__assert_func>
 800c04c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c050:	6007      	str	r7, [r0, #0]
 800c052:	60c7      	str	r7, [r0, #12]
 800c054:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c058:	6819      	ldr	r1, [r3, #0]
 800c05a:	b159      	cbz	r1, 800c074 <_dtoa_r+0x5c>
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	604a      	str	r2, [r1, #4]
 800c060:	2301      	movs	r3, #1
 800c062:	4093      	lsls	r3, r2
 800c064:	608b      	str	r3, [r1, #8]
 800c066:	4658      	mov	r0, fp
 800c068:	f000 feda 	bl	800ce20 <_Bfree>
 800c06c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c070:	2200      	movs	r2, #0
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	1e2b      	subs	r3, r5, #0
 800c076:	bfb9      	ittee	lt
 800c078:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c07c:	9303      	strlt	r3, [sp, #12]
 800c07e:	2300      	movge	r3, #0
 800c080:	6033      	strge	r3, [r6, #0]
 800c082:	9f03      	ldr	r7, [sp, #12]
 800c084:	4b98      	ldr	r3, [pc, #608]	@ (800c2e8 <_dtoa_r+0x2d0>)
 800c086:	bfbc      	itt	lt
 800c088:	2201      	movlt	r2, #1
 800c08a:	6032      	strlt	r2, [r6, #0]
 800c08c:	43bb      	bics	r3, r7
 800c08e:	d112      	bne.n	800c0b6 <_dtoa_r+0x9e>
 800c090:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c092:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c09c:	4323      	orrs	r3, r4
 800c09e:	f000 854d 	beq.w	800cb3c <_dtoa_r+0xb24>
 800c0a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c2fc <_dtoa_r+0x2e4>
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 854f 	beq.w	800cb4c <_dtoa_r+0xb34>
 800c0ae:	f10a 0303 	add.w	r3, sl, #3
 800c0b2:	f000 bd49 	b.w	800cb48 <_dtoa_r+0xb30>
 800c0b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	ec51 0b17 	vmov	r0, r1, d7
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c0c6:	f7f4 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ca:	4680      	mov	r8, r0
 800c0cc:	b158      	cbz	r0, 800c0e6 <_dtoa_r+0xce>
 800c0ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0d6:	b113      	cbz	r3, 800c0de <_dtoa_r+0xc6>
 800c0d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0da:	4b84      	ldr	r3, [pc, #528]	@ (800c2ec <_dtoa_r+0x2d4>)
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c300 <_dtoa_r+0x2e8>
 800c0e2:	f000 bd33 	b.w	800cb4c <_dtoa_r+0xb34>
 800c0e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0ea:	aa16      	add	r2, sp, #88	@ 0x58
 800c0ec:	a917      	add	r1, sp, #92	@ 0x5c
 800c0ee:	4658      	mov	r0, fp
 800c0f0:	f001 fa3a 	bl	800d568 <__d2b>
 800c0f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c0f8:	4681      	mov	r9, r0
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	d077      	beq.n	800c1ee <_dtoa_r+0x1d6>
 800c0fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c100:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c10c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c118:	4619      	mov	r1, r3
 800c11a:	2200      	movs	r2, #0
 800c11c:	4b74      	ldr	r3, [pc, #464]	@ (800c2f0 <_dtoa_r+0x2d8>)
 800c11e:	f7f4 f8b3 	bl	8000288 <__aeabi_dsub>
 800c122:	a369      	add	r3, pc, #420	@ (adr r3, 800c2c8 <_dtoa_r+0x2b0>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 fa66 	bl	80005f8 <__aeabi_dmul>
 800c12c:	a368      	add	r3, pc, #416	@ (adr r3, 800c2d0 <_dtoa_r+0x2b8>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	f7f4 f8ab 	bl	800028c <__adddf3>
 800c136:	4604      	mov	r4, r0
 800c138:	4630      	mov	r0, r6
 800c13a:	460d      	mov	r5, r1
 800c13c:	f7f4 f9f2 	bl	8000524 <__aeabi_i2d>
 800c140:	a365      	add	r3, pc, #404	@ (adr r3, 800c2d8 <_dtoa_r+0x2c0>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7f4 fa57 	bl	80005f8 <__aeabi_dmul>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 f89b 	bl	800028c <__adddf3>
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	f7f4 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800c15e:	2200      	movs	r2, #0
 800c160:	4607      	mov	r7, r0
 800c162:	2300      	movs	r3, #0
 800c164:	4620      	mov	r0, r4
 800c166:	4629      	mov	r1, r5
 800c168:	f7f4 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800c16c:	b140      	cbz	r0, 800c180 <_dtoa_r+0x168>
 800c16e:	4638      	mov	r0, r7
 800c170:	f7f4 f9d8 	bl	8000524 <__aeabi_i2d>
 800c174:	4622      	mov	r2, r4
 800c176:	462b      	mov	r3, r5
 800c178:	f7f4 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c17c:	b900      	cbnz	r0, 800c180 <_dtoa_r+0x168>
 800c17e:	3f01      	subs	r7, #1
 800c180:	2f16      	cmp	r7, #22
 800c182:	d851      	bhi.n	800c228 <_dtoa_r+0x210>
 800c184:	4b5b      	ldr	r3, [pc, #364]	@ (800c2f4 <_dtoa_r+0x2dc>)
 800c186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c192:	f7f4 fca3 	bl	8000adc <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	d048      	beq.n	800c22c <_dtoa_r+0x214>
 800c19a:	3f01      	subs	r7, #1
 800c19c:	2300      	movs	r3, #0
 800c19e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1a2:	1b9b      	subs	r3, r3, r6
 800c1a4:	1e5a      	subs	r2, r3, #1
 800c1a6:	bf44      	itt	mi
 800c1a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1ac:	2300      	movmi	r3, #0
 800c1ae:	9208      	str	r2, [sp, #32]
 800c1b0:	bf54      	ite	pl
 800c1b2:	f04f 0800 	movpl.w	r8, #0
 800c1b6:	9308      	strmi	r3, [sp, #32]
 800c1b8:	2f00      	cmp	r7, #0
 800c1ba:	db39      	blt.n	800c230 <_dtoa_r+0x218>
 800c1bc:	9b08      	ldr	r3, [sp, #32]
 800c1be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c1c0:	443b      	add	r3, r7
 800c1c2:	9308      	str	r3, [sp, #32]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	d864      	bhi.n	800c298 <_dtoa_r+0x280>
 800c1ce:	2b05      	cmp	r3, #5
 800c1d0:	bfc4      	itt	gt
 800c1d2:	3b04      	subgt	r3, #4
 800c1d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d8:	f1a3 0302 	sub.w	r3, r3, #2
 800c1dc:	bfcc      	ite	gt
 800c1de:	2400      	movgt	r4, #0
 800c1e0:	2401      	movle	r4, #1
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d863      	bhi.n	800c2ae <_dtoa_r+0x296>
 800c1e6:	e8df f003 	tbb	[pc, r3]
 800c1ea:	372a      	.short	0x372a
 800c1ec:	5535      	.short	0x5535
 800c1ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c1f2:	441e      	add	r6, r3
 800c1f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	bfc1      	itttt	gt
 800c1fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c200:	409f      	lslgt	r7, r3
 800c202:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c206:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c20a:	bfd6      	itet	le
 800c20c:	f1c3 0320 	rsble	r3, r3, #32
 800c210:	ea47 0003 	orrgt.w	r0, r7, r3
 800c214:	fa04 f003 	lslle.w	r0, r4, r3
 800c218:	f7f4 f974 	bl	8000504 <__aeabi_ui2d>
 800c21c:	2201      	movs	r2, #1
 800c21e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c222:	3e01      	subs	r6, #1
 800c224:	9214      	str	r2, [sp, #80]	@ 0x50
 800c226:	e777      	b.n	800c118 <_dtoa_r+0x100>
 800c228:	2301      	movs	r3, #1
 800c22a:	e7b8      	b.n	800c19e <_dtoa_r+0x186>
 800c22c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c22e:	e7b7      	b.n	800c1a0 <_dtoa_r+0x188>
 800c230:	427b      	negs	r3, r7
 800c232:	930a      	str	r3, [sp, #40]	@ 0x28
 800c234:	2300      	movs	r3, #0
 800c236:	eba8 0807 	sub.w	r8, r8, r7
 800c23a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c23c:	e7c4      	b.n	800c1c8 <_dtoa_r+0x1b0>
 800c23e:	2300      	movs	r3, #0
 800c240:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c244:	2b00      	cmp	r3, #0
 800c246:	dc35      	bgt.n	800c2b4 <_dtoa_r+0x29c>
 800c248:	2301      	movs	r3, #1
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	9307      	str	r3, [sp, #28]
 800c24e:	461a      	mov	r2, r3
 800c250:	920e      	str	r2, [sp, #56]	@ 0x38
 800c252:	e00b      	b.n	800c26c <_dtoa_r+0x254>
 800c254:	2301      	movs	r3, #1
 800c256:	e7f3      	b.n	800c240 <_dtoa_r+0x228>
 800c258:	2300      	movs	r3, #0
 800c25a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c25e:	18fb      	adds	r3, r7, r3
 800c260:	9300      	str	r3, [sp, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	2b01      	cmp	r3, #1
 800c266:	9307      	str	r3, [sp, #28]
 800c268:	bfb8      	it	lt
 800c26a:	2301      	movlt	r3, #1
 800c26c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c270:	2100      	movs	r1, #0
 800c272:	2204      	movs	r2, #4
 800c274:	f102 0514 	add.w	r5, r2, #20
 800c278:	429d      	cmp	r5, r3
 800c27a:	d91f      	bls.n	800c2bc <_dtoa_r+0x2a4>
 800c27c:	6041      	str	r1, [r0, #4]
 800c27e:	4658      	mov	r0, fp
 800c280:	f000 fd8e 	bl	800cda0 <_Balloc>
 800c284:	4682      	mov	sl, r0
 800c286:	2800      	cmp	r0, #0
 800c288:	d13c      	bne.n	800c304 <_dtoa_r+0x2ec>
 800c28a:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f8 <_dtoa_r+0x2e0>)
 800c28c:	4602      	mov	r2, r0
 800c28e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c292:	e6d8      	b.n	800c046 <_dtoa_r+0x2e>
 800c294:	2301      	movs	r3, #1
 800c296:	e7e0      	b.n	800c25a <_dtoa_r+0x242>
 800c298:	2401      	movs	r4, #1
 800c29a:	2300      	movs	r3, #0
 800c29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c29e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	9307      	str	r3, [sp, #28]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2312      	movs	r3, #18
 800c2ac:	e7d0      	b.n	800c250 <_dtoa_r+0x238>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2b2:	e7f5      	b.n	800c2a0 <_dtoa_r+0x288>
 800c2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	9307      	str	r3, [sp, #28]
 800c2ba:	e7d7      	b.n	800c26c <_dtoa_r+0x254>
 800c2bc:	3101      	adds	r1, #1
 800c2be:	0052      	lsls	r2, r2, #1
 800c2c0:	e7d8      	b.n	800c274 <_dtoa_r+0x25c>
 800c2c2:	bf00      	nop
 800c2c4:	f3af 8000 	nop.w
 800c2c8:	636f4361 	.word	0x636f4361
 800c2cc:	3fd287a7 	.word	0x3fd287a7
 800c2d0:	8b60c8b3 	.word	0x8b60c8b3
 800c2d4:	3fc68a28 	.word	0x3fc68a28
 800c2d8:	509f79fb 	.word	0x509f79fb
 800c2dc:	3fd34413 	.word	0x3fd34413
 800c2e0:	0800fefe 	.word	0x0800fefe
 800c2e4:	0800ff15 	.word	0x0800ff15
 800c2e8:	7ff00000 	.word	0x7ff00000
 800c2ec:	0800fec9 	.word	0x0800fec9
 800c2f0:	3ff80000 	.word	0x3ff80000
 800c2f4:	08010010 	.word	0x08010010
 800c2f8:	0800ff6d 	.word	0x0800ff6d
 800c2fc:	0800fefa 	.word	0x0800fefa
 800c300:	0800fec8 	.word	0x0800fec8
 800c304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c308:	6018      	str	r0, [r3, #0]
 800c30a:	9b07      	ldr	r3, [sp, #28]
 800c30c:	2b0e      	cmp	r3, #14
 800c30e:	f200 80a4 	bhi.w	800c45a <_dtoa_r+0x442>
 800c312:	2c00      	cmp	r4, #0
 800c314:	f000 80a1 	beq.w	800c45a <_dtoa_r+0x442>
 800c318:	2f00      	cmp	r7, #0
 800c31a:	dd33      	ble.n	800c384 <_dtoa_r+0x36c>
 800c31c:	4bad      	ldr	r3, [pc, #692]	@ (800c5d4 <_dtoa_r+0x5bc>)
 800c31e:	f007 020f 	and.w	r2, r7, #15
 800c322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c326:	ed93 7b00 	vldr	d7, [r3]
 800c32a:	05f8      	lsls	r0, r7, #23
 800c32c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c330:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c334:	d516      	bpl.n	800c364 <_dtoa_r+0x34c>
 800c336:	4ba8      	ldr	r3, [pc, #672]	@ (800c5d8 <_dtoa_r+0x5c0>)
 800c338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c33c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c340:	f7f4 fa84 	bl	800084c <__aeabi_ddiv>
 800c344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c348:	f004 040f 	and.w	r4, r4, #15
 800c34c:	2603      	movs	r6, #3
 800c34e:	4da2      	ldr	r5, [pc, #648]	@ (800c5d8 <_dtoa_r+0x5c0>)
 800c350:	b954      	cbnz	r4, 800c368 <_dtoa_r+0x350>
 800c352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c35a:	f7f4 fa77 	bl	800084c <__aeabi_ddiv>
 800c35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c362:	e028      	b.n	800c3b6 <_dtoa_r+0x39e>
 800c364:	2602      	movs	r6, #2
 800c366:	e7f2      	b.n	800c34e <_dtoa_r+0x336>
 800c368:	07e1      	lsls	r1, r4, #31
 800c36a:	d508      	bpl.n	800c37e <_dtoa_r+0x366>
 800c36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c370:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c374:	f7f4 f940 	bl	80005f8 <__aeabi_dmul>
 800c378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c37c:	3601      	adds	r6, #1
 800c37e:	1064      	asrs	r4, r4, #1
 800c380:	3508      	adds	r5, #8
 800c382:	e7e5      	b.n	800c350 <_dtoa_r+0x338>
 800c384:	f000 80d2 	beq.w	800c52c <_dtoa_r+0x514>
 800c388:	427c      	negs	r4, r7
 800c38a:	4b92      	ldr	r3, [pc, #584]	@ (800c5d4 <_dtoa_r+0x5bc>)
 800c38c:	4d92      	ldr	r5, [pc, #584]	@ (800c5d8 <_dtoa_r+0x5c0>)
 800c38e:	f004 020f 	and.w	r2, r4, #15
 800c392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a6:	1124      	asrs	r4, r4, #4
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2602      	movs	r6, #2
 800c3ac:	2c00      	cmp	r4, #0
 800c3ae:	f040 80b2 	bne.w	800c516 <_dtoa_r+0x4fe>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1d3      	bne.n	800c35e <_dtoa_r+0x346>
 800c3b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 80b7 	beq.w	800c530 <_dtoa_r+0x518>
 800c3c2:	4b86      	ldr	r3, [pc, #536]	@ (800c5dc <_dtoa_r+0x5c4>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	f7f4 fb87 	bl	8000adc <__aeabi_dcmplt>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f000 80ae 	beq.w	800c530 <_dtoa_r+0x518>
 800c3d4:	9b07      	ldr	r3, [sp, #28]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80aa 	beq.w	800c530 <_dtoa_r+0x518>
 800c3dc:	9b00      	ldr	r3, [sp, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	dd37      	ble.n	800c452 <_dtoa_r+0x43a>
 800c3e2:	1e7b      	subs	r3, r7, #1
 800c3e4:	9304      	str	r3, [sp, #16]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	4b7d      	ldr	r3, [pc, #500]	@ (800c5e0 <_dtoa_r+0x5c8>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f6:	9c00      	ldr	r4, [sp, #0]
 800c3f8:	3601      	adds	r6, #1
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f7f4 f892 	bl	8000524 <__aeabi_i2d>
 800c400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4b76      	ldr	r3, [pc, #472]	@ (800c5e4 <_dtoa_r+0x5cc>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	f7f3 ff3e 	bl	800028c <__adddf3>
 800c410:	4605      	mov	r5, r0
 800c412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c416:	2c00      	cmp	r4, #0
 800c418:	f040 808d 	bne.w	800c536 <_dtoa_r+0x51e>
 800c41c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c420:	4b71      	ldr	r3, [pc, #452]	@ (800c5e8 <_dtoa_r+0x5d0>)
 800c422:	2200      	movs	r2, #0
 800c424:	f7f3 ff30 	bl	8000288 <__aeabi_dsub>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c430:	462a      	mov	r2, r5
 800c432:	4633      	mov	r3, r6
 800c434:	f7f4 fb70 	bl	8000b18 <__aeabi_dcmpgt>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f040 828b 	bne.w	800c954 <_dtoa_r+0x93c>
 800c43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c442:	462a      	mov	r2, r5
 800c444:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c448:	f7f4 fb48 	bl	8000adc <__aeabi_dcmplt>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f040 8128 	bne.w	800c6a2 <_dtoa_r+0x68a>
 800c452:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c45a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f2c0 815a 	blt.w	800c716 <_dtoa_r+0x6fe>
 800c462:	2f0e      	cmp	r7, #14
 800c464:	f300 8157 	bgt.w	800c716 <_dtoa_r+0x6fe>
 800c468:	4b5a      	ldr	r3, [pc, #360]	@ (800c5d4 <_dtoa_r+0x5bc>)
 800c46a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c46e:	ed93 7b00 	vldr	d7, [r3]
 800c472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	ed8d 7b00 	vstr	d7, [sp]
 800c47a:	da03      	bge.n	800c484 <_dtoa_r+0x46c>
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f340 8101 	ble.w	800c686 <_dtoa_r+0x66e>
 800c484:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c488:	4656      	mov	r6, sl
 800c48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f4 f9db 	bl	800084c <__aeabi_ddiv>
 800c496:	f7f4 fb5f 	bl	8000b58 <__aeabi_d2iz>
 800c49a:	4680      	mov	r8, r0
 800c49c:	f7f4 f842 	bl	8000524 <__aeabi_i2d>
 800c4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4a4:	f7f4 f8a8 	bl	80005f8 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4b4:	f7f3 fee8 	bl	8000288 <__aeabi_dsub>
 800c4b8:	f806 4b01 	strb.w	r4, [r6], #1
 800c4bc:	9d07      	ldr	r5, [sp, #28]
 800c4be:	eba6 040a 	sub.w	r4, r6, sl
 800c4c2:	42a5      	cmp	r5, r4
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	f040 8117 	bne.w	800c6fa <_dtoa_r+0x6e2>
 800c4cc:	f7f3 fede 	bl	800028c <__adddf3>
 800c4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	f7f4 fb1e 	bl	8000b18 <__aeabi_dcmpgt>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f040 80f9 	bne.w	800c6d4 <_dtoa_r+0x6bc>
 800c4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 faed 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4ee:	b118      	cbz	r0, 800c4f8 <_dtoa_r+0x4e0>
 800c4f0:	f018 0f01 	tst.w	r8, #1
 800c4f4:	f040 80ee 	bne.w	800c6d4 <_dtoa_r+0x6bc>
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	4658      	mov	r0, fp
 800c4fc:	f000 fc90 	bl	800ce20 <_Bfree>
 800c500:	2300      	movs	r3, #0
 800c502:	7033      	strb	r3, [r6, #0]
 800c504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c506:	3701      	adds	r7, #1
 800c508:	601f      	str	r7, [r3, #0]
 800c50a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 831d 	beq.w	800cb4c <_dtoa_r+0xb34>
 800c512:	601e      	str	r6, [r3, #0]
 800c514:	e31a      	b.n	800cb4c <_dtoa_r+0xb34>
 800c516:	07e2      	lsls	r2, r4, #31
 800c518:	d505      	bpl.n	800c526 <_dtoa_r+0x50e>
 800c51a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c51e:	f7f4 f86b 	bl	80005f8 <__aeabi_dmul>
 800c522:	3601      	adds	r6, #1
 800c524:	2301      	movs	r3, #1
 800c526:	1064      	asrs	r4, r4, #1
 800c528:	3508      	adds	r5, #8
 800c52a:	e73f      	b.n	800c3ac <_dtoa_r+0x394>
 800c52c:	2602      	movs	r6, #2
 800c52e:	e742      	b.n	800c3b6 <_dtoa_r+0x39e>
 800c530:	9c07      	ldr	r4, [sp, #28]
 800c532:	9704      	str	r7, [sp, #16]
 800c534:	e761      	b.n	800c3fa <_dtoa_r+0x3e2>
 800c536:	4b27      	ldr	r3, [pc, #156]	@ (800c5d4 <_dtoa_r+0x5bc>)
 800c538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c53e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c542:	4454      	add	r4, sl
 800c544:	2900      	cmp	r1, #0
 800c546:	d053      	beq.n	800c5f0 <_dtoa_r+0x5d8>
 800c548:	4928      	ldr	r1, [pc, #160]	@ (800c5ec <_dtoa_r+0x5d4>)
 800c54a:	2000      	movs	r0, #0
 800c54c:	f7f4 f97e 	bl	800084c <__aeabi_ddiv>
 800c550:	4633      	mov	r3, r6
 800c552:	462a      	mov	r2, r5
 800c554:	f7f3 fe98 	bl	8000288 <__aeabi_dsub>
 800c558:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c55c:	4656      	mov	r6, sl
 800c55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c562:	f7f4 faf9 	bl	8000b58 <__aeabi_d2iz>
 800c566:	4605      	mov	r5, r0
 800c568:	f7f3 ffdc 	bl	8000524 <__aeabi_i2d>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	3530      	adds	r5, #48	@ 0x30
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c582:	f806 5b01 	strb.w	r5, [r6], #1
 800c586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c58a:	f7f4 faa7 	bl	8000adc <__aeabi_dcmplt>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d171      	bne.n	800c676 <_dtoa_r+0x65e>
 800c592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c596:	4911      	ldr	r1, [pc, #68]	@ (800c5dc <_dtoa_r+0x5c4>)
 800c598:	2000      	movs	r0, #0
 800c59a:	f7f3 fe75 	bl	8000288 <__aeabi_dsub>
 800c59e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5a2:	f7f4 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f040 8095 	bne.w	800c6d6 <_dtoa_r+0x6be>
 800c5ac:	42a6      	cmp	r6, r4
 800c5ae:	f43f af50 	beq.w	800c452 <_dtoa_r+0x43a>
 800c5b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e0 <_dtoa_r+0x5c8>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f7f4 f81d 	bl	80005f8 <__aeabi_dmul>
 800c5be:	4b08      	ldr	r3, [pc, #32]	@ (800c5e0 <_dtoa_r+0x5c8>)
 800c5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ca:	f7f4 f815 	bl	80005f8 <__aeabi_dmul>
 800c5ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5d2:	e7c4      	b.n	800c55e <_dtoa_r+0x546>
 800c5d4:	08010010 	.word	0x08010010
 800c5d8:	0800ffe8 	.word	0x0800ffe8
 800c5dc:	3ff00000 	.word	0x3ff00000
 800c5e0:	40240000 	.word	0x40240000
 800c5e4:	401c0000 	.word	0x401c0000
 800c5e8:	40140000 	.word	0x40140000
 800c5ec:	3fe00000 	.word	0x3fe00000
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f7f4 f800 	bl	80005f8 <__aeabi_dmul>
 800c5f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800c5fe:	4656      	mov	r6, sl
 800c600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c604:	f7f4 faa8 	bl	8000b58 <__aeabi_d2iz>
 800c608:	4605      	mov	r5, r0
 800c60a:	f7f3 ff8b 	bl	8000524 <__aeabi_i2d>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c616:	f7f3 fe37 	bl	8000288 <__aeabi_dsub>
 800c61a:	3530      	adds	r5, #48	@ 0x30
 800c61c:	f806 5b01 	strb.w	r5, [r6], #1
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	42a6      	cmp	r6, r4
 800c626:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c62a:	f04f 0200 	mov.w	r2, #0
 800c62e:	d124      	bne.n	800c67a <_dtoa_r+0x662>
 800c630:	4bac      	ldr	r3, [pc, #688]	@ (800c8e4 <_dtoa_r+0x8cc>)
 800c632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c636:	f7f3 fe29 	bl	800028c <__adddf3>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c642:	f7f4 fa69 	bl	8000b18 <__aeabi_dcmpgt>
 800c646:	2800      	cmp	r0, #0
 800c648:	d145      	bne.n	800c6d6 <_dtoa_r+0x6be>
 800c64a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c64e:	49a5      	ldr	r1, [pc, #660]	@ (800c8e4 <_dtoa_r+0x8cc>)
 800c650:	2000      	movs	r0, #0
 800c652:	f7f3 fe19 	bl	8000288 <__aeabi_dsub>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65e:	f7f4 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800c662:	2800      	cmp	r0, #0
 800c664:	f43f aef5 	beq.w	800c452 <_dtoa_r+0x43a>
 800c668:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c66a:	1e73      	subs	r3, r6, #1
 800c66c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c66e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c672:	2b30      	cmp	r3, #48	@ 0x30
 800c674:	d0f8      	beq.n	800c668 <_dtoa_r+0x650>
 800c676:	9f04      	ldr	r7, [sp, #16]
 800c678:	e73e      	b.n	800c4f8 <_dtoa_r+0x4e0>
 800c67a:	4b9b      	ldr	r3, [pc, #620]	@ (800c8e8 <_dtoa_r+0x8d0>)
 800c67c:	f7f3 ffbc 	bl	80005f8 <__aeabi_dmul>
 800c680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c684:	e7bc      	b.n	800c600 <_dtoa_r+0x5e8>
 800c686:	d10c      	bne.n	800c6a2 <_dtoa_r+0x68a>
 800c688:	4b98      	ldr	r3, [pc, #608]	@ (800c8ec <_dtoa_r+0x8d4>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c690:	f7f3 ffb2 	bl	80005f8 <__aeabi_dmul>
 800c694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c698:	f7f4 fa34 	bl	8000b04 <__aeabi_dcmpge>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	f000 8157 	beq.w	800c950 <_dtoa_r+0x938>
 800c6a2:	2400      	movs	r4, #0
 800c6a4:	4625      	mov	r5, r4
 800c6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6a8:	43db      	mvns	r3, r3
 800c6aa:	9304      	str	r3, [sp, #16]
 800c6ac:	4656      	mov	r6, sl
 800c6ae:	2700      	movs	r7, #0
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4658      	mov	r0, fp
 800c6b4:	f000 fbb4 	bl	800ce20 <_Bfree>
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	d0dc      	beq.n	800c676 <_dtoa_r+0x65e>
 800c6bc:	b12f      	cbz	r7, 800c6ca <_dtoa_r+0x6b2>
 800c6be:	42af      	cmp	r7, r5
 800c6c0:	d003      	beq.n	800c6ca <_dtoa_r+0x6b2>
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	4658      	mov	r0, fp
 800c6c6:	f000 fbab 	bl	800ce20 <_Bfree>
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	f000 fba7 	bl	800ce20 <_Bfree>
 800c6d2:	e7d0      	b.n	800c676 <_dtoa_r+0x65e>
 800c6d4:	9704      	str	r7, [sp, #16]
 800c6d6:	4633      	mov	r3, r6
 800c6d8:	461e      	mov	r6, r3
 800c6da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6de:	2a39      	cmp	r2, #57	@ 0x39
 800c6e0:	d107      	bne.n	800c6f2 <_dtoa_r+0x6da>
 800c6e2:	459a      	cmp	sl, r3
 800c6e4:	d1f8      	bne.n	800c6d8 <_dtoa_r+0x6c0>
 800c6e6:	9a04      	ldr	r2, [sp, #16]
 800c6e8:	3201      	adds	r2, #1
 800c6ea:	9204      	str	r2, [sp, #16]
 800c6ec:	2230      	movs	r2, #48	@ 0x30
 800c6ee:	f88a 2000 	strb.w	r2, [sl]
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	3201      	adds	r2, #1
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e7bd      	b.n	800c676 <_dtoa_r+0x65e>
 800c6fa:	4b7b      	ldr	r3, [pc, #492]	@ (800c8e8 <_dtoa_r+0x8d0>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f7f3 ff7b 	bl	80005f8 <__aeabi_dmul>
 800c702:	2200      	movs	r2, #0
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	f7f4 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c70e:	2800      	cmp	r0, #0
 800c710:	f43f aebb 	beq.w	800c48a <_dtoa_r+0x472>
 800c714:	e6f0      	b.n	800c4f8 <_dtoa_r+0x4e0>
 800c716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c718:	2a00      	cmp	r2, #0
 800c71a:	f000 80db 	beq.w	800c8d4 <_dtoa_r+0x8bc>
 800c71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c720:	2a01      	cmp	r2, #1
 800c722:	f300 80bf 	bgt.w	800c8a4 <_dtoa_r+0x88c>
 800c726:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c728:	2a00      	cmp	r2, #0
 800c72a:	f000 80b7 	beq.w	800c89c <_dtoa_r+0x884>
 800c72e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c732:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c734:	4646      	mov	r6, r8
 800c736:	9a08      	ldr	r2, [sp, #32]
 800c738:	2101      	movs	r1, #1
 800c73a:	441a      	add	r2, r3
 800c73c:	4658      	mov	r0, fp
 800c73e:	4498      	add	r8, r3
 800c740:	9208      	str	r2, [sp, #32]
 800c742:	f000 fc6b 	bl	800d01c <__i2b>
 800c746:	4605      	mov	r5, r0
 800c748:	b15e      	cbz	r6, 800c762 <_dtoa_r+0x74a>
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	dd08      	ble.n	800c762 <_dtoa_r+0x74a>
 800c750:	42b3      	cmp	r3, r6
 800c752:	9a08      	ldr	r2, [sp, #32]
 800c754:	bfa8      	it	ge
 800c756:	4633      	movge	r3, r6
 800c758:	eba8 0803 	sub.w	r8, r8, r3
 800c75c:	1af6      	subs	r6, r6, r3
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	9308      	str	r3, [sp, #32]
 800c762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c764:	b1f3      	cbz	r3, 800c7a4 <_dtoa_r+0x78c>
 800c766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 80b7 	beq.w	800c8dc <_dtoa_r+0x8c4>
 800c76e:	b18c      	cbz	r4, 800c794 <_dtoa_r+0x77c>
 800c770:	4629      	mov	r1, r5
 800c772:	4622      	mov	r2, r4
 800c774:	4658      	mov	r0, fp
 800c776:	f000 fd11 	bl	800d19c <__pow5mult>
 800c77a:	464a      	mov	r2, r9
 800c77c:	4601      	mov	r1, r0
 800c77e:	4605      	mov	r5, r0
 800c780:	4658      	mov	r0, fp
 800c782:	f000 fc61 	bl	800d048 <__multiply>
 800c786:	4649      	mov	r1, r9
 800c788:	9004      	str	r0, [sp, #16]
 800c78a:	4658      	mov	r0, fp
 800c78c:	f000 fb48 	bl	800ce20 <_Bfree>
 800c790:	9b04      	ldr	r3, [sp, #16]
 800c792:	4699      	mov	r9, r3
 800c794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c796:	1b1a      	subs	r2, r3, r4
 800c798:	d004      	beq.n	800c7a4 <_dtoa_r+0x78c>
 800c79a:	4649      	mov	r1, r9
 800c79c:	4658      	mov	r0, fp
 800c79e:	f000 fcfd 	bl	800d19c <__pow5mult>
 800c7a2:	4681      	mov	r9, r0
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	4658      	mov	r0, fp
 800c7a8:	f000 fc38 	bl	800d01c <__i2b>
 800c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 81cf 	beq.w	800cb54 <_dtoa_r+0xb3c>
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	4601      	mov	r1, r0
 800c7ba:	4658      	mov	r0, fp
 800c7bc:	f000 fcee 	bl	800d19c <__pow5mult>
 800c7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	f300 8095 	bgt.w	800c8f4 <_dtoa_r+0x8dc>
 800c7ca:	9b02      	ldr	r3, [sp, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f040 8087 	bne.w	800c8e0 <_dtoa_r+0x8c8>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f040 8089 	bne.w	800c8f0 <_dtoa_r+0x8d8>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7e4:	0d1b      	lsrs	r3, r3, #20
 800c7e6:	051b      	lsls	r3, r3, #20
 800c7e8:	b12b      	cbz	r3, 800c7f6 <_dtoa_r+0x7de>
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	9308      	str	r3, [sp, #32]
 800c7f0:	f108 0801 	add.w	r8, r8, #1
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 81b0 	beq.w	800cb60 <_dtoa_r+0xb48>
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c806:	6918      	ldr	r0, [r3, #16]
 800c808:	f000 fbbc 	bl	800cf84 <__hi0bits>
 800c80c:	f1c0 0020 	rsb	r0, r0, #32
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	4418      	add	r0, r3
 800c814:	f010 001f 	ands.w	r0, r0, #31
 800c818:	d077      	beq.n	800c90a <_dtoa_r+0x8f2>
 800c81a:	f1c0 0320 	rsb	r3, r0, #32
 800c81e:	2b04      	cmp	r3, #4
 800c820:	dd6b      	ble.n	800c8fa <_dtoa_r+0x8e2>
 800c822:	9b08      	ldr	r3, [sp, #32]
 800c824:	f1c0 001c 	rsb	r0, r0, #28
 800c828:	4403      	add	r3, r0
 800c82a:	4480      	add	r8, r0
 800c82c:	4406      	add	r6, r0
 800c82e:	9308      	str	r3, [sp, #32]
 800c830:	f1b8 0f00 	cmp.w	r8, #0
 800c834:	dd05      	ble.n	800c842 <_dtoa_r+0x82a>
 800c836:	4649      	mov	r1, r9
 800c838:	4642      	mov	r2, r8
 800c83a:	4658      	mov	r0, fp
 800c83c:	f000 fd08 	bl	800d250 <__lshift>
 800c840:	4681      	mov	r9, r0
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd05      	ble.n	800c854 <_dtoa_r+0x83c>
 800c848:	4621      	mov	r1, r4
 800c84a:	461a      	mov	r2, r3
 800c84c:	4658      	mov	r0, fp
 800c84e:	f000 fcff 	bl	800d250 <__lshift>
 800c852:	4604      	mov	r4, r0
 800c854:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c856:	2b00      	cmp	r3, #0
 800c858:	d059      	beq.n	800c90e <_dtoa_r+0x8f6>
 800c85a:	4621      	mov	r1, r4
 800c85c:	4648      	mov	r0, r9
 800c85e:	f000 fd63 	bl	800d328 <__mcmp>
 800c862:	2800      	cmp	r0, #0
 800c864:	da53      	bge.n	800c90e <_dtoa_r+0x8f6>
 800c866:	1e7b      	subs	r3, r7, #1
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	4649      	mov	r1, r9
 800c86c:	2300      	movs	r3, #0
 800c86e:	220a      	movs	r2, #10
 800c870:	4658      	mov	r0, fp
 800c872:	f000 faf7 	bl	800ce64 <__multadd>
 800c876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c878:	4681      	mov	r9, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 8172 	beq.w	800cb64 <_dtoa_r+0xb4c>
 800c880:	2300      	movs	r3, #0
 800c882:	4629      	mov	r1, r5
 800c884:	220a      	movs	r2, #10
 800c886:	4658      	mov	r0, fp
 800c888:	f000 faec 	bl	800ce64 <__multadd>
 800c88c:	9b00      	ldr	r3, [sp, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	4605      	mov	r5, r0
 800c892:	dc67      	bgt.n	800c964 <_dtoa_r+0x94c>
 800c894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c896:	2b02      	cmp	r3, #2
 800c898:	dc41      	bgt.n	800c91e <_dtoa_r+0x906>
 800c89a:	e063      	b.n	800c964 <_dtoa_r+0x94c>
 800c89c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c89e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8a2:	e746      	b.n	800c732 <_dtoa_r+0x71a>
 800c8a4:	9b07      	ldr	r3, [sp, #28]
 800c8a6:	1e5c      	subs	r4, r3, #1
 800c8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	bfbf      	itttt	lt
 800c8ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c8b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c8b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c8b4:	1ae3      	sublt	r3, r4, r3
 800c8b6:	bfb4      	ite	lt
 800c8b8:	18d2      	addlt	r2, r2, r3
 800c8ba:	1b1c      	subge	r4, r3, r4
 800c8bc:	9b07      	ldr	r3, [sp, #28]
 800c8be:	bfbc      	itt	lt
 800c8c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c8c2:	2400      	movlt	r4, #0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	bfb5      	itete	lt
 800c8c8:	eba8 0603 	sublt.w	r6, r8, r3
 800c8cc:	9b07      	ldrge	r3, [sp, #28]
 800c8ce:	2300      	movlt	r3, #0
 800c8d0:	4646      	movge	r6, r8
 800c8d2:	e730      	b.n	800c736 <_dtoa_r+0x71e>
 800c8d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c8d8:	4646      	mov	r6, r8
 800c8da:	e735      	b.n	800c748 <_dtoa_r+0x730>
 800c8dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8de:	e75c      	b.n	800c79a <_dtoa_r+0x782>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e788      	b.n	800c7f6 <_dtoa_r+0x7de>
 800c8e4:	3fe00000 	.word	0x3fe00000
 800c8e8:	40240000 	.word	0x40240000
 800c8ec:	40140000 	.word	0x40140000
 800c8f0:	9b02      	ldr	r3, [sp, #8]
 800c8f2:	e780      	b.n	800c7f6 <_dtoa_r+0x7de>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8f8:	e782      	b.n	800c800 <_dtoa_r+0x7e8>
 800c8fa:	d099      	beq.n	800c830 <_dtoa_r+0x818>
 800c8fc:	9a08      	ldr	r2, [sp, #32]
 800c8fe:	331c      	adds	r3, #28
 800c900:	441a      	add	r2, r3
 800c902:	4498      	add	r8, r3
 800c904:	441e      	add	r6, r3
 800c906:	9208      	str	r2, [sp, #32]
 800c908:	e792      	b.n	800c830 <_dtoa_r+0x818>
 800c90a:	4603      	mov	r3, r0
 800c90c:	e7f6      	b.n	800c8fc <_dtoa_r+0x8e4>
 800c90e:	9b07      	ldr	r3, [sp, #28]
 800c910:	9704      	str	r7, [sp, #16]
 800c912:	2b00      	cmp	r3, #0
 800c914:	dc20      	bgt.n	800c958 <_dtoa_r+0x940>
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	dd1e      	ble.n	800c95c <_dtoa_r+0x944>
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f47f aec0 	bne.w	800c6a6 <_dtoa_r+0x68e>
 800c926:	4621      	mov	r1, r4
 800c928:	2205      	movs	r2, #5
 800c92a:	4658      	mov	r0, fp
 800c92c:	f000 fa9a 	bl	800ce64 <__multadd>
 800c930:	4601      	mov	r1, r0
 800c932:	4604      	mov	r4, r0
 800c934:	4648      	mov	r0, r9
 800c936:	f000 fcf7 	bl	800d328 <__mcmp>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	f77f aeb3 	ble.w	800c6a6 <_dtoa_r+0x68e>
 800c940:	4656      	mov	r6, sl
 800c942:	2331      	movs	r3, #49	@ 0x31
 800c944:	f806 3b01 	strb.w	r3, [r6], #1
 800c948:	9b04      	ldr	r3, [sp, #16]
 800c94a:	3301      	adds	r3, #1
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	e6ae      	b.n	800c6ae <_dtoa_r+0x696>
 800c950:	9c07      	ldr	r4, [sp, #28]
 800c952:	9704      	str	r7, [sp, #16]
 800c954:	4625      	mov	r5, r4
 800c956:	e7f3      	b.n	800c940 <_dtoa_r+0x928>
 800c958:	9b07      	ldr	r3, [sp, #28]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f000 8104 	beq.w	800cb6c <_dtoa_r+0xb54>
 800c964:	2e00      	cmp	r6, #0
 800c966:	dd05      	ble.n	800c974 <_dtoa_r+0x95c>
 800c968:	4629      	mov	r1, r5
 800c96a:	4632      	mov	r2, r6
 800c96c:	4658      	mov	r0, fp
 800c96e:	f000 fc6f 	bl	800d250 <__lshift>
 800c972:	4605      	mov	r5, r0
 800c974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c976:	2b00      	cmp	r3, #0
 800c978:	d05a      	beq.n	800ca30 <_dtoa_r+0xa18>
 800c97a:	6869      	ldr	r1, [r5, #4]
 800c97c:	4658      	mov	r0, fp
 800c97e:	f000 fa0f 	bl	800cda0 <_Balloc>
 800c982:	4606      	mov	r6, r0
 800c984:	b928      	cbnz	r0, 800c992 <_dtoa_r+0x97a>
 800c986:	4b84      	ldr	r3, [pc, #528]	@ (800cb98 <_dtoa_r+0xb80>)
 800c988:	4602      	mov	r2, r0
 800c98a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c98e:	f7ff bb5a 	b.w	800c046 <_dtoa_r+0x2e>
 800c992:	692a      	ldr	r2, [r5, #16]
 800c994:	3202      	adds	r2, #2
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	f105 010c 	add.w	r1, r5, #12
 800c99c:	300c      	adds	r0, #12
 800c99e:	f7ff fa9c 	bl	800beda <memcpy>
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	4631      	mov	r1, r6
 800c9a6:	4658      	mov	r0, fp
 800c9a8:	f000 fc52 	bl	800d250 <__lshift>
 800c9ac:	f10a 0301 	add.w	r3, sl, #1
 800c9b0:	9307      	str	r3, [sp, #28]
 800c9b2:	9b00      	ldr	r3, [sp, #0]
 800c9b4:	4453      	add	r3, sl
 800c9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9b8:	9b02      	ldr	r3, [sp, #8]
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	462f      	mov	r7, r5
 800c9c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	4648      	mov	r0, r9
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	f7ff fa99 	bl	800bf04 <quorem>
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	9002      	str	r0, [sp, #8]
 800c9d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9da:	4648      	mov	r0, r9
 800c9dc:	f000 fca4 	bl	800d328 <__mcmp>
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	9008      	str	r0, [sp, #32]
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4658      	mov	r0, fp
 800c9e8:	f000 fcba 	bl	800d360 <__mdiff>
 800c9ec:	68c2      	ldr	r2, [r0, #12]
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	bb02      	cbnz	r2, 800ca34 <_dtoa_r+0xa1c>
 800c9f2:	4601      	mov	r1, r0
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f000 fc97 	bl	800d328 <__mcmp>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4658      	mov	r0, fp
 800ca00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca02:	f000 fa0d 	bl	800ce20 <_Bfree>
 800ca06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca0a:	9e07      	ldr	r6, [sp, #28]
 800ca0c:	ea43 0102 	orr.w	r1, r3, r2
 800ca10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca12:	4319      	orrs	r1, r3
 800ca14:	d110      	bne.n	800ca38 <_dtoa_r+0xa20>
 800ca16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca1a:	d029      	beq.n	800ca70 <_dtoa_r+0xa58>
 800ca1c:	9b08      	ldr	r3, [sp, #32]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	dd02      	ble.n	800ca28 <_dtoa_r+0xa10>
 800ca22:	9b02      	ldr	r3, [sp, #8]
 800ca24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca28:	9b00      	ldr	r3, [sp, #0]
 800ca2a:	f883 8000 	strb.w	r8, [r3]
 800ca2e:	e63f      	b.n	800c6b0 <_dtoa_r+0x698>
 800ca30:	4628      	mov	r0, r5
 800ca32:	e7bb      	b.n	800c9ac <_dtoa_r+0x994>
 800ca34:	2201      	movs	r2, #1
 800ca36:	e7e1      	b.n	800c9fc <_dtoa_r+0x9e4>
 800ca38:	9b08      	ldr	r3, [sp, #32]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	db04      	blt.n	800ca48 <_dtoa_r+0xa30>
 800ca3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca40:	430b      	orrs	r3, r1
 800ca42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca44:	430b      	orrs	r3, r1
 800ca46:	d120      	bne.n	800ca8a <_dtoa_r+0xa72>
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	dded      	ble.n	800ca28 <_dtoa_r+0xa10>
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4658      	mov	r0, fp
 800ca52:	f000 fbfd 	bl	800d250 <__lshift>
 800ca56:	4621      	mov	r1, r4
 800ca58:	4681      	mov	r9, r0
 800ca5a:	f000 fc65 	bl	800d328 <__mcmp>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	dc03      	bgt.n	800ca6a <_dtoa_r+0xa52>
 800ca62:	d1e1      	bne.n	800ca28 <_dtoa_r+0xa10>
 800ca64:	f018 0f01 	tst.w	r8, #1
 800ca68:	d0de      	beq.n	800ca28 <_dtoa_r+0xa10>
 800ca6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca6e:	d1d8      	bne.n	800ca22 <_dtoa_r+0xa0a>
 800ca70:	9a00      	ldr	r2, [sp, #0]
 800ca72:	2339      	movs	r3, #57	@ 0x39
 800ca74:	7013      	strb	r3, [r2, #0]
 800ca76:	4633      	mov	r3, r6
 800ca78:	461e      	mov	r6, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca80:	2a39      	cmp	r2, #57	@ 0x39
 800ca82:	d052      	beq.n	800cb2a <_dtoa_r+0xb12>
 800ca84:	3201      	adds	r2, #1
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	e612      	b.n	800c6b0 <_dtoa_r+0x698>
 800ca8a:	2a00      	cmp	r2, #0
 800ca8c:	dd07      	ble.n	800ca9e <_dtoa_r+0xa86>
 800ca8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca92:	d0ed      	beq.n	800ca70 <_dtoa_r+0xa58>
 800ca94:	9a00      	ldr	r2, [sp, #0]
 800ca96:	f108 0301 	add.w	r3, r8, #1
 800ca9a:	7013      	strb	r3, [r2, #0]
 800ca9c:	e608      	b.n	800c6b0 <_dtoa_r+0x698>
 800ca9e:	9b07      	ldr	r3, [sp, #28]
 800caa0:	9a07      	ldr	r2, [sp, #28]
 800caa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800caa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d028      	beq.n	800cafe <_dtoa_r+0xae6>
 800caac:	4649      	mov	r1, r9
 800caae:	2300      	movs	r3, #0
 800cab0:	220a      	movs	r2, #10
 800cab2:	4658      	mov	r0, fp
 800cab4:	f000 f9d6 	bl	800ce64 <__multadd>
 800cab8:	42af      	cmp	r7, r5
 800caba:	4681      	mov	r9, r0
 800cabc:	f04f 0300 	mov.w	r3, #0
 800cac0:	f04f 020a 	mov.w	r2, #10
 800cac4:	4639      	mov	r1, r7
 800cac6:	4658      	mov	r0, fp
 800cac8:	d107      	bne.n	800cada <_dtoa_r+0xac2>
 800caca:	f000 f9cb 	bl	800ce64 <__multadd>
 800cace:	4607      	mov	r7, r0
 800cad0:	4605      	mov	r5, r0
 800cad2:	9b07      	ldr	r3, [sp, #28]
 800cad4:	3301      	adds	r3, #1
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	e774      	b.n	800c9c4 <_dtoa_r+0x9ac>
 800cada:	f000 f9c3 	bl	800ce64 <__multadd>
 800cade:	4629      	mov	r1, r5
 800cae0:	4607      	mov	r7, r0
 800cae2:	2300      	movs	r3, #0
 800cae4:	220a      	movs	r2, #10
 800cae6:	4658      	mov	r0, fp
 800cae8:	f000 f9bc 	bl	800ce64 <__multadd>
 800caec:	4605      	mov	r5, r0
 800caee:	e7f0      	b.n	800cad2 <_dtoa_r+0xaba>
 800caf0:	9b00      	ldr	r3, [sp, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	bfcc      	ite	gt
 800caf6:	461e      	movgt	r6, r3
 800caf8:	2601      	movle	r6, #1
 800cafa:	4456      	add	r6, sl
 800cafc:	2700      	movs	r7, #0
 800cafe:	4649      	mov	r1, r9
 800cb00:	2201      	movs	r2, #1
 800cb02:	4658      	mov	r0, fp
 800cb04:	f000 fba4 	bl	800d250 <__lshift>
 800cb08:	4621      	mov	r1, r4
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	f000 fc0c 	bl	800d328 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	dcb0      	bgt.n	800ca76 <_dtoa_r+0xa5e>
 800cb14:	d102      	bne.n	800cb1c <_dtoa_r+0xb04>
 800cb16:	f018 0f01 	tst.w	r8, #1
 800cb1a:	d1ac      	bne.n	800ca76 <_dtoa_r+0xa5e>
 800cb1c:	4633      	mov	r3, r6
 800cb1e:	461e      	mov	r6, r3
 800cb20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb24:	2a30      	cmp	r2, #48	@ 0x30
 800cb26:	d0fa      	beq.n	800cb1e <_dtoa_r+0xb06>
 800cb28:	e5c2      	b.n	800c6b0 <_dtoa_r+0x698>
 800cb2a:	459a      	cmp	sl, r3
 800cb2c:	d1a4      	bne.n	800ca78 <_dtoa_r+0xa60>
 800cb2e:	9b04      	ldr	r3, [sp, #16]
 800cb30:	3301      	adds	r3, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	2331      	movs	r3, #49	@ 0x31
 800cb36:	f88a 3000 	strb.w	r3, [sl]
 800cb3a:	e5b9      	b.n	800c6b0 <_dtoa_r+0x698>
 800cb3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cb9c <_dtoa_r+0xb84>
 800cb42:	b11b      	cbz	r3, 800cb4c <_dtoa_r+0xb34>
 800cb44:	f10a 0308 	add.w	r3, sl, #8
 800cb48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	4650      	mov	r0, sl
 800cb4e:	b019      	add	sp, #100	@ 0x64
 800cb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	f77f ae37 	ble.w	800c7ca <_dtoa_r+0x7b2>
 800cb5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb60:	2001      	movs	r0, #1
 800cb62:	e655      	b.n	800c810 <_dtoa_r+0x7f8>
 800cb64:	9b00      	ldr	r3, [sp, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f77f aed6 	ble.w	800c918 <_dtoa_r+0x900>
 800cb6c:	4656      	mov	r6, sl
 800cb6e:	4621      	mov	r1, r4
 800cb70:	4648      	mov	r0, r9
 800cb72:	f7ff f9c7 	bl	800bf04 <quorem>
 800cb76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb7a:	f806 8b01 	strb.w	r8, [r6], #1
 800cb7e:	9b00      	ldr	r3, [sp, #0]
 800cb80:	eba6 020a 	sub.w	r2, r6, sl
 800cb84:	4293      	cmp	r3, r2
 800cb86:	ddb3      	ble.n	800caf0 <_dtoa_r+0xad8>
 800cb88:	4649      	mov	r1, r9
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	4658      	mov	r0, fp
 800cb90:	f000 f968 	bl	800ce64 <__multadd>
 800cb94:	4681      	mov	r9, r0
 800cb96:	e7ea      	b.n	800cb6e <_dtoa_r+0xb56>
 800cb98:	0800ff6d 	.word	0x0800ff6d
 800cb9c:	0800fef1 	.word	0x0800fef1

0800cba0 <_free_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4605      	mov	r5, r0
 800cba4:	2900      	cmp	r1, #0
 800cba6:	d041      	beq.n	800cc2c <_free_r+0x8c>
 800cba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbac:	1f0c      	subs	r4, r1, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	bfb8      	it	lt
 800cbb2:	18e4      	addlt	r4, r4, r3
 800cbb4:	f000 f8e8 	bl	800cd88 <__malloc_lock>
 800cbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc30 <_free_r+0x90>)
 800cbba:	6813      	ldr	r3, [r2, #0]
 800cbbc:	b933      	cbnz	r3, 800cbcc <_free_r+0x2c>
 800cbbe:	6063      	str	r3, [r4, #4]
 800cbc0:	6014      	str	r4, [r2, #0]
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbc8:	f000 b8e4 	b.w	800cd94 <__malloc_unlock>
 800cbcc:	42a3      	cmp	r3, r4
 800cbce:	d908      	bls.n	800cbe2 <_free_r+0x42>
 800cbd0:	6820      	ldr	r0, [r4, #0]
 800cbd2:	1821      	adds	r1, r4, r0
 800cbd4:	428b      	cmp	r3, r1
 800cbd6:	bf01      	itttt	eq
 800cbd8:	6819      	ldreq	r1, [r3, #0]
 800cbda:	685b      	ldreq	r3, [r3, #4]
 800cbdc:	1809      	addeq	r1, r1, r0
 800cbde:	6021      	streq	r1, [r4, #0]
 800cbe0:	e7ed      	b.n	800cbbe <_free_r+0x1e>
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	b10b      	cbz	r3, 800cbec <_free_r+0x4c>
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	d9fa      	bls.n	800cbe2 <_free_r+0x42>
 800cbec:	6811      	ldr	r1, [r2, #0]
 800cbee:	1850      	adds	r0, r2, r1
 800cbf0:	42a0      	cmp	r0, r4
 800cbf2:	d10b      	bne.n	800cc0c <_free_r+0x6c>
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	4401      	add	r1, r0
 800cbf8:	1850      	adds	r0, r2, r1
 800cbfa:	4283      	cmp	r3, r0
 800cbfc:	6011      	str	r1, [r2, #0]
 800cbfe:	d1e0      	bne.n	800cbc2 <_free_r+0x22>
 800cc00:	6818      	ldr	r0, [r3, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	6053      	str	r3, [r2, #4]
 800cc06:	4408      	add	r0, r1
 800cc08:	6010      	str	r0, [r2, #0]
 800cc0a:	e7da      	b.n	800cbc2 <_free_r+0x22>
 800cc0c:	d902      	bls.n	800cc14 <_free_r+0x74>
 800cc0e:	230c      	movs	r3, #12
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	e7d6      	b.n	800cbc2 <_free_r+0x22>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	1821      	adds	r1, r4, r0
 800cc18:	428b      	cmp	r3, r1
 800cc1a:	bf04      	itt	eq
 800cc1c:	6819      	ldreq	r1, [r3, #0]
 800cc1e:	685b      	ldreq	r3, [r3, #4]
 800cc20:	6063      	str	r3, [r4, #4]
 800cc22:	bf04      	itt	eq
 800cc24:	1809      	addeq	r1, r1, r0
 800cc26:	6021      	streq	r1, [r4, #0]
 800cc28:	6054      	str	r4, [r2, #4]
 800cc2a:	e7ca      	b.n	800cbc2 <_free_r+0x22>
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	bf00      	nop
 800cc30:	200031d4 	.word	0x200031d4

0800cc34 <malloc>:
 800cc34:	4b02      	ldr	r3, [pc, #8]	@ (800cc40 <malloc+0xc>)
 800cc36:	4601      	mov	r1, r0
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	f000 b825 	b.w	800cc88 <_malloc_r>
 800cc3e:	bf00      	nop
 800cc40:	200000b4 	.word	0x200000b4

0800cc44 <sbrk_aligned>:
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	4e0f      	ldr	r6, [pc, #60]	@ (800cc84 <sbrk_aligned+0x40>)
 800cc48:	460c      	mov	r4, r1
 800cc4a:	6831      	ldr	r1, [r6, #0]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	b911      	cbnz	r1, 800cc56 <sbrk_aligned+0x12>
 800cc50:	f001 fe0c 	bl	800e86c <_sbrk_r>
 800cc54:	6030      	str	r0, [r6, #0]
 800cc56:	4621      	mov	r1, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f001 fe07 	bl	800e86c <_sbrk_r>
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	d103      	bne.n	800cc6a <sbrk_aligned+0x26>
 800cc62:	f04f 34ff 	mov.w	r4, #4294967295
 800cc66:	4620      	mov	r0, r4
 800cc68:	bd70      	pop	{r4, r5, r6, pc}
 800cc6a:	1cc4      	adds	r4, r0, #3
 800cc6c:	f024 0403 	bic.w	r4, r4, #3
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d0f8      	beq.n	800cc66 <sbrk_aligned+0x22>
 800cc74:	1a21      	subs	r1, r4, r0
 800cc76:	4628      	mov	r0, r5
 800cc78:	f001 fdf8 	bl	800e86c <_sbrk_r>
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	d1f2      	bne.n	800cc66 <sbrk_aligned+0x22>
 800cc80:	e7ef      	b.n	800cc62 <sbrk_aligned+0x1e>
 800cc82:	bf00      	nop
 800cc84:	200031d0 	.word	0x200031d0

0800cc88 <_malloc_r>:
 800cc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc8c:	1ccd      	adds	r5, r1, #3
 800cc8e:	f025 0503 	bic.w	r5, r5, #3
 800cc92:	3508      	adds	r5, #8
 800cc94:	2d0c      	cmp	r5, #12
 800cc96:	bf38      	it	cc
 800cc98:	250c      	movcc	r5, #12
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	db01      	blt.n	800cca4 <_malloc_r+0x1c>
 800cca0:	42a9      	cmp	r1, r5
 800cca2:	d904      	bls.n	800ccae <_malloc_r+0x26>
 800cca4:	230c      	movs	r3, #12
 800cca6:	6033      	str	r3, [r6, #0]
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd84 <_malloc_r+0xfc>
 800ccb2:	f000 f869 	bl	800cd88 <__malloc_lock>
 800ccb6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccba:	461c      	mov	r4, r3
 800ccbc:	bb44      	cbnz	r4, 800cd10 <_malloc_r+0x88>
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7ff ffbf 	bl	800cc44 <sbrk_aligned>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	4604      	mov	r4, r0
 800ccca:	d158      	bne.n	800cd7e <_malloc_r+0xf6>
 800cccc:	f8d8 4000 	ldr.w	r4, [r8]
 800ccd0:	4627      	mov	r7, r4
 800ccd2:	2f00      	cmp	r7, #0
 800ccd4:	d143      	bne.n	800cd5e <_malloc_r+0xd6>
 800ccd6:	2c00      	cmp	r4, #0
 800ccd8:	d04b      	beq.n	800cd72 <_malloc_r+0xea>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4630      	mov	r0, r6
 800cce0:	eb04 0903 	add.w	r9, r4, r3
 800cce4:	f001 fdc2 	bl	800e86c <_sbrk_r>
 800cce8:	4581      	cmp	r9, r0
 800ccea:	d142      	bne.n	800cd72 <_malloc_r+0xea>
 800ccec:	6821      	ldr	r1, [r4, #0]
 800ccee:	1a6d      	subs	r5, r5, r1
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7ff ffa6 	bl	800cc44 <sbrk_aligned>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d03a      	beq.n	800cd72 <_malloc_r+0xea>
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	442b      	add	r3, r5
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	f8d8 3000 	ldr.w	r3, [r8]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	bb62      	cbnz	r2, 800cd64 <_malloc_r+0xdc>
 800cd0a:	f8c8 7000 	str.w	r7, [r8]
 800cd0e:	e00f      	b.n	800cd30 <_malloc_r+0xa8>
 800cd10:	6822      	ldr	r2, [r4, #0]
 800cd12:	1b52      	subs	r2, r2, r5
 800cd14:	d420      	bmi.n	800cd58 <_malloc_r+0xd0>
 800cd16:	2a0b      	cmp	r2, #11
 800cd18:	d917      	bls.n	800cd4a <_malloc_r+0xc2>
 800cd1a:	1961      	adds	r1, r4, r5
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	6025      	str	r5, [r4, #0]
 800cd20:	bf18      	it	ne
 800cd22:	6059      	strne	r1, [r3, #4]
 800cd24:	6863      	ldr	r3, [r4, #4]
 800cd26:	bf08      	it	eq
 800cd28:	f8c8 1000 	streq.w	r1, [r8]
 800cd2c:	5162      	str	r2, [r4, r5]
 800cd2e:	604b      	str	r3, [r1, #4]
 800cd30:	4630      	mov	r0, r6
 800cd32:	f000 f82f 	bl	800cd94 <__malloc_unlock>
 800cd36:	f104 000b 	add.w	r0, r4, #11
 800cd3a:	1d23      	adds	r3, r4, #4
 800cd3c:	f020 0007 	bic.w	r0, r0, #7
 800cd40:	1ac2      	subs	r2, r0, r3
 800cd42:	bf1c      	itt	ne
 800cd44:	1a1b      	subne	r3, r3, r0
 800cd46:	50a3      	strne	r3, [r4, r2]
 800cd48:	e7af      	b.n	800ccaa <_malloc_r+0x22>
 800cd4a:	6862      	ldr	r2, [r4, #4]
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	bf0c      	ite	eq
 800cd50:	f8c8 2000 	streq.w	r2, [r8]
 800cd54:	605a      	strne	r2, [r3, #4]
 800cd56:	e7eb      	b.n	800cd30 <_malloc_r+0xa8>
 800cd58:	4623      	mov	r3, r4
 800cd5a:	6864      	ldr	r4, [r4, #4]
 800cd5c:	e7ae      	b.n	800ccbc <_malloc_r+0x34>
 800cd5e:	463c      	mov	r4, r7
 800cd60:	687f      	ldr	r7, [r7, #4]
 800cd62:	e7b6      	b.n	800ccd2 <_malloc_r+0x4a>
 800cd64:	461a      	mov	r2, r3
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d1fb      	bne.n	800cd64 <_malloc_r+0xdc>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	6053      	str	r3, [r2, #4]
 800cd70:	e7de      	b.n	800cd30 <_malloc_r+0xa8>
 800cd72:	230c      	movs	r3, #12
 800cd74:	6033      	str	r3, [r6, #0]
 800cd76:	4630      	mov	r0, r6
 800cd78:	f000 f80c 	bl	800cd94 <__malloc_unlock>
 800cd7c:	e794      	b.n	800cca8 <_malloc_r+0x20>
 800cd7e:	6005      	str	r5, [r0, #0]
 800cd80:	e7d6      	b.n	800cd30 <_malloc_r+0xa8>
 800cd82:	bf00      	nop
 800cd84:	200031d4 	.word	0x200031d4

0800cd88 <__malloc_lock>:
 800cd88:	4801      	ldr	r0, [pc, #4]	@ (800cd90 <__malloc_lock+0x8>)
 800cd8a:	f7ff b8a4 	b.w	800bed6 <__retarget_lock_acquire_recursive>
 800cd8e:	bf00      	nop
 800cd90:	200031cc 	.word	0x200031cc

0800cd94 <__malloc_unlock>:
 800cd94:	4801      	ldr	r0, [pc, #4]	@ (800cd9c <__malloc_unlock+0x8>)
 800cd96:	f7ff b89f 	b.w	800bed8 <__retarget_lock_release_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	200031cc 	.word	0x200031cc

0800cda0 <_Balloc>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	69c6      	ldr	r6, [r0, #28]
 800cda4:	4604      	mov	r4, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	b976      	cbnz	r6, 800cdc8 <_Balloc+0x28>
 800cdaa:	2010      	movs	r0, #16
 800cdac:	f7ff ff42 	bl	800cc34 <malloc>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	61e0      	str	r0, [r4, #28]
 800cdb4:	b920      	cbnz	r0, 800cdc0 <_Balloc+0x20>
 800cdb6:	4b18      	ldr	r3, [pc, #96]	@ (800ce18 <_Balloc+0x78>)
 800cdb8:	4818      	ldr	r0, [pc, #96]	@ (800ce1c <_Balloc+0x7c>)
 800cdba:	216b      	movs	r1, #107	@ 0x6b
 800cdbc:	f001 fd74 	bl	800e8a8 <__assert_func>
 800cdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdc4:	6006      	str	r6, [r0, #0]
 800cdc6:	60c6      	str	r6, [r0, #12]
 800cdc8:	69e6      	ldr	r6, [r4, #28]
 800cdca:	68f3      	ldr	r3, [r6, #12]
 800cdcc:	b183      	cbz	r3, 800cdf0 <_Balloc+0x50>
 800cdce:	69e3      	ldr	r3, [r4, #28]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdd6:	b9b8      	cbnz	r0, 800ce08 <_Balloc+0x68>
 800cdd8:	2101      	movs	r1, #1
 800cdda:	fa01 f605 	lsl.w	r6, r1, r5
 800cdde:	1d72      	adds	r2, r6, #5
 800cde0:	0092      	lsls	r2, r2, #2
 800cde2:	4620      	mov	r0, r4
 800cde4:	f001 fd7e 	bl	800e8e4 <_calloc_r>
 800cde8:	b160      	cbz	r0, 800ce04 <_Balloc+0x64>
 800cdea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdee:	e00e      	b.n	800ce0e <_Balloc+0x6e>
 800cdf0:	2221      	movs	r2, #33	@ 0x21
 800cdf2:	2104      	movs	r1, #4
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	f001 fd75 	bl	800e8e4 <_calloc_r>
 800cdfa:	69e3      	ldr	r3, [r4, #28]
 800cdfc:	60f0      	str	r0, [r6, #12]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1e4      	bne.n	800cdce <_Balloc+0x2e>
 800ce04:	2000      	movs	r0, #0
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	6802      	ldr	r2, [r0, #0]
 800ce0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce14:	e7f7      	b.n	800ce06 <_Balloc+0x66>
 800ce16:	bf00      	nop
 800ce18:	0800fefe 	.word	0x0800fefe
 800ce1c:	0800ff7e 	.word	0x0800ff7e

0800ce20 <_Bfree>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	69c6      	ldr	r6, [r0, #28]
 800ce24:	4605      	mov	r5, r0
 800ce26:	460c      	mov	r4, r1
 800ce28:	b976      	cbnz	r6, 800ce48 <_Bfree+0x28>
 800ce2a:	2010      	movs	r0, #16
 800ce2c:	f7ff ff02 	bl	800cc34 <malloc>
 800ce30:	4602      	mov	r2, r0
 800ce32:	61e8      	str	r0, [r5, #28]
 800ce34:	b920      	cbnz	r0, 800ce40 <_Bfree+0x20>
 800ce36:	4b09      	ldr	r3, [pc, #36]	@ (800ce5c <_Bfree+0x3c>)
 800ce38:	4809      	ldr	r0, [pc, #36]	@ (800ce60 <_Bfree+0x40>)
 800ce3a:	218f      	movs	r1, #143	@ 0x8f
 800ce3c:	f001 fd34 	bl	800e8a8 <__assert_func>
 800ce40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce44:	6006      	str	r6, [r0, #0]
 800ce46:	60c6      	str	r6, [r0, #12]
 800ce48:	b13c      	cbz	r4, 800ce5a <_Bfree+0x3a>
 800ce4a:	69eb      	ldr	r3, [r5, #28]
 800ce4c:	6862      	ldr	r2, [r4, #4]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce54:	6021      	str	r1, [r4, #0]
 800ce56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}
 800ce5c:	0800fefe 	.word	0x0800fefe
 800ce60:	0800ff7e 	.word	0x0800ff7e

0800ce64 <__multadd>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	690d      	ldr	r5, [r1, #16]
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	461e      	mov	r6, r3
 800ce70:	f101 0c14 	add.w	ip, r1, #20
 800ce74:	2000      	movs	r0, #0
 800ce76:	f8dc 3000 	ldr.w	r3, [ip]
 800ce7a:	b299      	uxth	r1, r3
 800ce7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce80:	0c1e      	lsrs	r6, r3, #16
 800ce82:	0c0b      	lsrs	r3, r1, #16
 800ce84:	fb02 3306 	mla	r3, r2, r6, r3
 800ce88:	b289      	uxth	r1, r1
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce90:	4285      	cmp	r5, r0
 800ce92:	f84c 1b04 	str.w	r1, [ip], #4
 800ce96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce9a:	dcec      	bgt.n	800ce76 <__multadd+0x12>
 800ce9c:	b30e      	cbz	r6, 800cee2 <__multadd+0x7e>
 800ce9e:	68a3      	ldr	r3, [r4, #8]
 800cea0:	42ab      	cmp	r3, r5
 800cea2:	dc19      	bgt.n	800ced8 <__multadd+0x74>
 800cea4:	6861      	ldr	r1, [r4, #4]
 800cea6:	4638      	mov	r0, r7
 800cea8:	3101      	adds	r1, #1
 800ceaa:	f7ff ff79 	bl	800cda0 <_Balloc>
 800ceae:	4680      	mov	r8, r0
 800ceb0:	b928      	cbnz	r0, 800cebe <__multadd+0x5a>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	4b0c      	ldr	r3, [pc, #48]	@ (800cee8 <__multadd+0x84>)
 800ceb6:	480d      	ldr	r0, [pc, #52]	@ (800ceec <__multadd+0x88>)
 800ceb8:	21ba      	movs	r1, #186	@ 0xba
 800ceba:	f001 fcf5 	bl	800e8a8 <__assert_func>
 800cebe:	6922      	ldr	r2, [r4, #16]
 800cec0:	3202      	adds	r2, #2
 800cec2:	f104 010c 	add.w	r1, r4, #12
 800cec6:	0092      	lsls	r2, r2, #2
 800cec8:	300c      	adds	r0, #12
 800ceca:	f7ff f806 	bl	800beda <memcpy>
 800cece:	4621      	mov	r1, r4
 800ced0:	4638      	mov	r0, r7
 800ced2:	f7ff ffa5 	bl	800ce20 <_Bfree>
 800ced6:	4644      	mov	r4, r8
 800ced8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cedc:	3501      	adds	r5, #1
 800cede:	615e      	str	r6, [r3, #20]
 800cee0:	6125      	str	r5, [r4, #16]
 800cee2:	4620      	mov	r0, r4
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee8:	0800ff6d 	.word	0x0800ff6d
 800ceec:	0800ff7e 	.word	0x0800ff7e

0800cef0 <__s2b>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	4615      	mov	r5, r2
 800cef8:	461f      	mov	r7, r3
 800cefa:	2209      	movs	r2, #9
 800cefc:	3308      	adds	r3, #8
 800cefe:	4606      	mov	r6, r0
 800cf00:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf04:	2100      	movs	r1, #0
 800cf06:	2201      	movs	r2, #1
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	db09      	blt.n	800cf20 <__s2b+0x30>
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f7ff ff47 	bl	800cda0 <_Balloc>
 800cf12:	b940      	cbnz	r0, 800cf26 <__s2b+0x36>
 800cf14:	4602      	mov	r2, r0
 800cf16:	4b19      	ldr	r3, [pc, #100]	@ (800cf7c <__s2b+0x8c>)
 800cf18:	4819      	ldr	r0, [pc, #100]	@ (800cf80 <__s2b+0x90>)
 800cf1a:	21d3      	movs	r1, #211	@ 0xd3
 800cf1c:	f001 fcc4 	bl	800e8a8 <__assert_func>
 800cf20:	0052      	lsls	r2, r2, #1
 800cf22:	3101      	adds	r1, #1
 800cf24:	e7f0      	b.n	800cf08 <__s2b+0x18>
 800cf26:	9b08      	ldr	r3, [sp, #32]
 800cf28:	6143      	str	r3, [r0, #20]
 800cf2a:	2d09      	cmp	r5, #9
 800cf2c:	f04f 0301 	mov.w	r3, #1
 800cf30:	6103      	str	r3, [r0, #16]
 800cf32:	dd16      	ble.n	800cf62 <__s2b+0x72>
 800cf34:	f104 0909 	add.w	r9, r4, #9
 800cf38:	46c8      	mov	r8, r9
 800cf3a:	442c      	add	r4, r5
 800cf3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf40:	4601      	mov	r1, r0
 800cf42:	3b30      	subs	r3, #48	@ 0x30
 800cf44:	220a      	movs	r2, #10
 800cf46:	4630      	mov	r0, r6
 800cf48:	f7ff ff8c 	bl	800ce64 <__multadd>
 800cf4c:	45a0      	cmp	r8, r4
 800cf4e:	d1f5      	bne.n	800cf3c <__s2b+0x4c>
 800cf50:	f1a5 0408 	sub.w	r4, r5, #8
 800cf54:	444c      	add	r4, r9
 800cf56:	1b2d      	subs	r5, r5, r4
 800cf58:	1963      	adds	r3, r4, r5
 800cf5a:	42bb      	cmp	r3, r7
 800cf5c:	db04      	blt.n	800cf68 <__s2b+0x78>
 800cf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf62:	340a      	adds	r4, #10
 800cf64:	2509      	movs	r5, #9
 800cf66:	e7f6      	b.n	800cf56 <__s2b+0x66>
 800cf68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	3b30      	subs	r3, #48	@ 0x30
 800cf70:	220a      	movs	r2, #10
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7ff ff76 	bl	800ce64 <__multadd>
 800cf78:	e7ee      	b.n	800cf58 <__s2b+0x68>
 800cf7a:	bf00      	nop
 800cf7c:	0800ff6d 	.word	0x0800ff6d
 800cf80:	0800ff7e 	.word	0x0800ff7e

0800cf84 <__hi0bits>:
 800cf84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf88:	4603      	mov	r3, r0
 800cf8a:	bf36      	itet	cc
 800cf8c:	0403      	lslcc	r3, r0, #16
 800cf8e:	2000      	movcs	r0, #0
 800cf90:	2010      	movcc	r0, #16
 800cf92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf96:	bf3c      	itt	cc
 800cf98:	021b      	lslcc	r3, r3, #8
 800cf9a:	3008      	addcc	r0, #8
 800cf9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfa0:	bf3c      	itt	cc
 800cfa2:	011b      	lslcc	r3, r3, #4
 800cfa4:	3004      	addcc	r0, #4
 800cfa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfaa:	bf3c      	itt	cc
 800cfac:	009b      	lslcc	r3, r3, #2
 800cfae:	3002      	addcc	r0, #2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	db05      	blt.n	800cfc0 <__hi0bits+0x3c>
 800cfb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cfb8:	f100 0001 	add.w	r0, r0, #1
 800cfbc:	bf08      	it	eq
 800cfbe:	2020      	moveq	r0, #32
 800cfc0:	4770      	bx	lr

0800cfc2 <__lo0bits>:
 800cfc2:	6803      	ldr	r3, [r0, #0]
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	f013 0007 	ands.w	r0, r3, #7
 800cfca:	d00b      	beq.n	800cfe4 <__lo0bits+0x22>
 800cfcc:	07d9      	lsls	r1, r3, #31
 800cfce:	d421      	bmi.n	800d014 <__lo0bits+0x52>
 800cfd0:	0798      	lsls	r0, r3, #30
 800cfd2:	bf49      	itett	mi
 800cfd4:	085b      	lsrmi	r3, r3, #1
 800cfd6:	089b      	lsrpl	r3, r3, #2
 800cfd8:	2001      	movmi	r0, #1
 800cfda:	6013      	strmi	r3, [r2, #0]
 800cfdc:	bf5c      	itt	pl
 800cfde:	6013      	strpl	r3, [r2, #0]
 800cfe0:	2002      	movpl	r0, #2
 800cfe2:	4770      	bx	lr
 800cfe4:	b299      	uxth	r1, r3
 800cfe6:	b909      	cbnz	r1, 800cfec <__lo0bits+0x2a>
 800cfe8:	0c1b      	lsrs	r3, r3, #16
 800cfea:	2010      	movs	r0, #16
 800cfec:	b2d9      	uxtb	r1, r3
 800cfee:	b909      	cbnz	r1, 800cff4 <__lo0bits+0x32>
 800cff0:	3008      	adds	r0, #8
 800cff2:	0a1b      	lsrs	r3, r3, #8
 800cff4:	0719      	lsls	r1, r3, #28
 800cff6:	bf04      	itt	eq
 800cff8:	091b      	lsreq	r3, r3, #4
 800cffa:	3004      	addeq	r0, #4
 800cffc:	0799      	lsls	r1, r3, #30
 800cffe:	bf04      	itt	eq
 800d000:	089b      	lsreq	r3, r3, #2
 800d002:	3002      	addeq	r0, #2
 800d004:	07d9      	lsls	r1, r3, #31
 800d006:	d403      	bmi.n	800d010 <__lo0bits+0x4e>
 800d008:	085b      	lsrs	r3, r3, #1
 800d00a:	f100 0001 	add.w	r0, r0, #1
 800d00e:	d003      	beq.n	800d018 <__lo0bits+0x56>
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	4770      	bx	lr
 800d014:	2000      	movs	r0, #0
 800d016:	4770      	bx	lr
 800d018:	2020      	movs	r0, #32
 800d01a:	4770      	bx	lr

0800d01c <__i2b>:
 800d01c:	b510      	push	{r4, lr}
 800d01e:	460c      	mov	r4, r1
 800d020:	2101      	movs	r1, #1
 800d022:	f7ff febd 	bl	800cda0 <_Balloc>
 800d026:	4602      	mov	r2, r0
 800d028:	b928      	cbnz	r0, 800d036 <__i2b+0x1a>
 800d02a:	4b05      	ldr	r3, [pc, #20]	@ (800d040 <__i2b+0x24>)
 800d02c:	4805      	ldr	r0, [pc, #20]	@ (800d044 <__i2b+0x28>)
 800d02e:	f240 1145 	movw	r1, #325	@ 0x145
 800d032:	f001 fc39 	bl	800e8a8 <__assert_func>
 800d036:	2301      	movs	r3, #1
 800d038:	6144      	str	r4, [r0, #20]
 800d03a:	6103      	str	r3, [r0, #16]
 800d03c:	bd10      	pop	{r4, pc}
 800d03e:	bf00      	nop
 800d040:	0800ff6d 	.word	0x0800ff6d
 800d044:	0800ff7e 	.word	0x0800ff7e

0800d048 <__multiply>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	4614      	mov	r4, r2
 800d04e:	690a      	ldr	r2, [r1, #16]
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	429a      	cmp	r2, r3
 800d054:	bfa8      	it	ge
 800d056:	4623      	movge	r3, r4
 800d058:	460f      	mov	r7, r1
 800d05a:	bfa4      	itt	ge
 800d05c:	460c      	movge	r4, r1
 800d05e:	461f      	movge	r7, r3
 800d060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d064:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d068:	68a3      	ldr	r3, [r4, #8]
 800d06a:	6861      	ldr	r1, [r4, #4]
 800d06c:	eb0a 0609 	add.w	r6, sl, r9
 800d070:	42b3      	cmp	r3, r6
 800d072:	b085      	sub	sp, #20
 800d074:	bfb8      	it	lt
 800d076:	3101      	addlt	r1, #1
 800d078:	f7ff fe92 	bl	800cda0 <_Balloc>
 800d07c:	b930      	cbnz	r0, 800d08c <__multiply+0x44>
 800d07e:	4602      	mov	r2, r0
 800d080:	4b44      	ldr	r3, [pc, #272]	@ (800d194 <__multiply+0x14c>)
 800d082:	4845      	ldr	r0, [pc, #276]	@ (800d198 <__multiply+0x150>)
 800d084:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d088:	f001 fc0e 	bl	800e8a8 <__assert_func>
 800d08c:	f100 0514 	add.w	r5, r0, #20
 800d090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d094:	462b      	mov	r3, r5
 800d096:	2200      	movs	r2, #0
 800d098:	4543      	cmp	r3, r8
 800d09a:	d321      	bcc.n	800d0e0 <__multiply+0x98>
 800d09c:	f107 0114 	add.w	r1, r7, #20
 800d0a0:	f104 0214 	add.w	r2, r4, #20
 800d0a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d0a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d0ac:	9302      	str	r3, [sp, #8]
 800d0ae:	1b13      	subs	r3, r2, r4
 800d0b0:	3b15      	subs	r3, #21
 800d0b2:	f023 0303 	bic.w	r3, r3, #3
 800d0b6:	3304      	adds	r3, #4
 800d0b8:	f104 0715 	add.w	r7, r4, #21
 800d0bc:	42ba      	cmp	r2, r7
 800d0be:	bf38      	it	cc
 800d0c0:	2304      	movcc	r3, #4
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	9b02      	ldr	r3, [sp, #8]
 800d0c6:	9103      	str	r1, [sp, #12]
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	d80c      	bhi.n	800d0e6 <__multiply+0x9e>
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	dd03      	ble.n	800d0d8 <__multiply+0x90>
 800d0d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d05b      	beq.n	800d190 <__multiply+0x148>
 800d0d8:	6106      	str	r6, [r0, #16]
 800d0da:	b005      	add	sp, #20
 800d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e0:	f843 2b04 	str.w	r2, [r3], #4
 800d0e4:	e7d8      	b.n	800d098 <__multiply+0x50>
 800d0e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0ea:	f1ba 0f00 	cmp.w	sl, #0
 800d0ee:	d024      	beq.n	800d13a <__multiply+0xf2>
 800d0f0:	f104 0e14 	add.w	lr, r4, #20
 800d0f4:	46a9      	mov	r9, r5
 800d0f6:	f04f 0c00 	mov.w	ip, #0
 800d0fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0fe:	f8d9 3000 	ldr.w	r3, [r9]
 800d102:	fa1f fb87 	uxth.w	fp, r7
 800d106:	b29b      	uxth	r3, r3
 800d108:	fb0a 330b 	mla	r3, sl, fp, r3
 800d10c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d110:	f8d9 7000 	ldr.w	r7, [r9]
 800d114:	4463      	add	r3, ip
 800d116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d11a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d11e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d122:	b29b      	uxth	r3, r3
 800d124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d128:	4572      	cmp	r2, lr
 800d12a:	f849 3b04 	str.w	r3, [r9], #4
 800d12e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d132:	d8e2      	bhi.n	800d0fa <__multiply+0xb2>
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	f845 c003 	str.w	ip, [r5, r3]
 800d13a:	9b03      	ldr	r3, [sp, #12]
 800d13c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d140:	3104      	adds	r1, #4
 800d142:	f1b9 0f00 	cmp.w	r9, #0
 800d146:	d021      	beq.n	800d18c <__multiply+0x144>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	f104 0c14 	add.w	ip, r4, #20
 800d14e:	46ae      	mov	lr, r5
 800d150:	f04f 0a00 	mov.w	sl, #0
 800d154:	f8bc b000 	ldrh.w	fp, [ip]
 800d158:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d15c:	fb09 770b 	mla	r7, r9, fp, r7
 800d160:	4457      	add	r7, sl
 800d162:	b29b      	uxth	r3, r3
 800d164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d168:	f84e 3b04 	str.w	r3, [lr], #4
 800d16c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d174:	f8be 3000 	ldrh.w	r3, [lr]
 800d178:	fb09 330a 	mla	r3, r9, sl, r3
 800d17c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d180:	4562      	cmp	r2, ip
 800d182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d186:	d8e5      	bhi.n	800d154 <__multiply+0x10c>
 800d188:	9f01      	ldr	r7, [sp, #4]
 800d18a:	51eb      	str	r3, [r5, r7]
 800d18c:	3504      	adds	r5, #4
 800d18e:	e799      	b.n	800d0c4 <__multiply+0x7c>
 800d190:	3e01      	subs	r6, #1
 800d192:	e79b      	b.n	800d0cc <__multiply+0x84>
 800d194:	0800ff6d 	.word	0x0800ff6d
 800d198:	0800ff7e 	.word	0x0800ff7e

0800d19c <__pow5mult>:
 800d19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a0:	4615      	mov	r5, r2
 800d1a2:	f012 0203 	ands.w	r2, r2, #3
 800d1a6:	4607      	mov	r7, r0
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	d007      	beq.n	800d1bc <__pow5mult+0x20>
 800d1ac:	4c25      	ldr	r4, [pc, #148]	@ (800d244 <__pow5mult+0xa8>)
 800d1ae:	3a01      	subs	r2, #1
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1b6:	f7ff fe55 	bl	800ce64 <__multadd>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	10ad      	asrs	r5, r5, #2
 800d1be:	d03d      	beq.n	800d23c <__pow5mult+0xa0>
 800d1c0:	69fc      	ldr	r4, [r7, #28]
 800d1c2:	b97c      	cbnz	r4, 800d1e4 <__pow5mult+0x48>
 800d1c4:	2010      	movs	r0, #16
 800d1c6:	f7ff fd35 	bl	800cc34 <malloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	61f8      	str	r0, [r7, #28]
 800d1ce:	b928      	cbnz	r0, 800d1dc <__pow5mult+0x40>
 800d1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d248 <__pow5mult+0xac>)
 800d1d2:	481e      	ldr	r0, [pc, #120]	@ (800d24c <__pow5mult+0xb0>)
 800d1d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d1d8:	f001 fb66 	bl	800e8a8 <__assert_func>
 800d1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1e0:	6004      	str	r4, [r0, #0]
 800d1e2:	60c4      	str	r4, [r0, #12]
 800d1e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1ec:	b94c      	cbnz	r4, 800d202 <__pow5mult+0x66>
 800d1ee:	f240 2171 	movw	r1, #625	@ 0x271
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	f7ff ff12 	bl	800d01c <__i2b>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1fe:	4604      	mov	r4, r0
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	f04f 0900 	mov.w	r9, #0
 800d206:	07eb      	lsls	r3, r5, #31
 800d208:	d50a      	bpl.n	800d220 <__pow5mult+0x84>
 800d20a:	4631      	mov	r1, r6
 800d20c:	4622      	mov	r2, r4
 800d20e:	4638      	mov	r0, r7
 800d210:	f7ff ff1a 	bl	800d048 <__multiply>
 800d214:	4631      	mov	r1, r6
 800d216:	4680      	mov	r8, r0
 800d218:	4638      	mov	r0, r7
 800d21a:	f7ff fe01 	bl	800ce20 <_Bfree>
 800d21e:	4646      	mov	r6, r8
 800d220:	106d      	asrs	r5, r5, #1
 800d222:	d00b      	beq.n	800d23c <__pow5mult+0xa0>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	b938      	cbnz	r0, 800d238 <__pow5mult+0x9c>
 800d228:	4622      	mov	r2, r4
 800d22a:	4621      	mov	r1, r4
 800d22c:	4638      	mov	r0, r7
 800d22e:	f7ff ff0b 	bl	800d048 <__multiply>
 800d232:	6020      	str	r0, [r4, #0]
 800d234:	f8c0 9000 	str.w	r9, [r0]
 800d238:	4604      	mov	r4, r0
 800d23a:	e7e4      	b.n	800d206 <__pow5mult+0x6a>
 800d23c:	4630      	mov	r0, r6
 800d23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d242:	bf00      	nop
 800d244:	0800ffd8 	.word	0x0800ffd8
 800d248:	0800fefe 	.word	0x0800fefe
 800d24c:	0800ff7e 	.word	0x0800ff7e

0800d250 <__lshift>:
 800d250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d254:	460c      	mov	r4, r1
 800d256:	6849      	ldr	r1, [r1, #4]
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d25e:	68a3      	ldr	r3, [r4, #8]
 800d260:	4607      	mov	r7, r0
 800d262:	4691      	mov	r9, r2
 800d264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d268:	f108 0601 	add.w	r6, r8, #1
 800d26c:	42b3      	cmp	r3, r6
 800d26e:	db0b      	blt.n	800d288 <__lshift+0x38>
 800d270:	4638      	mov	r0, r7
 800d272:	f7ff fd95 	bl	800cda0 <_Balloc>
 800d276:	4605      	mov	r5, r0
 800d278:	b948      	cbnz	r0, 800d28e <__lshift+0x3e>
 800d27a:	4602      	mov	r2, r0
 800d27c:	4b28      	ldr	r3, [pc, #160]	@ (800d320 <__lshift+0xd0>)
 800d27e:	4829      	ldr	r0, [pc, #164]	@ (800d324 <__lshift+0xd4>)
 800d280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d284:	f001 fb10 	bl	800e8a8 <__assert_func>
 800d288:	3101      	adds	r1, #1
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	e7ee      	b.n	800d26c <__lshift+0x1c>
 800d28e:	2300      	movs	r3, #0
 800d290:	f100 0114 	add.w	r1, r0, #20
 800d294:	f100 0210 	add.w	r2, r0, #16
 800d298:	4618      	mov	r0, r3
 800d29a:	4553      	cmp	r3, sl
 800d29c:	db33      	blt.n	800d306 <__lshift+0xb6>
 800d29e:	6920      	ldr	r0, [r4, #16]
 800d2a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2a4:	f104 0314 	add.w	r3, r4, #20
 800d2a8:	f019 091f 	ands.w	r9, r9, #31
 800d2ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2b4:	d02b      	beq.n	800d30e <__lshift+0xbe>
 800d2b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d2ba:	468a      	mov	sl, r1
 800d2bc:	2200      	movs	r2, #0
 800d2be:	6818      	ldr	r0, [r3, #0]
 800d2c0:	fa00 f009 	lsl.w	r0, r0, r9
 800d2c4:	4310      	orrs	r0, r2
 800d2c6:	f84a 0b04 	str.w	r0, [sl], #4
 800d2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ce:	459c      	cmp	ip, r3
 800d2d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2d4:	d8f3      	bhi.n	800d2be <__lshift+0x6e>
 800d2d6:	ebac 0304 	sub.w	r3, ip, r4
 800d2da:	3b15      	subs	r3, #21
 800d2dc:	f023 0303 	bic.w	r3, r3, #3
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	f104 0015 	add.w	r0, r4, #21
 800d2e6:	4584      	cmp	ip, r0
 800d2e8:	bf38      	it	cc
 800d2ea:	2304      	movcc	r3, #4
 800d2ec:	50ca      	str	r2, [r1, r3]
 800d2ee:	b10a      	cbz	r2, 800d2f4 <__lshift+0xa4>
 800d2f0:	f108 0602 	add.w	r6, r8, #2
 800d2f4:	3e01      	subs	r6, #1
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	612e      	str	r6, [r5, #16]
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	f7ff fd90 	bl	800ce20 <_Bfree>
 800d300:	4628      	mov	r0, r5
 800d302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d306:	f842 0f04 	str.w	r0, [r2, #4]!
 800d30a:	3301      	adds	r3, #1
 800d30c:	e7c5      	b.n	800d29a <__lshift+0x4a>
 800d30e:	3904      	subs	r1, #4
 800d310:	f853 2b04 	ldr.w	r2, [r3], #4
 800d314:	f841 2f04 	str.w	r2, [r1, #4]!
 800d318:	459c      	cmp	ip, r3
 800d31a:	d8f9      	bhi.n	800d310 <__lshift+0xc0>
 800d31c:	e7ea      	b.n	800d2f4 <__lshift+0xa4>
 800d31e:	bf00      	nop
 800d320:	0800ff6d 	.word	0x0800ff6d
 800d324:	0800ff7e 	.word	0x0800ff7e

0800d328 <__mcmp>:
 800d328:	690a      	ldr	r2, [r1, #16]
 800d32a:	4603      	mov	r3, r0
 800d32c:	6900      	ldr	r0, [r0, #16]
 800d32e:	1a80      	subs	r0, r0, r2
 800d330:	b530      	push	{r4, r5, lr}
 800d332:	d10e      	bne.n	800d352 <__mcmp+0x2a>
 800d334:	3314      	adds	r3, #20
 800d336:	3114      	adds	r1, #20
 800d338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d33c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d348:	4295      	cmp	r5, r2
 800d34a:	d003      	beq.n	800d354 <__mcmp+0x2c>
 800d34c:	d205      	bcs.n	800d35a <__mcmp+0x32>
 800d34e:	f04f 30ff 	mov.w	r0, #4294967295
 800d352:	bd30      	pop	{r4, r5, pc}
 800d354:	42a3      	cmp	r3, r4
 800d356:	d3f3      	bcc.n	800d340 <__mcmp+0x18>
 800d358:	e7fb      	b.n	800d352 <__mcmp+0x2a>
 800d35a:	2001      	movs	r0, #1
 800d35c:	e7f9      	b.n	800d352 <__mcmp+0x2a>
	...

0800d360 <__mdiff>:
 800d360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	4689      	mov	r9, r1
 800d366:	4606      	mov	r6, r0
 800d368:	4611      	mov	r1, r2
 800d36a:	4648      	mov	r0, r9
 800d36c:	4614      	mov	r4, r2
 800d36e:	f7ff ffdb 	bl	800d328 <__mcmp>
 800d372:	1e05      	subs	r5, r0, #0
 800d374:	d112      	bne.n	800d39c <__mdiff+0x3c>
 800d376:	4629      	mov	r1, r5
 800d378:	4630      	mov	r0, r6
 800d37a:	f7ff fd11 	bl	800cda0 <_Balloc>
 800d37e:	4602      	mov	r2, r0
 800d380:	b928      	cbnz	r0, 800d38e <__mdiff+0x2e>
 800d382:	4b3f      	ldr	r3, [pc, #252]	@ (800d480 <__mdiff+0x120>)
 800d384:	f240 2137 	movw	r1, #567	@ 0x237
 800d388:	483e      	ldr	r0, [pc, #248]	@ (800d484 <__mdiff+0x124>)
 800d38a:	f001 fa8d 	bl	800e8a8 <__assert_func>
 800d38e:	2301      	movs	r3, #1
 800d390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d394:	4610      	mov	r0, r2
 800d396:	b003      	add	sp, #12
 800d398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39c:	bfbc      	itt	lt
 800d39e:	464b      	movlt	r3, r9
 800d3a0:	46a1      	movlt	r9, r4
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d3a8:	bfba      	itte	lt
 800d3aa:	461c      	movlt	r4, r3
 800d3ac:	2501      	movlt	r5, #1
 800d3ae:	2500      	movge	r5, #0
 800d3b0:	f7ff fcf6 	bl	800cda0 <_Balloc>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	b918      	cbnz	r0, 800d3c0 <__mdiff+0x60>
 800d3b8:	4b31      	ldr	r3, [pc, #196]	@ (800d480 <__mdiff+0x120>)
 800d3ba:	f240 2145 	movw	r1, #581	@ 0x245
 800d3be:	e7e3      	b.n	800d388 <__mdiff+0x28>
 800d3c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d3c4:	6926      	ldr	r6, [r4, #16]
 800d3c6:	60c5      	str	r5, [r0, #12]
 800d3c8:	f109 0310 	add.w	r3, r9, #16
 800d3cc:	f109 0514 	add.w	r5, r9, #20
 800d3d0:	f104 0e14 	add.w	lr, r4, #20
 800d3d4:	f100 0b14 	add.w	fp, r0, #20
 800d3d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d3dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	46d9      	mov	r9, fp
 800d3e4:	f04f 0c00 	mov.w	ip, #0
 800d3e8:	9b01      	ldr	r3, [sp, #4]
 800d3ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d3ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	fa1f f38a 	uxth.w	r3, sl
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	b283      	uxth	r3, r0
 800d3fc:	1acb      	subs	r3, r1, r3
 800d3fe:	0c00      	lsrs	r0, r0, #16
 800d400:	4463      	add	r3, ip
 800d402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d410:	4576      	cmp	r6, lr
 800d412:	f849 3b04 	str.w	r3, [r9], #4
 800d416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d41a:	d8e5      	bhi.n	800d3e8 <__mdiff+0x88>
 800d41c:	1b33      	subs	r3, r6, r4
 800d41e:	3b15      	subs	r3, #21
 800d420:	f023 0303 	bic.w	r3, r3, #3
 800d424:	3415      	adds	r4, #21
 800d426:	3304      	adds	r3, #4
 800d428:	42a6      	cmp	r6, r4
 800d42a:	bf38      	it	cc
 800d42c:	2304      	movcc	r3, #4
 800d42e:	441d      	add	r5, r3
 800d430:	445b      	add	r3, fp
 800d432:	461e      	mov	r6, r3
 800d434:	462c      	mov	r4, r5
 800d436:	4544      	cmp	r4, r8
 800d438:	d30e      	bcc.n	800d458 <__mdiff+0xf8>
 800d43a:	f108 0103 	add.w	r1, r8, #3
 800d43e:	1b49      	subs	r1, r1, r5
 800d440:	f021 0103 	bic.w	r1, r1, #3
 800d444:	3d03      	subs	r5, #3
 800d446:	45a8      	cmp	r8, r5
 800d448:	bf38      	it	cc
 800d44a:	2100      	movcc	r1, #0
 800d44c:	440b      	add	r3, r1
 800d44e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d452:	b191      	cbz	r1, 800d47a <__mdiff+0x11a>
 800d454:	6117      	str	r7, [r2, #16]
 800d456:	e79d      	b.n	800d394 <__mdiff+0x34>
 800d458:	f854 1b04 	ldr.w	r1, [r4], #4
 800d45c:	46e6      	mov	lr, ip
 800d45e:	0c08      	lsrs	r0, r1, #16
 800d460:	fa1c fc81 	uxtah	ip, ip, r1
 800d464:	4471      	add	r1, lr
 800d466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d46a:	b289      	uxth	r1, r1
 800d46c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d470:	f846 1b04 	str.w	r1, [r6], #4
 800d474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d478:	e7dd      	b.n	800d436 <__mdiff+0xd6>
 800d47a:	3f01      	subs	r7, #1
 800d47c:	e7e7      	b.n	800d44e <__mdiff+0xee>
 800d47e:	bf00      	nop
 800d480:	0800ff6d 	.word	0x0800ff6d
 800d484:	0800ff7e 	.word	0x0800ff7e

0800d488 <__ulp>:
 800d488:	b082      	sub	sp, #8
 800d48a:	ed8d 0b00 	vstr	d0, [sp]
 800d48e:	9a01      	ldr	r2, [sp, #4]
 800d490:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d0 <__ulp+0x48>)
 800d492:	4013      	ands	r3, r2
 800d494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d498:	2b00      	cmp	r3, #0
 800d49a:	dc08      	bgt.n	800d4ae <__ulp+0x26>
 800d49c:	425b      	negs	r3, r3
 800d49e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4a6:	da04      	bge.n	800d4b2 <__ulp+0x2a>
 800d4a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d4ac:	4113      	asrs	r3, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	e008      	b.n	800d4c4 <__ulp+0x3c>
 800d4b2:	f1a2 0314 	sub.w	r3, r2, #20
 800d4b6:	2b1e      	cmp	r3, #30
 800d4b8:	bfda      	itte	le
 800d4ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d4be:	40da      	lsrle	r2, r3
 800d4c0:	2201      	movgt	r2, #1
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	ec41 0b10 	vmov	d0, r0, r1
 800d4cc:	b002      	add	sp, #8
 800d4ce:	4770      	bx	lr
 800d4d0:	7ff00000 	.word	0x7ff00000

0800d4d4 <__b2d>:
 800d4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	6906      	ldr	r6, [r0, #16]
 800d4da:	f100 0814 	add.w	r8, r0, #20
 800d4de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d4e2:	1f37      	subs	r7, r6, #4
 800d4e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7ff fd4b 	bl	800cf84 <__hi0bits>
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	280a      	cmp	r0, #10
 800d4f4:	600b      	str	r3, [r1, #0]
 800d4f6:	491b      	ldr	r1, [pc, #108]	@ (800d564 <__b2d+0x90>)
 800d4f8:	dc15      	bgt.n	800d526 <__b2d+0x52>
 800d4fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800d4fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800d502:	45b8      	cmp	r8, r7
 800d504:	ea43 0501 	orr.w	r5, r3, r1
 800d508:	bf34      	ite	cc
 800d50a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d50e:	2300      	movcs	r3, #0
 800d510:	3015      	adds	r0, #21
 800d512:	fa02 f000 	lsl.w	r0, r2, r0
 800d516:	fa23 f30c 	lsr.w	r3, r3, ip
 800d51a:	4303      	orrs	r3, r0
 800d51c:	461c      	mov	r4, r3
 800d51e:	ec45 4b10 	vmov	d0, r4, r5
 800d522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d526:	45b8      	cmp	r8, r7
 800d528:	bf3a      	itte	cc
 800d52a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d52e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d532:	2300      	movcs	r3, #0
 800d534:	380b      	subs	r0, #11
 800d536:	d012      	beq.n	800d55e <__b2d+0x8a>
 800d538:	f1c0 0120 	rsb	r1, r0, #32
 800d53c:	fa23 f401 	lsr.w	r4, r3, r1
 800d540:	4082      	lsls	r2, r0
 800d542:	4322      	orrs	r2, r4
 800d544:	4547      	cmp	r7, r8
 800d546:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d54a:	bf8c      	ite	hi
 800d54c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d550:	2200      	movls	r2, #0
 800d552:	4083      	lsls	r3, r0
 800d554:	40ca      	lsrs	r2, r1
 800d556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d55a:	4313      	orrs	r3, r2
 800d55c:	e7de      	b.n	800d51c <__b2d+0x48>
 800d55e:	ea42 0501 	orr.w	r5, r2, r1
 800d562:	e7db      	b.n	800d51c <__b2d+0x48>
 800d564:	3ff00000 	.word	0x3ff00000

0800d568 <__d2b>:
 800d568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d56c:	460f      	mov	r7, r1
 800d56e:	2101      	movs	r1, #1
 800d570:	ec59 8b10 	vmov	r8, r9, d0
 800d574:	4616      	mov	r6, r2
 800d576:	f7ff fc13 	bl	800cda0 <_Balloc>
 800d57a:	4604      	mov	r4, r0
 800d57c:	b930      	cbnz	r0, 800d58c <__d2b+0x24>
 800d57e:	4602      	mov	r2, r0
 800d580:	4b23      	ldr	r3, [pc, #140]	@ (800d610 <__d2b+0xa8>)
 800d582:	4824      	ldr	r0, [pc, #144]	@ (800d614 <__d2b+0xac>)
 800d584:	f240 310f 	movw	r1, #783	@ 0x30f
 800d588:	f001 f98e 	bl	800e8a8 <__assert_func>
 800d58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d594:	b10d      	cbz	r5, 800d59a <__d2b+0x32>
 800d596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d59a:	9301      	str	r3, [sp, #4]
 800d59c:	f1b8 0300 	subs.w	r3, r8, #0
 800d5a0:	d023      	beq.n	800d5ea <__d2b+0x82>
 800d5a2:	4668      	mov	r0, sp
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	f7ff fd0c 	bl	800cfc2 <__lo0bits>
 800d5aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5ae:	b1d0      	cbz	r0, 800d5e6 <__d2b+0x7e>
 800d5b0:	f1c0 0320 	rsb	r3, r0, #32
 800d5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	40c2      	lsrs	r2, r0
 800d5bc:	6163      	str	r3, [r4, #20]
 800d5be:	9201      	str	r2, [sp, #4]
 800d5c0:	9b01      	ldr	r3, [sp, #4]
 800d5c2:	61a3      	str	r3, [r4, #24]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	bf0c      	ite	eq
 800d5c8:	2201      	moveq	r2, #1
 800d5ca:	2202      	movne	r2, #2
 800d5cc:	6122      	str	r2, [r4, #16]
 800d5ce:	b1a5      	cbz	r5, 800d5fa <__d2b+0x92>
 800d5d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5d4:	4405      	add	r5, r0
 800d5d6:	603d      	str	r5, [r7, #0]
 800d5d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5dc:	6030      	str	r0, [r6, #0]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	b003      	add	sp, #12
 800d5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5e6:	6161      	str	r1, [r4, #20]
 800d5e8:	e7ea      	b.n	800d5c0 <__d2b+0x58>
 800d5ea:	a801      	add	r0, sp, #4
 800d5ec:	f7ff fce9 	bl	800cfc2 <__lo0bits>
 800d5f0:	9b01      	ldr	r3, [sp, #4]
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	3020      	adds	r0, #32
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	e7e8      	b.n	800d5cc <__d2b+0x64>
 800d5fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d602:	6038      	str	r0, [r7, #0]
 800d604:	6918      	ldr	r0, [r3, #16]
 800d606:	f7ff fcbd 	bl	800cf84 <__hi0bits>
 800d60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d60e:	e7e5      	b.n	800d5dc <__d2b+0x74>
 800d610:	0800ff6d 	.word	0x0800ff6d
 800d614:	0800ff7e 	.word	0x0800ff7e

0800d618 <__ratio>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	b085      	sub	sp, #20
 800d61e:	e9cd 1000 	strd	r1, r0, [sp]
 800d622:	a902      	add	r1, sp, #8
 800d624:	f7ff ff56 	bl	800d4d4 <__b2d>
 800d628:	9800      	ldr	r0, [sp, #0]
 800d62a:	a903      	add	r1, sp, #12
 800d62c:	ec55 4b10 	vmov	r4, r5, d0
 800d630:	f7ff ff50 	bl	800d4d4 <__b2d>
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	6919      	ldr	r1, [r3, #16]
 800d638:	9b00      	ldr	r3, [sp, #0]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	1ac9      	subs	r1, r1, r3
 800d63e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	ec5b ab10 	vmov	sl, fp, d0
 800d648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	bfce      	itee	gt
 800d650:	462a      	movgt	r2, r5
 800d652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d656:	465a      	movle	r2, fp
 800d658:	462f      	mov	r7, r5
 800d65a:	46d9      	mov	r9, fp
 800d65c:	bfcc      	ite	gt
 800d65e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d662:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d666:	464b      	mov	r3, r9
 800d668:	4652      	mov	r2, sl
 800d66a:	4620      	mov	r0, r4
 800d66c:	4639      	mov	r1, r7
 800d66e:	f7f3 f8ed 	bl	800084c <__aeabi_ddiv>
 800d672:	ec41 0b10 	vmov	d0, r0, r1
 800d676:	b005      	add	sp, #20
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d67c <__copybits>:
 800d67c:	3901      	subs	r1, #1
 800d67e:	b570      	push	{r4, r5, r6, lr}
 800d680:	1149      	asrs	r1, r1, #5
 800d682:	6914      	ldr	r4, [r2, #16]
 800d684:	3101      	adds	r1, #1
 800d686:	f102 0314 	add.w	r3, r2, #20
 800d68a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d68e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d692:	1f05      	subs	r5, r0, #4
 800d694:	42a3      	cmp	r3, r4
 800d696:	d30c      	bcc.n	800d6b2 <__copybits+0x36>
 800d698:	1aa3      	subs	r3, r4, r2
 800d69a:	3b11      	subs	r3, #17
 800d69c:	f023 0303 	bic.w	r3, r3, #3
 800d6a0:	3211      	adds	r2, #17
 800d6a2:	42a2      	cmp	r2, r4
 800d6a4:	bf88      	it	hi
 800d6a6:	2300      	movhi	r3, #0
 800d6a8:	4418      	add	r0, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	4288      	cmp	r0, r1
 800d6ae:	d305      	bcc.n	800d6bc <__copybits+0x40>
 800d6b0:	bd70      	pop	{r4, r5, r6, pc}
 800d6b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d6b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d6ba:	e7eb      	b.n	800d694 <__copybits+0x18>
 800d6bc:	f840 3b04 	str.w	r3, [r0], #4
 800d6c0:	e7f4      	b.n	800d6ac <__copybits+0x30>

0800d6c2 <__any_on>:
 800d6c2:	f100 0214 	add.w	r2, r0, #20
 800d6c6:	6900      	ldr	r0, [r0, #16]
 800d6c8:	114b      	asrs	r3, r1, #5
 800d6ca:	4298      	cmp	r0, r3
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	db11      	blt.n	800d6f4 <__any_on+0x32>
 800d6d0:	dd0a      	ble.n	800d6e8 <__any_on+0x26>
 800d6d2:	f011 011f 	ands.w	r1, r1, #31
 800d6d6:	d007      	beq.n	800d6e8 <__any_on+0x26>
 800d6d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6dc:	fa24 f001 	lsr.w	r0, r4, r1
 800d6e0:	fa00 f101 	lsl.w	r1, r0, r1
 800d6e4:	428c      	cmp	r4, r1
 800d6e6:	d10b      	bne.n	800d700 <__any_on+0x3e>
 800d6e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d803      	bhi.n	800d6f8 <__any_on+0x36>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	bd10      	pop	{r4, pc}
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	e7f7      	b.n	800d6e8 <__any_on+0x26>
 800d6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	d0f5      	beq.n	800d6ec <__any_on+0x2a>
 800d700:	2001      	movs	r0, #1
 800d702:	e7f6      	b.n	800d6f2 <__any_on+0x30>

0800d704 <sulp>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4604      	mov	r4, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	ec45 4b10 	vmov	d0, r4, r5
 800d70e:	4616      	mov	r6, r2
 800d710:	f7ff feba 	bl	800d488 <__ulp>
 800d714:	ec51 0b10 	vmov	r0, r1, d0
 800d718:	b17e      	cbz	r6, 800d73a <sulp+0x36>
 800d71a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d71e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d722:	2b00      	cmp	r3, #0
 800d724:	dd09      	ble.n	800d73a <sulp+0x36>
 800d726:	051b      	lsls	r3, r3, #20
 800d728:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d72c:	2400      	movs	r4, #0
 800d72e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d732:	4622      	mov	r2, r4
 800d734:	462b      	mov	r3, r5
 800d736:	f7f2 ff5f 	bl	80005f8 <__aeabi_dmul>
 800d73a:	ec41 0b10 	vmov	d0, r0, r1
 800d73e:	bd70      	pop	{r4, r5, r6, pc}

0800d740 <_strtod_l>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	b09f      	sub	sp, #124	@ 0x7c
 800d746:	460c      	mov	r4, r1
 800d748:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d74a:	2200      	movs	r2, #0
 800d74c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d74e:	9005      	str	r0, [sp, #20]
 800d750:	f04f 0a00 	mov.w	sl, #0
 800d754:	f04f 0b00 	mov.w	fp, #0
 800d758:	460a      	mov	r2, r1
 800d75a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d75c:	7811      	ldrb	r1, [r2, #0]
 800d75e:	292b      	cmp	r1, #43	@ 0x2b
 800d760:	d04a      	beq.n	800d7f8 <_strtod_l+0xb8>
 800d762:	d838      	bhi.n	800d7d6 <_strtod_l+0x96>
 800d764:	290d      	cmp	r1, #13
 800d766:	d832      	bhi.n	800d7ce <_strtod_l+0x8e>
 800d768:	2908      	cmp	r1, #8
 800d76a:	d832      	bhi.n	800d7d2 <_strtod_l+0x92>
 800d76c:	2900      	cmp	r1, #0
 800d76e:	d03b      	beq.n	800d7e8 <_strtod_l+0xa8>
 800d770:	2200      	movs	r2, #0
 800d772:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d774:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d776:	782a      	ldrb	r2, [r5, #0]
 800d778:	2a30      	cmp	r2, #48	@ 0x30
 800d77a:	f040 80b3 	bne.w	800d8e4 <_strtod_l+0x1a4>
 800d77e:	786a      	ldrb	r2, [r5, #1]
 800d780:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d784:	2a58      	cmp	r2, #88	@ 0x58
 800d786:	d16e      	bne.n	800d866 <_strtod_l+0x126>
 800d788:	9302      	str	r3, [sp, #8]
 800d78a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	4a8e      	ldr	r2, [pc, #568]	@ (800d9cc <_strtod_l+0x28c>)
 800d794:	9805      	ldr	r0, [sp, #20]
 800d796:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d798:	a919      	add	r1, sp, #100	@ 0x64
 800d79a:	f001 f91f 	bl	800e9dc <__gethex>
 800d79e:	f010 060f 	ands.w	r6, r0, #15
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	d005      	beq.n	800d7b2 <_strtod_l+0x72>
 800d7a6:	2e06      	cmp	r6, #6
 800d7a8:	d128      	bne.n	800d7fc <_strtod_l+0xbc>
 800d7aa:	3501      	adds	r5, #1
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800d7b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	f040 858e 	bne.w	800e2d6 <_strtod_l+0xb96>
 800d7ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7bc:	b1cb      	cbz	r3, 800d7f2 <_strtod_l+0xb2>
 800d7be:	4652      	mov	r2, sl
 800d7c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d7c4:	ec43 2b10 	vmov	d0, r2, r3
 800d7c8:	b01f      	add	sp, #124	@ 0x7c
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	2920      	cmp	r1, #32
 800d7d0:	d1ce      	bne.n	800d770 <_strtod_l+0x30>
 800d7d2:	3201      	adds	r2, #1
 800d7d4:	e7c1      	b.n	800d75a <_strtod_l+0x1a>
 800d7d6:	292d      	cmp	r1, #45	@ 0x2d
 800d7d8:	d1ca      	bne.n	800d770 <_strtod_l+0x30>
 800d7da:	2101      	movs	r1, #1
 800d7dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d7de:	1c51      	adds	r1, r2, #1
 800d7e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d7e2:	7852      	ldrb	r2, [r2, #1]
 800d7e4:	2a00      	cmp	r2, #0
 800d7e6:	d1c5      	bne.n	800d774 <_strtod_l+0x34>
 800d7e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f040 8570 	bne.w	800e2d2 <_strtod_l+0xb92>
 800d7f2:	4652      	mov	r2, sl
 800d7f4:	465b      	mov	r3, fp
 800d7f6:	e7e5      	b.n	800d7c4 <_strtod_l+0x84>
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	e7ef      	b.n	800d7dc <_strtod_l+0x9c>
 800d7fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d7fe:	b13a      	cbz	r2, 800d810 <_strtod_l+0xd0>
 800d800:	2135      	movs	r1, #53	@ 0x35
 800d802:	a81c      	add	r0, sp, #112	@ 0x70
 800d804:	f7ff ff3a 	bl	800d67c <__copybits>
 800d808:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d80a:	9805      	ldr	r0, [sp, #20]
 800d80c:	f7ff fb08 	bl	800ce20 <_Bfree>
 800d810:	3e01      	subs	r6, #1
 800d812:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d814:	2e04      	cmp	r6, #4
 800d816:	d806      	bhi.n	800d826 <_strtod_l+0xe6>
 800d818:	e8df f006 	tbb	[pc, r6]
 800d81c:	201d0314 	.word	0x201d0314
 800d820:	14          	.byte	0x14
 800d821:	00          	.byte	0x00
 800d822:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d826:	05e1      	lsls	r1, r4, #23
 800d828:	bf48      	it	mi
 800d82a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d82e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d832:	0d1b      	lsrs	r3, r3, #20
 800d834:	051b      	lsls	r3, r3, #20
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1bb      	bne.n	800d7b2 <_strtod_l+0x72>
 800d83a:	f001 f827 	bl	800e88c <__errno>
 800d83e:	2322      	movs	r3, #34	@ 0x22
 800d840:	6003      	str	r3, [r0, #0]
 800d842:	e7b6      	b.n	800d7b2 <_strtod_l+0x72>
 800d844:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d848:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d84c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d850:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d854:	e7e7      	b.n	800d826 <_strtod_l+0xe6>
 800d856:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d9d4 <_strtod_l+0x294>
 800d85a:	e7e4      	b.n	800d826 <_strtod_l+0xe6>
 800d85c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d860:	f04f 3aff 	mov.w	sl, #4294967295
 800d864:	e7df      	b.n	800d826 <_strtod_l+0xe6>
 800d866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2b30      	cmp	r3, #48	@ 0x30
 800d870:	d0f9      	beq.n	800d866 <_strtod_l+0x126>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d09d      	beq.n	800d7b2 <_strtod_l+0x72>
 800d876:	2301      	movs	r3, #1
 800d878:	9309      	str	r3, [sp, #36]	@ 0x24
 800d87a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d87c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d87e:	2300      	movs	r3, #0
 800d880:	9308      	str	r3, [sp, #32]
 800d882:	930a      	str	r3, [sp, #40]	@ 0x28
 800d884:	461f      	mov	r7, r3
 800d886:	220a      	movs	r2, #10
 800d888:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d88a:	7805      	ldrb	r5, [r0, #0]
 800d88c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d890:	b2d9      	uxtb	r1, r3
 800d892:	2909      	cmp	r1, #9
 800d894:	d928      	bls.n	800d8e8 <_strtod_l+0x1a8>
 800d896:	494e      	ldr	r1, [pc, #312]	@ (800d9d0 <_strtod_l+0x290>)
 800d898:	2201      	movs	r2, #1
 800d89a:	f000 ffd5 	bl	800e848 <strncmp>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d032      	beq.n	800d908 <_strtod_l+0x1c8>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	462a      	mov	r2, r5
 800d8a6:	4681      	mov	r9, r0
 800d8a8:	463d      	mov	r5, r7
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2a65      	cmp	r2, #101	@ 0x65
 800d8ae:	d001      	beq.n	800d8b4 <_strtod_l+0x174>
 800d8b0:	2a45      	cmp	r2, #69	@ 0x45
 800d8b2:	d114      	bne.n	800d8de <_strtod_l+0x19e>
 800d8b4:	b91d      	cbnz	r5, 800d8be <_strtod_l+0x17e>
 800d8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8b8:	4302      	orrs	r2, r0
 800d8ba:	d095      	beq.n	800d7e8 <_strtod_l+0xa8>
 800d8bc:	2500      	movs	r5, #0
 800d8be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d8c0:	1c62      	adds	r2, r4, #1
 800d8c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8c4:	7862      	ldrb	r2, [r4, #1]
 800d8c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d8c8:	d077      	beq.n	800d9ba <_strtod_l+0x27a>
 800d8ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800d8cc:	d07b      	beq.n	800d9c6 <_strtod_l+0x286>
 800d8ce:	f04f 0c00 	mov.w	ip, #0
 800d8d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d8d6:	2909      	cmp	r1, #9
 800d8d8:	f240 8082 	bls.w	800d9e0 <_strtod_l+0x2a0>
 800d8dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8de:	f04f 0800 	mov.w	r8, #0
 800d8e2:	e0a2      	b.n	800da2a <_strtod_l+0x2ea>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e7c7      	b.n	800d878 <_strtod_l+0x138>
 800d8e8:	2f08      	cmp	r7, #8
 800d8ea:	bfd5      	itete	le
 800d8ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d8ee:	9908      	ldrgt	r1, [sp, #32]
 800d8f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d8f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d8f8:	f100 0001 	add.w	r0, r0, #1
 800d8fc:	bfd4      	ite	le
 800d8fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d900:	9308      	strgt	r3, [sp, #32]
 800d902:	3701      	adds	r7, #1
 800d904:	9019      	str	r0, [sp, #100]	@ 0x64
 800d906:	e7bf      	b.n	800d888 <_strtod_l+0x148>
 800d908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d90e:	785a      	ldrb	r2, [r3, #1]
 800d910:	b37f      	cbz	r7, 800d972 <_strtod_l+0x232>
 800d912:	4681      	mov	r9, r0
 800d914:	463d      	mov	r5, r7
 800d916:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d91a:	2b09      	cmp	r3, #9
 800d91c:	d912      	bls.n	800d944 <_strtod_l+0x204>
 800d91e:	2301      	movs	r3, #1
 800d920:	e7c4      	b.n	800d8ac <_strtod_l+0x16c>
 800d922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	9219      	str	r2, [sp, #100]	@ 0x64
 800d928:	785a      	ldrb	r2, [r3, #1]
 800d92a:	3001      	adds	r0, #1
 800d92c:	2a30      	cmp	r2, #48	@ 0x30
 800d92e:	d0f8      	beq.n	800d922 <_strtod_l+0x1e2>
 800d930:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d934:	2b08      	cmp	r3, #8
 800d936:	f200 84d3 	bhi.w	800e2e0 <_strtod_l+0xba0>
 800d93a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d93c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d93e:	4681      	mov	r9, r0
 800d940:	2000      	movs	r0, #0
 800d942:	4605      	mov	r5, r0
 800d944:	3a30      	subs	r2, #48	@ 0x30
 800d946:	f100 0301 	add.w	r3, r0, #1
 800d94a:	d02a      	beq.n	800d9a2 <_strtod_l+0x262>
 800d94c:	4499      	add	r9, r3
 800d94e:	eb00 0c05 	add.w	ip, r0, r5
 800d952:	462b      	mov	r3, r5
 800d954:	210a      	movs	r1, #10
 800d956:	4563      	cmp	r3, ip
 800d958:	d10d      	bne.n	800d976 <_strtod_l+0x236>
 800d95a:	1c69      	adds	r1, r5, #1
 800d95c:	4401      	add	r1, r0
 800d95e:	4428      	add	r0, r5
 800d960:	2808      	cmp	r0, #8
 800d962:	dc16      	bgt.n	800d992 <_strtod_l+0x252>
 800d964:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d966:	230a      	movs	r3, #10
 800d968:	fb03 2300 	mla	r3, r3, r0, r2
 800d96c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d96e:	2300      	movs	r3, #0
 800d970:	e018      	b.n	800d9a4 <_strtod_l+0x264>
 800d972:	4638      	mov	r0, r7
 800d974:	e7da      	b.n	800d92c <_strtod_l+0x1ec>
 800d976:	2b08      	cmp	r3, #8
 800d978:	f103 0301 	add.w	r3, r3, #1
 800d97c:	dc03      	bgt.n	800d986 <_strtod_l+0x246>
 800d97e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d980:	434e      	muls	r6, r1
 800d982:	960a      	str	r6, [sp, #40]	@ 0x28
 800d984:	e7e7      	b.n	800d956 <_strtod_l+0x216>
 800d986:	2b10      	cmp	r3, #16
 800d988:	bfde      	ittt	le
 800d98a:	9e08      	ldrle	r6, [sp, #32]
 800d98c:	434e      	mulle	r6, r1
 800d98e:	9608      	strle	r6, [sp, #32]
 800d990:	e7e1      	b.n	800d956 <_strtod_l+0x216>
 800d992:	280f      	cmp	r0, #15
 800d994:	dceb      	bgt.n	800d96e <_strtod_l+0x22e>
 800d996:	9808      	ldr	r0, [sp, #32]
 800d998:	230a      	movs	r3, #10
 800d99a:	fb03 2300 	mla	r3, r3, r0, r2
 800d99e:	9308      	str	r3, [sp, #32]
 800d9a0:	e7e5      	b.n	800d96e <_strtod_l+0x22e>
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9a6:	1c50      	adds	r0, r2, #1
 800d9a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d9aa:	7852      	ldrb	r2, [r2, #1]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	e7b1      	b.n	800d916 <_strtod_l+0x1d6>
 800d9b2:	f04f 0900 	mov.w	r9, #0
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e77d      	b.n	800d8b6 <_strtod_l+0x176>
 800d9ba:	f04f 0c00 	mov.w	ip, #0
 800d9be:	1ca2      	adds	r2, r4, #2
 800d9c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9c2:	78a2      	ldrb	r2, [r4, #2]
 800d9c4:	e785      	b.n	800d8d2 <_strtod_l+0x192>
 800d9c6:	f04f 0c01 	mov.w	ip, #1
 800d9ca:	e7f8      	b.n	800d9be <_strtod_l+0x27e>
 800d9cc:	080100f0 	.word	0x080100f0
 800d9d0:	080100d8 	.word	0x080100d8
 800d9d4:	7ff00000 	.word	0x7ff00000
 800d9d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9da:	1c51      	adds	r1, r2, #1
 800d9dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800d9de:	7852      	ldrb	r2, [r2, #1]
 800d9e0:	2a30      	cmp	r2, #48	@ 0x30
 800d9e2:	d0f9      	beq.n	800d9d8 <_strtod_l+0x298>
 800d9e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d9e8:	2908      	cmp	r1, #8
 800d9ea:	f63f af78 	bhi.w	800d8de <_strtod_l+0x19e>
 800d9ee:	3a30      	subs	r2, #48	@ 0x30
 800d9f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d9f6:	f04f 080a 	mov.w	r8, #10
 800d9fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9fc:	1c56      	adds	r6, r2, #1
 800d9fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800da00:	7852      	ldrb	r2, [r2, #1]
 800da02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800da06:	f1be 0f09 	cmp.w	lr, #9
 800da0a:	d939      	bls.n	800da80 <_strtod_l+0x340>
 800da0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da0e:	1a76      	subs	r6, r6, r1
 800da10:	2e08      	cmp	r6, #8
 800da12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800da16:	dc03      	bgt.n	800da20 <_strtod_l+0x2e0>
 800da18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800da1a:	4588      	cmp	r8, r1
 800da1c:	bfa8      	it	ge
 800da1e:	4688      	movge	r8, r1
 800da20:	f1bc 0f00 	cmp.w	ip, #0
 800da24:	d001      	beq.n	800da2a <_strtod_l+0x2ea>
 800da26:	f1c8 0800 	rsb	r8, r8, #0
 800da2a:	2d00      	cmp	r5, #0
 800da2c:	d14e      	bne.n	800dacc <_strtod_l+0x38c>
 800da2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da30:	4308      	orrs	r0, r1
 800da32:	f47f aebe 	bne.w	800d7b2 <_strtod_l+0x72>
 800da36:	2b00      	cmp	r3, #0
 800da38:	f47f aed6 	bne.w	800d7e8 <_strtod_l+0xa8>
 800da3c:	2a69      	cmp	r2, #105	@ 0x69
 800da3e:	d028      	beq.n	800da92 <_strtod_l+0x352>
 800da40:	dc25      	bgt.n	800da8e <_strtod_l+0x34e>
 800da42:	2a49      	cmp	r2, #73	@ 0x49
 800da44:	d025      	beq.n	800da92 <_strtod_l+0x352>
 800da46:	2a4e      	cmp	r2, #78	@ 0x4e
 800da48:	f47f aece 	bne.w	800d7e8 <_strtod_l+0xa8>
 800da4c:	499b      	ldr	r1, [pc, #620]	@ (800dcbc <_strtod_l+0x57c>)
 800da4e:	a819      	add	r0, sp, #100	@ 0x64
 800da50:	f001 f9e6 	bl	800ee20 <__match>
 800da54:	2800      	cmp	r0, #0
 800da56:	f43f aec7 	beq.w	800d7e8 <_strtod_l+0xa8>
 800da5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b28      	cmp	r3, #40	@ 0x28
 800da60:	d12e      	bne.n	800dac0 <_strtod_l+0x380>
 800da62:	4997      	ldr	r1, [pc, #604]	@ (800dcc0 <_strtod_l+0x580>)
 800da64:	aa1c      	add	r2, sp, #112	@ 0x70
 800da66:	a819      	add	r0, sp, #100	@ 0x64
 800da68:	f001 f9ee 	bl	800ee48 <__hexnan>
 800da6c:	2805      	cmp	r0, #5
 800da6e:	d127      	bne.n	800dac0 <_strtod_l+0x380>
 800da70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800da76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800da7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800da7e:	e698      	b.n	800d7b2 <_strtod_l+0x72>
 800da80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800da82:	fb08 2101 	mla	r1, r8, r1, r2
 800da86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800da8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800da8c:	e7b5      	b.n	800d9fa <_strtod_l+0x2ba>
 800da8e:	2a6e      	cmp	r2, #110	@ 0x6e
 800da90:	e7da      	b.n	800da48 <_strtod_l+0x308>
 800da92:	498c      	ldr	r1, [pc, #560]	@ (800dcc4 <_strtod_l+0x584>)
 800da94:	a819      	add	r0, sp, #100	@ 0x64
 800da96:	f001 f9c3 	bl	800ee20 <__match>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	f43f aea4 	beq.w	800d7e8 <_strtod_l+0xa8>
 800daa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daa2:	4989      	ldr	r1, [pc, #548]	@ (800dcc8 <_strtod_l+0x588>)
 800daa4:	3b01      	subs	r3, #1
 800daa6:	a819      	add	r0, sp, #100	@ 0x64
 800daa8:	9319      	str	r3, [sp, #100]	@ 0x64
 800daaa:	f001 f9b9 	bl	800ee20 <__match>
 800daae:	b910      	cbnz	r0, 800dab6 <_strtod_l+0x376>
 800dab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dab2:	3301      	adds	r3, #1
 800dab4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dab6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dcd8 <_strtod_l+0x598>
 800daba:	f04f 0a00 	mov.w	sl, #0
 800dabe:	e678      	b.n	800d7b2 <_strtod_l+0x72>
 800dac0:	4882      	ldr	r0, [pc, #520]	@ (800dccc <_strtod_l+0x58c>)
 800dac2:	f000 fee9 	bl	800e898 <nan>
 800dac6:	ec5b ab10 	vmov	sl, fp, d0
 800daca:	e672      	b.n	800d7b2 <_strtod_l+0x72>
 800dacc:	eba8 0309 	sub.w	r3, r8, r9
 800dad0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dad4:	2f00      	cmp	r7, #0
 800dad6:	bf08      	it	eq
 800dad8:	462f      	moveq	r7, r5
 800dada:	2d10      	cmp	r5, #16
 800dadc:	462c      	mov	r4, r5
 800dade:	bfa8      	it	ge
 800dae0:	2410      	movge	r4, #16
 800dae2:	f7f2 fd0f 	bl	8000504 <__aeabi_ui2d>
 800dae6:	2d09      	cmp	r5, #9
 800dae8:	4682      	mov	sl, r0
 800daea:	468b      	mov	fp, r1
 800daec:	dc13      	bgt.n	800db16 <_strtod_l+0x3d6>
 800daee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f43f ae5e 	beq.w	800d7b2 <_strtod_l+0x72>
 800daf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daf8:	dd78      	ble.n	800dbec <_strtod_l+0x4ac>
 800dafa:	2b16      	cmp	r3, #22
 800dafc:	dc5f      	bgt.n	800dbbe <_strtod_l+0x47e>
 800dafe:	4974      	ldr	r1, [pc, #464]	@ (800dcd0 <_strtod_l+0x590>)
 800db00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db08:	4652      	mov	r2, sl
 800db0a:	465b      	mov	r3, fp
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	4682      	mov	sl, r0
 800db12:	468b      	mov	fp, r1
 800db14:	e64d      	b.n	800d7b2 <_strtod_l+0x72>
 800db16:	4b6e      	ldr	r3, [pc, #440]	@ (800dcd0 <_strtod_l+0x590>)
 800db18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	4682      	mov	sl, r0
 800db26:	9808      	ldr	r0, [sp, #32]
 800db28:	468b      	mov	fp, r1
 800db2a:	f7f2 fceb 	bl	8000504 <__aeabi_ui2d>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	4650      	mov	r0, sl
 800db34:	4659      	mov	r1, fp
 800db36:	f7f2 fba9 	bl	800028c <__adddf3>
 800db3a:	2d0f      	cmp	r5, #15
 800db3c:	4682      	mov	sl, r0
 800db3e:	468b      	mov	fp, r1
 800db40:	ddd5      	ble.n	800daee <_strtod_l+0x3ae>
 800db42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db44:	1b2c      	subs	r4, r5, r4
 800db46:	441c      	add	r4, r3
 800db48:	2c00      	cmp	r4, #0
 800db4a:	f340 8096 	ble.w	800dc7a <_strtod_l+0x53a>
 800db4e:	f014 030f 	ands.w	r3, r4, #15
 800db52:	d00a      	beq.n	800db6a <_strtod_l+0x42a>
 800db54:	495e      	ldr	r1, [pc, #376]	@ (800dcd0 <_strtod_l+0x590>)
 800db56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db5a:	4652      	mov	r2, sl
 800db5c:	465b      	mov	r3, fp
 800db5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db62:	f7f2 fd49 	bl	80005f8 <__aeabi_dmul>
 800db66:	4682      	mov	sl, r0
 800db68:	468b      	mov	fp, r1
 800db6a:	f034 040f 	bics.w	r4, r4, #15
 800db6e:	d073      	beq.n	800dc58 <_strtod_l+0x518>
 800db70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800db74:	dd48      	ble.n	800dc08 <_strtod_l+0x4c8>
 800db76:	2400      	movs	r4, #0
 800db78:	46a0      	mov	r8, r4
 800db7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800db7c:	46a1      	mov	r9, r4
 800db7e:	9a05      	ldr	r2, [sp, #20]
 800db80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dcd8 <_strtod_l+0x598>
 800db84:	2322      	movs	r3, #34	@ 0x22
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	f04f 0a00 	mov.w	sl, #0
 800db8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f43f ae0f 	beq.w	800d7b2 <_strtod_l+0x72>
 800db94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db96:	9805      	ldr	r0, [sp, #20]
 800db98:	f7ff f942 	bl	800ce20 <_Bfree>
 800db9c:	9805      	ldr	r0, [sp, #20]
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7ff f93e 	bl	800ce20 <_Bfree>
 800dba4:	9805      	ldr	r0, [sp, #20]
 800dba6:	4641      	mov	r1, r8
 800dba8:	f7ff f93a 	bl	800ce20 <_Bfree>
 800dbac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbae:	9805      	ldr	r0, [sp, #20]
 800dbb0:	f7ff f936 	bl	800ce20 <_Bfree>
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	f7ff f932 	bl	800ce20 <_Bfree>
 800dbbc:	e5f9      	b.n	800d7b2 <_strtod_l+0x72>
 800dbbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	dbbc      	blt.n	800db42 <_strtod_l+0x402>
 800dbc8:	4c41      	ldr	r4, [pc, #260]	@ (800dcd0 <_strtod_l+0x590>)
 800dbca:	f1c5 050f 	rsb	r5, r5, #15
 800dbce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	f7f2 fd0d 	bl	80005f8 <__aeabi_dmul>
 800dbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe0:	1b5d      	subs	r5, r3, r5
 800dbe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dbe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dbea:	e78f      	b.n	800db0c <_strtod_l+0x3cc>
 800dbec:	3316      	adds	r3, #22
 800dbee:	dba8      	blt.n	800db42 <_strtod_l+0x402>
 800dbf0:	4b37      	ldr	r3, [pc, #220]	@ (800dcd0 <_strtod_l+0x590>)
 800dbf2:	eba9 0808 	sub.w	r8, r9, r8
 800dbf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dbfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dbfe:	4650      	mov	r0, sl
 800dc00:	4659      	mov	r1, fp
 800dc02:	f7f2 fe23 	bl	800084c <__aeabi_ddiv>
 800dc06:	e783      	b.n	800db10 <_strtod_l+0x3d0>
 800dc08:	4b32      	ldr	r3, [pc, #200]	@ (800dcd4 <_strtod_l+0x594>)
 800dc0a:	9308      	str	r3, [sp, #32]
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	1124      	asrs	r4, r4, #4
 800dc10:	4650      	mov	r0, sl
 800dc12:	4659      	mov	r1, fp
 800dc14:	461e      	mov	r6, r3
 800dc16:	2c01      	cmp	r4, #1
 800dc18:	dc21      	bgt.n	800dc5e <_strtod_l+0x51e>
 800dc1a:	b10b      	cbz	r3, 800dc20 <_strtod_l+0x4e0>
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	468b      	mov	fp, r1
 800dc20:	492c      	ldr	r1, [pc, #176]	@ (800dcd4 <_strtod_l+0x594>)
 800dc22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dc26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dc2a:	4652      	mov	r2, sl
 800dc2c:	465b      	mov	r3, fp
 800dc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc32:	f7f2 fce1 	bl	80005f8 <__aeabi_dmul>
 800dc36:	4b28      	ldr	r3, [pc, #160]	@ (800dcd8 <_strtod_l+0x598>)
 800dc38:	460a      	mov	r2, r1
 800dc3a:	400b      	ands	r3, r1
 800dc3c:	4927      	ldr	r1, [pc, #156]	@ (800dcdc <_strtod_l+0x59c>)
 800dc3e:	428b      	cmp	r3, r1
 800dc40:	4682      	mov	sl, r0
 800dc42:	d898      	bhi.n	800db76 <_strtod_l+0x436>
 800dc44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dc48:	428b      	cmp	r3, r1
 800dc4a:	bf86      	itte	hi
 800dc4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dce0 <_strtod_l+0x5a0>
 800dc50:	f04f 3aff 	movhi.w	sl, #4294967295
 800dc54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dc58:	2300      	movs	r3, #0
 800dc5a:	9308      	str	r3, [sp, #32]
 800dc5c:	e07a      	b.n	800dd54 <_strtod_l+0x614>
 800dc5e:	07e2      	lsls	r2, r4, #31
 800dc60:	d505      	bpl.n	800dc6e <_strtod_l+0x52e>
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	9a08      	ldr	r2, [sp, #32]
 800dc70:	3208      	adds	r2, #8
 800dc72:	3601      	adds	r6, #1
 800dc74:	1064      	asrs	r4, r4, #1
 800dc76:	9208      	str	r2, [sp, #32]
 800dc78:	e7cd      	b.n	800dc16 <_strtod_l+0x4d6>
 800dc7a:	d0ed      	beq.n	800dc58 <_strtod_l+0x518>
 800dc7c:	4264      	negs	r4, r4
 800dc7e:	f014 020f 	ands.w	r2, r4, #15
 800dc82:	d00a      	beq.n	800dc9a <_strtod_l+0x55a>
 800dc84:	4b12      	ldr	r3, [pc, #72]	@ (800dcd0 <_strtod_l+0x590>)
 800dc86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc8a:	4650      	mov	r0, sl
 800dc8c:	4659      	mov	r1, fp
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fddb 	bl	800084c <__aeabi_ddiv>
 800dc96:	4682      	mov	sl, r0
 800dc98:	468b      	mov	fp, r1
 800dc9a:	1124      	asrs	r4, r4, #4
 800dc9c:	d0dc      	beq.n	800dc58 <_strtod_l+0x518>
 800dc9e:	2c1f      	cmp	r4, #31
 800dca0:	dd20      	ble.n	800dce4 <_strtod_l+0x5a4>
 800dca2:	2400      	movs	r4, #0
 800dca4:	46a0      	mov	r8, r4
 800dca6:	940a      	str	r4, [sp, #40]	@ 0x28
 800dca8:	46a1      	mov	r9, r4
 800dcaa:	9a05      	ldr	r2, [sp, #20]
 800dcac:	2322      	movs	r3, #34	@ 0x22
 800dcae:	f04f 0a00 	mov.w	sl, #0
 800dcb2:	f04f 0b00 	mov.w	fp, #0
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	e768      	b.n	800db8c <_strtod_l+0x44c>
 800dcba:	bf00      	nop
 800dcbc:	0800fec5 	.word	0x0800fec5
 800dcc0:	080100dc 	.word	0x080100dc
 800dcc4:	0800febd 	.word	0x0800febd
 800dcc8:	0800fef4 	.word	0x0800fef4
 800dccc:	08010285 	.word	0x08010285
 800dcd0:	08010010 	.word	0x08010010
 800dcd4:	0800ffe8 	.word	0x0800ffe8
 800dcd8:	7ff00000 	.word	0x7ff00000
 800dcdc:	7ca00000 	.word	0x7ca00000
 800dce0:	7fefffff 	.word	0x7fefffff
 800dce4:	f014 0310 	ands.w	r3, r4, #16
 800dce8:	bf18      	it	ne
 800dcea:	236a      	movne	r3, #106	@ 0x6a
 800dcec:	4ea9      	ldr	r6, [pc, #676]	@ (800df94 <_strtod_l+0x854>)
 800dcee:	9308      	str	r3, [sp, #32]
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	4659      	mov	r1, fp
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	07e2      	lsls	r2, r4, #31
 800dcf8:	d504      	bpl.n	800dd04 <_strtod_l+0x5c4>
 800dcfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcfe:	f7f2 fc7b 	bl	80005f8 <__aeabi_dmul>
 800dd02:	2301      	movs	r3, #1
 800dd04:	1064      	asrs	r4, r4, #1
 800dd06:	f106 0608 	add.w	r6, r6, #8
 800dd0a:	d1f4      	bne.n	800dcf6 <_strtod_l+0x5b6>
 800dd0c:	b10b      	cbz	r3, 800dd12 <_strtod_l+0x5d2>
 800dd0e:	4682      	mov	sl, r0
 800dd10:	468b      	mov	fp, r1
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	b1b3      	cbz	r3, 800dd44 <_strtod_l+0x604>
 800dd16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dd1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	4659      	mov	r1, fp
 800dd22:	dd0f      	ble.n	800dd44 <_strtod_l+0x604>
 800dd24:	2b1f      	cmp	r3, #31
 800dd26:	dd55      	ble.n	800ddd4 <_strtod_l+0x694>
 800dd28:	2b34      	cmp	r3, #52	@ 0x34
 800dd2a:	bfde      	ittt	le
 800dd2c:	f04f 33ff 	movle.w	r3, #4294967295
 800dd30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dd34:	4093      	lslle	r3, r2
 800dd36:	f04f 0a00 	mov.w	sl, #0
 800dd3a:	bfcc      	ite	gt
 800dd3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dd40:	ea03 0b01 	andle.w	fp, r3, r1
 800dd44:	2200      	movs	r2, #0
 800dd46:	2300      	movs	r3, #0
 800dd48:	4650      	mov	r0, sl
 800dd4a:	4659      	mov	r1, fp
 800dd4c:	f7f2 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d1a6      	bne.n	800dca2 <_strtod_l+0x562>
 800dd54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dd5a:	9805      	ldr	r0, [sp, #20]
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	463a      	mov	r2, r7
 800dd60:	f7ff f8c6 	bl	800cef0 <__s2b>
 800dd64:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f43f af05 	beq.w	800db76 <_strtod_l+0x436>
 800dd6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd6e:	2a00      	cmp	r2, #0
 800dd70:	eba9 0308 	sub.w	r3, r9, r8
 800dd74:	bfa8      	it	ge
 800dd76:	2300      	movge	r3, #0
 800dd78:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd7a:	2400      	movs	r4, #0
 800dd7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dd80:	9316      	str	r3, [sp, #88]	@ 0x58
 800dd82:	46a0      	mov	r8, r4
 800dd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd86:	9805      	ldr	r0, [sp, #20]
 800dd88:	6859      	ldr	r1, [r3, #4]
 800dd8a:	f7ff f809 	bl	800cda0 <_Balloc>
 800dd8e:	4681      	mov	r9, r0
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f43f aef4 	beq.w	800db7e <_strtod_l+0x43e>
 800dd96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd98:	691a      	ldr	r2, [r3, #16]
 800dd9a:	3202      	adds	r2, #2
 800dd9c:	f103 010c 	add.w	r1, r3, #12
 800dda0:	0092      	lsls	r2, r2, #2
 800dda2:	300c      	adds	r0, #12
 800dda4:	f7fe f899 	bl	800beda <memcpy>
 800dda8:	ec4b ab10 	vmov	d0, sl, fp
 800ddac:	9805      	ldr	r0, [sp, #20]
 800ddae:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddb0:	a91b      	add	r1, sp, #108	@ 0x6c
 800ddb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ddb6:	f7ff fbd7 	bl	800d568 <__d2b>
 800ddba:	901a      	str	r0, [sp, #104]	@ 0x68
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f43f aede 	beq.w	800db7e <_strtod_l+0x43e>
 800ddc2:	9805      	ldr	r0, [sp, #20]
 800ddc4:	2101      	movs	r1, #1
 800ddc6:	f7ff f929 	bl	800d01c <__i2b>
 800ddca:	4680      	mov	r8, r0
 800ddcc:	b948      	cbnz	r0, 800dde2 <_strtod_l+0x6a2>
 800ddce:	f04f 0800 	mov.w	r8, #0
 800ddd2:	e6d4      	b.n	800db7e <_strtod_l+0x43e>
 800ddd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dddc:	ea03 0a0a 	and.w	sl, r3, sl
 800dde0:	e7b0      	b.n	800dd44 <_strtod_l+0x604>
 800dde2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dde4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dde6:	2d00      	cmp	r5, #0
 800dde8:	bfab      	itete	ge
 800ddea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ddec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ddee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ddf0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ddf2:	bfac      	ite	ge
 800ddf4:	18ef      	addge	r7, r5, r3
 800ddf6:	1b5e      	sublt	r6, r3, r5
 800ddf8:	9b08      	ldr	r3, [sp, #32]
 800ddfa:	1aed      	subs	r5, r5, r3
 800ddfc:	4415      	add	r5, r2
 800ddfe:	4b66      	ldr	r3, [pc, #408]	@ (800df98 <_strtod_l+0x858>)
 800de00:	3d01      	subs	r5, #1
 800de02:	429d      	cmp	r5, r3
 800de04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800de08:	da50      	bge.n	800deac <_strtod_l+0x76c>
 800de0a:	1b5b      	subs	r3, r3, r5
 800de0c:	2b1f      	cmp	r3, #31
 800de0e:	eba2 0203 	sub.w	r2, r2, r3
 800de12:	f04f 0101 	mov.w	r1, #1
 800de16:	dc3d      	bgt.n	800de94 <_strtod_l+0x754>
 800de18:	fa01 f303 	lsl.w	r3, r1, r3
 800de1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de1e:	2300      	movs	r3, #0
 800de20:	9310      	str	r3, [sp, #64]	@ 0x40
 800de22:	18bd      	adds	r5, r7, r2
 800de24:	9b08      	ldr	r3, [sp, #32]
 800de26:	42af      	cmp	r7, r5
 800de28:	4416      	add	r6, r2
 800de2a:	441e      	add	r6, r3
 800de2c:	463b      	mov	r3, r7
 800de2e:	bfa8      	it	ge
 800de30:	462b      	movge	r3, r5
 800de32:	42b3      	cmp	r3, r6
 800de34:	bfa8      	it	ge
 800de36:	4633      	movge	r3, r6
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bfc2      	ittt	gt
 800de3c:	1aed      	subgt	r5, r5, r3
 800de3e:	1af6      	subgt	r6, r6, r3
 800de40:	1aff      	subgt	r7, r7, r3
 800de42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de44:	2b00      	cmp	r3, #0
 800de46:	dd16      	ble.n	800de76 <_strtod_l+0x736>
 800de48:	4641      	mov	r1, r8
 800de4a:	9805      	ldr	r0, [sp, #20]
 800de4c:	461a      	mov	r2, r3
 800de4e:	f7ff f9a5 	bl	800d19c <__pow5mult>
 800de52:	4680      	mov	r8, r0
 800de54:	2800      	cmp	r0, #0
 800de56:	d0ba      	beq.n	800ddce <_strtod_l+0x68e>
 800de58:	4601      	mov	r1, r0
 800de5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de5c:	9805      	ldr	r0, [sp, #20]
 800de5e:	f7ff f8f3 	bl	800d048 <__multiply>
 800de62:	900e      	str	r0, [sp, #56]	@ 0x38
 800de64:	2800      	cmp	r0, #0
 800de66:	f43f ae8a 	beq.w	800db7e <_strtod_l+0x43e>
 800de6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de6c:	9805      	ldr	r0, [sp, #20]
 800de6e:	f7fe ffd7 	bl	800ce20 <_Bfree>
 800de72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de74:	931a      	str	r3, [sp, #104]	@ 0x68
 800de76:	2d00      	cmp	r5, #0
 800de78:	dc1d      	bgt.n	800deb6 <_strtod_l+0x776>
 800de7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	dd23      	ble.n	800dec8 <_strtod_l+0x788>
 800de80:	4649      	mov	r1, r9
 800de82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800de84:	9805      	ldr	r0, [sp, #20]
 800de86:	f7ff f989 	bl	800d19c <__pow5mult>
 800de8a:	4681      	mov	r9, r0
 800de8c:	b9e0      	cbnz	r0, 800dec8 <_strtod_l+0x788>
 800de8e:	f04f 0900 	mov.w	r9, #0
 800de92:	e674      	b.n	800db7e <_strtod_l+0x43e>
 800de94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800de98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800de9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dea0:	35e2      	adds	r5, #226	@ 0xe2
 800dea2:	fa01 f305 	lsl.w	r3, r1, r5
 800dea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dea8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800deaa:	e7ba      	b.n	800de22 <_strtod_l+0x6e2>
 800deac:	2300      	movs	r3, #0
 800deae:	9310      	str	r3, [sp, #64]	@ 0x40
 800deb0:	2301      	movs	r3, #1
 800deb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800deb4:	e7b5      	b.n	800de22 <_strtod_l+0x6e2>
 800deb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800deb8:	9805      	ldr	r0, [sp, #20]
 800deba:	462a      	mov	r2, r5
 800debc:	f7ff f9c8 	bl	800d250 <__lshift>
 800dec0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d1d9      	bne.n	800de7a <_strtod_l+0x73a>
 800dec6:	e65a      	b.n	800db7e <_strtod_l+0x43e>
 800dec8:	2e00      	cmp	r6, #0
 800deca:	dd07      	ble.n	800dedc <_strtod_l+0x79c>
 800decc:	4649      	mov	r1, r9
 800dece:	9805      	ldr	r0, [sp, #20]
 800ded0:	4632      	mov	r2, r6
 800ded2:	f7ff f9bd 	bl	800d250 <__lshift>
 800ded6:	4681      	mov	r9, r0
 800ded8:	2800      	cmp	r0, #0
 800deda:	d0d8      	beq.n	800de8e <_strtod_l+0x74e>
 800dedc:	2f00      	cmp	r7, #0
 800dede:	dd08      	ble.n	800def2 <_strtod_l+0x7b2>
 800dee0:	4641      	mov	r1, r8
 800dee2:	9805      	ldr	r0, [sp, #20]
 800dee4:	463a      	mov	r2, r7
 800dee6:	f7ff f9b3 	bl	800d250 <__lshift>
 800deea:	4680      	mov	r8, r0
 800deec:	2800      	cmp	r0, #0
 800deee:	f43f ae46 	beq.w	800db7e <_strtod_l+0x43e>
 800def2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800def4:	9805      	ldr	r0, [sp, #20]
 800def6:	464a      	mov	r2, r9
 800def8:	f7ff fa32 	bl	800d360 <__mdiff>
 800defc:	4604      	mov	r4, r0
 800defe:	2800      	cmp	r0, #0
 800df00:	f43f ae3d 	beq.w	800db7e <_strtod_l+0x43e>
 800df04:	68c3      	ldr	r3, [r0, #12]
 800df06:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df08:	2300      	movs	r3, #0
 800df0a:	60c3      	str	r3, [r0, #12]
 800df0c:	4641      	mov	r1, r8
 800df0e:	f7ff fa0b 	bl	800d328 <__mcmp>
 800df12:	2800      	cmp	r0, #0
 800df14:	da46      	bge.n	800dfa4 <_strtod_l+0x864>
 800df16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df18:	ea53 030a 	orrs.w	r3, r3, sl
 800df1c:	d16c      	bne.n	800dff8 <_strtod_l+0x8b8>
 800df1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df22:	2b00      	cmp	r3, #0
 800df24:	d168      	bne.n	800dff8 <_strtod_l+0x8b8>
 800df26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df2a:	0d1b      	lsrs	r3, r3, #20
 800df2c:	051b      	lsls	r3, r3, #20
 800df2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df32:	d961      	bls.n	800dff8 <_strtod_l+0x8b8>
 800df34:	6963      	ldr	r3, [r4, #20]
 800df36:	b913      	cbnz	r3, 800df3e <_strtod_l+0x7fe>
 800df38:	6923      	ldr	r3, [r4, #16]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	dd5c      	ble.n	800dff8 <_strtod_l+0x8b8>
 800df3e:	4621      	mov	r1, r4
 800df40:	2201      	movs	r2, #1
 800df42:	9805      	ldr	r0, [sp, #20]
 800df44:	f7ff f984 	bl	800d250 <__lshift>
 800df48:	4641      	mov	r1, r8
 800df4a:	4604      	mov	r4, r0
 800df4c:	f7ff f9ec 	bl	800d328 <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	dd51      	ble.n	800dff8 <_strtod_l+0x8b8>
 800df54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df58:	9a08      	ldr	r2, [sp, #32]
 800df5a:	0d1b      	lsrs	r3, r3, #20
 800df5c:	051b      	lsls	r3, r3, #20
 800df5e:	2a00      	cmp	r2, #0
 800df60:	d06b      	beq.n	800e03a <_strtod_l+0x8fa>
 800df62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df66:	d868      	bhi.n	800e03a <_strtod_l+0x8fa>
 800df68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800df6c:	f67f ae9d 	bls.w	800dcaa <_strtod_l+0x56a>
 800df70:	4b0a      	ldr	r3, [pc, #40]	@ (800df9c <_strtod_l+0x85c>)
 800df72:	4650      	mov	r0, sl
 800df74:	4659      	mov	r1, fp
 800df76:	2200      	movs	r2, #0
 800df78:	f7f2 fb3e 	bl	80005f8 <__aeabi_dmul>
 800df7c:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <_strtod_l+0x860>)
 800df7e:	400b      	ands	r3, r1
 800df80:	4682      	mov	sl, r0
 800df82:	468b      	mov	fp, r1
 800df84:	2b00      	cmp	r3, #0
 800df86:	f47f ae05 	bne.w	800db94 <_strtod_l+0x454>
 800df8a:	9a05      	ldr	r2, [sp, #20]
 800df8c:	2322      	movs	r3, #34	@ 0x22
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	e600      	b.n	800db94 <_strtod_l+0x454>
 800df92:	bf00      	nop
 800df94:	08010108 	.word	0x08010108
 800df98:	fffffc02 	.word	0xfffffc02
 800df9c:	39500000 	.word	0x39500000
 800dfa0:	7ff00000 	.word	0x7ff00000
 800dfa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dfa8:	d165      	bne.n	800e076 <_strtod_l+0x936>
 800dfaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dfac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfb0:	b35a      	cbz	r2, 800e00a <_strtod_l+0x8ca>
 800dfb2:	4a9f      	ldr	r2, [pc, #636]	@ (800e230 <_strtod_l+0xaf0>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d12b      	bne.n	800e010 <_strtod_l+0x8d0>
 800dfb8:	9b08      	ldr	r3, [sp, #32]
 800dfba:	4651      	mov	r1, sl
 800dfbc:	b303      	cbz	r3, 800e000 <_strtod_l+0x8c0>
 800dfbe:	4b9d      	ldr	r3, [pc, #628]	@ (800e234 <_strtod_l+0xaf4>)
 800dfc0:	465a      	mov	r2, fp
 800dfc2:	4013      	ands	r3, r2
 800dfc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dfc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfcc:	d81b      	bhi.n	800e006 <_strtod_l+0x8c6>
 800dfce:	0d1b      	lsrs	r3, r3, #20
 800dfd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800dfd8:	4299      	cmp	r1, r3
 800dfda:	d119      	bne.n	800e010 <_strtod_l+0x8d0>
 800dfdc:	4b96      	ldr	r3, [pc, #600]	@ (800e238 <_strtod_l+0xaf8>)
 800dfde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d102      	bne.n	800dfea <_strtod_l+0x8aa>
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	f43f adca 	beq.w	800db7e <_strtod_l+0x43e>
 800dfea:	4b92      	ldr	r3, [pc, #584]	@ (800e234 <_strtod_l+0xaf4>)
 800dfec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfee:	401a      	ands	r2, r3
 800dff0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dff4:	f04f 0a00 	mov.w	sl, #0
 800dff8:	9b08      	ldr	r3, [sp, #32]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1b8      	bne.n	800df70 <_strtod_l+0x830>
 800dffe:	e5c9      	b.n	800db94 <_strtod_l+0x454>
 800e000:	f04f 33ff 	mov.w	r3, #4294967295
 800e004:	e7e8      	b.n	800dfd8 <_strtod_l+0x898>
 800e006:	4613      	mov	r3, r2
 800e008:	e7e6      	b.n	800dfd8 <_strtod_l+0x898>
 800e00a:	ea53 030a 	orrs.w	r3, r3, sl
 800e00e:	d0a1      	beq.n	800df54 <_strtod_l+0x814>
 800e010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e012:	b1db      	cbz	r3, 800e04c <_strtod_l+0x90c>
 800e014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e016:	4213      	tst	r3, r2
 800e018:	d0ee      	beq.n	800dff8 <_strtod_l+0x8b8>
 800e01a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e01c:	9a08      	ldr	r2, [sp, #32]
 800e01e:	4650      	mov	r0, sl
 800e020:	4659      	mov	r1, fp
 800e022:	b1bb      	cbz	r3, 800e054 <_strtod_l+0x914>
 800e024:	f7ff fb6e 	bl	800d704 <sulp>
 800e028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e02c:	ec53 2b10 	vmov	r2, r3, d0
 800e030:	f7f2 f92c 	bl	800028c <__adddf3>
 800e034:	4682      	mov	sl, r0
 800e036:	468b      	mov	fp, r1
 800e038:	e7de      	b.n	800dff8 <_strtod_l+0x8b8>
 800e03a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e03e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e042:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e046:	f04f 3aff 	mov.w	sl, #4294967295
 800e04a:	e7d5      	b.n	800dff8 <_strtod_l+0x8b8>
 800e04c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e04e:	ea13 0f0a 	tst.w	r3, sl
 800e052:	e7e1      	b.n	800e018 <_strtod_l+0x8d8>
 800e054:	f7ff fb56 	bl	800d704 <sulp>
 800e058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e05c:	ec53 2b10 	vmov	r2, r3, d0
 800e060:	f7f2 f912 	bl	8000288 <__aeabi_dsub>
 800e064:	2200      	movs	r2, #0
 800e066:	2300      	movs	r3, #0
 800e068:	4682      	mov	sl, r0
 800e06a:	468b      	mov	fp, r1
 800e06c:	f7f2 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e070:	2800      	cmp	r0, #0
 800e072:	d0c1      	beq.n	800dff8 <_strtod_l+0x8b8>
 800e074:	e619      	b.n	800dcaa <_strtod_l+0x56a>
 800e076:	4641      	mov	r1, r8
 800e078:	4620      	mov	r0, r4
 800e07a:	f7ff facd 	bl	800d618 <__ratio>
 800e07e:	ec57 6b10 	vmov	r6, r7, d0
 800e082:	2200      	movs	r2, #0
 800e084:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 fd30 	bl	8000af0 <__aeabi_dcmple>
 800e090:	2800      	cmp	r0, #0
 800e092:	d06f      	beq.n	800e174 <_strtod_l+0xa34>
 800e094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e096:	2b00      	cmp	r3, #0
 800e098:	d17a      	bne.n	800e190 <_strtod_l+0xa50>
 800e09a:	f1ba 0f00 	cmp.w	sl, #0
 800e09e:	d158      	bne.n	800e152 <_strtod_l+0xa12>
 800e0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d15a      	bne.n	800e160 <_strtod_l+0xa20>
 800e0aa:	4b64      	ldr	r3, [pc, #400]	@ (800e23c <_strtod_l+0xafc>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	f7f2 fd13 	bl	8000adc <__aeabi_dcmplt>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d159      	bne.n	800e16e <_strtod_l+0xa2e>
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	4639      	mov	r1, r7
 800e0be:	4b60      	ldr	r3, [pc, #384]	@ (800e240 <_strtod_l+0xb00>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f2 fa99 	bl	80005f8 <__aeabi_dmul>
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	460f      	mov	r7, r1
 800e0ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e0ce:	9606      	str	r6, [sp, #24]
 800e0d0:	9307      	str	r3, [sp, #28]
 800e0d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0d6:	4d57      	ldr	r5, [pc, #348]	@ (800e234 <_strtod_l+0xaf4>)
 800e0d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0de:	401d      	ands	r5, r3
 800e0e0:	4b58      	ldr	r3, [pc, #352]	@ (800e244 <_strtod_l+0xb04>)
 800e0e2:	429d      	cmp	r5, r3
 800e0e4:	f040 80b2 	bne.w	800e24c <_strtod_l+0xb0c>
 800e0e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e0ee:	ec4b ab10 	vmov	d0, sl, fp
 800e0f2:	f7ff f9c9 	bl	800d488 <__ulp>
 800e0f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0fa:	ec51 0b10 	vmov	r0, r1, d0
 800e0fe:	f7f2 fa7b 	bl	80005f8 <__aeabi_dmul>
 800e102:	4652      	mov	r2, sl
 800e104:	465b      	mov	r3, fp
 800e106:	f7f2 f8c1 	bl	800028c <__adddf3>
 800e10a:	460b      	mov	r3, r1
 800e10c:	4949      	ldr	r1, [pc, #292]	@ (800e234 <_strtod_l+0xaf4>)
 800e10e:	4a4e      	ldr	r2, [pc, #312]	@ (800e248 <_strtod_l+0xb08>)
 800e110:	4019      	ands	r1, r3
 800e112:	4291      	cmp	r1, r2
 800e114:	4682      	mov	sl, r0
 800e116:	d942      	bls.n	800e19e <_strtod_l+0xa5e>
 800e118:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e11a:	4b47      	ldr	r3, [pc, #284]	@ (800e238 <_strtod_l+0xaf8>)
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d103      	bne.n	800e128 <_strtod_l+0x9e8>
 800e120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e122:	3301      	adds	r3, #1
 800e124:	f43f ad2b 	beq.w	800db7e <_strtod_l+0x43e>
 800e128:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e238 <_strtod_l+0xaf8>
 800e12c:	f04f 3aff 	mov.w	sl, #4294967295
 800e130:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e132:	9805      	ldr	r0, [sp, #20]
 800e134:	f7fe fe74 	bl	800ce20 <_Bfree>
 800e138:	9805      	ldr	r0, [sp, #20]
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7fe fe70 	bl	800ce20 <_Bfree>
 800e140:	9805      	ldr	r0, [sp, #20]
 800e142:	4641      	mov	r1, r8
 800e144:	f7fe fe6c 	bl	800ce20 <_Bfree>
 800e148:	9805      	ldr	r0, [sp, #20]
 800e14a:	4621      	mov	r1, r4
 800e14c:	f7fe fe68 	bl	800ce20 <_Bfree>
 800e150:	e618      	b.n	800dd84 <_strtod_l+0x644>
 800e152:	f1ba 0f01 	cmp.w	sl, #1
 800e156:	d103      	bne.n	800e160 <_strtod_l+0xa20>
 800e158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f43f ada5 	beq.w	800dcaa <_strtod_l+0x56a>
 800e160:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e210 <_strtod_l+0xad0>
 800e164:	4f35      	ldr	r7, [pc, #212]	@ (800e23c <_strtod_l+0xafc>)
 800e166:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e16a:	2600      	movs	r6, #0
 800e16c:	e7b1      	b.n	800e0d2 <_strtod_l+0x992>
 800e16e:	4f34      	ldr	r7, [pc, #208]	@ (800e240 <_strtod_l+0xb00>)
 800e170:	2600      	movs	r6, #0
 800e172:	e7aa      	b.n	800e0ca <_strtod_l+0x98a>
 800e174:	4b32      	ldr	r3, [pc, #200]	@ (800e240 <_strtod_l+0xb00>)
 800e176:	4630      	mov	r0, r6
 800e178:	4639      	mov	r1, r7
 800e17a:	2200      	movs	r2, #0
 800e17c:	f7f2 fa3c 	bl	80005f8 <__aeabi_dmul>
 800e180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e182:	4606      	mov	r6, r0
 800e184:	460f      	mov	r7, r1
 800e186:	2b00      	cmp	r3, #0
 800e188:	d09f      	beq.n	800e0ca <_strtod_l+0x98a>
 800e18a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e18e:	e7a0      	b.n	800e0d2 <_strtod_l+0x992>
 800e190:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e218 <_strtod_l+0xad8>
 800e194:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e198:	ec57 6b17 	vmov	r6, r7, d7
 800e19c:	e799      	b.n	800e0d2 <_strtod_l+0x992>
 800e19e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1c1      	bne.n	800e130 <_strtod_l+0x9f0>
 800e1ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e1b0:	0d1b      	lsrs	r3, r3, #20
 800e1b2:	051b      	lsls	r3, r3, #20
 800e1b4:	429d      	cmp	r5, r3
 800e1b6:	d1bb      	bne.n	800e130 <_strtod_l+0x9f0>
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 fd7c 	bl	8000cb8 <__aeabi_d2lz>
 800e1c0:	f7f2 f9ec 	bl	800059c <__aeabi_l2d>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	4639      	mov	r1, r7
 800e1cc:	f7f2 f85c 	bl	8000288 <__aeabi_dsub>
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e1d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1de:	ea46 060a 	orr.w	r6, r6, sl
 800e1e2:	431e      	orrs	r6, r3
 800e1e4:	d06f      	beq.n	800e2c6 <_strtod_l+0xb86>
 800e1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e220 <_strtod_l+0xae0>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f7f2 fc76 	bl	8000adc <__aeabi_dcmplt>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f47f accf 	bne.w	800db94 <_strtod_l+0x454>
 800e1f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e228 <_strtod_l+0xae8>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e200:	f7f2 fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 800e204:	2800      	cmp	r0, #0
 800e206:	d093      	beq.n	800e130 <_strtod_l+0x9f0>
 800e208:	e4c4      	b.n	800db94 <_strtod_l+0x454>
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w
 800e210:	00000000 	.word	0x00000000
 800e214:	bff00000 	.word	0xbff00000
 800e218:	00000000 	.word	0x00000000
 800e21c:	3ff00000 	.word	0x3ff00000
 800e220:	94a03595 	.word	0x94a03595
 800e224:	3fdfffff 	.word	0x3fdfffff
 800e228:	35afe535 	.word	0x35afe535
 800e22c:	3fe00000 	.word	0x3fe00000
 800e230:	000fffff 	.word	0x000fffff
 800e234:	7ff00000 	.word	0x7ff00000
 800e238:	7fefffff 	.word	0x7fefffff
 800e23c:	3ff00000 	.word	0x3ff00000
 800e240:	3fe00000 	.word	0x3fe00000
 800e244:	7fe00000 	.word	0x7fe00000
 800e248:	7c9fffff 	.word	0x7c9fffff
 800e24c:	9b08      	ldr	r3, [sp, #32]
 800e24e:	b323      	cbz	r3, 800e29a <_strtod_l+0xb5a>
 800e250:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e254:	d821      	bhi.n	800e29a <_strtod_l+0xb5a>
 800e256:	a328      	add	r3, pc, #160	@ (adr r3, 800e2f8 <_strtod_l+0xbb8>)
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	4630      	mov	r0, r6
 800e25e:	4639      	mov	r1, r7
 800e260:	f7f2 fc46 	bl	8000af0 <__aeabi_dcmple>
 800e264:	b1a0      	cbz	r0, 800e290 <_strtod_l+0xb50>
 800e266:	4639      	mov	r1, r7
 800e268:	4630      	mov	r0, r6
 800e26a:	f7f2 fc9d 	bl	8000ba8 <__aeabi_d2uiz>
 800e26e:	2801      	cmp	r0, #1
 800e270:	bf38      	it	cc
 800e272:	2001      	movcc	r0, #1
 800e274:	f7f2 f946 	bl	8000504 <__aeabi_ui2d>
 800e278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e27a:	4606      	mov	r6, r0
 800e27c:	460f      	mov	r7, r1
 800e27e:	b9fb      	cbnz	r3, 800e2c0 <_strtod_l+0xb80>
 800e280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e284:	9014      	str	r0, [sp, #80]	@ 0x50
 800e286:	9315      	str	r3, [sp, #84]	@ 0x54
 800e288:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e28c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e292:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e296:	1b5b      	subs	r3, r3, r5
 800e298:	9311      	str	r3, [sp, #68]	@ 0x44
 800e29a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e29e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e2a2:	f7ff f8f1 	bl	800d488 <__ulp>
 800e2a6:	4650      	mov	r0, sl
 800e2a8:	ec53 2b10 	vmov	r2, r3, d0
 800e2ac:	4659      	mov	r1, fp
 800e2ae:	f7f2 f9a3 	bl	80005f8 <__aeabi_dmul>
 800e2b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e2b6:	f7f1 ffe9 	bl	800028c <__adddf3>
 800e2ba:	4682      	mov	sl, r0
 800e2bc:	468b      	mov	fp, r1
 800e2be:	e770      	b.n	800e1a2 <_strtod_l+0xa62>
 800e2c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e2c4:	e7e0      	b.n	800e288 <_strtod_l+0xb48>
 800e2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e300 <_strtod_l+0xbc0>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f2 fc06 	bl	8000adc <__aeabi_dcmplt>
 800e2d0:	e798      	b.n	800e204 <_strtod_l+0xac4>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e2d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	f7ff ba6d 	b.w	800d7ba <_strtod_l+0x7a>
 800e2e0:	2a65      	cmp	r2, #101	@ 0x65
 800e2e2:	f43f ab66 	beq.w	800d9b2 <_strtod_l+0x272>
 800e2e6:	2a45      	cmp	r2, #69	@ 0x45
 800e2e8:	f43f ab63 	beq.w	800d9b2 <_strtod_l+0x272>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	f7ff bb9e 	b.w	800da2e <_strtod_l+0x2ee>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
 800e2f8:	ffc00000 	.word	0xffc00000
 800e2fc:	41dfffff 	.word	0x41dfffff
 800e300:	94a03595 	.word	0x94a03595
 800e304:	3fcfffff 	.word	0x3fcfffff

0800e308 <_strtod_r>:
 800e308:	4b01      	ldr	r3, [pc, #4]	@ (800e310 <_strtod_r+0x8>)
 800e30a:	f7ff ba19 	b.w	800d740 <_strtod_l>
 800e30e:	bf00      	nop
 800e310:	20000104 	.word	0x20000104

0800e314 <_strtol_l.constprop.0>:
 800e314:	2b24      	cmp	r3, #36	@ 0x24
 800e316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e31a:	4686      	mov	lr, r0
 800e31c:	4690      	mov	r8, r2
 800e31e:	d801      	bhi.n	800e324 <_strtol_l.constprop.0+0x10>
 800e320:	2b01      	cmp	r3, #1
 800e322:	d106      	bne.n	800e332 <_strtol_l.constprop.0+0x1e>
 800e324:	f000 fab2 	bl	800e88c <__errno>
 800e328:	2316      	movs	r3, #22
 800e32a:	6003      	str	r3, [r0, #0]
 800e32c:	2000      	movs	r0, #0
 800e32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e332:	4834      	ldr	r0, [pc, #208]	@ (800e404 <_strtol_l.constprop.0+0xf0>)
 800e334:	460d      	mov	r5, r1
 800e336:	462a      	mov	r2, r5
 800e338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e33c:	5d06      	ldrb	r6, [r0, r4]
 800e33e:	f016 0608 	ands.w	r6, r6, #8
 800e342:	d1f8      	bne.n	800e336 <_strtol_l.constprop.0+0x22>
 800e344:	2c2d      	cmp	r4, #45	@ 0x2d
 800e346:	d12d      	bne.n	800e3a4 <_strtol_l.constprop.0+0x90>
 800e348:	782c      	ldrb	r4, [r5, #0]
 800e34a:	2601      	movs	r6, #1
 800e34c:	1c95      	adds	r5, r2, #2
 800e34e:	f033 0210 	bics.w	r2, r3, #16
 800e352:	d109      	bne.n	800e368 <_strtol_l.constprop.0+0x54>
 800e354:	2c30      	cmp	r4, #48	@ 0x30
 800e356:	d12a      	bne.n	800e3ae <_strtol_l.constprop.0+0x9a>
 800e358:	782a      	ldrb	r2, [r5, #0]
 800e35a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e35e:	2a58      	cmp	r2, #88	@ 0x58
 800e360:	d125      	bne.n	800e3ae <_strtol_l.constprop.0+0x9a>
 800e362:	786c      	ldrb	r4, [r5, #1]
 800e364:	2310      	movs	r3, #16
 800e366:	3502      	adds	r5, #2
 800e368:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e36c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e370:	2200      	movs	r2, #0
 800e372:	fbbc f9f3 	udiv	r9, ip, r3
 800e376:	4610      	mov	r0, r2
 800e378:	fb03 ca19 	mls	sl, r3, r9, ip
 800e37c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e380:	2f09      	cmp	r7, #9
 800e382:	d81b      	bhi.n	800e3bc <_strtol_l.constprop.0+0xa8>
 800e384:	463c      	mov	r4, r7
 800e386:	42a3      	cmp	r3, r4
 800e388:	dd27      	ble.n	800e3da <_strtol_l.constprop.0+0xc6>
 800e38a:	1c57      	adds	r7, r2, #1
 800e38c:	d007      	beq.n	800e39e <_strtol_l.constprop.0+0x8a>
 800e38e:	4581      	cmp	r9, r0
 800e390:	d320      	bcc.n	800e3d4 <_strtol_l.constprop.0+0xc0>
 800e392:	d101      	bne.n	800e398 <_strtol_l.constprop.0+0x84>
 800e394:	45a2      	cmp	sl, r4
 800e396:	db1d      	blt.n	800e3d4 <_strtol_l.constprop.0+0xc0>
 800e398:	fb00 4003 	mla	r0, r0, r3, r4
 800e39c:	2201      	movs	r2, #1
 800e39e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3a2:	e7eb      	b.n	800e37c <_strtol_l.constprop.0+0x68>
 800e3a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e3a6:	bf04      	itt	eq
 800e3a8:	782c      	ldrbeq	r4, [r5, #0]
 800e3aa:	1c95      	addeq	r5, r2, #2
 800e3ac:	e7cf      	b.n	800e34e <_strtol_l.constprop.0+0x3a>
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d1da      	bne.n	800e368 <_strtol_l.constprop.0+0x54>
 800e3b2:	2c30      	cmp	r4, #48	@ 0x30
 800e3b4:	bf0c      	ite	eq
 800e3b6:	2308      	moveq	r3, #8
 800e3b8:	230a      	movne	r3, #10
 800e3ba:	e7d5      	b.n	800e368 <_strtol_l.constprop.0+0x54>
 800e3bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e3c0:	2f19      	cmp	r7, #25
 800e3c2:	d801      	bhi.n	800e3c8 <_strtol_l.constprop.0+0xb4>
 800e3c4:	3c37      	subs	r4, #55	@ 0x37
 800e3c6:	e7de      	b.n	800e386 <_strtol_l.constprop.0+0x72>
 800e3c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e3cc:	2f19      	cmp	r7, #25
 800e3ce:	d804      	bhi.n	800e3da <_strtol_l.constprop.0+0xc6>
 800e3d0:	3c57      	subs	r4, #87	@ 0x57
 800e3d2:	e7d8      	b.n	800e386 <_strtol_l.constprop.0+0x72>
 800e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d8:	e7e1      	b.n	800e39e <_strtol_l.constprop.0+0x8a>
 800e3da:	1c53      	adds	r3, r2, #1
 800e3dc:	d108      	bne.n	800e3f0 <_strtol_l.constprop.0+0xdc>
 800e3de:	2322      	movs	r3, #34	@ 0x22
 800e3e0:	f8ce 3000 	str.w	r3, [lr]
 800e3e4:	4660      	mov	r0, ip
 800e3e6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ea:	d0a0      	beq.n	800e32e <_strtol_l.constprop.0+0x1a>
 800e3ec:	1e69      	subs	r1, r5, #1
 800e3ee:	e006      	b.n	800e3fe <_strtol_l.constprop.0+0xea>
 800e3f0:	b106      	cbz	r6, 800e3f4 <_strtol_l.constprop.0+0xe0>
 800e3f2:	4240      	negs	r0, r0
 800e3f4:	f1b8 0f00 	cmp.w	r8, #0
 800e3f8:	d099      	beq.n	800e32e <_strtol_l.constprop.0+0x1a>
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d1f6      	bne.n	800e3ec <_strtol_l.constprop.0+0xd8>
 800e3fe:	f8c8 1000 	str.w	r1, [r8]
 800e402:	e794      	b.n	800e32e <_strtol_l.constprop.0+0x1a>
 800e404:	08010131 	.word	0x08010131

0800e408 <_strtol_r>:
 800e408:	f7ff bf84 	b.w	800e314 <_strtol_l.constprop.0>

0800e40c <__ssputs_r>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	688e      	ldr	r6, [r1, #8]
 800e412:	461f      	mov	r7, r3
 800e414:	42be      	cmp	r6, r7
 800e416:	680b      	ldr	r3, [r1, #0]
 800e418:	4682      	mov	sl, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	4690      	mov	r8, r2
 800e41e:	d82d      	bhi.n	800e47c <__ssputs_r+0x70>
 800e420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e428:	d026      	beq.n	800e478 <__ssputs_r+0x6c>
 800e42a:	6965      	ldr	r5, [r4, #20]
 800e42c:	6909      	ldr	r1, [r1, #16]
 800e42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e432:	eba3 0901 	sub.w	r9, r3, r1
 800e436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e43a:	1c7b      	adds	r3, r7, #1
 800e43c:	444b      	add	r3, r9
 800e43e:	106d      	asrs	r5, r5, #1
 800e440:	429d      	cmp	r5, r3
 800e442:	bf38      	it	cc
 800e444:	461d      	movcc	r5, r3
 800e446:	0553      	lsls	r3, r2, #21
 800e448:	d527      	bpl.n	800e49a <__ssputs_r+0x8e>
 800e44a:	4629      	mov	r1, r5
 800e44c:	f7fe fc1c 	bl	800cc88 <_malloc_r>
 800e450:	4606      	mov	r6, r0
 800e452:	b360      	cbz	r0, 800e4ae <__ssputs_r+0xa2>
 800e454:	6921      	ldr	r1, [r4, #16]
 800e456:	464a      	mov	r2, r9
 800e458:	f7fd fd3f 	bl	800beda <memcpy>
 800e45c:	89a3      	ldrh	r3, [r4, #12]
 800e45e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e466:	81a3      	strh	r3, [r4, #12]
 800e468:	6126      	str	r6, [r4, #16]
 800e46a:	6165      	str	r5, [r4, #20]
 800e46c:	444e      	add	r6, r9
 800e46e:	eba5 0509 	sub.w	r5, r5, r9
 800e472:	6026      	str	r6, [r4, #0]
 800e474:	60a5      	str	r5, [r4, #8]
 800e476:	463e      	mov	r6, r7
 800e478:	42be      	cmp	r6, r7
 800e47a:	d900      	bls.n	800e47e <__ssputs_r+0x72>
 800e47c:	463e      	mov	r6, r7
 800e47e:	6820      	ldr	r0, [r4, #0]
 800e480:	4632      	mov	r2, r6
 800e482:	4641      	mov	r1, r8
 800e484:	f000 f9c6 	bl	800e814 <memmove>
 800e488:	68a3      	ldr	r3, [r4, #8]
 800e48a:	1b9b      	subs	r3, r3, r6
 800e48c:	60a3      	str	r3, [r4, #8]
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	4433      	add	r3, r6
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	2000      	movs	r0, #0
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49a:	462a      	mov	r2, r5
 800e49c:	f000 fd81 	bl	800efa2 <_realloc_r>
 800e4a0:	4606      	mov	r6, r0
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d1e0      	bne.n	800e468 <__ssputs_r+0x5c>
 800e4a6:	6921      	ldr	r1, [r4, #16]
 800e4a8:	4650      	mov	r0, sl
 800e4aa:	f7fe fb79 	bl	800cba0 <_free_r>
 800e4ae:	230c      	movs	r3, #12
 800e4b0:	f8ca 3000 	str.w	r3, [sl]
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ba:	81a3      	strh	r3, [r4, #12]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	e7e9      	b.n	800e496 <__ssputs_r+0x8a>
	...

0800e4c4 <_svfiprintf_r>:
 800e4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c8:	4698      	mov	r8, r3
 800e4ca:	898b      	ldrh	r3, [r1, #12]
 800e4cc:	061b      	lsls	r3, r3, #24
 800e4ce:	b09d      	sub	sp, #116	@ 0x74
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	460d      	mov	r5, r1
 800e4d4:	4614      	mov	r4, r2
 800e4d6:	d510      	bpl.n	800e4fa <_svfiprintf_r+0x36>
 800e4d8:	690b      	ldr	r3, [r1, #16]
 800e4da:	b973      	cbnz	r3, 800e4fa <_svfiprintf_r+0x36>
 800e4dc:	2140      	movs	r1, #64	@ 0x40
 800e4de:	f7fe fbd3 	bl	800cc88 <_malloc_r>
 800e4e2:	6028      	str	r0, [r5, #0]
 800e4e4:	6128      	str	r0, [r5, #16]
 800e4e6:	b930      	cbnz	r0, 800e4f6 <_svfiprintf_r+0x32>
 800e4e8:	230c      	movs	r3, #12
 800e4ea:	603b      	str	r3, [r7, #0]
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	b01d      	add	sp, #116	@ 0x74
 800e4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f6:	2340      	movs	r3, #64	@ 0x40
 800e4f8:	616b      	str	r3, [r5, #20]
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4fe:	2320      	movs	r3, #32
 800e500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e504:	f8cd 800c 	str.w	r8, [sp, #12]
 800e508:	2330      	movs	r3, #48	@ 0x30
 800e50a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e6a8 <_svfiprintf_r+0x1e4>
 800e50e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e512:	f04f 0901 	mov.w	r9, #1
 800e516:	4623      	mov	r3, r4
 800e518:	469a      	mov	sl, r3
 800e51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e51e:	b10a      	cbz	r2, 800e524 <_svfiprintf_r+0x60>
 800e520:	2a25      	cmp	r2, #37	@ 0x25
 800e522:	d1f9      	bne.n	800e518 <_svfiprintf_r+0x54>
 800e524:	ebba 0b04 	subs.w	fp, sl, r4
 800e528:	d00b      	beq.n	800e542 <_svfiprintf_r+0x7e>
 800e52a:	465b      	mov	r3, fp
 800e52c:	4622      	mov	r2, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff ff6b 	bl	800e40c <__ssputs_r>
 800e536:	3001      	adds	r0, #1
 800e538:	f000 80a7 	beq.w	800e68a <_svfiprintf_r+0x1c6>
 800e53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e53e:	445a      	add	r2, fp
 800e540:	9209      	str	r2, [sp, #36]	@ 0x24
 800e542:	f89a 3000 	ldrb.w	r3, [sl]
 800e546:	2b00      	cmp	r3, #0
 800e548:	f000 809f 	beq.w	800e68a <_svfiprintf_r+0x1c6>
 800e54c:	2300      	movs	r3, #0
 800e54e:	f04f 32ff 	mov.w	r2, #4294967295
 800e552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e556:	f10a 0a01 	add.w	sl, sl, #1
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	9307      	str	r3, [sp, #28]
 800e55e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e562:	931a      	str	r3, [sp, #104]	@ 0x68
 800e564:	4654      	mov	r4, sl
 800e566:	2205      	movs	r2, #5
 800e568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e56c:	484e      	ldr	r0, [pc, #312]	@ (800e6a8 <_svfiprintf_r+0x1e4>)
 800e56e:	f7f1 fe2f 	bl	80001d0 <memchr>
 800e572:	9a04      	ldr	r2, [sp, #16]
 800e574:	b9d8      	cbnz	r0, 800e5ae <_svfiprintf_r+0xea>
 800e576:	06d0      	lsls	r0, r2, #27
 800e578:	bf44      	itt	mi
 800e57a:	2320      	movmi	r3, #32
 800e57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e580:	0711      	lsls	r1, r2, #28
 800e582:	bf44      	itt	mi
 800e584:	232b      	movmi	r3, #43	@ 0x2b
 800e586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e58a:	f89a 3000 	ldrb.w	r3, [sl]
 800e58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e590:	d015      	beq.n	800e5be <_svfiprintf_r+0xfa>
 800e592:	9a07      	ldr	r2, [sp, #28]
 800e594:	4654      	mov	r4, sl
 800e596:	2000      	movs	r0, #0
 800e598:	f04f 0c0a 	mov.w	ip, #10
 800e59c:	4621      	mov	r1, r4
 800e59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5a2:	3b30      	subs	r3, #48	@ 0x30
 800e5a4:	2b09      	cmp	r3, #9
 800e5a6:	d94b      	bls.n	800e640 <_svfiprintf_r+0x17c>
 800e5a8:	b1b0      	cbz	r0, 800e5d8 <_svfiprintf_r+0x114>
 800e5aa:	9207      	str	r2, [sp, #28]
 800e5ac:	e014      	b.n	800e5d8 <_svfiprintf_r+0x114>
 800e5ae:	eba0 0308 	sub.w	r3, r0, r8
 800e5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	46a2      	mov	sl, r4
 800e5bc:	e7d2      	b.n	800e564 <_svfiprintf_r+0xa0>
 800e5be:	9b03      	ldr	r3, [sp, #12]
 800e5c0:	1d19      	adds	r1, r3, #4
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	9103      	str	r1, [sp, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bfbb      	ittet	lt
 800e5ca:	425b      	neglt	r3, r3
 800e5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e5d0:	9307      	strge	r3, [sp, #28]
 800e5d2:	9307      	strlt	r3, [sp, #28]
 800e5d4:	bfb8      	it	lt
 800e5d6:	9204      	strlt	r2, [sp, #16]
 800e5d8:	7823      	ldrb	r3, [r4, #0]
 800e5da:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5dc:	d10a      	bne.n	800e5f4 <_svfiprintf_r+0x130>
 800e5de:	7863      	ldrb	r3, [r4, #1]
 800e5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5e2:	d132      	bne.n	800e64a <_svfiprintf_r+0x186>
 800e5e4:	9b03      	ldr	r3, [sp, #12]
 800e5e6:	1d1a      	adds	r2, r3, #4
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	9203      	str	r2, [sp, #12]
 800e5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5f0:	3402      	adds	r4, #2
 800e5f2:	9305      	str	r3, [sp, #20]
 800e5f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e6b8 <_svfiprintf_r+0x1f4>
 800e5f8:	7821      	ldrb	r1, [r4, #0]
 800e5fa:	2203      	movs	r2, #3
 800e5fc:	4650      	mov	r0, sl
 800e5fe:	f7f1 fde7 	bl	80001d0 <memchr>
 800e602:	b138      	cbz	r0, 800e614 <_svfiprintf_r+0x150>
 800e604:	9b04      	ldr	r3, [sp, #16]
 800e606:	eba0 000a 	sub.w	r0, r0, sl
 800e60a:	2240      	movs	r2, #64	@ 0x40
 800e60c:	4082      	lsls	r2, r0
 800e60e:	4313      	orrs	r3, r2
 800e610:	3401      	adds	r4, #1
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e618:	4824      	ldr	r0, [pc, #144]	@ (800e6ac <_svfiprintf_r+0x1e8>)
 800e61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e61e:	2206      	movs	r2, #6
 800e620:	f7f1 fdd6 	bl	80001d0 <memchr>
 800e624:	2800      	cmp	r0, #0
 800e626:	d036      	beq.n	800e696 <_svfiprintf_r+0x1d2>
 800e628:	4b21      	ldr	r3, [pc, #132]	@ (800e6b0 <_svfiprintf_r+0x1ec>)
 800e62a:	bb1b      	cbnz	r3, 800e674 <_svfiprintf_r+0x1b0>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	3307      	adds	r3, #7
 800e630:	f023 0307 	bic.w	r3, r3, #7
 800e634:	3308      	adds	r3, #8
 800e636:	9303      	str	r3, [sp, #12]
 800e638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63a:	4433      	add	r3, r6
 800e63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e63e:	e76a      	b.n	800e516 <_svfiprintf_r+0x52>
 800e640:	fb0c 3202 	mla	r2, ip, r2, r3
 800e644:	460c      	mov	r4, r1
 800e646:	2001      	movs	r0, #1
 800e648:	e7a8      	b.n	800e59c <_svfiprintf_r+0xd8>
 800e64a:	2300      	movs	r3, #0
 800e64c:	3401      	adds	r4, #1
 800e64e:	9305      	str	r3, [sp, #20]
 800e650:	4619      	mov	r1, r3
 800e652:	f04f 0c0a 	mov.w	ip, #10
 800e656:	4620      	mov	r0, r4
 800e658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e65c:	3a30      	subs	r2, #48	@ 0x30
 800e65e:	2a09      	cmp	r2, #9
 800e660:	d903      	bls.n	800e66a <_svfiprintf_r+0x1a6>
 800e662:	2b00      	cmp	r3, #0
 800e664:	d0c6      	beq.n	800e5f4 <_svfiprintf_r+0x130>
 800e666:	9105      	str	r1, [sp, #20]
 800e668:	e7c4      	b.n	800e5f4 <_svfiprintf_r+0x130>
 800e66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e66e:	4604      	mov	r4, r0
 800e670:	2301      	movs	r3, #1
 800e672:	e7f0      	b.n	800e656 <_svfiprintf_r+0x192>
 800e674:	ab03      	add	r3, sp, #12
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	462a      	mov	r2, r5
 800e67a:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b4 <_svfiprintf_r+0x1f0>)
 800e67c:	a904      	add	r1, sp, #16
 800e67e:	4638      	mov	r0, r7
 800e680:	f7fc fc6a 	bl	800af58 <_printf_float>
 800e684:	1c42      	adds	r2, r0, #1
 800e686:	4606      	mov	r6, r0
 800e688:	d1d6      	bne.n	800e638 <_svfiprintf_r+0x174>
 800e68a:	89ab      	ldrh	r3, [r5, #12]
 800e68c:	065b      	lsls	r3, r3, #25
 800e68e:	f53f af2d 	bmi.w	800e4ec <_svfiprintf_r+0x28>
 800e692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e694:	e72c      	b.n	800e4f0 <_svfiprintf_r+0x2c>
 800e696:	ab03      	add	r3, sp, #12
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	462a      	mov	r2, r5
 800e69c:	4b05      	ldr	r3, [pc, #20]	@ (800e6b4 <_svfiprintf_r+0x1f0>)
 800e69e:	a904      	add	r1, sp, #16
 800e6a0:	4638      	mov	r0, r7
 800e6a2:	f7fc fef1 	bl	800b488 <_printf_i>
 800e6a6:	e7ed      	b.n	800e684 <_svfiprintf_r+0x1c0>
 800e6a8:	08010231 	.word	0x08010231
 800e6ac:	0801023b 	.word	0x0801023b
 800e6b0:	0800af59 	.word	0x0800af59
 800e6b4:	0800e40d 	.word	0x0800e40d
 800e6b8:	08010237 	.word	0x08010237

0800e6bc <__sflush_r>:
 800e6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c4:	0716      	lsls	r6, r2, #28
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	d454      	bmi.n	800e776 <__sflush_r+0xba>
 800e6cc:	684b      	ldr	r3, [r1, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	dc02      	bgt.n	800e6d8 <__sflush_r+0x1c>
 800e6d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	dd48      	ble.n	800e76a <__sflush_r+0xae>
 800e6d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6da:	2e00      	cmp	r6, #0
 800e6dc:	d045      	beq.n	800e76a <__sflush_r+0xae>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6e4:	682f      	ldr	r7, [r5, #0]
 800e6e6:	6a21      	ldr	r1, [r4, #32]
 800e6e8:	602b      	str	r3, [r5, #0]
 800e6ea:	d030      	beq.n	800e74e <__sflush_r+0x92>
 800e6ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	0759      	lsls	r1, r3, #29
 800e6f2:	d505      	bpl.n	800e700 <__sflush_r+0x44>
 800e6f4:	6863      	ldr	r3, [r4, #4]
 800e6f6:	1ad2      	subs	r2, r2, r3
 800e6f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6fa:	b10b      	cbz	r3, 800e700 <__sflush_r+0x44>
 800e6fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6fe:	1ad2      	subs	r2, r2, r3
 800e700:	2300      	movs	r3, #0
 800e702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e704:	6a21      	ldr	r1, [r4, #32]
 800e706:	4628      	mov	r0, r5
 800e708:	47b0      	blx	r6
 800e70a:	1c43      	adds	r3, r0, #1
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	d106      	bne.n	800e71e <__sflush_r+0x62>
 800e710:	6829      	ldr	r1, [r5, #0]
 800e712:	291d      	cmp	r1, #29
 800e714:	d82b      	bhi.n	800e76e <__sflush_r+0xb2>
 800e716:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c0 <__sflush_r+0x104>)
 800e718:	410a      	asrs	r2, r1
 800e71a:	07d6      	lsls	r6, r2, #31
 800e71c:	d427      	bmi.n	800e76e <__sflush_r+0xb2>
 800e71e:	2200      	movs	r2, #0
 800e720:	6062      	str	r2, [r4, #4]
 800e722:	04d9      	lsls	r1, r3, #19
 800e724:	6922      	ldr	r2, [r4, #16]
 800e726:	6022      	str	r2, [r4, #0]
 800e728:	d504      	bpl.n	800e734 <__sflush_r+0x78>
 800e72a:	1c42      	adds	r2, r0, #1
 800e72c:	d101      	bne.n	800e732 <__sflush_r+0x76>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b903      	cbnz	r3, 800e734 <__sflush_r+0x78>
 800e732:	6560      	str	r0, [r4, #84]	@ 0x54
 800e734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e736:	602f      	str	r7, [r5, #0]
 800e738:	b1b9      	cbz	r1, 800e76a <__sflush_r+0xae>
 800e73a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e73e:	4299      	cmp	r1, r3
 800e740:	d002      	beq.n	800e748 <__sflush_r+0x8c>
 800e742:	4628      	mov	r0, r5
 800e744:	f7fe fa2c 	bl	800cba0 <_free_r>
 800e748:	2300      	movs	r3, #0
 800e74a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e74c:	e00d      	b.n	800e76a <__sflush_r+0xae>
 800e74e:	2301      	movs	r3, #1
 800e750:	4628      	mov	r0, r5
 800e752:	47b0      	blx	r6
 800e754:	4602      	mov	r2, r0
 800e756:	1c50      	adds	r0, r2, #1
 800e758:	d1c9      	bne.n	800e6ee <__sflush_r+0x32>
 800e75a:	682b      	ldr	r3, [r5, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d0c6      	beq.n	800e6ee <__sflush_r+0x32>
 800e760:	2b1d      	cmp	r3, #29
 800e762:	d001      	beq.n	800e768 <__sflush_r+0xac>
 800e764:	2b16      	cmp	r3, #22
 800e766:	d11e      	bne.n	800e7a6 <__sflush_r+0xea>
 800e768:	602f      	str	r7, [r5, #0]
 800e76a:	2000      	movs	r0, #0
 800e76c:	e022      	b.n	800e7b4 <__sflush_r+0xf8>
 800e76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e772:	b21b      	sxth	r3, r3
 800e774:	e01b      	b.n	800e7ae <__sflush_r+0xf2>
 800e776:	690f      	ldr	r7, [r1, #16]
 800e778:	2f00      	cmp	r7, #0
 800e77a:	d0f6      	beq.n	800e76a <__sflush_r+0xae>
 800e77c:	0793      	lsls	r3, r2, #30
 800e77e:	680e      	ldr	r6, [r1, #0]
 800e780:	bf08      	it	eq
 800e782:	694b      	ldreq	r3, [r1, #20]
 800e784:	600f      	str	r7, [r1, #0]
 800e786:	bf18      	it	ne
 800e788:	2300      	movne	r3, #0
 800e78a:	eba6 0807 	sub.w	r8, r6, r7
 800e78e:	608b      	str	r3, [r1, #8]
 800e790:	f1b8 0f00 	cmp.w	r8, #0
 800e794:	dde9      	ble.n	800e76a <__sflush_r+0xae>
 800e796:	6a21      	ldr	r1, [r4, #32]
 800e798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e79a:	4643      	mov	r3, r8
 800e79c:	463a      	mov	r2, r7
 800e79e:	4628      	mov	r0, r5
 800e7a0:	47b0      	blx	r6
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	dc08      	bgt.n	800e7b8 <__sflush_r+0xfc>
 800e7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7ae:	81a3      	strh	r3, [r4, #12]
 800e7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b8:	4407      	add	r7, r0
 800e7ba:	eba8 0800 	sub.w	r8, r8, r0
 800e7be:	e7e7      	b.n	800e790 <__sflush_r+0xd4>
 800e7c0:	dfbffffe 	.word	0xdfbffffe

0800e7c4 <_fflush_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	690b      	ldr	r3, [r1, #16]
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	b913      	cbnz	r3, 800e7d4 <_fflush_r+0x10>
 800e7ce:	2500      	movs	r5, #0
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	b118      	cbz	r0, 800e7de <_fflush_r+0x1a>
 800e7d6:	6a03      	ldr	r3, [r0, #32]
 800e7d8:	b90b      	cbnz	r3, 800e7de <_fflush_r+0x1a>
 800e7da:	f7fd fa15 	bl	800bc08 <__sinit>
 800e7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d0f3      	beq.n	800e7ce <_fflush_r+0xa>
 800e7e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7e8:	07d0      	lsls	r0, r2, #31
 800e7ea:	d404      	bmi.n	800e7f6 <_fflush_r+0x32>
 800e7ec:	0599      	lsls	r1, r3, #22
 800e7ee:	d402      	bmi.n	800e7f6 <_fflush_r+0x32>
 800e7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7f2:	f7fd fb70 	bl	800bed6 <__retarget_lock_acquire_recursive>
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	f7ff ff5f 	bl	800e6bc <__sflush_r>
 800e7fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e800:	07da      	lsls	r2, r3, #31
 800e802:	4605      	mov	r5, r0
 800e804:	d4e4      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	059b      	lsls	r3, r3, #22
 800e80a:	d4e1      	bmi.n	800e7d0 <_fflush_r+0xc>
 800e80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e80e:	f7fd fb63 	bl	800bed8 <__retarget_lock_release_recursive>
 800e812:	e7dd      	b.n	800e7d0 <_fflush_r+0xc>

0800e814 <memmove>:
 800e814:	4288      	cmp	r0, r1
 800e816:	b510      	push	{r4, lr}
 800e818:	eb01 0402 	add.w	r4, r1, r2
 800e81c:	d902      	bls.n	800e824 <memmove+0x10>
 800e81e:	4284      	cmp	r4, r0
 800e820:	4623      	mov	r3, r4
 800e822:	d807      	bhi.n	800e834 <memmove+0x20>
 800e824:	1e43      	subs	r3, r0, #1
 800e826:	42a1      	cmp	r1, r4
 800e828:	d008      	beq.n	800e83c <memmove+0x28>
 800e82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e832:	e7f8      	b.n	800e826 <memmove+0x12>
 800e834:	4402      	add	r2, r0
 800e836:	4601      	mov	r1, r0
 800e838:	428a      	cmp	r2, r1
 800e83a:	d100      	bne.n	800e83e <memmove+0x2a>
 800e83c:	bd10      	pop	{r4, pc}
 800e83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e846:	e7f7      	b.n	800e838 <memmove+0x24>

0800e848 <strncmp>:
 800e848:	b510      	push	{r4, lr}
 800e84a:	b16a      	cbz	r2, 800e868 <strncmp+0x20>
 800e84c:	3901      	subs	r1, #1
 800e84e:	1884      	adds	r4, r0, r2
 800e850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e854:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e858:	429a      	cmp	r2, r3
 800e85a:	d103      	bne.n	800e864 <strncmp+0x1c>
 800e85c:	42a0      	cmp	r0, r4
 800e85e:	d001      	beq.n	800e864 <strncmp+0x1c>
 800e860:	2a00      	cmp	r2, #0
 800e862:	d1f5      	bne.n	800e850 <strncmp+0x8>
 800e864:	1ad0      	subs	r0, r2, r3
 800e866:	bd10      	pop	{r4, pc}
 800e868:	4610      	mov	r0, r2
 800e86a:	e7fc      	b.n	800e866 <strncmp+0x1e>

0800e86c <_sbrk_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4d06      	ldr	r5, [pc, #24]	@ (800e888 <_sbrk_r+0x1c>)
 800e870:	2300      	movs	r3, #0
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	602b      	str	r3, [r5, #0]
 800e878:	f001 fa34 	bl	800fce4 <_sbrk>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_sbrk_r+0x1a>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	b103      	cbz	r3, 800e886 <_sbrk_r+0x1a>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	200031c8 	.word	0x200031c8

0800e88c <__errno>:
 800e88c:	4b01      	ldr	r3, [pc, #4]	@ (800e894 <__errno+0x8>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	200000b4 	.word	0x200000b4

0800e898 <nan>:
 800e898:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e8a0 <nan+0x8>
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	00000000 	.word	0x00000000
 800e8a4:	7ff80000 	.word	0x7ff80000

0800e8a8 <__assert_func>:
 800e8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <__assert_func+0x2c>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	68d8      	ldr	r0, [r3, #12]
 800e8b6:	b954      	cbnz	r4, 800e8ce <__assert_func+0x26>
 800e8b8:	4b07      	ldr	r3, [pc, #28]	@ (800e8d8 <__assert_func+0x30>)
 800e8ba:	461c      	mov	r4, r3
 800e8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8c0:	9100      	str	r1, [sp, #0]
 800e8c2:	462b      	mov	r3, r5
 800e8c4:	4905      	ldr	r1, [pc, #20]	@ (800e8dc <__assert_func+0x34>)
 800e8c6:	f000 fba7 	bl	800f018 <fiprintf>
 800e8ca:	f000 fbb7 	bl	800f03c <abort>
 800e8ce:	4b04      	ldr	r3, [pc, #16]	@ (800e8e0 <__assert_func+0x38>)
 800e8d0:	e7f4      	b.n	800e8bc <__assert_func+0x14>
 800e8d2:	bf00      	nop
 800e8d4:	200000b4 	.word	0x200000b4
 800e8d8:	08010285 	.word	0x08010285
 800e8dc:	08010257 	.word	0x08010257
 800e8e0:	0801024a 	.word	0x0801024a

0800e8e4 <_calloc_r>:
 800e8e4:	b570      	push	{r4, r5, r6, lr}
 800e8e6:	fba1 5402 	umull	r5, r4, r1, r2
 800e8ea:	b93c      	cbnz	r4, 800e8fc <_calloc_r+0x18>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	f7fe f9cb 	bl	800cc88 <_malloc_r>
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	b928      	cbnz	r0, 800e902 <_calloc_r+0x1e>
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
 800e8fc:	220c      	movs	r2, #12
 800e8fe:	6002      	str	r2, [r0, #0]
 800e900:	e7f9      	b.n	800e8f6 <_calloc_r+0x12>
 800e902:	462a      	mov	r2, r5
 800e904:	4621      	mov	r1, r4
 800e906:	f7fd fa18 	bl	800bd3a <memset>
 800e90a:	e7f5      	b.n	800e8f8 <_calloc_r+0x14>

0800e90c <rshift>:
 800e90c:	6903      	ldr	r3, [r0, #16]
 800e90e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e916:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e91a:	f100 0414 	add.w	r4, r0, #20
 800e91e:	dd45      	ble.n	800e9ac <rshift+0xa0>
 800e920:	f011 011f 	ands.w	r1, r1, #31
 800e924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e92c:	d10c      	bne.n	800e948 <rshift+0x3c>
 800e92e:	f100 0710 	add.w	r7, r0, #16
 800e932:	4629      	mov	r1, r5
 800e934:	42b1      	cmp	r1, r6
 800e936:	d334      	bcc.n	800e9a2 <rshift+0x96>
 800e938:	1a9b      	subs	r3, r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	1eea      	subs	r2, r5, #3
 800e93e:	4296      	cmp	r6, r2
 800e940:	bf38      	it	cc
 800e942:	2300      	movcc	r3, #0
 800e944:	4423      	add	r3, r4
 800e946:	e015      	b.n	800e974 <rshift+0x68>
 800e948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e94c:	f1c1 0820 	rsb	r8, r1, #32
 800e950:	40cf      	lsrs	r7, r1
 800e952:	f105 0e04 	add.w	lr, r5, #4
 800e956:	46a1      	mov	r9, r4
 800e958:	4576      	cmp	r6, lr
 800e95a:	46f4      	mov	ip, lr
 800e95c:	d815      	bhi.n	800e98a <rshift+0x7e>
 800e95e:	1a9a      	subs	r2, r3, r2
 800e960:	0092      	lsls	r2, r2, #2
 800e962:	3a04      	subs	r2, #4
 800e964:	3501      	adds	r5, #1
 800e966:	42ae      	cmp	r6, r5
 800e968:	bf38      	it	cc
 800e96a:	2200      	movcc	r2, #0
 800e96c:	18a3      	adds	r3, r4, r2
 800e96e:	50a7      	str	r7, [r4, r2]
 800e970:	b107      	cbz	r7, 800e974 <rshift+0x68>
 800e972:	3304      	adds	r3, #4
 800e974:	1b1a      	subs	r2, r3, r4
 800e976:	42a3      	cmp	r3, r4
 800e978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e97c:	bf08      	it	eq
 800e97e:	2300      	moveq	r3, #0
 800e980:	6102      	str	r2, [r0, #16]
 800e982:	bf08      	it	eq
 800e984:	6143      	streq	r3, [r0, #20]
 800e986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e98a:	f8dc c000 	ldr.w	ip, [ip]
 800e98e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e992:	ea4c 0707 	orr.w	r7, ip, r7
 800e996:	f849 7b04 	str.w	r7, [r9], #4
 800e99a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e99e:	40cf      	lsrs	r7, r1
 800e9a0:	e7da      	b.n	800e958 <rshift+0x4c>
 800e9a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e9a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e9aa:	e7c3      	b.n	800e934 <rshift+0x28>
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	e7e1      	b.n	800e974 <rshift+0x68>

0800e9b0 <__hexdig_fun>:
 800e9b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e9b4:	2b09      	cmp	r3, #9
 800e9b6:	d802      	bhi.n	800e9be <__hexdig_fun+0xe>
 800e9b8:	3820      	subs	r0, #32
 800e9ba:	b2c0      	uxtb	r0, r0
 800e9bc:	4770      	bx	lr
 800e9be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e9c2:	2b05      	cmp	r3, #5
 800e9c4:	d801      	bhi.n	800e9ca <__hexdig_fun+0x1a>
 800e9c6:	3847      	subs	r0, #71	@ 0x47
 800e9c8:	e7f7      	b.n	800e9ba <__hexdig_fun+0xa>
 800e9ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e9ce:	2b05      	cmp	r3, #5
 800e9d0:	d801      	bhi.n	800e9d6 <__hexdig_fun+0x26>
 800e9d2:	3827      	subs	r0, #39	@ 0x27
 800e9d4:	e7f1      	b.n	800e9ba <__hexdig_fun+0xa>
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	4770      	bx	lr
	...

0800e9dc <__gethex>:
 800e9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	468a      	mov	sl, r1
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	680b      	ldr	r3, [r1, #0]
 800e9e8:	9001      	str	r0, [sp, #4]
 800e9ea:	4690      	mov	r8, r2
 800e9ec:	1c9c      	adds	r4, r3, #2
 800e9ee:	46a1      	mov	r9, r4
 800e9f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e9f4:	2830      	cmp	r0, #48	@ 0x30
 800e9f6:	d0fa      	beq.n	800e9ee <__gethex+0x12>
 800e9f8:	eba9 0303 	sub.w	r3, r9, r3
 800e9fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800ea00:	f7ff ffd6 	bl	800e9b0 <__hexdig_fun>
 800ea04:	4605      	mov	r5, r0
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d168      	bne.n	800eadc <__gethex+0x100>
 800ea0a:	49a0      	ldr	r1, [pc, #640]	@ (800ec8c <__gethex+0x2b0>)
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	4648      	mov	r0, r9
 800ea10:	f7ff ff1a 	bl	800e848 <strncmp>
 800ea14:	4607      	mov	r7, r0
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d167      	bne.n	800eaea <__gethex+0x10e>
 800ea1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ea1e:	4626      	mov	r6, r4
 800ea20:	f7ff ffc6 	bl	800e9b0 <__hexdig_fun>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d062      	beq.n	800eaee <__gethex+0x112>
 800ea28:	4623      	mov	r3, r4
 800ea2a:	7818      	ldrb	r0, [r3, #0]
 800ea2c:	2830      	cmp	r0, #48	@ 0x30
 800ea2e:	4699      	mov	r9, r3
 800ea30:	f103 0301 	add.w	r3, r3, #1
 800ea34:	d0f9      	beq.n	800ea2a <__gethex+0x4e>
 800ea36:	f7ff ffbb 	bl	800e9b0 <__hexdig_fun>
 800ea3a:	fab0 f580 	clz	r5, r0
 800ea3e:	096d      	lsrs	r5, r5, #5
 800ea40:	f04f 0b01 	mov.w	fp, #1
 800ea44:	464a      	mov	r2, r9
 800ea46:	4616      	mov	r6, r2
 800ea48:	3201      	adds	r2, #1
 800ea4a:	7830      	ldrb	r0, [r6, #0]
 800ea4c:	f7ff ffb0 	bl	800e9b0 <__hexdig_fun>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d1f8      	bne.n	800ea46 <__gethex+0x6a>
 800ea54:	498d      	ldr	r1, [pc, #564]	@ (800ec8c <__gethex+0x2b0>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f7ff fef5 	bl	800e848 <strncmp>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d13f      	bne.n	800eae2 <__gethex+0x106>
 800ea62:	b944      	cbnz	r4, 800ea76 <__gethex+0x9a>
 800ea64:	1c74      	adds	r4, r6, #1
 800ea66:	4622      	mov	r2, r4
 800ea68:	4616      	mov	r6, r2
 800ea6a:	3201      	adds	r2, #1
 800ea6c:	7830      	ldrb	r0, [r6, #0]
 800ea6e:	f7ff ff9f 	bl	800e9b0 <__hexdig_fun>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1f8      	bne.n	800ea68 <__gethex+0x8c>
 800ea76:	1ba4      	subs	r4, r4, r6
 800ea78:	00a7      	lsls	r7, r4, #2
 800ea7a:	7833      	ldrb	r3, [r6, #0]
 800ea7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ea80:	2b50      	cmp	r3, #80	@ 0x50
 800ea82:	d13e      	bne.n	800eb02 <__gethex+0x126>
 800ea84:	7873      	ldrb	r3, [r6, #1]
 800ea86:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea88:	d033      	beq.n	800eaf2 <__gethex+0x116>
 800ea8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea8c:	d034      	beq.n	800eaf8 <__gethex+0x11c>
 800ea8e:	1c71      	adds	r1, r6, #1
 800ea90:	2400      	movs	r4, #0
 800ea92:	7808      	ldrb	r0, [r1, #0]
 800ea94:	f7ff ff8c 	bl	800e9b0 <__hexdig_fun>
 800ea98:	1e43      	subs	r3, r0, #1
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b18      	cmp	r3, #24
 800ea9e:	d830      	bhi.n	800eb02 <__gethex+0x126>
 800eaa0:	f1a0 0210 	sub.w	r2, r0, #16
 800eaa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eaa8:	f7ff ff82 	bl	800e9b0 <__hexdig_fun>
 800eaac:	f100 3cff 	add.w	ip, r0, #4294967295
 800eab0:	fa5f fc8c 	uxtb.w	ip, ip
 800eab4:	f1bc 0f18 	cmp.w	ip, #24
 800eab8:	f04f 030a 	mov.w	r3, #10
 800eabc:	d91e      	bls.n	800eafc <__gethex+0x120>
 800eabe:	b104      	cbz	r4, 800eac2 <__gethex+0xe6>
 800eac0:	4252      	negs	r2, r2
 800eac2:	4417      	add	r7, r2
 800eac4:	f8ca 1000 	str.w	r1, [sl]
 800eac8:	b1ed      	cbz	r5, 800eb06 <__gethex+0x12a>
 800eaca:	f1bb 0f00 	cmp.w	fp, #0
 800eace:	bf0c      	ite	eq
 800ead0:	2506      	moveq	r5, #6
 800ead2:	2500      	movne	r5, #0
 800ead4:	4628      	mov	r0, r5
 800ead6:	b005      	add	sp, #20
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	2500      	movs	r5, #0
 800eade:	462c      	mov	r4, r5
 800eae0:	e7b0      	b.n	800ea44 <__gethex+0x68>
 800eae2:	2c00      	cmp	r4, #0
 800eae4:	d1c7      	bne.n	800ea76 <__gethex+0x9a>
 800eae6:	4627      	mov	r7, r4
 800eae8:	e7c7      	b.n	800ea7a <__gethex+0x9e>
 800eaea:	464e      	mov	r6, r9
 800eaec:	462f      	mov	r7, r5
 800eaee:	2501      	movs	r5, #1
 800eaf0:	e7c3      	b.n	800ea7a <__gethex+0x9e>
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	1cb1      	adds	r1, r6, #2
 800eaf6:	e7cc      	b.n	800ea92 <__gethex+0xb6>
 800eaf8:	2401      	movs	r4, #1
 800eafa:	e7fb      	b.n	800eaf4 <__gethex+0x118>
 800eafc:	fb03 0002 	mla	r0, r3, r2, r0
 800eb00:	e7ce      	b.n	800eaa0 <__gethex+0xc4>
 800eb02:	4631      	mov	r1, r6
 800eb04:	e7de      	b.n	800eac4 <__gethex+0xe8>
 800eb06:	eba6 0309 	sub.w	r3, r6, r9
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	2b07      	cmp	r3, #7
 800eb10:	dc0a      	bgt.n	800eb28 <__gethex+0x14c>
 800eb12:	9801      	ldr	r0, [sp, #4]
 800eb14:	f7fe f944 	bl	800cda0 <_Balloc>
 800eb18:	4604      	mov	r4, r0
 800eb1a:	b940      	cbnz	r0, 800eb2e <__gethex+0x152>
 800eb1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ec90 <__gethex+0x2b4>)
 800eb1e:	4602      	mov	r2, r0
 800eb20:	21e4      	movs	r1, #228	@ 0xe4
 800eb22:	485c      	ldr	r0, [pc, #368]	@ (800ec94 <__gethex+0x2b8>)
 800eb24:	f7ff fec0 	bl	800e8a8 <__assert_func>
 800eb28:	3101      	adds	r1, #1
 800eb2a:	105b      	asrs	r3, r3, #1
 800eb2c:	e7ef      	b.n	800eb0e <__gethex+0x132>
 800eb2e:	f100 0a14 	add.w	sl, r0, #20
 800eb32:	2300      	movs	r3, #0
 800eb34:	4655      	mov	r5, sl
 800eb36:	469b      	mov	fp, r3
 800eb38:	45b1      	cmp	r9, r6
 800eb3a:	d337      	bcc.n	800ebac <__gethex+0x1d0>
 800eb3c:	f845 bb04 	str.w	fp, [r5], #4
 800eb40:	eba5 050a 	sub.w	r5, r5, sl
 800eb44:	10ad      	asrs	r5, r5, #2
 800eb46:	6125      	str	r5, [r4, #16]
 800eb48:	4658      	mov	r0, fp
 800eb4a:	f7fe fa1b 	bl	800cf84 <__hi0bits>
 800eb4e:	016d      	lsls	r5, r5, #5
 800eb50:	f8d8 6000 	ldr.w	r6, [r8]
 800eb54:	1a2d      	subs	r5, r5, r0
 800eb56:	42b5      	cmp	r5, r6
 800eb58:	dd54      	ble.n	800ec04 <__gethex+0x228>
 800eb5a:	1bad      	subs	r5, r5, r6
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f7fe fdaf 	bl	800d6c2 <__any_on>
 800eb64:	4681      	mov	r9, r0
 800eb66:	b178      	cbz	r0, 800eb88 <__gethex+0x1ac>
 800eb68:	1e6b      	subs	r3, r5, #1
 800eb6a:	1159      	asrs	r1, r3, #5
 800eb6c:	f003 021f 	and.w	r2, r3, #31
 800eb70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb74:	f04f 0901 	mov.w	r9, #1
 800eb78:	fa09 f202 	lsl.w	r2, r9, r2
 800eb7c:	420a      	tst	r2, r1
 800eb7e:	d003      	beq.n	800eb88 <__gethex+0x1ac>
 800eb80:	454b      	cmp	r3, r9
 800eb82:	dc36      	bgt.n	800ebf2 <__gethex+0x216>
 800eb84:	f04f 0902 	mov.w	r9, #2
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f7ff febe 	bl	800e90c <rshift>
 800eb90:	442f      	add	r7, r5
 800eb92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb96:	42bb      	cmp	r3, r7
 800eb98:	da42      	bge.n	800ec20 <__gethex+0x244>
 800eb9a:	9801      	ldr	r0, [sp, #4]
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f7fe f93f 	bl	800ce20 <_Bfree>
 800eba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eba4:	2300      	movs	r3, #0
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	25a3      	movs	r5, #163	@ 0xa3
 800ebaa:	e793      	b.n	800ead4 <__gethex+0xf8>
 800ebac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ebb0:	2a2e      	cmp	r2, #46	@ 0x2e
 800ebb2:	d012      	beq.n	800ebda <__gethex+0x1fe>
 800ebb4:	2b20      	cmp	r3, #32
 800ebb6:	d104      	bne.n	800ebc2 <__gethex+0x1e6>
 800ebb8:	f845 bb04 	str.w	fp, [r5], #4
 800ebbc:	f04f 0b00 	mov.w	fp, #0
 800ebc0:	465b      	mov	r3, fp
 800ebc2:	7830      	ldrb	r0, [r6, #0]
 800ebc4:	9303      	str	r3, [sp, #12]
 800ebc6:	f7ff fef3 	bl	800e9b0 <__hexdig_fun>
 800ebca:	9b03      	ldr	r3, [sp, #12]
 800ebcc:	f000 000f 	and.w	r0, r0, #15
 800ebd0:	4098      	lsls	r0, r3
 800ebd2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	e7ae      	b.n	800eb38 <__gethex+0x15c>
 800ebda:	45b1      	cmp	r9, r6
 800ebdc:	d8ea      	bhi.n	800ebb4 <__gethex+0x1d8>
 800ebde:	492b      	ldr	r1, [pc, #172]	@ (800ec8c <__gethex+0x2b0>)
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7ff fe2f 	bl	800e848 <strncmp>
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d1e1      	bne.n	800ebb4 <__gethex+0x1d8>
 800ebf0:	e7a2      	b.n	800eb38 <__gethex+0x15c>
 800ebf2:	1ea9      	subs	r1, r5, #2
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f7fe fd64 	bl	800d6c2 <__any_on>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0c2      	beq.n	800eb84 <__gethex+0x1a8>
 800ebfe:	f04f 0903 	mov.w	r9, #3
 800ec02:	e7c1      	b.n	800eb88 <__gethex+0x1ac>
 800ec04:	da09      	bge.n	800ec1a <__gethex+0x23e>
 800ec06:	1b75      	subs	r5, r6, r5
 800ec08:	4621      	mov	r1, r4
 800ec0a:	9801      	ldr	r0, [sp, #4]
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	f7fe fb1f 	bl	800d250 <__lshift>
 800ec12:	1b7f      	subs	r7, r7, r5
 800ec14:	4604      	mov	r4, r0
 800ec16:	f100 0a14 	add.w	sl, r0, #20
 800ec1a:	f04f 0900 	mov.w	r9, #0
 800ec1e:	e7b8      	b.n	800eb92 <__gethex+0x1b6>
 800ec20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec24:	42bd      	cmp	r5, r7
 800ec26:	dd6f      	ble.n	800ed08 <__gethex+0x32c>
 800ec28:	1bed      	subs	r5, r5, r7
 800ec2a:	42ae      	cmp	r6, r5
 800ec2c:	dc34      	bgt.n	800ec98 <__gethex+0x2bc>
 800ec2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec32:	2b02      	cmp	r3, #2
 800ec34:	d022      	beq.n	800ec7c <__gethex+0x2a0>
 800ec36:	2b03      	cmp	r3, #3
 800ec38:	d024      	beq.n	800ec84 <__gethex+0x2a8>
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d115      	bne.n	800ec6a <__gethex+0x28e>
 800ec3e:	42ae      	cmp	r6, r5
 800ec40:	d113      	bne.n	800ec6a <__gethex+0x28e>
 800ec42:	2e01      	cmp	r6, #1
 800ec44:	d10b      	bne.n	800ec5e <__gethex+0x282>
 800ec46:	9a02      	ldr	r2, [sp, #8]
 800ec48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
 800ec4e:	2301      	movs	r3, #1
 800ec50:	6123      	str	r3, [r4, #16]
 800ec52:	f8ca 3000 	str.w	r3, [sl]
 800ec56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec58:	2562      	movs	r5, #98	@ 0x62
 800ec5a:	601c      	str	r4, [r3, #0]
 800ec5c:	e73a      	b.n	800ead4 <__gethex+0xf8>
 800ec5e:	1e71      	subs	r1, r6, #1
 800ec60:	4620      	mov	r0, r4
 800ec62:	f7fe fd2e 	bl	800d6c2 <__any_on>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d1ed      	bne.n	800ec46 <__gethex+0x26a>
 800ec6a:	9801      	ldr	r0, [sp, #4]
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	f7fe f8d7 	bl	800ce20 <_Bfree>
 800ec72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec74:	2300      	movs	r3, #0
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	2550      	movs	r5, #80	@ 0x50
 800ec7a:	e72b      	b.n	800ead4 <__gethex+0xf8>
 800ec7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1f3      	bne.n	800ec6a <__gethex+0x28e>
 800ec82:	e7e0      	b.n	800ec46 <__gethex+0x26a>
 800ec84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1dd      	bne.n	800ec46 <__gethex+0x26a>
 800ec8a:	e7ee      	b.n	800ec6a <__gethex+0x28e>
 800ec8c:	080100d8 	.word	0x080100d8
 800ec90:	0800ff6d 	.word	0x0800ff6d
 800ec94:	08010286 	.word	0x08010286
 800ec98:	1e6f      	subs	r7, r5, #1
 800ec9a:	f1b9 0f00 	cmp.w	r9, #0
 800ec9e:	d130      	bne.n	800ed02 <__gethex+0x326>
 800eca0:	b127      	cbz	r7, 800ecac <__gethex+0x2d0>
 800eca2:	4639      	mov	r1, r7
 800eca4:	4620      	mov	r0, r4
 800eca6:	f7fe fd0c 	bl	800d6c2 <__any_on>
 800ecaa:	4681      	mov	r9, r0
 800ecac:	117a      	asrs	r2, r7, #5
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ecb4:	f007 071f 	and.w	r7, r7, #31
 800ecb8:	40bb      	lsls	r3, r7
 800ecba:	4213      	tst	r3, r2
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	bf18      	it	ne
 800ecc2:	f049 0902 	orrne.w	r9, r9, #2
 800ecc6:	f7ff fe21 	bl	800e90c <rshift>
 800ecca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ecce:	1b76      	subs	r6, r6, r5
 800ecd0:	2502      	movs	r5, #2
 800ecd2:	f1b9 0f00 	cmp.w	r9, #0
 800ecd6:	d047      	beq.n	800ed68 <__gethex+0x38c>
 800ecd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d015      	beq.n	800ed0c <__gethex+0x330>
 800ece0:	2b03      	cmp	r3, #3
 800ece2:	d017      	beq.n	800ed14 <__gethex+0x338>
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d109      	bne.n	800ecfc <__gethex+0x320>
 800ece8:	f019 0f02 	tst.w	r9, #2
 800ecec:	d006      	beq.n	800ecfc <__gethex+0x320>
 800ecee:	f8da 3000 	ldr.w	r3, [sl]
 800ecf2:	ea49 0903 	orr.w	r9, r9, r3
 800ecf6:	f019 0f01 	tst.w	r9, #1
 800ecfa:	d10e      	bne.n	800ed1a <__gethex+0x33e>
 800ecfc:	f045 0510 	orr.w	r5, r5, #16
 800ed00:	e032      	b.n	800ed68 <__gethex+0x38c>
 800ed02:	f04f 0901 	mov.w	r9, #1
 800ed06:	e7d1      	b.n	800ecac <__gethex+0x2d0>
 800ed08:	2501      	movs	r5, #1
 800ed0a:	e7e2      	b.n	800ecd2 <__gethex+0x2f6>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	f1c3 0301 	rsb	r3, r3, #1
 800ed12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0f0      	beq.n	800ecfc <__gethex+0x320>
 800ed1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed1e:	f104 0314 	add.w	r3, r4, #20
 800ed22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ed2a:	f04f 0c00 	mov.w	ip, #0
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed38:	d01b      	beq.n	800ed72 <__gethex+0x396>
 800ed3a:	3201      	adds	r2, #1
 800ed3c:	6002      	str	r2, [r0, #0]
 800ed3e:	2d02      	cmp	r5, #2
 800ed40:	f104 0314 	add.w	r3, r4, #20
 800ed44:	d13c      	bne.n	800edc0 <__gethex+0x3e4>
 800ed46:	f8d8 2000 	ldr.w	r2, [r8]
 800ed4a:	3a01      	subs	r2, #1
 800ed4c:	42b2      	cmp	r2, r6
 800ed4e:	d109      	bne.n	800ed64 <__gethex+0x388>
 800ed50:	1171      	asrs	r1, r6, #5
 800ed52:	2201      	movs	r2, #1
 800ed54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed58:	f006 061f 	and.w	r6, r6, #31
 800ed5c:	fa02 f606 	lsl.w	r6, r2, r6
 800ed60:	421e      	tst	r6, r3
 800ed62:	d13a      	bne.n	800edda <__gethex+0x3fe>
 800ed64:	f045 0520 	orr.w	r5, r5, #32
 800ed68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed6a:	601c      	str	r4, [r3, #0]
 800ed6c:	9b02      	ldr	r3, [sp, #8]
 800ed6e:	601f      	str	r7, [r3, #0]
 800ed70:	e6b0      	b.n	800ead4 <__gethex+0xf8>
 800ed72:	4299      	cmp	r1, r3
 800ed74:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed78:	d8d9      	bhi.n	800ed2e <__gethex+0x352>
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	459b      	cmp	fp, r3
 800ed7e:	db17      	blt.n	800edb0 <__gethex+0x3d4>
 800ed80:	6861      	ldr	r1, [r4, #4]
 800ed82:	9801      	ldr	r0, [sp, #4]
 800ed84:	3101      	adds	r1, #1
 800ed86:	f7fe f80b 	bl	800cda0 <_Balloc>
 800ed8a:	4681      	mov	r9, r0
 800ed8c:	b918      	cbnz	r0, 800ed96 <__gethex+0x3ba>
 800ed8e:	4b1a      	ldr	r3, [pc, #104]	@ (800edf8 <__gethex+0x41c>)
 800ed90:	4602      	mov	r2, r0
 800ed92:	2184      	movs	r1, #132	@ 0x84
 800ed94:	e6c5      	b.n	800eb22 <__gethex+0x146>
 800ed96:	6922      	ldr	r2, [r4, #16]
 800ed98:	3202      	adds	r2, #2
 800ed9a:	f104 010c 	add.w	r1, r4, #12
 800ed9e:	0092      	lsls	r2, r2, #2
 800eda0:	300c      	adds	r0, #12
 800eda2:	f7fd f89a 	bl	800beda <memcpy>
 800eda6:	4621      	mov	r1, r4
 800eda8:	9801      	ldr	r0, [sp, #4]
 800edaa:	f7fe f839 	bl	800ce20 <_Bfree>
 800edae:	464c      	mov	r4, r9
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edb8:	6122      	str	r2, [r4, #16]
 800edba:	2201      	movs	r2, #1
 800edbc:	615a      	str	r2, [r3, #20]
 800edbe:	e7be      	b.n	800ed3e <__gethex+0x362>
 800edc0:	6922      	ldr	r2, [r4, #16]
 800edc2:	455a      	cmp	r2, fp
 800edc4:	dd0b      	ble.n	800edde <__gethex+0x402>
 800edc6:	2101      	movs	r1, #1
 800edc8:	4620      	mov	r0, r4
 800edca:	f7ff fd9f 	bl	800e90c <rshift>
 800edce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edd2:	3701      	adds	r7, #1
 800edd4:	42bb      	cmp	r3, r7
 800edd6:	f6ff aee0 	blt.w	800eb9a <__gethex+0x1be>
 800edda:	2501      	movs	r5, #1
 800eddc:	e7c2      	b.n	800ed64 <__gethex+0x388>
 800edde:	f016 061f 	ands.w	r6, r6, #31
 800ede2:	d0fa      	beq.n	800edda <__gethex+0x3fe>
 800ede4:	4453      	add	r3, sl
 800ede6:	f1c6 0620 	rsb	r6, r6, #32
 800edea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edee:	f7fe f8c9 	bl	800cf84 <__hi0bits>
 800edf2:	42b0      	cmp	r0, r6
 800edf4:	dbe7      	blt.n	800edc6 <__gethex+0x3ea>
 800edf6:	e7f0      	b.n	800edda <__gethex+0x3fe>
 800edf8:	0800ff6d 	.word	0x0800ff6d

0800edfc <L_shift>:
 800edfc:	f1c2 0208 	rsb	r2, r2, #8
 800ee00:	0092      	lsls	r2, r2, #2
 800ee02:	b570      	push	{r4, r5, r6, lr}
 800ee04:	f1c2 0620 	rsb	r6, r2, #32
 800ee08:	6843      	ldr	r3, [r0, #4]
 800ee0a:	6804      	ldr	r4, [r0, #0]
 800ee0c:	fa03 f506 	lsl.w	r5, r3, r6
 800ee10:	432c      	orrs	r4, r5
 800ee12:	40d3      	lsrs	r3, r2
 800ee14:	6004      	str	r4, [r0, #0]
 800ee16:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee1a:	4288      	cmp	r0, r1
 800ee1c:	d3f4      	bcc.n	800ee08 <L_shift+0xc>
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}

0800ee20 <__match>:
 800ee20:	b530      	push	{r4, r5, lr}
 800ee22:	6803      	ldr	r3, [r0, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee2a:	b914      	cbnz	r4, 800ee32 <__match+0x12>
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	2001      	movs	r0, #1
 800ee30:	bd30      	pop	{r4, r5, pc}
 800ee32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ee3a:	2d19      	cmp	r5, #25
 800ee3c:	bf98      	it	ls
 800ee3e:	3220      	addls	r2, #32
 800ee40:	42a2      	cmp	r2, r4
 800ee42:	d0f0      	beq.n	800ee26 <__match+0x6>
 800ee44:	2000      	movs	r0, #0
 800ee46:	e7f3      	b.n	800ee30 <__match+0x10>

0800ee48 <__hexnan>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	680b      	ldr	r3, [r1, #0]
 800ee4e:	6801      	ldr	r1, [r0, #0]
 800ee50:	115e      	asrs	r6, r3, #5
 800ee52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee56:	f013 031f 	ands.w	r3, r3, #31
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	bf18      	it	ne
 800ee5e:	3604      	addne	r6, #4
 800ee60:	2500      	movs	r5, #0
 800ee62:	1f37      	subs	r7, r6, #4
 800ee64:	4682      	mov	sl, r0
 800ee66:	4690      	mov	r8, r2
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee6e:	46b9      	mov	r9, r7
 800ee70:	463c      	mov	r4, r7
 800ee72:	9502      	str	r5, [sp, #8]
 800ee74:	46ab      	mov	fp, r5
 800ee76:	784a      	ldrb	r2, [r1, #1]
 800ee78:	1c4b      	adds	r3, r1, #1
 800ee7a:	9303      	str	r3, [sp, #12]
 800ee7c:	b342      	cbz	r2, 800eed0 <__hexnan+0x88>
 800ee7e:	4610      	mov	r0, r2
 800ee80:	9105      	str	r1, [sp, #20]
 800ee82:	9204      	str	r2, [sp, #16]
 800ee84:	f7ff fd94 	bl	800e9b0 <__hexdig_fun>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d151      	bne.n	800ef30 <__hexnan+0xe8>
 800ee8c:	9a04      	ldr	r2, [sp, #16]
 800ee8e:	9905      	ldr	r1, [sp, #20]
 800ee90:	2a20      	cmp	r2, #32
 800ee92:	d818      	bhi.n	800eec6 <__hexnan+0x7e>
 800ee94:	9b02      	ldr	r3, [sp, #8]
 800ee96:	459b      	cmp	fp, r3
 800ee98:	dd13      	ble.n	800eec2 <__hexnan+0x7a>
 800ee9a:	454c      	cmp	r4, r9
 800ee9c:	d206      	bcs.n	800eeac <__hexnan+0x64>
 800ee9e:	2d07      	cmp	r5, #7
 800eea0:	dc04      	bgt.n	800eeac <__hexnan+0x64>
 800eea2:	462a      	mov	r2, r5
 800eea4:	4649      	mov	r1, r9
 800eea6:	4620      	mov	r0, r4
 800eea8:	f7ff ffa8 	bl	800edfc <L_shift>
 800eeac:	4544      	cmp	r4, r8
 800eeae:	d952      	bls.n	800ef56 <__hexnan+0x10e>
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	f1a4 0904 	sub.w	r9, r4, #4
 800eeb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800eeba:	f8cd b008 	str.w	fp, [sp, #8]
 800eebe:	464c      	mov	r4, r9
 800eec0:	461d      	mov	r5, r3
 800eec2:	9903      	ldr	r1, [sp, #12]
 800eec4:	e7d7      	b.n	800ee76 <__hexnan+0x2e>
 800eec6:	2a29      	cmp	r2, #41	@ 0x29
 800eec8:	d157      	bne.n	800ef7a <__hexnan+0x132>
 800eeca:	3102      	adds	r1, #2
 800eecc:	f8ca 1000 	str.w	r1, [sl]
 800eed0:	f1bb 0f00 	cmp.w	fp, #0
 800eed4:	d051      	beq.n	800ef7a <__hexnan+0x132>
 800eed6:	454c      	cmp	r4, r9
 800eed8:	d206      	bcs.n	800eee8 <__hexnan+0xa0>
 800eeda:	2d07      	cmp	r5, #7
 800eedc:	dc04      	bgt.n	800eee8 <__hexnan+0xa0>
 800eede:	462a      	mov	r2, r5
 800eee0:	4649      	mov	r1, r9
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff ff8a 	bl	800edfc <L_shift>
 800eee8:	4544      	cmp	r4, r8
 800eeea:	d936      	bls.n	800ef5a <__hexnan+0x112>
 800eeec:	f1a8 0204 	sub.w	r2, r8, #4
 800eef0:	4623      	mov	r3, r4
 800eef2:	f853 1b04 	ldr.w	r1, [r3], #4
 800eef6:	f842 1f04 	str.w	r1, [r2, #4]!
 800eefa:	429f      	cmp	r7, r3
 800eefc:	d2f9      	bcs.n	800eef2 <__hexnan+0xaa>
 800eefe:	1b3b      	subs	r3, r7, r4
 800ef00:	f023 0303 	bic.w	r3, r3, #3
 800ef04:	3304      	adds	r3, #4
 800ef06:	3401      	adds	r4, #1
 800ef08:	3e03      	subs	r6, #3
 800ef0a:	42b4      	cmp	r4, r6
 800ef0c:	bf88      	it	hi
 800ef0e:	2304      	movhi	r3, #4
 800ef10:	4443      	add	r3, r8
 800ef12:	2200      	movs	r2, #0
 800ef14:	f843 2b04 	str.w	r2, [r3], #4
 800ef18:	429f      	cmp	r7, r3
 800ef1a:	d2fb      	bcs.n	800ef14 <__hexnan+0xcc>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	b91b      	cbnz	r3, 800ef28 <__hexnan+0xe0>
 800ef20:	4547      	cmp	r7, r8
 800ef22:	d128      	bne.n	800ef76 <__hexnan+0x12e>
 800ef24:	2301      	movs	r3, #1
 800ef26:	603b      	str	r3, [r7, #0]
 800ef28:	2005      	movs	r0, #5
 800ef2a:	b007      	add	sp, #28
 800ef2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef30:	3501      	adds	r5, #1
 800ef32:	2d08      	cmp	r5, #8
 800ef34:	f10b 0b01 	add.w	fp, fp, #1
 800ef38:	dd06      	ble.n	800ef48 <__hexnan+0x100>
 800ef3a:	4544      	cmp	r4, r8
 800ef3c:	d9c1      	bls.n	800eec2 <__hexnan+0x7a>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef44:	2501      	movs	r5, #1
 800ef46:	3c04      	subs	r4, #4
 800ef48:	6822      	ldr	r2, [r4, #0]
 800ef4a:	f000 000f 	and.w	r0, r0, #15
 800ef4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef52:	6020      	str	r0, [r4, #0]
 800ef54:	e7b5      	b.n	800eec2 <__hexnan+0x7a>
 800ef56:	2508      	movs	r5, #8
 800ef58:	e7b3      	b.n	800eec2 <__hexnan+0x7a>
 800ef5a:	9b01      	ldr	r3, [sp, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d0dd      	beq.n	800ef1c <__hexnan+0xd4>
 800ef60:	f1c3 0320 	rsb	r3, r3, #32
 800ef64:	f04f 32ff 	mov.w	r2, #4294967295
 800ef68:	40da      	lsrs	r2, r3
 800ef6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef6e:	4013      	ands	r3, r2
 800ef70:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef74:	e7d2      	b.n	800ef1c <__hexnan+0xd4>
 800ef76:	3f04      	subs	r7, #4
 800ef78:	e7d0      	b.n	800ef1c <__hexnan+0xd4>
 800ef7a:	2004      	movs	r0, #4
 800ef7c:	e7d5      	b.n	800ef2a <__hexnan+0xe2>

0800ef7e <__ascii_mbtowc>:
 800ef7e:	b082      	sub	sp, #8
 800ef80:	b901      	cbnz	r1, 800ef84 <__ascii_mbtowc+0x6>
 800ef82:	a901      	add	r1, sp, #4
 800ef84:	b142      	cbz	r2, 800ef98 <__ascii_mbtowc+0x1a>
 800ef86:	b14b      	cbz	r3, 800ef9c <__ascii_mbtowc+0x1e>
 800ef88:	7813      	ldrb	r3, [r2, #0]
 800ef8a:	600b      	str	r3, [r1, #0]
 800ef8c:	7812      	ldrb	r2, [r2, #0]
 800ef8e:	1e10      	subs	r0, r2, #0
 800ef90:	bf18      	it	ne
 800ef92:	2001      	movne	r0, #1
 800ef94:	b002      	add	sp, #8
 800ef96:	4770      	bx	lr
 800ef98:	4610      	mov	r0, r2
 800ef9a:	e7fb      	b.n	800ef94 <__ascii_mbtowc+0x16>
 800ef9c:	f06f 0001 	mvn.w	r0, #1
 800efa0:	e7f8      	b.n	800ef94 <__ascii_mbtowc+0x16>

0800efa2 <_realloc_r>:
 800efa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa6:	4680      	mov	r8, r0
 800efa8:	4615      	mov	r5, r2
 800efaa:	460c      	mov	r4, r1
 800efac:	b921      	cbnz	r1, 800efb8 <_realloc_r+0x16>
 800efae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	4611      	mov	r1, r2
 800efb4:	f7fd be68 	b.w	800cc88 <_malloc_r>
 800efb8:	b92a      	cbnz	r2, 800efc6 <_realloc_r+0x24>
 800efba:	f7fd fdf1 	bl	800cba0 <_free_r>
 800efbe:	2400      	movs	r4, #0
 800efc0:	4620      	mov	r0, r4
 800efc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc6:	f000 f840 	bl	800f04a <_malloc_usable_size_r>
 800efca:	4285      	cmp	r5, r0
 800efcc:	4606      	mov	r6, r0
 800efce:	d802      	bhi.n	800efd6 <_realloc_r+0x34>
 800efd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800efd4:	d8f4      	bhi.n	800efc0 <_realloc_r+0x1e>
 800efd6:	4629      	mov	r1, r5
 800efd8:	4640      	mov	r0, r8
 800efda:	f7fd fe55 	bl	800cc88 <_malloc_r>
 800efde:	4607      	mov	r7, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d0ec      	beq.n	800efbe <_realloc_r+0x1c>
 800efe4:	42b5      	cmp	r5, r6
 800efe6:	462a      	mov	r2, r5
 800efe8:	4621      	mov	r1, r4
 800efea:	bf28      	it	cs
 800efec:	4632      	movcs	r2, r6
 800efee:	f7fc ff74 	bl	800beda <memcpy>
 800eff2:	4621      	mov	r1, r4
 800eff4:	4640      	mov	r0, r8
 800eff6:	f7fd fdd3 	bl	800cba0 <_free_r>
 800effa:	463c      	mov	r4, r7
 800effc:	e7e0      	b.n	800efc0 <_realloc_r+0x1e>

0800effe <__ascii_wctomb>:
 800effe:	4603      	mov	r3, r0
 800f000:	4608      	mov	r0, r1
 800f002:	b141      	cbz	r1, 800f016 <__ascii_wctomb+0x18>
 800f004:	2aff      	cmp	r2, #255	@ 0xff
 800f006:	d904      	bls.n	800f012 <__ascii_wctomb+0x14>
 800f008:	228a      	movs	r2, #138	@ 0x8a
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295
 800f010:	4770      	bx	lr
 800f012:	700a      	strb	r2, [r1, #0]
 800f014:	2001      	movs	r0, #1
 800f016:	4770      	bx	lr

0800f018 <fiprintf>:
 800f018:	b40e      	push	{r1, r2, r3}
 800f01a:	b503      	push	{r0, r1, lr}
 800f01c:	4601      	mov	r1, r0
 800f01e:	ab03      	add	r3, sp, #12
 800f020:	4805      	ldr	r0, [pc, #20]	@ (800f038 <fiprintf+0x20>)
 800f022:	f853 2b04 	ldr.w	r2, [r3], #4
 800f026:	6800      	ldr	r0, [r0, #0]
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	f000 f83f 	bl	800f0ac <_vfiprintf_r>
 800f02e:	b002      	add	sp, #8
 800f030:	f85d eb04 	ldr.w	lr, [sp], #4
 800f034:	b003      	add	sp, #12
 800f036:	4770      	bx	lr
 800f038:	200000b4 	.word	0x200000b4

0800f03c <abort>:
 800f03c:	b508      	push	{r3, lr}
 800f03e:	2006      	movs	r0, #6
 800f040:	f000 fa08 	bl	800f454 <raise>
 800f044:	2001      	movs	r0, #1
 800f046:	f000 fe63 	bl	800fd10 <_exit>

0800f04a <_malloc_usable_size_r>:
 800f04a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f04e:	1f18      	subs	r0, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	bfbc      	itt	lt
 800f054:	580b      	ldrlt	r3, [r1, r0]
 800f056:	18c0      	addlt	r0, r0, r3
 800f058:	4770      	bx	lr

0800f05a <__sfputc_r>:
 800f05a:	6893      	ldr	r3, [r2, #8]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	b410      	push	{r4}
 800f062:	6093      	str	r3, [r2, #8]
 800f064:	da08      	bge.n	800f078 <__sfputc_r+0x1e>
 800f066:	6994      	ldr	r4, [r2, #24]
 800f068:	42a3      	cmp	r3, r4
 800f06a:	db01      	blt.n	800f070 <__sfputc_r+0x16>
 800f06c:	290a      	cmp	r1, #10
 800f06e:	d103      	bne.n	800f078 <__sfputc_r+0x1e>
 800f070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f074:	f000 b932 	b.w	800f2dc <__swbuf_r>
 800f078:	6813      	ldr	r3, [r2, #0]
 800f07a:	1c58      	adds	r0, r3, #1
 800f07c:	6010      	str	r0, [r2, #0]
 800f07e:	7019      	strb	r1, [r3, #0]
 800f080:	4608      	mov	r0, r1
 800f082:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <__sfputs_r>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	4606      	mov	r6, r0
 800f08c:	460f      	mov	r7, r1
 800f08e:	4614      	mov	r4, r2
 800f090:	18d5      	adds	r5, r2, r3
 800f092:	42ac      	cmp	r4, r5
 800f094:	d101      	bne.n	800f09a <__sfputs_r+0x12>
 800f096:	2000      	movs	r0, #0
 800f098:	e007      	b.n	800f0aa <__sfputs_r+0x22>
 800f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09e:	463a      	mov	r2, r7
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f7ff ffda 	bl	800f05a <__sfputc_r>
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	d1f3      	bne.n	800f092 <__sfputs_r+0xa>
 800f0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0ac <_vfiprintf_r>:
 800f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	b09d      	sub	sp, #116	@ 0x74
 800f0b4:	4614      	mov	r4, r2
 800f0b6:	4698      	mov	r8, r3
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	b118      	cbz	r0, 800f0c4 <_vfiprintf_r+0x18>
 800f0bc:	6a03      	ldr	r3, [r0, #32]
 800f0be:	b90b      	cbnz	r3, 800f0c4 <_vfiprintf_r+0x18>
 800f0c0:	f7fc fda2 	bl	800bc08 <__sinit>
 800f0c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0c6:	07d9      	lsls	r1, r3, #31
 800f0c8:	d405      	bmi.n	800f0d6 <_vfiprintf_r+0x2a>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	059a      	lsls	r2, r3, #22
 800f0ce:	d402      	bmi.n	800f0d6 <_vfiprintf_r+0x2a>
 800f0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0d2:	f7fc ff00 	bl	800bed6 <__retarget_lock_acquire_recursive>
 800f0d6:	89ab      	ldrh	r3, [r5, #12]
 800f0d8:	071b      	lsls	r3, r3, #28
 800f0da:	d501      	bpl.n	800f0e0 <_vfiprintf_r+0x34>
 800f0dc:	692b      	ldr	r3, [r5, #16]
 800f0de:	b99b      	cbnz	r3, 800f108 <_vfiprintf_r+0x5c>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f000 f938 	bl	800f358 <__swsetup_r>
 800f0e8:	b170      	cbz	r0, 800f108 <_vfiprintf_r+0x5c>
 800f0ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0ec:	07dc      	lsls	r4, r3, #31
 800f0ee:	d504      	bpl.n	800f0fa <_vfiprintf_r+0x4e>
 800f0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f4:	b01d      	add	sp, #116	@ 0x74
 800f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fa:	89ab      	ldrh	r3, [r5, #12]
 800f0fc:	0598      	lsls	r0, r3, #22
 800f0fe:	d4f7      	bmi.n	800f0f0 <_vfiprintf_r+0x44>
 800f100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f102:	f7fc fee9 	bl	800bed8 <__retarget_lock_release_recursive>
 800f106:	e7f3      	b.n	800f0f0 <_vfiprintf_r+0x44>
 800f108:	2300      	movs	r3, #0
 800f10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f10c:	2320      	movs	r3, #32
 800f10e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f112:	f8cd 800c 	str.w	r8, [sp, #12]
 800f116:	2330      	movs	r3, #48	@ 0x30
 800f118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f2c8 <_vfiprintf_r+0x21c>
 800f11c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f120:	f04f 0901 	mov.w	r9, #1
 800f124:	4623      	mov	r3, r4
 800f126:	469a      	mov	sl, r3
 800f128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f12c:	b10a      	cbz	r2, 800f132 <_vfiprintf_r+0x86>
 800f12e:	2a25      	cmp	r2, #37	@ 0x25
 800f130:	d1f9      	bne.n	800f126 <_vfiprintf_r+0x7a>
 800f132:	ebba 0b04 	subs.w	fp, sl, r4
 800f136:	d00b      	beq.n	800f150 <_vfiprintf_r+0xa4>
 800f138:	465b      	mov	r3, fp
 800f13a:	4622      	mov	r2, r4
 800f13c:	4629      	mov	r1, r5
 800f13e:	4630      	mov	r0, r6
 800f140:	f7ff ffa2 	bl	800f088 <__sfputs_r>
 800f144:	3001      	adds	r0, #1
 800f146:	f000 80a7 	beq.w	800f298 <_vfiprintf_r+0x1ec>
 800f14a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f14c:	445a      	add	r2, fp
 800f14e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f150:	f89a 3000 	ldrb.w	r3, [sl]
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 809f 	beq.w	800f298 <_vfiprintf_r+0x1ec>
 800f15a:	2300      	movs	r3, #0
 800f15c:	f04f 32ff 	mov.w	r2, #4294967295
 800f160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f164:	f10a 0a01 	add.w	sl, sl, #1
 800f168:	9304      	str	r3, [sp, #16]
 800f16a:	9307      	str	r3, [sp, #28]
 800f16c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f170:	931a      	str	r3, [sp, #104]	@ 0x68
 800f172:	4654      	mov	r4, sl
 800f174:	2205      	movs	r2, #5
 800f176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f17a:	4853      	ldr	r0, [pc, #332]	@ (800f2c8 <_vfiprintf_r+0x21c>)
 800f17c:	f7f1 f828 	bl	80001d0 <memchr>
 800f180:	9a04      	ldr	r2, [sp, #16]
 800f182:	b9d8      	cbnz	r0, 800f1bc <_vfiprintf_r+0x110>
 800f184:	06d1      	lsls	r1, r2, #27
 800f186:	bf44      	itt	mi
 800f188:	2320      	movmi	r3, #32
 800f18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f18e:	0713      	lsls	r3, r2, #28
 800f190:	bf44      	itt	mi
 800f192:	232b      	movmi	r3, #43	@ 0x2b
 800f194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f198:	f89a 3000 	ldrb.w	r3, [sl]
 800f19c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f19e:	d015      	beq.n	800f1cc <_vfiprintf_r+0x120>
 800f1a0:	9a07      	ldr	r2, [sp, #28]
 800f1a2:	4654      	mov	r4, sl
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f04f 0c0a 	mov.w	ip, #10
 800f1aa:	4621      	mov	r1, r4
 800f1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1b0:	3b30      	subs	r3, #48	@ 0x30
 800f1b2:	2b09      	cmp	r3, #9
 800f1b4:	d94b      	bls.n	800f24e <_vfiprintf_r+0x1a2>
 800f1b6:	b1b0      	cbz	r0, 800f1e6 <_vfiprintf_r+0x13a>
 800f1b8:	9207      	str	r2, [sp, #28]
 800f1ba:	e014      	b.n	800f1e6 <_vfiprintf_r+0x13a>
 800f1bc:	eba0 0308 	sub.w	r3, r0, r8
 800f1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	9304      	str	r3, [sp, #16]
 800f1c8:	46a2      	mov	sl, r4
 800f1ca:	e7d2      	b.n	800f172 <_vfiprintf_r+0xc6>
 800f1cc:	9b03      	ldr	r3, [sp, #12]
 800f1ce:	1d19      	adds	r1, r3, #4
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	9103      	str	r1, [sp, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	bfbb      	ittet	lt
 800f1d8:	425b      	neglt	r3, r3
 800f1da:	f042 0202 	orrlt.w	r2, r2, #2
 800f1de:	9307      	strge	r3, [sp, #28]
 800f1e0:	9307      	strlt	r3, [sp, #28]
 800f1e2:	bfb8      	it	lt
 800f1e4:	9204      	strlt	r2, [sp, #16]
 800f1e6:	7823      	ldrb	r3, [r4, #0]
 800f1e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1ea:	d10a      	bne.n	800f202 <_vfiprintf_r+0x156>
 800f1ec:	7863      	ldrb	r3, [r4, #1]
 800f1ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1f0:	d132      	bne.n	800f258 <_vfiprintf_r+0x1ac>
 800f1f2:	9b03      	ldr	r3, [sp, #12]
 800f1f4:	1d1a      	adds	r2, r3, #4
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	9203      	str	r2, [sp, #12]
 800f1fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1fe:	3402      	adds	r4, #2
 800f200:	9305      	str	r3, [sp, #20]
 800f202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2d8 <_vfiprintf_r+0x22c>
 800f206:	7821      	ldrb	r1, [r4, #0]
 800f208:	2203      	movs	r2, #3
 800f20a:	4650      	mov	r0, sl
 800f20c:	f7f0 ffe0 	bl	80001d0 <memchr>
 800f210:	b138      	cbz	r0, 800f222 <_vfiprintf_r+0x176>
 800f212:	9b04      	ldr	r3, [sp, #16]
 800f214:	eba0 000a 	sub.w	r0, r0, sl
 800f218:	2240      	movs	r2, #64	@ 0x40
 800f21a:	4082      	lsls	r2, r0
 800f21c:	4313      	orrs	r3, r2
 800f21e:	3401      	adds	r4, #1
 800f220:	9304      	str	r3, [sp, #16]
 800f222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f226:	4829      	ldr	r0, [pc, #164]	@ (800f2cc <_vfiprintf_r+0x220>)
 800f228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f22c:	2206      	movs	r2, #6
 800f22e:	f7f0 ffcf 	bl	80001d0 <memchr>
 800f232:	2800      	cmp	r0, #0
 800f234:	d03f      	beq.n	800f2b6 <_vfiprintf_r+0x20a>
 800f236:	4b26      	ldr	r3, [pc, #152]	@ (800f2d0 <_vfiprintf_r+0x224>)
 800f238:	bb1b      	cbnz	r3, 800f282 <_vfiprintf_r+0x1d6>
 800f23a:	9b03      	ldr	r3, [sp, #12]
 800f23c:	3307      	adds	r3, #7
 800f23e:	f023 0307 	bic.w	r3, r3, #7
 800f242:	3308      	adds	r3, #8
 800f244:	9303      	str	r3, [sp, #12]
 800f246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f248:	443b      	add	r3, r7
 800f24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f24c:	e76a      	b.n	800f124 <_vfiprintf_r+0x78>
 800f24e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f252:	460c      	mov	r4, r1
 800f254:	2001      	movs	r0, #1
 800f256:	e7a8      	b.n	800f1aa <_vfiprintf_r+0xfe>
 800f258:	2300      	movs	r3, #0
 800f25a:	3401      	adds	r4, #1
 800f25c:	9305      	str	r3, [sp, #20]
 800f25e:	4619      	mov	r1, r3
 800f260:	f04f 0c0a 	mov.w	ip, #10
 800f264:	4620      	mov	r0, r4
 800f266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f26a:	3a30      	subs	r2, #48	@ 0x30
 800f26c:	2a09      	cmp	r2, #9
 800f26e:	d903      	bls.n	800f278 <_vfiprintf_r+0x1cc>
 800f270:	2b00      	cmp	r3, #0
 800f272:	d0c6      	beq.n	800f202 <_vfiprintf_r+0x156>
 800f274:	9105      	str	r1, [sp, #20]
 800f276:	e7c4      	b.n	800f202 <_vfiprintf_r+0x156>
 800f278:	fb0c 2101 	mla	r1, ip, r1, r2
 800f27c:	4604      	mov	r4, r0
 800f27e:	2301      	movs	r3, #1
 800f280:	e7f0      	b.n	800f264 <_vfiprintf_r+0x1b8>
 800f282:	ab03      	add	r3, sp, #12
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	462a      	mov	r2, r5
 800f288:	4b12      	ldr	r3, [pc, #72]	@ (800f2d4 <_vfiprintf_r+0x228>)
 800f28a:	a904      	add	r1, sp, #16
 800f28c:	4630      	mov	r0, r6
 800f28e:	f7fb fe63 	bl	800af58 <_printf_float>
 800f292:	4607      	mov	r7, r0
 800f294:	1c78      	adds	r0, r7, #1
 800f296:	d1d6      	bne.n	800f246 <_vfiprintf_r+0x19a>
 800f298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f29a:	07d9      	lsls	r1, r3, #31
 800f29c:	d405      	bmi.n	800f2aa <_vfiprintf_r+0x1fe>
 800f29e:	89ab      	ldrh	r3, [r5, #12]
 800f2a0:	059a      	lsls	r2, r3, #22
 800f2a2:	d402      	bmi.n	800f2aa <_vfiprintf_r+0x1fe>
 800f2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2a6:	f7fc fe17 	bl	800bed8 <__retarget_lock_release_recursive>
 800f2aa:	89ab      	ldrh	r3, [r5, #12]
 800f2ac:	065b      	lsls	r3, r3, #25
 800f2ae:	f53f af1f 	bmi.w	800f0f0 <_vfiprintf_r+0x44>
 800f2b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2b4:	e71e      	b.n	800f0f4 <_vfiprintf_r+0x48>
 800f2b6:	ab03      	add	r3, sp, #12
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	4b05      	ldr	r3, [pc, #20]	@ (800f2d4 <_vfiprintf_r+0x228>)
 800f2be:	a904      	add	r1, sp, #16
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7fc f8e1 	bl	800b488 <_printf_i>
 800f2c6:	e7e4      	b.n	800f292 <_vfiprintf_r+0x1e6>
 800f2c8:	08010231 	.word	0x08010231
 800f2cc:	0801023b 	.word	0x0801023b
 800f2d0:	0800af59 	.word	0x0800af59
 800f2d4:	0800f089 	.word	0x0800f089
 800f2d8:	08010237 	.word	0x08010237

0800f2dc <__swbuf_r>:
 800f2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2de:	460e      	mov	r6, r1
 800f2e0:	4614      	mov	r4, r2
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	b118      	cbz	r0, 800f2ee <__swbuf_r+0x12>
 800f2e6:	6a03      	ldr	r3, [r0, #32]
 800f2e8:	b90b      	cbnz	r3, 800f2ee <__swbuf_r+0x12>
 800f2ea:	f7fc fc8d 	bl	800bc08 <__sinit>
 800f2ee:	69a3      	ldr	r3, [r4, #24]
 800f2f0:	60a3      	str	r3, [r4, #8]
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	071a      	lsls	r2, r3, #28
 800f2f6:	d501      	bpl.n	800f2fc <__swbuf_r+0x20>
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	b943      	cbnz	r3, 800f30e <__swbuf_r+0x32>
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	4628      	mov	r0, r5
 800f300:	f000 f82a 	bl	800f358 <__swsetup_r>
 800f304:	b118      	cbz	r0, 800f30e <__swbuf_r+0x32>
 800f306:	f04f 37ff 	mov.w	r7, #4294967295
 800f30a:	4638      	mov	r0, r7
 800f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	6922      	ldr	r2, [r4, #16]
 800f312:	1a98      	subs	r0, r3, r2
 800f314:	6963      	ldr	r3, [r4, #20]
 800f316:	b2f6      	uxtb	r6, r6
 800f318:	4283      	cmp	r3, r0
 800f31a:	4637      	mov	r7, r6
 800f31c:	dc05      	bgt.n	800f32a <__swbuf_r+0x4e>
 800f31e:	4621      	mov	r1, r4
 800f320:	4628      	mov	r0, r5
 800f322:	f7ff fa4f 	bl	800e7c4 <_fflush_r>
 800f326:	2800      	cmp	r0, #0
 800f328:	d1ed      	bne.n	800f306 <__swbuf_r+0x2a>
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	60a3      	str	r3, [r4, #8]
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	1c5a      	adds	r2, r3, #1
 800f334:	6022      	str	r2, [r4, #0]
 800f336:	701e      	strb	r6, [r3, #0]
 800f338:	6962      	ldr	r2, [r4, #20]
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d004      	beq.n	800f34a <__swbuf_r+0x6e>
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	07db      	lsls	r3, r3, #31
 800f344:	d5e1      	bpl.n	800f30a <__swbuf_r+0x2e>
 800f346:	2e0a      	cmp	r6, #10
 800f348:	d1df      	bne.n	800f30a <__swbuf_r+0x2e>
 800f34a:	4621      	mov	r1, r4
 800f34c:	4628      	mov	r0, r5
 800f34e:	f7ff fa39 	bl	800e7c4 <_fflush_r>
 800f352:	2800      	cmp	r0, #0
 800f354:	d0d9      	beq.n	800f30a <__swbuf_r+0x2e>
 800f356:	e7d6      	b.n	800f306 <__swbuf_r+0x2a>

0800f358 <__swsetup_r>:
 800f358:	b538      	push	{r3, r4, r5, lr}
 800f35a:	4b29      	ldr	r3, [pc, #164]	@ (800f400 <__swsetup_r+0xa8>)
 800f35c:	4605      	mov	r5, r0
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	460c      	mov	r4, r1
 800f362:	b118      	cbz	r0, 800f36c <__swsetup_r+0x14>
 800f364:	6a03      	ldr	r3, [r0, #32]
 800f366:	b90b      	cbnz	r3, 800f36c <__swsetup_r+0x14>
 800f368:	f7fc fc4e 	bl	800bc08 <__sinit>
 800f36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f370:	0719      	lsls	r1, r3, #28
 800f372:	d422      	bmi.n	800f3ba <__swsetup_r+0x62>
 800f374:	06da      	lsls	r2, r3, #27
 800f376:	d407      	bmi.n	800f388 <__swsetup_r+0x30>
 800f378:	2209      	movs	r2, #9
 800f37a:	602a      	str	r2, [r5, #0]
 800f37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	f04f 30ff 	mov.w	r0, #4294967295
 800f386:	e033      	b.n	800f3f0 <__swsetup_r+0x98>
 800f388:	0758      	lsls	r0, r3, #29
 800f38a:	d512      	bpl.n	800f3b2 <__swsetup_r+0x5a>
 800f38c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f38e:	b141      	cbz	r1, 800f3a2 <__swsetup_r+0x4a>
 800f390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f394:	4299      	cmp	r1, r3
 800f396:	d002      	beq.n	800f39e <__swsetup_r+0x46>
 800f398:	4628      	mov	r0, r5
 800f39a:	f7fd fc01 	bl	800cba0 <_free_r>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	6923      	ldr	r3, [r4, #16]
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f043 0308 	orr.w	r3, r3, #8
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	b94b      	cbnz	r3, 800f3d2 <__swsetup_r+0x7a>
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f3c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f3c8:	d003      	beq.n	800f3d2 <__swsetup_r+0x7a>
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f000 f883 	bl	800f4d8 <__smakebuf_r>
 800f3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d6:	f013 0201 	ands.w	r2, r3, #1
 800f3da:	d00a      	beq.n	800f3f2 <__swsetup_r+0x9a>
 800f3dc:	2200      	movs	r2, #0
 800f3de:	60a2      	str	r2, [r4, #8]
 800f3e0:	6962      	ldr	r2, [r4, #20]
 800f3e2:	4252      	negs	r2, r2
 800f3e4:	61a2      	str	r2, [r4, #24]
 800f3e6:	6922      	ldr	r2, [r4, #16]
 800f3e8:	b942      	cbnz	r2, 800f3fc <__swsetup_r+0xa4>
 800f3ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3ee:	d1c5      	bne.n	800f37c <__swsetup_r+0x24>
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	0799      	lsls	r1, r3, #30
 800f3f4:	bf58      	it	pl
 800f3f6:	6962      	ldrpl	r2, [r4, #20]
 800f3f8:	60a2      	str	r2, [r4, #8]
 800f3fa:	e7f4      	b.n	800f3e6 <__swsetup_r+0x8e>
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e7f7      	b.n	800f3f0 <__swsetup_r+0x98>
 800f400:	200000b4 	.word	0x200000b4

0800f404 <_raise_r>:
 800f404:	291f      	cmp	r1, #31
 800f406:	b538      	push	{r3, r4, r5, lr}
 800f408:	4605      	mov	r5, r0
 800f40a:	460c      	mov	r4, r1
 800f40c:	d904      	bls.n	800f418 <_raise_r+0x14>
 800f40e:	2316      	movs	r3, #22
 800f410:	6003      	str	r3, [r0, #0]
 800f412:	f04f 30ff 	mov.w	r0, #4294967295
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f41a:	b112      	cbz	r2, 800f422 <_raise_r+0x1e>
 800f41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f420:	b94b      	cbnz	r3, 800f436 <_raise_r+0x32>
 800f422:	4628      	mov	r0, r5
 800f424:	f000 f830 	bl	800f488 <_getpid_r>
 800f428:	4622      	mov	r2, r4
 800f42a:	4601      	mov	r1, r0
 800f42c:	4628      	mov	r0, r5
 800f42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f432:	f000 b817 	b.w	800f464 <_kill_r>
 800f436:	2b01      	cmp	r3, #1
 800f438:	d00a      	beq.n	800f450 <_raise_r+0x4c>
 800f43a:	1c59      	adds	r1, r3, #1
 800f43c:	d103      	bne.n	800f446 <_raise_r+0x42>
 800f43e:	2316      	movs	r3, #22
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	2001      	movs	r0, #1
 800f444:	e7e7      	b.n	800f416 <_raise_r+0x12>
 800f446:	2100      	movs	r1, #0
 800f448:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f44c:	4620      	mov	r0, r4
 800f44e:	4798      	blx	r3
 800f450:	2000      	movs	r0, #0
 800f452:	e7e0      	b.n	800f416 <_raise_r+0x12>

0800f454 <raise>:
 800f454:	4b02      	ldr	r3, [pc, #8]	@ (800f460 <raise+0xc>)
 800f456:	4601      	mov	r1, r0
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	f7ff bfd3 	b.w	800f404 <_raise_r>
 800f45e:	bf00      	nop
 800f460:	200000b4 	.word	0x200000b4

0800f464 <_kill_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d07      	ldr	r5, [pc, #28]	@ (800f484 <_kill_r+0x20>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	4611      	mov	r1, r2
 800f470:	602b      	str	r3, [r5, #0]
 800f472:	f000 fc1f 	bl	800fcb4 <_kill>
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	d102      	bne.n	800f480 <_kill_r+0x1c>
 800f47a:	682b      	ldr	r3, [r5, #0]
 800f47c:	b103      	cbz	r3, 800f480 <_kill_r+0x1c>
 800f47e:	6023      	str	r3, [r4, #0]
 800f480:	bd38      	pop	{r3, r4, r5, pc}
 800f482:	bf00      	nop
 800f484:	200031c8 	.word	0x200031c8

0800f488 <_getpid_r>:
 800f488:	f000 bc04 	b.w	800fc94 <_getpid>

0800f48c <__swhatbuf_r>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	460c      	mov	r4, r1
 800f490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f494:	2900      	cmp	r1, #0
 800f496:	b096      	sub	sp, #88	@ 0x58
 800f498:	4615      	mov	r5, r2
 800f49a:	461e      	mov	r6, r3
 800f49c:	da0d      	bge.n	800f4ba <__swhatbuf_r+0x2e>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f4a4:	f04f 0100 	mov.w	r1, #0
 800f4a8:	bf14      	ite	ne
 800f4aa:	2340      	movne	r3, #64	@ 0x40
 800f4ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	6031      	str	r1, [r6, #0]
 800f4b4:	602b      	str	r3, [r5, #0]
 800f4b6:	b016      	add	sp, #88	@ 0x58
 800f4b8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ba:	466a      	mov	r2, sp
 800f4bc:	f000 f848 	bl	800f550 <_fstat_r>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	dbec      	blt.n	800f49e <__swhatbuf_r+0x12>
 800f4c4:	9901      	ldr	r1, [sp, #4]
 800f4c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f4ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f4ce:	4259      	negs	r1, r3
 800f4d0:	4159      	adcs	r1, r3
 800f4d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4d6:	e7eb      	b.n	800f4b0 <__swhatbuf_r+0x24>

0800f4d8 <__smakebuf_r>:
 800f4d8:	898b      	ldrh	r3, [r1, #12]
 800f4da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4dc:	079d      	lsls	r5, r3, #30
 800f4de:	4606      	mov	r6, r0
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	d507      	bpl.n	800f4f4 <__smakebuf_r+0x1c>
 800f4e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	6163      	str	r3, [r4, #20]
 800f4f0:	b003      	add	sp, #12
 800f4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4f4:	ab01      	add	r3, sp, #4
 800f4f6:	466a      	mov	r2, sp
 800f4f8:	f7ff ffc8 	bl	800f48c <__swhatbuf_r>
 800f4fc:	9f00      	ldr	r7, [sp, #0]
 800f4fe:	4605      	mov	r5, r0
 800f500:	4639      	mov	r1, r7
 800f502:	4630      	mov	r0, r6
 800f504:	f7fd fbc0 	bl	800cc88 <_malloc_r>
 800f508:	b948      	cbnz	r0, 800f51e <__smakebuf_r+0x46>
 800f50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f50e:	059a      	lsls	r2, r3, #22
 800f510:	d4ee      	bmi.n	800f4f0 <__smakebuf_r+0x18>
 800f512:	f023 0303 	bic.w	r3, r3, #3
 800f516:	f043 0302 	orr.w	r3, r3, #2
 800f51a:	81a3      	strh	r3, [r4, #12]
 800f51c:	e7e2      	b.n	800f4e4 <__smakebuf_r+0xc>
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	6020      	str	r0, [r4, #0]
 800f522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f526:	81a3      	strh	r3, [r4, #12]
 800f528:	9b01      	ldr	r3, [sp, #4]
 800f52a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f52e:	b15b      	cbz	r3, 800f548 <__smakebuf_r+0x70>
 800f530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f534:	4630      	mov	r0, r6
 800f536:	f000 f81d 	bl	800f574 <_isatty_r>
 800f53a:	b128      	cbz	r0, 800f548 <__smakebuf_r+0x70>
 800f53c:	89a3      	ldrh	r3, [r4, #12]
 800f53e:	f023 0303 	bic.w	r3, r3, #3
 800f542:	f043 0301 	orr.w	r3, r3, #1
 800f546:	81a3      	strh	r3, [r4, #12]
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	431d      	orrs	r5, r3
 800f54c:	81a5      	strh	r5, [r4, #12]
 800f54e:	e7cf      	b.n	800f4f0 <__smakebuf_r+0x18>

0800f550 <_fstat_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4d07      	ldr	r5, [pc, #28]	@ (800f570 <_fstat_r+0x20>)
 800f554:	2300      	movs	r3, #0
 800f556:	4604      	mov	r4, r0
 800f558:	4608      	mov	r0, r1
 800f55a:	4611      	mov	r1, r2
 800f55c:	602b      	str	r3, [r5, #0]
 800f55e:	f000 fb91 	bl	800fc84 <_fstat>
 800f562:	1c43      	adds	r3, r0, #1
 800f564:	d102      	bne.n	800f56c <_fstat_r+0x1c>
 800f566:	682b      	ldr	r3, [r5, #0]
 800f568:	b103      	cbz	r3, 800f56c <_fstat_r+0x1c>
 800f56a:	6023      	str	r3, [r4, #0]
 800f56c:	bd38      	pop	{r3, r4, r5, pc}
 800f56e:	bf00      	nop
 800f570:	200031c8 	.word	0x200031c8

0800f574 <_isatty_r>:
 800f574:	b538      	push	{r3, r4, r5, lr}
 800f576:	4d06      	ldr	r5, [pc, #24]	@ (800f590 <_isatty_r+0x1c>)
 800f578:	2300      	movs	r3, #0
 800f57a:	4604      	mov	r4, r0
 800f57c:	4608      	mov	r0, r1
 800f57e:	602b      	str	r3, [r5, #0]
 800f580:	f000 fb90 	bl	800fca4 <_isatty>
 800f584:	1c43      	adds	r3, r0, #1
 800f586:	d102      	bne.n	800f58e <_isatty_r+0x1a>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	b103      	cbz	r3, 800f58e <_isatty_r+0x1a>
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	200031c8 	.word	0x200031c8

0800f594 <atan2>:
 800f594:	f000 baa8 	b.w	800fae8 <__ieee754_atan2>

0800f598 <sqrt>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	ed2d 8b02 	vpush	{d8}
 800f59e:	ec55 4b10 	vmov	r4, r5, d0
 800f5a2:	f000 f9c5 	bl	800f930 <__ieee754_sqrt>
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	462b      	mov	r3, r5
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f5b2:	eef0 8a60 	vmov.f32	s17, s1
 800f5b6:	f7f1 fab9 	bl	8000b2c <__aeabi_dcmpun>
 800f5ba:	b990      	cbnz	r0, 800f5e2 <sqrt+0x4a>
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2300      	movs	r3, #0
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	f7f1 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800f5c8:	b158      	cbz	r0, 800f5e2 <sqrt+0x4a>
 800f5ca:	f7ff f95f 	bl	800e88c <__errno>
 800f5ce:	2321      	movs	r3, #33	@ 0x21
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	4619      	mov	r1, r3
 800f5da:	f7f1 f937 	bl	800084c <__aeabi_ddiv>
 800f5de:	ec41 0b18 	vmov	d8, r0, r1
 800f5e2:	eeb0 0a48 	vmov.f32	s0, s16
 800f5e6:	eef0 0a68 	vmov.f32	s1, s17
 800f5ea:	ecbd 8b02 	vpop	{d8}
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}

0800f5f0 <atan>:
 800f5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f4:	ec55 4b10 	vmov	r4, r5, d0
 800f5f8:	4bbf      	ldr	r3, [pc, #764]	@ (800f8f8 <atan+0x308>)
 800f5fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f5fe:	429e      	cmp	r6, r3
 800f600:	46ab      	mov	fp, r5
 800f602:	d918      	bls.n	800f636 <atan+0x46>
 800f604:	4bbd      	ldr	r3, [pc, #756]	@ (800f8fc <atan+0x30c>)
 800f606:	429e      	cmp	r6, r3
 800f608:	d801      	bhi.n	800f60e <atan+0x1e>
 800f60a:	d109      	bne.n	800f620 <atan+0x30>
 800f60c:	b144      	cbz	r4, 800f620 <atan+0x30>
 800f60e:	4622      	mov	r2, r4
 800f610:	462b      	mov	r3, r5
 800f612:	4620      	mov	r0, r4
 800f614:	4629      	mov	r1, r5
 800f616:	f7f0 fe39 	bl	800028c <__adddf3>
 800f61a:	4604      	mov	r4, r0
 800f61c:	460d      	mov	r5, r1
 800f61e:	e006      	b.n	800f62e <atan+0x3e>
 800f620:	f1bb 0f00 	cmp.w	fp, #0
 800f624:	f340 812b 	ble.w	800f87e <atan+0x28e>
 800f628:	a597      	add	r5, pc, #604	@ (adr r5, 800f888 <atan+0x298>)
 800f62a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f62e:	ec45 4b10 	vmov	d0, r4, r5
 800f632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f636:	4bb2      	ldr	r3, [pc, #712]	@ (800f900 <atan+0x310>)
 800f638:	429e      	cmp	r6, r3
 800f63a:	d813      	bhi.n	800f664 <atan+0x74>
 800f63c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f640:	429e      	cmp	r6, r3
 800f642:	d80c      	bhi.n	800f65e <atan+0x6e>
 800f644:	a392      	add	r3, pc, #584	@ (adr r3, 800f890 <atan+0x2a0>)
 800f646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64a:	4620      	mov	r0, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	f7f0 fe1d 	bl	800028c <__adddf3>
 800f652:	4bac      	ldr	r3, [pc, #688]	@ (800f904 <atan+0x314>)
 800f654:	2200      	movs	r2, #0
 800f656:	f7f1 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	d1e7      	bne.n	800f62e <atan+0x3e>
 800f65e:	f04f 3aff 	mov.w	sl, #4294967295
 800f662:	e029      	b.n	800f6b8 <atan+0xc8>
 800f664:	f000 f95c 	bl	800f920 <fabs>
 800f668:	4ba7      	ldr	r3, [pc, #668]	@ (800f908 <atan+0x318>)
 800f66a:	429e      	cmp	r6, r3
 800f66c:	ec55 4b10 	vmov	r4, r5, d0
 800f670:	f200 80bc 	bhi.w	800f7ec <atan+0x1fc>
 800f674:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f678:	429e      	cmp	r6, r3
 800f67a:	f200 809e 	bhi.w	800f7ba <atan+0x1ca>
 800f67e:	4622      	mov	r2, r4
 800f680:	462b      	mov	r3, r5
 800f682:	4620      	mov	r0, r4
 800f684:	4629      	mov	r1, r5
 800f686:	f7f0 fe01 	bl	800028c <__adddf3>
 800f68a:	4b9e      	ldr	r3, [pc, #632]	@ (800f904 <atan+0x314>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	f7f0 fdfb 	bl	8000288 <__aeabi_dsub>
 800f692:	2200      	movs	r2, #0
 800f694:	4606      	mov	r6, r0
 800f696:	460f      	mov	r7, r1
 800f698:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f0 fdf4 	bl	800028c <__adddf3>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f1 f8ce 	bl	800084c <__aeabi_ddiv>
 800f6b0:	f04f 0a00 	mov.w	sl, #0
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	460d      	mov	r5, r1
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 ff9a 	bl	80005f8 <__aeabi_dmul>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	4689      	mov	r9, r1
 800f6cc:	f7f0 ff94 	bl	80005f8 <__aeabi_dmul>
 800f6d0:	a371      	add	r3, pc, #452	@ (adr r3, 800f898 <atan+0x2a8>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	460f      	mov	r7, r1
 800f6da:	f7f0 ff8d 	bl	80005f8 <__aeabi_dmul>
 800f6de:	a370      	add	r3, pc, #448	@ (adr r3, 800f8a0 <atan+0x2b0>)
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	f7f0 fdd2 	bl	800028c <__adddf3>
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	463b      	mov	r3, r7
 800f6ec:	f7f0 ff84 	bl	80005f8 <__aeabi_dmul>
 800f6f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800f8a8 <atan+0x2b8>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fdc9 	bl	800028c <__adddf3>
 800f6fa:	4632      	mov	r2, r6
 800f6fc:	463b      	mov	r3, r7
 800f6fe:	f7f0 ff7b 	bl	80005f8 <__aeabi_dmul>
 800f702:	a36b      	add	r3, pc, #428	@ (adr r3, 800f8b0 <atan+0x2c0>)
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	f7f0 fdc0 	bl	800028c <__adddf3>
 800f70c:	4632      	mov	r2, r6
 800f70e:	463b      	mov	r3, r7
 800f710:	f7f0 ff72 	bl	80005f8 <__aeabi_dmul>
 800f714:	a368      	add	r3, pc, #416	@ (adr r3, 800f8b8 <atan+0x2c8>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 fdb7 	bl	800028c <__adddf3>
 800f71e:	4632      	mov	r2, r6
 800f720:	463b      	mov	r3, r7
 800f722:	f7f0 ff69 	bl	80005f8 <__aeabi_dmul>
 800f726:	a366      	add	r3, pc, #408	@ (adr r3, 800f8c0 <atan+0x2d0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f0 fdae 	bl	800028c <__adddf3>
 800f730:	4642      	mov	r2, r8
 800f732:	464b      	mov	r3, r9
 800f734:	f7f0 ff60 	bl	80005f8 <__aeabi_dmul>
 800f738:	a363      	add	r3, pc, #396	@ (adr r3, 800f8c8 <atan+0x2d8>)
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	4680      	mov	r8, r0
 800f740:	4689      	mov	r9, r1
 800f742:	4630      	mov	r0, r6
 800f744:	4639      	mov	r1, r7
 800f746:	f7f0 ff57 	bl	80005f8 <__aeabi_dmul>
 800f74a:	a361      	add	r3, pc, #388	@ (adr r3, 800f8d0 <atan+0x2e0>)
 800f74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f750:	f7f0 fd9a 	bl	8000288 <__aeabi_dsub>
 800f754:	4632      	mov	r2, r6
 800f756:	463b      	mov	r3, r7
 800f758:	f7f0 ff4e 	bl	80005f8 <__aeabi_dmul>
 800f75c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f8d8 <atan+0x2e8>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	f7f0 fd91 	bl	8000288 <__aeabi_dsub>
 800f766:	4632      	mov	r2, r6
 800f768:	463b      	mov	r3, r7
 800f76a:	f7f0 ff45 	bl	80005f8 <__aeabi_dmul>
 800f76e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f8e0 <atan+0x2f0>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	f7f0 fd88 	bl	8000288 <__aeabi_dsub>
 800f778:	4632      	mov	r2, r6
 800f77a:	463b      	mov	r3, r7
 800f77c:	f7f0 ff3c 	bl	80005f8 <__aeabi_dmul>
 800f780:	a359      	add	r3, pc, #356	@ (adr r3, 800f8e8 <atan+0x2f8>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f7f0 fd7f 	bl	8000288 <__aeabi_dsub>
 800f78a:	4632      	mov	r2, r6
 800f78c:	463b      	mov	r3, r7
 800f78e:	f7f0 ff33 	bl	80005f8 <__aeabi_dmul>
 800f792:	4602      	mov	r2, r0
 800f794:	460b      	mov	r3, r1
 800f796:	4640      	mov	r0, r8
 800f798:	4649      	mov	r1, r9
 800f79a:	f7f0 fd77 	bl	800028c <__adddf3>
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	f7f0 ff29 	bl	80005f8 <__aeabi_dmul>
 800f7a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	d148      	bne.n	800f842 <atan+0x252>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	f7f0 fd68 	bl	8000288 <__aeabi_dsub>
 800f7b8:	e72f      	b.n	800f61a <atan+0x2a>
 800f7ba:	4b52      	ldr	r3, [pc, #328]	@ (800f904 <atan+0x314>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4620      	mov	r0, r4
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	f7f0 fd61 	bl	8000288 <__aeabi_dsub>
 800f7c6:	4b4f      	ldr	r3, [pc, #316]	@ (800f904 <atan+0x314>)
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	460f      	mov	r7, r1
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f7f0 fd5b 	bl	800028c <__adddf3>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4630      	mov	r0, r6
 800f7dc:	4639      	mov	r1, r7
 800f7de:	f7f1 f835 	bl	800084c <__aeabi_ddiv>
 800f7e2:	f04f 0a01 	mov.w	sl, #1
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	e765      	b.n	800f6b8 <atan+0xc8>
 800f7ec:	4b47      	ldr	r3, [pc, #284]	@ (800f90c <atan+0x31c>)
 800f7ee:	429e      	cmp	r6, r3
 800f7f0:	d21c      	bcs.n	800f82c <atan+0x23c>
 800f7f2:	4b47      	ldr	r3, [pc, #284]	@ (800f910 <atan+0x320>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	f7f0 fd45 	bl	8000288 <__aeabi_dsub>
 800f7fe:	4b44      	ldr	r3, [pc, #272]	@ (800f910 <atan+0x320>)
 800f800:	4606      	mov	r6, r0
 800f802:	460f      	mov	r7, r1
 800f804:	2200      	movs	r2, #0
 800f806:	4620      	mov	r0, r4
 800f808:	4629      	mov	r1, r5
 800f80a:	f7f0 fef5 	bl	80005f8 <__aeabi_dmul>
 800f80e:	4b3d      	ldr	r3, [pc, #244]	@ (800f904 <atan+0x314>)
 800f810:	2200      	movs	r2, #0
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	4630      	mov	r0, r6
 800f81c:	4639      	mov	r1, r7
 800f81e:	f7f1 f815 	bl	800084c <__aeabi_ddiv>
 800f822:	f04f 0a02 	mov.w	sl, #2
 800f826:	4604      	mov	r4, r0
 800f828:	460d      	mov	r5, r1
 800f82a:	e745      	b.n	800f6b8 <atan+0xc8>
 800f82c:	4622      	mov	r2, r4
 800f82e:	462b      	mov	r3, r5
 800f830:	4938      	ldr	r1, [pc, #224]	@ (800f914 <atan+0x324>)
 800f832:	2000      	movs	r0, #0
 800f834:	f7f1 f80a 	bl	800084c <__aeabi_ddiv>
 800f838:	f04f 0a03 	mov.w	sl, #3
 800f83c:	4604      	mov	r4, r0
 800f83e:	460d      	mov	r5, r1
 800f840:	e73a      	b.n	800f6b8 <atan+0xc8>
 800f842:	4b35      	ldr	r3, [pc, #212]	@ (800f918 <atan+0x328>)
 800f844:	4e35      	ldr	r6, [pc, #212]	@ (800f91c <atan+0x32c>)
 800f846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	f7f0 fd1b 	bl	8000288 <__aeabi_dsub>
 800f852:	4622      	mov	r2, r4
 800f854:	462b      	mov	r3, r5
 800f856:	f7f0 fd17 	bl	8000288 <__aeabi_dsub>
 800f85a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f85e:	4602      	mov	r2, r0
 800f860:	460b      	mov	r3, r1
 800f862:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f866:	f7f0 fd0f 	bl	8000288 <__aeabi_dsub>
 800f86a:	f1bb 0f00 	cmp.w	fp, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	460d      	mov	r5, r1
 800f872:	f6bf aedc 	bge.w	800f62e <atan+0x3e>
 800f876:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f87a:	461d      	mov	r5, r3
 800f87c:	e6d7      	b.n	800f62e <atan+0x3e>
 800f87e:	a51c      	add	r5, pc, #112	@ (adr r5, 800f8f0 <atan+0x300>)
 800f880:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f884:	e6d3      	b.n	800f62e <atan+0x3e>
 800f886:	bf00      	nop
 800f888:	54442d18 	.word	0x54442d18
 800f88c:	3ff921fb 	.word	0x3ff921fb
 800f890:	8800759c 	.word	0x8800759c
 800f894:	7e37e43c 	.word	0x7e37e43c
 800f898:	e322da11 	.word	0xe322da11
 800f89c:	3f90ad3a 	.word	0x3f90ad3a
 800f8a0:	24760deb 	.word	0x24760deb
 800f8a4:	3fa97b4b 	.word	0x3fa97b4b
 800f8a8:	a0d03d51 	.word	0xa0d03d51
 800f8ac:	3fb10d66 	.word	0x3fb10d66
 800f8b0:	c54c206e 	.word	0xc54c206e
 800f8b4:	3fb745cd 	.word	0x3fb745cd
 800f8b8:	920083ff 	.word	0x920083ff
 800f8bc:	3fc24924 	.word	0x3fc24924
 800f8c0:	5555550d 	.word	0x5555550d
 800f8c4:	3fd55555 	.word	0x3fd55555
 800f8c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f8cc:	bfa2b444 	.word	0xbfa2b444
 800f8d0:	52defd9a 	.word	0x52defd9a
 800f8d4:	3fadde2d 	.word	0x3fadde2d
 800f8d8:	af749a6d 	.word	0xaf749a6d
 800f8dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f8e0:	fe231671 	.word	0xfe231671
 800f8e4:	3fbc71c6 	.word	0x3fbc71c6
 800f8e8:	9998ebc4 	.word	0x9998ebc4
 800f8ec:	3fc99999 	.word	0x3fc99999
 800f8f0:	54442d18 	.word	0x54442d18
 800f8f4:	bff921fb 	.word	0xbff921fb
 800f8f8:	440fffff 	.word	0x440fffff
 800f8fc:	7ff00000 	.word	0x7ff00000
 800f900:	3fdbffff 	.word	0x3fdbffff
 800f904:	3ff00000 	.word	0x3ff00000
 800f908:	3ff2ffff 	.word	0x3ff2ffff
 800f90c:	40038000 	.word	0x40038000
 800f910:	3ff80000 	.word	0x3ff80000
 800f914:	bff00000 	.word	0xbff00000
 800f918:	080102e8 	.word	0x080102e8
 800f91c:	08010308 	.word	0x08010308

0800f920 <fabs>:
 800f920:	ec51 0b10 	vmov	r0, r1, d0
 800f924:	4602      	mov	r2, r0
 800f926:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f92a:	ec43 2b10 	vmov	d0, r2, r3
 800f92e:	4770      	bx	lr

0800f930 <__ieee754_sqrt>:
 800f930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f934:	4a68      	ldr	r2, [pc, #416]	@ (800fad8 <__ieee754_sqrt+0x1a8>)
 800f936:	ec55 4b10 	vmov	r4, r5, d0
 800f93a:	43aa      	bics	r2, r5
 800f93c:	462b      	mov	r3, r5
 800f93e:	4621      	mov	r1, r4
 800f940:	d110      	bne.n	800f964 <__ieee754_sqrt+0x34>
 800f942:	4622      	mov	r2, r4
 800f944:	4620      	mov	r0, r4
 800f946:	4629      	mov	r1, r5
 800f948:	f7f0 fe56 	bl	80005f8 <__aeabi_dmul>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	4620      	mov	r0, r4
 800f952:	4629      	mov	r1, r5
 800f954:	f7f0 fc9a 	bl	800028c <__adddf3>
 800f958:	4604      	mov	r4, r0
 800f95a:	460d      	mov	r5, r1
 800f95c:	ec45 4b10 	vmov	d0, r4, r5
 800f960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f964:	2d00      	cmp	r5, #0
 800f966:	dc0e      	bgt.n	800f986 <__ieee754_sqrt+0x56>
 800f968:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f96c:	4322      	orrs	r2, r4
 800f96e:	d0f5      	beq.n	800f95c <__ieee754_sqrt+0x2c>
 800f970:	b19d      	cbz	r5, 800f99a <__ieee754_sqrt+0x6a>
 800f972:	4622      	mov	r2, r4
 800f974:	4620      	mov	r0, r4
 800f976:	4629      	mov	r1, r5
 800f978:	f7f0 fc86 	bl	8000288 <__aeabi_dsub>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	f7f0 ff64 	bl	800084c <__aeabi_ddiv>
 800f984:	e7e8      	b.n	800f958 <__ieee754_sqrt+0x28>
 800f986:	152a      	asrs	r2, r5, #20
 800f988:	d115      	bne.n	800f9b6 <__ieee754_sqrt+0x86>
 800f98a:	2000      	movs	r0, #0
 800f98c:	e009      	b.n	800f9a2 <__ieee754_sqrt+0x72>
 800f98e:	0acb      	lsrs	r3, r1, #11
 800f990:	3a15      	subs	r2, #21
 800f992:	0549      	lsls	r1, r1, #21
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0fa      	beq.n	800f98e <__ieee754_sqrt+0x5e>
 800f998:	e7f7      	b.n	800f98a <__ieee754_sqrt+0x5a>
 800f99a:	462a      	mov	r2, r5
 800f99c:	e7fa      	b.n	800f994 <__ieee754_sqrt+0x64>
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	3001      	adds	r0, #1
 800f9a2:	02dc      	lsls	r4, r3, #11
 800f9a4:	d5fb      	bpl.n	800f99e <__ieee754_sqrt+0x6e>
 800f9a6:	1e44      	subs	r4, r0, #1
 800f9a8:	1b12      	subs	r2, r2, r4
 800f9aa:	f1c0 0420 	rsb	r4, r0, #32
 800f9ae:	fa21 f404 	lsr.w	r4, r1, r4
 800f9b2:	4323      	orrs	r3, r4
 800f9b4:	4081      	lsls	r1, r0
 800f9b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f9be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f9c2:	07d2      	lsls	r2, r2, #31
 800f9c4:	bf5c      	itt	pl
 800f9c6:	005b      	lslpl	r3, r3, #1
 800f9c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f9cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f9d0:	bf58      	it	pl
 800f9d2:	0049      	lslpl	r1, r1, #1
 800f9d4:	2600      	movs	r6, #0
 800f9d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f9da:	106d      	asrs	r5, r5, #1
 800f9dc:	0049      	lsls	r1, r1, #1
 800f9de:	2016      	movs	r0, #22
 800f9e0:	4632      	mov	r2, r6
 800f9e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f9e6:	1917      	adds	r7, r2, r4
 800f9e8:	429f      	cmp	r7, r3
 800f9ea:	bfde      	ittt	le
 800f9ec:	193a      	addle	r2, r7, r4
 800f9ee:	1bdb      	suble	r3, r3, r7
 800f9f0:	1936      	addle	r6, r6, r4
 800f9f2:	0fcf      	lsrs	r7, r1, #31
 800f9f4:	3801      	subs	r0, #1
 800f9f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f9fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f9fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fa02:	d1f0      	bne.n	800f9e6 <__ieee754_sqrt+0xb6>
 800fa04:	4604      	mov	r4, r0
 800fa06:	2720      	movs	r7, #32
 800fa08:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	eb00 0e0c 	add.w	lr, r0, ip
 800fa12:	db02      	blt.n	800fa1a <__ieee754_sqrt+0xea>
 800fa14:	d113      	bne.n	800fa3e <__ieee754_sqrt+0x10e>
 800fa16:	458e      	cmp	lr, r1
 800fa18:	d811      	bhi.n	800fa3e <__ieee754_sqrt+0x10e>
 800fa1a:	f1be 0f00 	cmp.w	lr, #0
 800fa1e:	eb0e 000c 	add.w	r0, lr, ip
 800fa22:	da42      	bge.n	800faaa <__ieee754_sqrt+0x17a>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	db40      	blt.n	800faaa <__ieee754_sqrt+0x17a>
 800fa28:	f102 0801 	add.w	r8, r2, #1
 800fa2c:	1a9b      	subs	r3, r3, r2
 800fa2e:	458e      	cmp	lr, r1
 800fa30:	bf88      	it	hi
 800fa32:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fa36:	eba1 010e 	sub.w	r1, r1, lr
 800fa3a:	4464      	add	r4, ip
 800fa3c:	4642      	mov	r2, r8
 800fa3e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fa42:	3f01      	subs	r7, #1
 800fa44:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fa48:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fa4c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fa50:	d1dc      	bne.n	800fa0c <__ieee754_sqrt+0xdc>
 800fa52:	4319      	orrs	r1, r3
 800fa54:	d01b      	beq.n	800fa8e <__ieee754_sqrt+0x15e>
 800fa56:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fadc <__ieee754_sqrt+0x1ac>
 800fa5a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fae0 <__ieee754_sqrt+0x1b0>
 800fa5e:	e9da 0100 	ldrd	r0, r1, [sl]
 800fa62:	e9db 2300 	ldrd	r2, r3, [fp]
 800fa66:	f7f0 fc0f 	bl	8000288 <__aeabi_dsub>
 800fa6a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	4640      	mov	r0, r8
 800fa74:	4649      	mov	r1, r9
 800fa76:	f7f1 f83b 	bl	8000af0 <__aeabi_dcmple>
 800fa7a:	b140      	cbz	r0, 800fa8e <__ieee754_sqrt+0x15e>
 800fa7c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fa80:	e9da 0100 	ldrd	r0, r1, [sl]
 800fa84:	e9db 2300 	ldrd	r2, r3, [fp]
 800fa88:	d111      	bne.n	800faae <__ieee754_sqrt+0x17e>
 800fa8a:	3601      	adds	r6, #1
 800fa8c:	463c      	mov	r4, r7
 800fa8e:	1072      	asrs	r2, r6, #1
 800fa90:	0863      	lsrs	r3, r4, #1
 800fa92:	07f1      	lsls	r1, r6, #31
 800fa94:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fa98:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fa9c:	bf48      	it	mi
 800fa9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800faa2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800faa6:	4618      	mov	r0, r3
 800faa8:	e756      	b.n	800f958 <__ieee754_sqrt+0x28>
 800faaa:	4690      	mov	r8, r2
 800faac:	e7be      	b.n	800fa2c <__ieee754_sqrt+0xfc>
 800faae:	f7f0 fbed 	bl	800028c <__adddf3>
 800fab2:	e9da 8900 	ldrd	r8, r9, [sl]
 800fab6:	4602      	mov	r2, r0
 800fab8:	460b      	mov	r3, r1
 800faba:	4640      	mov	r0, r8
 800fabc:	4649      	mov	r1, r9
 800fabe:	f7f1 f80d 	bl	8000adc <__aeabi_dcmplt>
 800fac2:	b120      	cbz	r0, 800face <__ieee754_sqrt+0x19e>
 800fac4:	1ca0      	adds	r0, r4, #2
 800fac6:	bf08      	it	eq
 800fac8:	3601      	addeq	r6, #1
 800faca:	3402      	adds	r4, #2
 800facc:	e7df      	b.n	800fa8e <__ieee754_sqrt+0x15e>
 800face:	1c63      	adds	r3, r4, #1
 800fad0:	f023 0401 	bic.w	r4, r3, #1
 800fad4:	e7db      	b.n	800fa8e <__ieee754_sqrt+0x15e>
 800fad6:	bf00      	nop
 800fad8:	7ff00000 	.word	0x7ff00000
 800fadc:	20000278 	.word	0x20000278
 800fae0:	20000270 	.word	0x20000270
 800fae4:	00000000 	.word	0x00000000

0800fae8 <__ieee754_atan2>:
 800fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	ec57 6b11 	vmov	r6, r7, d1
 800faf0:	4273      	negs	r3, r6
 800faf2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fc70 <__ieee754_atan2+0x188>
 800faf6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fafa:	4333      	orrs	r3, r6
 800fafc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fb00:	4543      	cmp	r3, r8
 800fb02:	ec51 0b10 	vmov	r0, r1, d0
 800fb06:	4635      	mov	r5, r6
 800fb08:	d809      	bhi.n	800fb1e <__ieee754_atan2+0x36>
 800fb0a:	4244      	negs	r4, r0
 800fb0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fb10:	4304      	orrs	r4, r0
 800fb12:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fb16:	4544      	cmp	r4, r8
 800fb18:	468e      	mov	lr, r1
 800fb1a:	4681      	mov	r9, r0
 800fb1c:	d907      	bls.n	800fb2e <__ieee754_atan2+0x46>
 800fb1e:	4632      	mov	r2, r6
 800fb20:	463b      	mov	r3, r7
 800fb22:	f7f0 fbb3 	bl	800028c <__adddf3>
 800fb26:	ec41 0b10 	vmov	d0, r0, r1
 800fb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb2e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fb32:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fb36:	4334      	orrs	r4, r6
 800fb38:	d103      	bne.n	800fb42 <__ieee754_atan2+0x5a>
 800fb3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3e:	f7ff bd57 	b.w	800f5f0 <atan>
 800fb42:	17bc      	asrs	r4, r7, #30
 800fb44:	f004 0402 	and.w	r4, r4, #2
 800fb48:	ea53 0909 	orrs.w	r9, r3, r9
 800fb4c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fb50:	d107      	bne.n	800fb62 <__ieee754_atan2+0x7a>
 800fb52:	2c02      	cmp	r4, #2
 800fb54:	d05f      	beq.n	800fc16 <__ieee754_atan2+0x12e>
 800fb56:	2c03      	cmp	r4, #3
 800fb58:	d1e5      	bne.n	800fb26 <__ieee754_atan2+0x3e>
 800fb5a:	a141      	add	r1, pc, #260	@ (adr r1, 800fc60 <__ieee754_atan2+0x178>)
 800fb5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb60:	e7e1      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb62:	4315      	orrs	r5, r2
 800fb64:	d106      	bne.n	800fb74 <__ieee754_atan2+0x8c>
 800fb66:	f1be 0f00 	cmp.w	lr, #0
 800fb6a:	da5f      	bge.n	800fc2c <__ieee754_atan2+0x144>
 800fb6c:	a13e      	add	r1, pc, #248	@ (adr r1, 800fc68 <__ieee754_atan2+0x180>)
 800fb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb72:	e7d8      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb74:	4542      	cmp	r2, r8
 800fb76:	d10f      	bne.n	800fb98 <__ieee754_atan2+0xb0>
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fb7e:	d107      	bne.n	800fb90 <__ieee754_atan2+0xa8>
 800fb80:	2c02      	cmp	r4, #2
 800fb82:	d84c      	bhi.n	800fc1e <__ieee754_atan2+0x136>
 800fb84:	4b34      	ldr	r3, [pc, #208]	@ (800fc58 <__ieee754_atan2+0x170>)
 800fb86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb8e:	e7ca      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fb90:	2c02      	cmp	r4, #2
 800fb92:	d848      	bhi.n	800fc26 <__ieee754_atan2+0x13e>
 800fb94:	4b31      	ldr	r3, [pc, #196]	@ (800fc5c <__ieee754_atan2+0x174>)
 800fb96:	e7f6      	b.n	800fb86 <__ieee754_atan2+0x9e>
 800fb98:	4543      	cmp	r3, r8
 800fb9a:	d0e4      	beq.n	800fb66 <__ieee754_atan2+0x7e>
 800fb9c:	1a9b      	subs	r3, r3, r2
 800fb9e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fba6:	da1e      	bge.n	800fbe6 <__ieee754_atan2+0xfe>
 800fba8:	2f00      	cmp	r7, #0
 800fbaa:	da01      	bge.n	800fbb0 <__ieee754_atan2+0xc8>
 800fbac:	323c      	adds	r2, #60	@ 0x3c
 800fbae:	db1e      	blt.n	800fbee <__ieee754_atan2+0x106>
 800fbb0:	4632      	mov	r2, r6
 800fbb2:	463b      	mov	r3, r7
 800fbb4:	f7f0 fe4a 	bl	800084c <__aeabi_ddiv>
 800fbb8:	ec41 0b10 	vmov	d0, r0, r1
 800fbbc:	f7ff feb0 	bl	800f920 <fabs>
 800fbc0:	f7ff fd16 	bl	800f5f0 <atan>
 800fbc4:	ec51 0b10 	vmov	r0, r1, d0
 800fbc8:	2c01      	cmp	r4, #1
 800fbca:	d013      	beq.n	800fbf4 <__ieee754_atan2+0x10c>
 800fbcc:	2c02      	cmp	r4, #2
 800fbce:	d015      	beq.n	800fbfc <__ieee754_atan2+0x114>
 800fbd0:	2c00      	cmp	r4, #0
 800fbd2:	d0a8      	beq.n	800fb26 <__ieee754_atan2+0x3e>
 800fbd4:	a318      	add	r3, pc, #96	@ (adr r3, 800fc38 <__ieee754_atan2+0x150>)
 800fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbda:	f7f0 fb55 	bl	8000288 <__aeabi_dsub>
 800fbde:	a318      	add	r3, pc, #96	@ (adr r3, 800fc40 <__ieee754_atan2+0x158>)
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	e014      	b.n	800fc10 <__ieee754_atan2+0x128>
 800fbe6:	a118      	add	r1, pc, #96	@ (adr r1, 800fc48 <__ieee754_atan2+0x160>)
 800fbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbec:	e7ec      	b.n	800fbc8 <__ieee754_atan2+0xe0>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	e7e9      	b.n	800fbc8 <__ieee754_atan2+0xe0>
 800fbf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	e794      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fbfc:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc38 <__ieee754_atan2+0x150>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	f7f0 fb41 	bl	8000288 <__aeabi_dsub>
 800fc06:	4602      	mov	r2, r0
 800fc08:	460b      	mov	r3, r1
 800fc0a:	a10d      	add	r1, pc, #52	@ (adr r1, 800fc40 <__ieee754_atan2+0x158>)
 800fc0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc10:	f7f0 fb3a 	bl	8000288 <__aeabi_dsub>
 800fc14:	e787      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc16:	a10a      	add	r1, pc, #40	@ (adr r1, 800fc40 <__ieee754_atan2+0x158>)
 800fc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc1c:	e783      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc1e:	a10c      	add	r1, pc, #48	@ (adr r1, 800fc50 <__ieee754_atan2+0x168>)
 800fc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc24:	e77f      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc26:	2000      	movs	r0, #0
 800fc28:	2100      	movs	r1, #0
 800fc2a:	e77c      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc2c:	a106      	add	r1, pc, #24	@ (adr r1, 800fc48 <__ieee754_atan2+0x160>)
 800fc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc32:	e778      	b.n	800fb26 <__ieee754_atan2+0x3e>
 800fc34:	f3af 8000 	nop.w
 800fc38:	33145c07 	.word	0x33145c07
 800fc3c:	3ca1a626 	.word	0x3ca1a626
 800fc40:	54442d18 	.word	0x54442d18
 800fc44:	400921fb 	.word	0x400921fb
 800fc48:	54442d18 	.word	0x54442d18
 800fc4c:	3ff921fb 	.word	0x3ff921fb
 800fc50:	54442d18 	.word	0x54442d18
 800fc54:	3fe921fb 	.word	0x3fe921fb
 800fc58:	08010340 	.word	0x08010340
 800fc5c:	08010328 	.word	0x08010328
 800fc60:	54442d18 	.word	0x54442d18
 800fc64:	c00921fb 	.word	0xc00921fb
 800fc68:	54442d18 	.word	0x54442d18
 800fc6c:	bff921fb 	.word	0xbff921fb
 800fc70:	7ff00000 	.word	0x7ff00000

0800fc74 <_close>:
 800fc74:	4b02      	ldr	r3, [pc, #8]	@ (800fc80 <_close+0xc>)
 800fc76:	2258      	movs	r2, #88	@ 0x58
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7e:	4770      	bx	lr
 800fc80:	200031c8 	.word	0x200031c8

0800fc84 <_fstat>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	@ (800fc90 <_fstat+0xc>)
 800fc86:	2258      	movs	r2, #88	@ 0x58
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8e:	4770      	bx	lr
 800fc90:	200031c8 	.word	0x200031c8

0800fc94 <_getpid>:
 800fc94:	4b02      	ldr	r3, [pc, #8]	@ (800fca0 <_getpid+0xc>)
 800fc96:	2258      	movs	r2, #88	@ 0x58
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9e:	4770      	bx	lr
 800fca0:	200031c8 	.word	0x200031c8

0800fca4 <_isatty>:
 800fca4:	4b02      	ldr	r3, [pc, #8]	@ (800fcb0 <_isatty+0xc>)
 800fca6:	2258      	movs	r2, #88	@ 0x58
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	2000      	movs	r0, #0
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop
 800fcb0:	200031c8 	.word	0x200031c8

0800fcb4 <_kill>:
 800fcb4:	4b02      	ldr	r3, [pc, #8]	@ (800fcc0 <_kill+0xc>)
 800fcb6:	2258      	movs	r2, #88	@ 0x58
 800fcb8:	601a      	str	r2, [r3, #0]
 800fcba:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbe:	4770      	bx	lr
 800fcc0:	200031c8 	.word	0x200031c8

0800fcc4 <_lseek>:
 800fcc4:	4b02      	ldr	r3, [pc, #8]	@ (800fcd0 <_lseek+0xc>)
 800fcc6:	2258      	movs	r2, #88	@ 0x58
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	f04f 30ff 	mov.w	r0, #4294967295
 800fcce:	4770      	bx	lr
 800fcd0:	200031c8 	.word	0x200031c8

0800fcd4 <_read>:
 800fcd4:	4b02      	ldr	r3, [pc, #8]	@ (800fce0 <_read+0xc>)
 800fcd6:	2258      	movs	r2, #88	@ 0x58
 800fcd8:	601a      	str	r2, [r3, #0]
 800fcda:	f04f 30ff 	mov.w	r0, #4294967295
 800fcde:	4770      	bx	lr
 800fce0:	200031c8 	.word	0x200031c8

0800fce4 <_sbrk>:
 800fce4:	4a04      	ldr	r2, [pc, #16]	@ (800fcf8 <_sbrk+0x14>)
 800fce6:	6811      	ldr	r1, [r2, #0]
 800fce8:	4603      	mov	r3, r0
 800fcea:	b909      	cbnz	r1, 800fcf0 <_sbrk+0xc>
 800fcec:	4903      	ldr	r1, [pc, #12]	@ (800fcfc <_sbrk+0x18>)
 800fcee:	6011      	str	r1, [r2, #0]
 800fcf0:	6810      	ldr	r0, [r2, #0]
 800fcf2:	4403      	add	r3, r0
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	4770      	bx	lr
 800fcf8:	200031d8 	.word	0x200031d8
 800fcfc:	200031e0 	.word	0x200031e0

0800fd00 <_write>:
 800fd00:	4b02      	ldr	r3, [pc, #8]	@ (800fd0c <_write+0xc>)
 800fd02:	2258      	movs	r2, #88	@ 0x58
 800fd04:	601a      	str	r2, [r3, #0]
 800fd06:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0a:	4770      	bx	lr
 800fd0c:	200031c8 	.word	0x200031c8

0800fd10 <_exit>:
 800fd10:	e7fe      	b.n	800fd10 <_exit>
	...

0800fd14 <_init>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr

0800fd20 <_fini>:
 800fd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd22:	bf00      	nop
 800fd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd26:	bc08      	pop	{r3}
 800fd28:	469e      	mov	lr, r3
 800fd2a:	4770      	bx	lr
