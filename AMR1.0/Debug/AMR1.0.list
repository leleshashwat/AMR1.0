
AMR1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800fe58  0800fe58  00010e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  00012290  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  00012290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801059c  0801059c  0001159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000290  20000000  080105a0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fe4  20000290  08010830  00012290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005274  08010830  00013274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f41e  00000000  00000000  000122c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046c1  00000000  00000000  000316de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00035da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000153c  00000000  00000000  000378c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006123  00000000  00000000  00038e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002196f  00000000  00000000  0003ef27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edafb  00000000  00000000  00060896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008944  00000000  00000000  0014e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00156d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fe3c 	.word	0x0800fe3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	0800fe3c 	.word	0x0800fe3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <HAL_UART_RxCpltCallback>:
//void SendInvalidMessage(UART_HandleTypeDef *huart);
//void ProcessPacket(uint8_t *packet, uint8_t length);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800102c:	f3ef 8211 	mrs	r2, BASEPRI
 8001030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001034:	f383 8811 	msr	BASEPRI, r3
 8001038:	f3bf 8f6f 	isb	sy
 800103c:	f3bf 8f4f 	dsb	sy
 8001040:	60fa      	str	r2, [r7, #12]
 8001042:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001044:	68fb      	ldr	r3, [r7, #12]
    UBaseType_t uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8001046:	617b      	str	r3, [r7, #20]
    Fan_bit = RxData[0] - 48;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_UART_RxCpltCallback+0x50>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3b30      	subs	r3, #48	@ 0x30
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_UART_RxCpltCallback+0x54>)
 8001052:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(&huart2, RxData, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	4907      	ldr	r1, [pc, #28]	@ (8001074 <HAL_UART_RxCpltCallback+0x50>)
 8001058:	4808      	ldr	r0, [pc, #32]	@ (800107c <HAL_UART_RxCpltCallback+0x58>)
 800105a:	f006 facd 	bl	80075f8 <HAL_UART_Receive_IT>
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001068:	bf00      	nop
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000418 	.word	0x20000418
 8001078:	20000414 	.word	0x20000414
 800107c:	20000390 	.word	0x20000390

08001080 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	@ 0x40
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint8_t charbuffer[50] = { };
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	222e      	movs	r2, #46	@ 0x2e
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00a ff7f 	bl	800bf9a <memset>
  sprintf((char *)charbuffer, "%s.txt=\"%s\"", ID, string);
 800109c:	f107 000c 	add.w	r0, r7, #12
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	490d      	ldr	r1, [pc, #52]	@ (80010dc <NEXTION_SendString+0x5c>)
 80010a6:	f00a ff15 	bl	800bed4 <siprintf>
  HAL_UART_Transmit (&huart1,(uint8_t *) charbuffer, strlen((const char *)charbuffer), HAL_MAX_DELAY);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f8fe 	bl	80002b0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <NEXTION_SendString+0x60>)
 80010c2:	f006 fa0e 	bl	80074e2 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart1, Cmd_End, 3, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	2203      	movs	r2, #3
 80010cc:	4905      	ldr	r1, [pc, #20]	@ (80010e4 <NEXTION_SendString+0x64>)
 80010ce:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <NEXTION_SendString+0x60>)
 80010d0:	f006 fa07 	bl	80074e2 <HAL_UART_Transmit>
}
 80010d4:	bf00      	nop
 80010d6:	3740      	adds	r7, #64	@ 0x40
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800fe88 	.word	0x0800fe88
 80010e0:	20000348 	.word	0x20000348
 80010e4:	20000000 	.word	0x20000000

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f001 ffd8 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f860 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 f9a0 	bl	8001438 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010f8:	f000 f94a 	bl	8001390 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010fc:	f000 f972 	bl	80013e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001100:	f000 f8c6 	bl	8001290 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001104:	f000 f916 	bl	8001334 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, RxData, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	491a      	ldr	r1, [pc, #104]	@ (8001174 <main+0x8c>)
 800110c:	481a      	ldr	r0, [pc, #104]	@ (8001178 <main+0x90>)
 800110e:	f006 fa73 	bl	80075f8 <HAL_UART_Receive_IT>

  while (MPU6050_Init(&hi2c1) == 1);
 8001112:	bf00      	nop
 8001114:	4819      	ldr	r0, [pc, #100]	@ (800117c <main+0x94>)
 8001116:	f000 fb55 	bl	80017c4 <MPU6050_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d0f9      	beq.n	8001114 <main+0x2c>

  visInit("GRB");
 8001120:	4817      	ldr	r0, [pc, #92]	@ (8001180 <main+0x98>)
 8001122:	f001 fa0d 	bl	8002540 <visInit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001126:	f007 fa27 	bl	8008578 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <main+0x9c>)
 800112c:	2100      	movs	r1, #0
 800112e:	4816      	ldr	r0, [pc, #88]	@ (8001188 <main+0xa0>)
 8001130:	f007 fa6c 	bl	800860c <osThreadNew>
 8001134:	4603      	mov	r3, r0
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <main+0xa4>)
 8001138:	6013      	str	r3, [r2, #0]

  /* creation of NexDisplay */
  NexDisplayHandle = osThreadNew(StartNextion, NULL, &NexDisplay_attributes);
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <main+0xa8>)
 800113c:	2100      	movs	r1, #0
 800113e:	4815      	ldr	r0, [pc, #84]	@ (8001194 <main+0xac>)
 8001140:	f007 fa64 	bl	800860c <osThreadNew>
 8001144:	4603      	mov	r3, r0
 8001146:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <main+0xb0>)
 8001148:	6013      	str	r3, [r2, #0]

  /* creation of AccelGyro */
  AccelGyroHandle = osThreadNew(StartAccel, NULL, &AccelGyro_attributes);
 800114a:	4a14      	ldr	r2, [pc, #80]	@ (800119c <main+0xb4>)
 800114c:	2100      	movs	r1, #0
 800114e:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <main+0xb8>)
 8001150:	f007 fa5c 	bl	800860c <osThreadNew>
 8001154:	4603      	mov	r3, r0
 8001156:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <main+0xbc>)
 8001158:	6013      	str	r3, [r2, #0]

  /* creation of VisEffect */
  VisEffectHandle = osThreadNew(StartVisEffect, NULL, &VisEffect_attributes);
 800115a:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <main+0xc0>)
 800115c:	2100      	movs	r1, #0
 800115e:	4813      	ldr	r0, [pc, #76]	@ (80011ac <main+0xc4>)
 8001160:	f007 fa54 	bl	800860c <osThreadNew>
 8001164:	4603      	mov	r3, r0
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <main+0xc8>)
 8001168:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800116a:	f007 fa29 	bl	80085c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <main+0x86>
 8001172:	bf00      	nop
 8001174:	20000418 	.word	0x20000418
 8001178:	20000390 	.word	0x20000390
 800117c:	200002f4 	.word	0x200002f4
 8001180:	0800fe94 	.word	0x0800fe94
 8001184:	0800ff3c 	.word	0x0800ff3c
 8001188:	080014f9 	.word	0x080014f9
 800118c:	200003d8 	.word	0x200003d8
 8001190:	0800ff60 	.word	0x0800ff60
 8001194:	08001565 	.word	0x08001565
 8001198:	200003dc 	.word	0x200003dc
 800119c:	0800ff84 	.word	0x0800ff84
 80011a0:	080016f1 	.word	0x080016f1
 80011a4:	200003e0 	.word	0x200003e0
 80011a8:	0800ffa8 	.word	0x0800ffa8
 80011ac:	0800177d 	.word	0x0800177d
 80011b0:	200003e4 	.word	0x200003e4

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2234      	movs	r2, #52	@ 0x34
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00a fee9 	bl	800bf9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <SystemClock_Config+0xd4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a29      	ldr	r2, [pc, #164]	@ (8001288 <SystemClock_Config+0xd4>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <SystemClock_Config+0xd4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <SystemClock_Config+0xd8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001200:	4a22      	ldr	r2, [pc, #136]	@ (800128c <SystemClock_Config+0xd8>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b20      	ldr	r3, [pc, #128]	@ (800128c <SystemClock_Config+0xd8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001228:	2310      	movs	r3, #16
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800122c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001230:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001232:	2304      	movs	r3, #4
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4618      	mov	r0, r3
 8001244:	f004 ff9c 	bl	8006180 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800124e:	f000 fab3 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2302      	movs	r3, #2
 8001258:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fc0a 	bl	8005a88 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800127a:	f000 fa9d 	bl	80017b8 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012a2:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <MX_ADC1_Init+0x9c>)
 80012a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d0:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <MX_ADC1_Init+0xa0>)
 80012d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012de:	2201      	movs	r2, #1
 80012e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	@ (8001328 <MX_ADC1_Init+0x98>)
 80012f2:	f001 ff17 	bl	8003124 <HAL_ADC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 fa5c 	bl	80017b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001300:	2301      	movs	r3, #1
 8001302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_ADC1_Init+0x98>)
 8001312:	f002 fa17 	bl	8003744 <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800131c:	f000 fa4c 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002ac 	.word	0x200002ac
 800132c:	40012000 	.word	0x40012000
 8001330:	0f000001 	.word	0x0f000001

08001334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_I2C1_Init+0x50>)
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <MX_I2C1_Init+0x54>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001340:	4a12      	ldr	r2, [pc, #72]	@ (800138c <MX_I2C1_Init+0x58>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_I2C1_Init+0x50>)
 8001372:	f003 fb65 	bl	8004a40 <HAL_I2C_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800137c:	f000 fa1c 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002f4 	.word	0x200002f4
 8001388:	40005400 	.word	0x40005400
 800138c:	00061a80 	.word	0x00061a80

08001390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f006 f83b 	bl	8007442 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f9f1 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000348 	.word	0x20000348
 80013e0:	40011000 	.word	0x40011000

080013e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_USART2_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_USART2_UART_Init+0x4c>)
 800141c:	f006 f811 	bl	8007442 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f9c7 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000390 	.word	0x20000390
 8001434:	40004400 	.word	0x40004400

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a25      	ldr	r2, [pc, #148]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <MX_GPIO_Init+0xb4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_GPIO_Init+0xb4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_GPIO_Init+0xb4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|Fan_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	21e0      	movs	r1, #224	@ 0xe0
 80014a6:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <MX_GPIO_Init+0xb8>)
 80014a8:	f003 fa96 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MX_GPIO_Init+0xbc>)
 80014c4:	f003 f8f4 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin Fan_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|Fan_Pin;
 80014c8:	23e0      	movs	r3, #224	@ 0xe0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_GPIO_Init+0xb8>)
 80014e0:	f003 f8e6 	bl	80046b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020800 	.word	0x40020800

080014f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001500:	2120      	movs	r1, #32
 8001502:	4815      	ldr	r0, [pc, #84]	@ (8001558 <StartDefaultTask+0x60>)
 8001504:	f003 fa81 	bl	8004a0a <HAL_GPIO_TogglePin>

	  if(voltage <= 1.5)
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <StartDefaultTask+0x64>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d804      	bhi.n	8001526 <StartDefaultTask+0x2e>
	  {
		  HAL_GPIO_TogglePin(GPIOA, Buzzer_Pin);
 800151c:	2140      	movs	r1, #64	@ 0x40
 800151e:	480e      	ldr	r0, [pc, #56]	@ (8001558 <StartDefaultTask+0x60>)
 8001520:	f003 fa73 	bl	8004a0a <HAL_GPIO_TogglePin>
 8001524:	e004      	b.n	8001530 <StartDefaultTask+0x38>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2140      	movs	r1, #64	@ 0x40
 800152a:	480b      	ldr	r0, [pc, #44]	@ (8001558 <StartDefaultTask+0x60>)
 800152c:	f003 fa54 	bl	80049d8 <HAL_GPIO_WritePin>
      }

	  if(Fan_bit)
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <StartDefaultTask+0x68>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <StartDefaultTask+0x4c>
	  {
	      //Turn ON Fan
	      HAL_GPIO_WritePin(GPIOA, Fan_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	4806      	ldr	r0, [pc, #24]	@ (8001558 <StartDefaultTask+0x60>)
 800153e:	f003 fa4b 	bl	80049d8 <HAL_GPIO_WritePin>
 8001542:	e004      	b.n	800154e <StartDefaultTask+0x56>
	  }
	  else
	  {
	      //Turn OFF Fan
	      HAL_GPIO_WritePin(GPIOA, Fan_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <StartDefaultTask+0x60>)
 800154a:	f003 fa45 	bl	80049d8 <HAL_GPIO_WritePin>
      }
      osDelay(500);
 800154e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001552:	f007 f8ed 	bl	8008730 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001556:	e7d3      	b.n	8001500 <StartDefaultTask+0x8>
 8001558:	40020000 	.word	0x40020000
 800155c:	20000424 	.word	0x20000424
 8001560:	20000414 	.word	0x20000414

08001564 <StartNextion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNextion */
void StartNextion(void *argument)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b095      	sub	sp, #84	@ 0x54
 8001568:	af04      	add	r7, sp, #16
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNextion */
  /* Infinite loop */
  for(;;)
  {
	      switchvar++;
 800156c:	4b4e      	ldr	r3, [pc, #312]	@ (80016a8 <StartNextion+0x144>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b4c      	ldr	r3, [pc, #304]	@ (80016a8 <StartNextion+0x144>)
 8001576:	701a      	strb	r2, [r3, #0]
	      switch(switchvar)
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <StartNextion+0x144>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	2b06      	cmp	r3, #6
 8001580:	f200 8088 	bhi.w	8001694 <StartNextion+0x130>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <StartNextion+0x28>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015a9 	.word	0x080015a9
 8001590:	080015b3 	.word	0x080015b3
 8001594:	080015cf 	.word	0x080015cf
 8001598:	080015d9 	.word	0x080015d9
 800159c:	08001601 	.word	0x08001601
 80015a0:	0800164b 	.word	0x0800164b
 80015a4:	0800169d 	.word	0x0800169d
	      {
	          case 1:
	              NEXTION_SendString("t0", "12:00");
 80015a8:	4940      	ldr	r1, [pc, #256]	@ (80016ac <StartNextion+0x148>)
 80015aa:	4841      	ldr	r0, [pc, #260]	@ (80016b0 <StartNextion+0x14c>)
 80015ac:	f7ff fd68 	bl	8001080 <NEXTION_SendString>
	              break;
 80015b0:	e075      	b.n	800169e <StartNextion+0x13a>
	          case 2:
	              if(Fan_bit)
 80015b2:	4b40      	ldr	r3, [pc, #256]	@ (80016b4 <StartNextion+0x150>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <StartNextion+0x60>
	              {
	                  NEXTION_SendString("t1", "Fan ON");
 80015ba:	493f      	ldr	r1, [pc, #252]	@ (80016b8 <StartNextion+0x154>)
 80015bc:	483f      	ldr	r0, [pc, #252]	@ (80016bc <StartNextion+0x158>)
 80015be:	f7ff fd5f 	bl	8001080 <NEXTION_SendString>
	              }
	              else
	              {
	                  NEXTION_SendString("t1", "Fan OFF");
	              }
	              break;
 80015c2:	e06c      	b.n	800169e <StartNextion+0x13a>
	                  NEXTION_SendString("t1", "Fan OFF");
 80015c4:	493e      	ldr	r1, [pc, #248]	@ (80016c0 <StartNextion+0x15c>)
 80015c6:	483d      	ldr	r0, [pc, #244]	@ (80016bc <StartNextion+0x158>)
 80015c8:	f7ff fd5a 	bl	8001080 <NEXTION_SendString>
	              break;
 80015cc:	e067      	b.n	800169e <StartNextion+0x13a>
	          case 3:
	              NEXTION_SendString("t2", "AMR@123");
 80015ce:	493d      	ldr	r1, [pc, #244]	@ (80016c4 <StartNextion+0x160>)
 80015d0:	483d      	ldr	r0, [pc, #244]	@ (80016c8 <StartNextion+0x164>)
 80015d2:	f7ff fd55 	bl	8001080 <NEXTION_SendString>
	              break;
 80015d6:	e062      	b.n	800169e <StartNextion+0x13a>
	          case 4:
	              if(voltage >= 1.5)
 80015d8:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <StartNextion+0x168>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	db04      	blt.n	80015f6 <StartNextion+0x92>
	              {
	                  NEXTION_SendString("t4", "Battery Charged");
 80015ec:	4938      	ldr	r1, [pc, #224]	@ (80016d0 <StartNextion+0x16c>)
 80015ee:	4839      	ldr	r0, [pc, #228]	@ (80016d4 <StartNextion+0x170>)
 80015f0:	f7ff fd46 	bl	8001080 <NEXTION_SendString>
	              }
	              else
	              {
	                  NEXTION_SendString("t4", "Battery Low");
	              }
	              break;
 80015f4:	e053      	b.n	800169e <StartNextion+0x13a>
	                  NEXTION_SendString("t4", "Battery Low");
 80015f6:	4938      	ldr	r1, [pc, #224]	@ (80016d8 <StartNextion+0x174>)
 80015f8:	4836      	ldr	r0, [pc, #216]	@ (80016d4 <StartNextion+0x170>)
 80015fa:	f7ff fd41 	bl	8001080 <NEXTION_SendString>
	              break;
 80015fe:	e04e      	b.n	800169e <StartNextion+0x13a>
	          case 5:
	              uint8_t Abuffer[50] = { };
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	222e      	movs	r2, #46	@ 0x2e
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fcc4 	bl	800bf9a <memset>
	              sprintf((char *)Abuffer, "ACC:x=%.2f,y=%.2f,z=%.2f", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
 8001612:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <StartNextion+0x178>)
 8001614:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001618:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <StartNextion+0x178>)
 800161a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800161e:	492f      	ldr	r1, [pc, #188]	@ (80016dc <StartNextion+0x178>)
 8001620:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001624:	f107 060c 	add.w	r6, r7, #12
 8001628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800162c:	e9cd 2300 	strd	r2, r3, [sp]
 8001630:	4622      	mov	r2, r4
 8001632:	462b      	mov	r3, r5
 8001634:	492a      	ldr	r1, [pc, #168]	@ (80016e0 <StartNextion+0x17c>)
 8001636:	4630      	mov	r0, r6
 8001638:	f00a fc4c 	bl	800bed4 <siprintf>
	              NEXTION_SendString("t5",(char *) Abuffer);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <StartNextion+0x180>)
 8001644:	f7ff fd1c 	bl	8001080 <NEXTION_SendString>
	              break;
 8001648:	e029      	b.n	800169e <StartNextion+0x13a>
	          case 6:
	              uint8_t Gbuffer[50] = { };
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	222e      	movs	r2, #46	@ 0x2e
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f00a fc9f 	bl	800bf9a <memset>
	              sprintf((char *)Gbuffer, "GYRO:x=%.2f,y=%.2f,z=%.2f", MPU6050.Gx, MPU6050.Gy, MPU6050.Gz);
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <StartNextion+0x178>)
 800165e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <StartNextion+0x178>)
 8001664:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001668:	491c      	ldr	r1, [pc, #112]	@ (80016dc <StartNextion+0x178>)
 800166a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800166e:	f107 060c 	add.w	r6, r7, #12
 8001672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001676:	e9cd 2300 	strd	r2, r3, [sp]
 800167a:	4622      	mov	r2, r4
 800167c:	462b      	mov	r3, r5
 800167e:	491a      	ldr	r1, [pc, #104]	@ (80016e8 <StartNextion+0x184>)
 8001680:	4630      	mov	r0, r6
 8001682:	f00a fc27 	bl	800bed4 <siprintf>
	              NEXTION_SendString("t6",(char *) Gbuffer);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	4817      	ldr	r0, [pc, #92]	@ (80016ec <StartNextion+0x188>)
 800168e:	f7ff fcf7 	bl	8001080 <NEXTION_SendString>
	              break;
 8001692:	e004      	b.n	800169e <StartNextion+0x13a>
	          case 7:
	              break;
	          default:
	              switchvar = 0;
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <StartNextion+0x144>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	              break;
 800169a:	e000      	b.n	800169e <StartNextion+0x13a>
	              break;
 800169c:	bf00      	nop
         }
         osDelay(100);
 800169e:	2064      	movs	r0, #100	@ 0x64
 80016a0:	f007 f846 	bl	8008730 <osDelay>
	      switchvar++;
 80016a4:	e762      	b.n	800156c <StartNextion+0x8>
 80016a6:	bf00      	nop
 80016a8:	20000428 	.word	0x20000428
 80016ac:	0800fe98 	.word	0x0800fe98
 80016b0:	0800fea0 	.word	0x0800fea0
 80016b4:	20000414 	.word	0x20000414
 80016b8:	0800fea4 	.word	0x0800fea4
 80016bc:	0800feac 	.word	0x0800feac
 80016c0:	0800feb0 	.word	0x0800feb0
 80016c4:	0800feb8 	.word	0x0800feb8
 80016c8:	0800fec0 	.word	0x0800fec0
 80016cc:	20000424 	.word	0x20000424
 80016d0:	0800fec4 	.word	0x0800fec4
 80016d4:	0800fed4 	.word	0x0800fed4
 80016d8:	0800fed8 	.word	0x0800fed8
 80016dc:	20000430 	.word	0x20000430
 80016e0:	0800fee4 	.word	0x0800fee4
 80016e4:	0800ff00 	.word	0x0800ff00
 80016e8:	0800ff04 	.word	0x0800ff04
 80016ec:	0800ff20 	.word	0x0800ff20

080016f0 <StartAccel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAccel */
void StartAccel(void *argument)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAccel */
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80016f8:	491b      	ldr	r1, [pc, #108]	@ (8001768 <StartAccel+0x78>)
 80016fa:	481c      	ldr	r0, [pc, #112]	@ (800176c <StartAccel+0x7c>)
 80016fc:	f000 f8bc 	bl	8001878 <MPU6050_Read_All>
	  osDelay(100);
 8001700:	2064      	movs	r0, #100	@ 0x64
 8001702:	f007 f815 	bl	8008730 <osDelay>
	  //Start ADC Conversion
	  HAL_ADC_Start(&hadc1);
 8001706:	481a      	ldr	r0, [pc, #104]	@ (8001770 <StartAccel+0x80>)
 8001708:	f001 fd50 	bl	80031ac <HAL_ADC_Start>
	  // Poll for conversion completion
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	4817      	ldr	r0, [pc, #92]	@ (8001770 <StartAccel+0x80>)
 8001712:	f001 fe50 	bl	80033b6 <HAL_ADC_PollForConversion>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11a      	bne.n	8001752 <StartAccel+0x62>
	  {
	     // Get ADC value
	     uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800171c:	4814      	ldr	r0, [pc, #80]	@ (8001770 <StartAccel+0x80>)
 800171e:	f001 ffe5 	bl	80036ec <HAL_ADC_GetValue>
 8001722:	60f8      	str	r0, [r7, #12]
	     // Convert ADC value to voltage
	     voltage = ((float)(adcValue * 3.3 )/ 4095.0);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7fe ff0d 	bl	8000544 <__aeabi_ui2d>
 800172a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001760 <StartAccel+0x70>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff82 	bl	8000638 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa74 	bl	8000c28 <__aeabi_d2f>
 8001740:	ee06 0a90 	vmov	s13, r0
 8001744:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001774 <StartAccel+0x84>
 8001748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174c:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <StartAccel+0x88>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  //Stop ADC Conversion
	  HAL_ADC_Stop(&hadc1);
 8001752:	4807      	ldr	r0, [pc, #28]	@ (8001770 <StartAccel+0x80>)
 8001754:	f001 fdfc 	bl	8003350 <HAL_ADC_Stop>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001758:	e7ce      	b.n	80016f8 <StartAccel+0x8>
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	66666666 	.word	0x66666666
 8001764:	400a6666 	.word	0x400a6666
 8001768:	20000430 	.word	0x20000430
 800176c:	200002f4 	.word	0x200002f4
 8001770:	200002ac 	.word	0x200002ac
 8001774:	457ff000 	.word	0x457ff000
 8001778:	20000424 	.word	0x20000424

0800177c <StartVisEffect>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisEffect */
void StartVisEffect(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartVisEffect */
  /* Infinite loop */
  for(;;)
  {
	visHandle();
 8001784:	f000 ff42 	bl	800260c <visHandle>
	osDelay(10);
 8001788:	200a      	movs	r0, #10
 800178a:	f006 ffd1 	bl	8008730 <osDelay>
	visHandle();
 800178e:	bf00      	nop
 8001790:	e7f8      	b.n	8001784 <StartVisEffect+0x8>
	...

08001794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017a6:	f001 fc9d 	bl	80030e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40002000 	.word	0x40002000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80017cc:	2364      	movs	r3, #100	@ 0x64
 80017ce:	9302      	str	r3, [sp, #8]
 80017d0:	2301      	movs	r3, #1
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	f107 030f 	add.w	r3, r7, #15
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	2275      	movs	r2, #117	@ 0x75
 80017de:	21d0      	movs	r1, #208	@ 0xd0
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f003 fb6b 	bl	8004ebc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b68      	cmp	r3, #104	@ 0x68
 80017ea:	d13d      	bne.n	8001868 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80017f0:	2364      	movs	r3, #100	@ 0x64
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2301      	movs	r3, #1
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	f107 030e 	add.w	r3, r7, #14
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	226b      	movs	r2, #107	@ 0x6b
 8001802:	21d0      	movs	r1, #208	@ 0xd0
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f003 fa5f 	bl	8004cc8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800180a:	2307      	movs	r3, #7
 800180c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800180e:	2364      	movs	r3, #100	@ 0x64
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f107 030e 	add.w	r3, r7, #14
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	2219      	movs	r2, #25
 8001820:	21d0      	movs	r1, #208	@ 0xd0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f003 fa50 	bl	8004cc8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800182c:	2364      	movs	r3, #100	@ 0x64
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 030e 	add.w	r3, r7, #14
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	221c      	movs	r2, #28
 800183e:	21d0      	movs	r1, #208	@ 0xd0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f003 fa41 	bl	8004cc8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800184a:	2364      	movs	r3, #100	@ 0x64
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	2301      	movs	r3, #1
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	f107 030e 	add.w	r3, r7, #14
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	221b      	movs	r2, #27
 800185c:	21d0      	movs	r1, #208	@ 0xd0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f003 fa32 	bl	8004cc8 <HAL_I2C_Mem_Write>
        return 0;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <MPU6050_Init+0xa6>
    }
    return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	0000      	movs	r0, r0
 8001874:	0000      	movs	r0, r0
	...

08001878 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b094      	sub	sp, #80	@ 0x50
 800187e:	af04      	add	r7, sp, #16
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001884:	2364      	movs	r3, #100	@ 0x64
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	230e      	movs	r3, #14
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	223b      	movs	r2, #59	@ 0x3b
 8001896:	21d0      	movs	r1, #208	@ 0xd0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f003 fb0f 	bl	8004ebc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800189e:	7a3b      	ldrb	r3, [r7, #8]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	7a7b      	ldrb	r3, [r7, #9]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80018b0:	7abb      	ldrb	r3, [r7, #10]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21a      	sxth	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80018c2:	7b3b      	ldrb	r3, [r7, #12]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80018e2:	7c3b      	ldrb	r3, [r7, #16]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	7c7b      	ldrb	r3, [r7, #17]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80018f4:	7cbb      	ldrb	r3, [r7, #18]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	b21a      	sxth	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001906:	7d3b      	ldrb	r3, [r7, #20]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	7d7b      	ldrb	r3, [r7, #21]
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21a      	sxth	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe20 	bl	8000564 <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4bbd      	ldr	r3, [pc, #756]	@ (8001c20 <MPU6050_Read_All+0x3a8>)
 800192a:	f7fe ffaf 	bl	800088c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe10 	bl	8000564 <__aeabi_i2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4bb5      	ldr	r3, [pc, #724]	@ (8001c20 <MPU6050_Read_All+0x3a8>)
 800194a:	f7fe ff9f 	bl	800088c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe00 	bl	8000564 <__aeabi_i2d>
 8001964:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001c08 <MPU6050_Read_All+0x390>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe ff8f 	bl	800088c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001978:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001984:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001c24 <MPU6050_Read_All+0x3ac>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001c28 <MPU6050_Read_All+0x3b0>
 8001990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fddf 	bl	8000564 <__aeabi_i2d>
 80019a6:	a39a      	add	r3, pc, #616	@ (adr r3, 8001c10 <MPU6050_Read_All+0x398>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe ff6e 	bl	800088c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdcf 	bl	8000564 <__aeabi_i2d>
 80019c6:	a392      	add	r3, pc, #584	@ (adr r3, 8001c10 <MPU6050_Read_All+0x398>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe ff5e 	bl	800088c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdbf 	bl	8000564 <__aeabi_i2d>
 80019e6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001c10 <MPU6050_Read_All+0x398>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe ff4e 	bl	800088c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80019fa:	f001 fb87 	bl	800310c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	4b8a      	ldr	r3, [pc, #552]	@ (8001c2c <MPU6050_Read_All+0x3b4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd9c 	bl	8000544 <__aeabi_ui2d>
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b87      	ldr	r3, [pc, #540]	@ (8001c30 <MPU6050_Read_All+0x3b8>)
 8001a12:	f7fe ff3b 	bl	800088c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001a1e:	f001 fb75 	bl	800310c <HAL_GetTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a81      	ldr	r2, [pc, #516]	@ (8001c2c <MPU6050_Read_All+0x3b4>)
 8001a26:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a40:	4619      	mov	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd88 	bl	8000564 <__aeabi_i2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f00d fe80 	bl	800f760 <sqrt>
 8001a60:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a70:	f7ff f84a 	bl	8000b08 <__aeabi_dcmpeq>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11f      	bne.n	8001aba <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd6f 	bl	8000564 <__aeabi_i2d>
 8001a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8a:	f7fe feff 	bl	800088c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9a:	eef0 0a67 	vmov.f32	s1, s15
 8001a9e:	f00d fe8b 	bl	800f7b8 <atan>
 8001aa2:	ec51 0b10 	vmov	r0, r1, d0
 8001aa6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001c18 <MPU6050_Read_All+0x3a0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001ab8:	e005      	b.n	8001ac6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	425b      	negs	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd48 	bl	8000564 <__aeabi_i2d>
 8001ad4:	4682      	mov	sl, r0
 8001ad6:	468b      	mov	fp, r1
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd40 	bl	8000564 <__aeabi_i2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	ec43 2b11 	vmov	d1, r2, r3
 8001aec:	ec4b ab10 	vmov	d0, sl, fp
 8001af0:	f00d fe34 	bl	800f75c <atan2>
 8001af4:	ec51 0b10 	vmov	r0, r1, d0
 8001af8:	a347      	add	r3, pc, #284	@ (adr r3, 8001c18 <MPU6050_Read_All+0x3a0>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fd9b 	bl	8000638 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b49      	ldr	r3, [pc, #292]	@ (8001c34 <MPU6050_Read_All+0x3bc>)
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	f7ff f802 	bl	8000b1c <__aeabi_dcmplt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <MPU6050_Read_All+0x2bc>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <MPU6050_Read_All+0x3c0>)
 8001b2a:	f7ff f815 	bl	8000b58 <__aeabi_dcmpgt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d114      	bne.n	8001b5e <MPU6050_Read_All+0x2e6>
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <MPU6050_Read_All+0x3c0>)
 8001b3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b3e:	f7ff f80b 	bl	8000b58 <__aeabi_dcmpgt>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d015      	beq.n	8001b74 <MPU6050_Read_All+0x2fc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <MPU6050_Read_All+0x3bc>)
 8001b54:	f7fe ffe2 	bl	8000b1c <__aeabi_dcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001b5e:	4937      	ldr	r1, [pc, #220]	@ (8001c3c <MPU6050_Read_All+0x3c4>)
 8001b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b64:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001b72:	e014      	b.n	8001b9e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001b7a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001b7e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b82:	eef0 1a67 	vmov.f32	s3, s15
 8001b86:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b8a:	482c      	ldr	r0, [pc, #176]	@ (8001c3c <MPU6050_Read_All+0x3c4>)
 8001b8c:	f000 f85a 	bl	8001c44 <Kalman_getAngle>
 8001b90:	eeb0 7a40 	vmov.f32	s14, s0
 8001b94:	eef0 7a60 	vmov.f32	s15, s1
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <MPU6050_Read_All+0x3c0>)
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	f7fe ffd0 	bl	8000b58 <__aeabi_dcmpgt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001bd6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001bda:	eeb0 1a47 	vmov.f32	s2, s14
 8001bde:	eef0 1a67 	vmov.f32	s3, s15
 8001be2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001be6:	4816      	ldr	r0, [pc, #88]	@ (8001c40 <MPU6050_Read_All+0x3c8>)
 8001be8:	f000 f82c 	bl	8001c44 <Kalman_getAngle>
 8001bec:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf0:	eef0 7a60 	vmov.f32	s15, s1
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001bfa:	bf00      	nop
 8001bfc:	3740      	adds	r7, #64	@ 0x40
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c04:	f3af 8000 	nop.w
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40cc2900 	.word	0x40cc2900
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40606000 	.word	0x40606000
 8001c18:	1a63c1f8 	.word	0x1a63c1f8
 8001c1c:	404ca5dc 	.word	0x404ca5dc
 8001c20:	40d00000 	.word	0x40d00000
 8001c24:	43aa0000 	.word	0x43aa0000
 8001c28:	42121eb8 	.word	0x42121eb8
 8001c2c:	20000488 	.word	0x20000488
 8001c30:	408f4000 	.word	0x408f4000
 8001c34:	c0568000 	.word	0xc0568000
 8001c38:	40568000 	.word	0x40568000
 8001c3c:	20000050 	.word	0x20000050
 8001c40:	20000008 	.word	0x20000008

08001c44 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b096      	sub	sp, #88	@ 0x58
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	61f8      	str	r0, [r7, #28]
 8001c4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c50:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c54:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c62:	f7fe fb31 	bl	80002c8 <__aeabi_dsub>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fb20 	bl	80002cc <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca6:	f7fe fcc7 	bl	8000638 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001cb8:	f7fe fb06 	bl	80002c8 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001cca:	f7fe fafd 	bl	80002c8 <__aeabi_dsub>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe faf6 	bl	80002cc <__adddf3>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cec:	f7fe fca4 	bl	8000638 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fae8 	bl	80002cc <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	69f9      	ldr	r1, [r7, #28]
 8001d02:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d16:	f7fe fc8f 	bl	8000638 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fad1 	bl	80002c8 <__aeabi_dsub>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	69f9      	ldr	r1, [r7, #28]
 8001d2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d40:	f7fe fc7a 	bl	8000638 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fabc 	bl	80002c8 <__aeabi_dsub>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	69f9      	ldr	r1, [r7, #28]
 8001d56:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d6a:	f7fe fc65 	bl	8000638 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe faa9 	bl	80002cc <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d90:	f7fe fa9c 	bl	80002cc <__adddf3>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001da2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001da6:	f7fe fd71 	bl	800088c <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dbc:	f7fe fd66 	bl	800088c <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001dce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dd2:	f7fe fa79 	bl	80002c8 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001de4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dec:	f7fe fc24 	bl	8000638 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fa68 	bl	80002cc <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	69f9      	ldr	r1, [r7, #28]
 8001e02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e14:	f7fe fc10 	bl	8000638 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fa54 	bl	80002cc <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	69f9      	ldr	r1, [r7, #28]
 8001e2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001e34:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001e3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001e48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e50:	f7fe fbf2 	bl	8000638 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fa34 	bl	80002c8 <__aeabi_dsub>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	69f9      	ldr	r1, [r7, #28]
 8001e66:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e78:	f7fe fbde 	bl	8000638 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fa20 	bl	80002c8 <__aeabi_dsub>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	69f9      	ldr	r1, [r7, #28]
 8001e8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001e98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ea0:	f7fe fbca 	bl	8000638 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f7fe fa0c 	bl	80002c8 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	69f9      	ldr	r1, [r7, #28]
 8001eb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001ec0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ec4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ec8:	f7fe fbb6 	bl	8000638 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe f9f8 	bl	80002c8 <__aeabi_dsub>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	69f9      	ldr	r1, [r7, #28]
 8001ede:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ee8:	ec43 2b17 	vmov	d7, r2, r3
};
 8001eec:	eeb0 0a47 	vmov.f32	s0, s14
 8001ef0:	eef0 0a67 	vmov.f32	s1, s15
 8001ef4:	3758      	adds	r7, #88	@ 0x58
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_MspInit+0x54>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	f06f 0001 	mvn.w	r0, #1
 8001f42:	f001 feef 	bl	8003d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_ADC_MspInit+0x8c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12f      	bne.n	8001fd6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_ADC_MspInit+0x90>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Battery_Monitoring_Pin;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_Monitoring_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <HAL_ADC_MspInit+0x94>)
 8001fc2:	f002 fb75 	bl	80046b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	2012      	movs	r0, #18
 8001fcc:	f001 feaa 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fd0:	2012      	movs	r0, #18
 8001fd2:	f001 fec3 	bl	8003d5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	@ 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012000 	.word	0x40012000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_I2C_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800203c:	2304      	movs	r3, #4
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	@ (8002078 <HAL_I2C_MspInit+0x8c>)
 8002048:	f002 fb32 	bl	80046b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 8002056:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800205a:	6413      	str	r3, [r2, #64]	@ 0x40
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_I2C_MspInit+0x88>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	@ 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40005400 	.word	0x40005400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	@ 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3a      	ldr	r2, [pc, #232]	@ (8002184 <HAL_UART_MspInit+0x108>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d135      	bne.n	800210a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020a8:	f043 0310 	orr.w	r3, r3, #16
 80020ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ae:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a31      	ldr	r2, [pc, #196]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e8:	2307      	movs	r3, #7
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	4826      	ldr	r0, [pc, #152]	@ (800218c <HAL_UART_MspInit+0x110>)
 80020f4:	f002 fadc 	bl	80046b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2105      	movs	r1, #5
 80020fc:	2025      	movs	r0, #37	@ 0x25
 80020fe:	f001 fe11 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002102:	2025      	movs	r0, #37	@ 0x25
 8002104:	f001 fe2a 	bl	8003d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002108:	e038      	b.n	800217c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_UART_MspInit+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d133      	bne.n	800217c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 800211e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002122:	6413      	str	r3, [r2, #64]	@ 0x40
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_UART_MspInit+0x10c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800214c:	230c      	movs	r3, #12
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800215c:	2307      	movs	r3, #7
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	4809      	ldr	r0, [pc, #36]	@ (800218c <HAL_UART_MspInit+0x110>)
 8002168:	f002 faa2 	bl	80046b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2105      	movs	r1, #5
 8002170:	2026      	movs	r0, #38	@ 0x26
 8002172:	f001 fdd7 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002176:	2026      	movs	r0, #38	@ 0x26
 8002178:	f001 fdf0 	bl	8003d5c <HAL_NVIC_EnableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3730      	adds	r7, #48	@ 0x30
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	40004400 	.word	0x40004400

08002194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	@ 0x38
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_InitTick+0xe4>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	4a32      	ldr	r2, [pc, #200]	@ (8002278 <HAL_InitTick+0xe4>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b4:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <HAL_InitTick+0xe4>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c0:	f107 0210 	add.w	r2, r7, #16
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fd76 	bl	8005cbc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021da:	f003 fd47 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80021de:	6378      	str	r0, [r7, #52]	@ 0x34
 80021e0:	e004      	b.n	80021ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021e2:	f003 fd43 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80021e6:	4603      	mov	r3, r0
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_InitTick+0xe8>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	3b01      	subs	r3, #1
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80021fa:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_InitTick+0xec>)
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_InitTick+0xf0>)
 80021fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_InitTick+0xec>)
 8002202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002206:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_InitTick+0xec>)
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800220e:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_InitTick+0xec>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_InitTick+0xec>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_InitTick+0xec>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002220:	4817      	ldr	r0, [pc, #92]	@ (8002280 <HAL_InitTick+0xec>)
 8002222:	f004 fa4b 	bl	80066bc <HAL_TIM_Base_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800222c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11b      	bne.n	800226c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002234:	4812      	ldr	r0, [pc, #72]	@ (8002280 <HAL_InitTick+0xec>)
 8002236:	f004 fb03 	bl	8006840 <HAL_TIM_Base_Start_IT>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002240:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002248:	202d      	movs	r0, #45	@ 0x2d
 800224a:	f001 fd87 	bl	8003d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d808      	bhi.n	8002266 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	202d      	movs	r0, #45	@ 0x2d
 800225a:	f001 fd63 	bl	8003d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_InitTick+0xf4>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e002      	b.n	800226c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800226c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002270:	4618      	mov	r0, r3
 8002272:	3738      	adds	r7, #56	@ 0x38
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	431bde83 	.word	0x431bde83
 8002280:	2000048c 	.word	0x2000048c
 8002284:	40002000 	.word	0x40002000
 8002288:	200000a8 	.word	0x200000a8

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <ADC_IRQHandler+0x10>)
 80022ca:	f001 f8ff 	bl	80034cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200002ac 	.word	0x200002ac

080022d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <USART1_IRQHandler+0x10>)
 80022de:	f005 f9b1 	bl	8007644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000348 	.word	0x20000348

080022ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <USART2_IRQHandler+0x10>)
 80022f2:	f005 f9a7 	bl	8007644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000390 	.word	0x20000390

08002300 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002306:	f004 fc2d 	bl	8006b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000048c 	.word	0x2000048c

08002314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_kill>:

int _kill(int pid, int sig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232e:	f009 fe93 	bl	800c058 <__errno>
 8002332:	4603      	mov	r3, r0
 8002334:	2216      	movs	r2, #22
 8002336:	601a      	str	r2, [r3, #0]
  return -1;
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_exit>:

void _exit (int status)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ffe7 	bl	8002324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002356:	bf00      	nop
 8002358:	e7fd      	b.n	8002356 <_exit+0x12>

0800235a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e00a      	b.n	8002382 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800236c:	f3af 8000 	nop.w
 8002370:	4601      	mov	r1, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	b2ca      	uxtb	r2, r1
 800237a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf0      	blt.n	800236c <_read+0x12>
  }

  return len;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e009      	b.n	80023ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf1      	blt.n	80023a6 <_write+0x12>
  }
  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_close>:

int _close(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f4:	605a      	str	r2, [r3, #4]
  return 0;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_isatty>:

int _isatty(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800240c:	2301      	movs	r3, #1
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800243c:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <_sbrk+0x5c>)
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <_sbrk+0x60>)
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002448:	4b13      	ldr	r3, [pc, #76]	@ (8002498 <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <_sbrk+0x64>)
 8002452:	4a12      	ldr	r2, [pc, #72]	@ (800249c <_sbrk+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d207      	bcs.n	8002474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002464:	f009 fdf8 	bl	800c058 <__errno>
 8002468:	4603      	mov	r3, r0
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e009      	b.n	8002488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20020000 	.word	0x20020000
 8002494:	00000400 	.word	0x00000400
 8002498:	200004d4 	.word	0x200004d4
 800249c:	20005278 	.word	0x20005278

080024a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <SystemInit+0x20>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <SystemInit+0x20>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <visFill>:
		visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
	}
}

// Fill entire strip with selected color
void visFill(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t color) {
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < frameBufferSize / 3; i++) {
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e022      	b.n	800251c <visFill+0x58>
		frameBuffer[i*3 + 0] = color & 0xFF;
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0a19      	lsrs	r1, r3, #8
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	3301      	adds	r3, #1
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0c19      	lsrs	r1, r3, #16
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < frameBufferSize / 3; i++) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <visFill+0x78>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	085a      	lsrs	r2, r3, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8d4      	bhi.n	80024d6 <visFill+0x12>
	}
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	aaaaaaab 	.word	0xaaaaaaab

08002540 <visInit>:


void visInit(char* order)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	uint8_t i;

	// This initializes indexes used to shift each color into correct position. The shifting is used in newColor(r, g, b)
	indexR = strchr(order, 'R') - order;
 8002548:	2152      	movs	r1, #82	@ 0x52
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f009 fd2d 	bl	800bfaa <strchr>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <visInit+0xb4>)
 800255a:	701a      	strb	r2, [r3, #0]
	indexG = strchr(order, 'G') - order;
 800255c:	2147      	movs	r1, #71	@ 0x47
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f009 fd23 	bl	800bfaa <strchr>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <visInit+0xb8>)
 800256e:	701a      	strb	r2, [r3, #0]
	indexB = strchr(order, 'B') - order;
 8002570:	2142      	movs	r1, #66	@ 0x42
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f009 fd19 	bl	800bfaa <strchr>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	b2da      	uxtb	r2, r3
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <visInit+0xbc>)
 8002582:	701a      	strb	r2, [r3, #0]
	// 4 paralel output LED strips needs 18% overhead during TX
	// 8 paralel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13


	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e02a      	b.n	80025e0 <visInit+0xa0>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = i;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <visInit+0xc0>)
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	330c      	adds	r3, #12
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10d      	bne.n	80025c0 <visInit+0x80>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <visInit+0xc0>)
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	4a15      	ldr	r2, [pc, #84]	@ (8002604 <visInit+0xc4>)
 80025ae:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <visInit+0xc0>)
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	22b4      	movs	r2, #180	@ 0xb4
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e00c      	b.n	80025da <visInit+0x9a>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002600 <visInit+0xc0>)
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	4413      	add	r3, r2
 80025c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002608 <visInit+0xc8>)
 80025ca:	601a      	str	r2, [r3, #0]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002600 <visInit+0xc0>)
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	223c      	movs	r2, #60	@ 0x3c
 80025d8:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d9d1      	bls.n	800258a <visInit+0x4a>
		}

	}


	ws2812b_init();
 80025e6:	f000 fd0f 	bl	8003008 <ws2812b_init>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200005c8 	.word	0x200005c8
 80025f8:	2000009c 	.word	0x2000009c
 80025fc:	2000009d 	.word	0x2000009d
 8002600:	200003e8 	.word	0x200003e8
 8002604:	200004d8 	.word	0x200004d8
 8002608:	2000058c 	.word	0x2000058c

0800260c <visHandle>:


void visHandle()
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0

	if(ws2812b.transferComplete)
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <visHandle+0x34>)
 8002612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <visHandle+0x30>
	{
		// Update your framebuffer here or swap buffers
		//visHandle2();

		visFill(frameBuffer, sizeof(frameBuffer), newColor(0, 255, 0));
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <visHandle+0x38>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	22ff      	movs	r2, #255	@ 0xff
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	461a      	mov	r2, r3
 8002628:	21b4      	movs	r1, #180	@ 0xb4
 800262a:	4807      	ldr	r0, [pc, #28]	@ (8002648 <visHandle+0x3c>)
 800262c:	f7ff ff4a 	bl	80024c4 <visFill>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <visHandle+0x34>)
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		ws2812b_handle();
 8002638:	f000 fcf6 	bl	8003028 <ws2812b_handle>
	}
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200003e8 	.word	0x200003e8
 8002644:	2000009c 	.word	0x2000009c
 8002648:	200004d8 	.word	0x200004d8

0800264c <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <ws2812b_gpio_init+0x44>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <ws2812b_gpio_init+0x44>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	@ 0x30
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <ws2812b_gpio_init+0x44>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 800266e:	230f      	movs	r3, #15
 8002670:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8002672:	2301      	movs	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4804      	ldr	r0, [pc, #16]	@ (8002694 <ws2812b_gpio_init+0x48>)
 8002684:	f002 f814 	bl	80046b0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_BLUE_PIN;
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
	#endif
}
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40020800 	.word	0x40020800

08002698 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b52      	ldr	r3, [pc, #328]	@ (80027ec <TIM1_init+0x154>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	4a51      	ldr	r2, [pc, #324]	@ (80027ec <TIM1_init+0x154>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ae:	4b4f      	ldr	r3, [pc, #316]	@ (80027ec <TIM1_init+0x154>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80026ba:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <TIM1_init+0x158>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	4a4c      	ldr	r2, [pc, #304]	@ (80027f4 <TIM1_init+0x15c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	4a4b      	ldr	r2, [pc, #300]	@ (80027f8 <TIM1_init+0x160>)
 80026ca:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 80026cc:	4b48      	ldr	r3, [pc, #288]	@ (80027f0 <TIM1_init+0x158>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <TIM1_init+0x164>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0adb      	lsrs	r3, r3, #11
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <TIM1_init+0x168>)
 80026da:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 80026dc:	4b46      	ldr	r3, [pc, #280]	@ (80027f8 <TIM1_init+0x160>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <TIM1_init+0x16c>)
 80026ec:	fba3 2302 	umull	r2, r3, r3, r2
 80026f0:	08db      	lsrs	r3, r3, #3
 80026f2:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 80026f4:	4b40      	ldr	r3, [pc, #256]	@ (80027f8 <TIM1_init+0x160>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	461a      	mov	r2, r3
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <TIM1_init+0x170>)
 8002704:	fba3 2302 	umull	r2, r3, r3, r2
 8002708:	08db      	lsrs	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 800270c:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <TIM1_init+0x174>)
 800270e:	4a40      	ldr	r2, [pc, #256]	@ (8002810 <TIM1_init+0x178>)
 8002710:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <TIM1_init+0x160>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3d      	ldr	r2, [pc, #244]	@ (800280c <TIM1_init+0x174>)
 8002718:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 800271a:	4b3c      	ldr	r3, [pc, #240]	@ (800280c <TIM1_init+0x174>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <TIM1_init+0x174>)
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b39      	ldr	r3, [pc, #228]	@ (800280c <TIM1_init+0x174>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800272c:	4b37      	ldr	r3, [pc, #220]	@ (800280c <TIM1_init+0x174>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 8002732:	4836      	ldr	r0, [pc, #216]	@ (800280c <TIM1_init+0x174>)
 8002734:	f004 f8f4 	bl	8006920 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2019      	movs	r0, #25
 800273e:	f001 faf1 	bl	8003d24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002742:	2019      	movs	r0, #25
 8002744:	f001 fb0a 	bl	8003d5c <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002748:	4b32      	ldr	r3, [pc, #200]	@ (8002814 <TIM1_init+0x17c>)
 800274a:	2260      	movs	r2, #96	@ 0x60
 800274c:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800274e:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <TIM1_init+0x17c>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8002754:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <TIM1_init+0x17c>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <TIM1_init+0x17c>)
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002760:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <TIM1_init+0x17c>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8002766:	2200      	movs	r2, #0
 8002768:	492a      	ldr	r1, [pc, #168]	@ (8002814 <TIM1_init+0x17c>)
 800276a:	4828      	ldr	r0, [pc, #160]	@ (800280c <TIM1_init+0x174>)
 800276c:	f004 faea 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <TIM1_init+0x180>)
 8002772:	2260      	movs	r2, #96	@ 0x60
 8002774:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <TIM1_init+0x180>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 800277c:	4a26      	ldr	r2, [pc, #152]	@ (8002818 <TIM1_init+0x180>)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <TIM1_init+0x180>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8002788:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <TIM1_init+0x180>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <TIM1_init+0x180>)
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002794:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <TIM1_init+0x180>)
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 800279a:	2204      	movs	r2, #4
 800279c:	491e      	ldr	r1, [pc, #120]	@ (8002818 <TIM1_init+0x180>)
 800279e:	481b      	ldr	r0, [pc, #108]	@ (800280c <TIM1_init+0x174>)
 80027a0:	f004 fad0 	bl	8006d44 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 80027a4:	4819      	ldr	r0, [pc, #100]	@ (800280c <TIM1_init+0x174>)
 80027a6:	f003 ffe3 	bl	8006770 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 80027aa:	2100      	movs	r1, #0
 80027ac:	4817      	ldr	r0, [pc, #92]	@ (800280c <TIM1_init+0x174>)
 80027ae:	f004 f911 	bl	80069d4 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 80027b2:	4b16      	ldr	r3, [pc, #88]	@ (800280c <TIM1_init+0x174>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <TIM1_init+0x14a>
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <TIM1_init+0x174>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <TIM1_init+0x14a>
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <TIM1_init+0x174>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <TIM1_init+0x174>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800
 80027f0:	20000098 	.word	0x20000098
 80027f4:	014f8b59 	.word	0x014f8b59
 80027f8:	200006ac 	.word	0x200006ac
 80027fc:	1b4e81b5 	.word	0x1b4e81b5
 8002800:	200006b0 	.word	0x200006b0
 8002804:	38e38e39 	.word	0x38e38e39
 8002808:	88888889 	.word	0x88888889
 800280c:	2000062c 	.word	0x2000062c
 8002810:	40010000 	.word	0x40010000
 8002814:	20000674 	.word	0x20000674
 8002818:	20000690 	.word	0x20000690

0800281c <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	4b65      	ldr	r3, [pc, #404]	@ (80029bc <DMA2_init+0x1a0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a64      	ldr	r2, [pc, #400]	@ (80029bc <DMA2_init+0x1a0>)
 800282c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b62      	ldr	r3, [pc, #392]	@ (80029bc <DMA2_init+0x1a0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283e:	4b60      	ldr	r3, [pc, #384]	@ (80029c0 <DMA2_init+0x1a4>)
 8002840:	2240      	movs	r2, #64	@ 0x40
 8002842:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8002844:	4b5e      	ldr	r3, [pc, #376]	@ (80029c0 <DMA2_init+0x1a4>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800284a:	4b5d      	ldr	r3, [pc, #372]	@ (80029c0 <DMA2_init+0x1a4>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002850:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <DMA2_init+0x1a4>)
 8002852:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002856:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002858:	4b59      	ldr	r3, [pc, #356]	@ (80029c0 <DMA2_init+0x1a4>)
 800285a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800285e:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002860:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <DMA2_init+0x1a4>)
 8002862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002866:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002868:	4b55      	ldr	r3, [pc, #340]	@ (80029c0 <DMA2_init+0x1a4>)
 800286a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800286e:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002870:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <DMA2_init+0x1a4>)
 8002872:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002876:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002878:	4b51      	ldr	r3, [pc, #324]	@ (80029c0 <DMA2_init+0x1a4>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800287e:	4b50      	ldr	r3, [pc, #320]	@ (80029c0 <DMA2_init+0x1a4>)
 8002880:	2203      	movs	r2, #3
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8002884:	4b4e      	ldr	r3, [pc, #312]	@ (80029c0 <DMA2_init+0x1a4>)
 8002886:	2200      	movs	r2, #0
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800288a:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <DMA2_init+0x1a4>)
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 8002890:	4b4b      	ldr	r3, [pc, #300]	@ (80029c0 <DMA2_init+0x1a4>)
 8002892:	4a4c      	ldr	r2, [pc, #304]	@ (80029c4 <DMA2_init+0x1a8>)
 8002894:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 8002896:	484a      	ldr	r0, [pc, #296]	@ (80029c0 <DMA2_init+0x1a4>)
 8002898:	f001 fb1c 	bl	8003ed4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 800289c:	4848      	ldr	r0, [pc, #288]	@ (80029c0 <DMA2_init+0x1a4>)
 800289e:	f001 fa6b 	bl	8003d78 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 80028a2:	4949      	ldr	r1, [pc, #292]	@ (80029c8 <DMA2_init+0x1ac>)
 80028a4:	2330      	movs	r3, #48	@ 0x30
 80028a6:	4a49      	ldr	r2, [pc, #292]	@ (80029cc <DMA2_init+0x1b0>)
 80028a8:	4845      	ldr	r0, [pc, #276]	@ (80029c0 <DMA2_init+0x1a4>)
 80028aa:	f001 fb71 	bl	8003f90 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ae:	4b48      	ldr	r3, [pc, #288]	@ (80029d0 <DMA2_init+0x1b4>)
 80028b0:	2240      	movs	r2, #64	@ 0x40
 80028b2:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b4:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <DMA2_init+0x1b4>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80028ba:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <DMA2_init+0x1b4>)
 80028bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c0:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028c2:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <DMA2_init+0x1b4>)
 80028c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028c8:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ca:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <DMA2_init+0x1b4>)
 80028cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d0:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80028d2:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <DMA2_init+0x1b4>)
 80028d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d8:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <DMA2_init+0x1b4>)
 80028dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028e0:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	@ (80029d0 <DMA2_init+0x1b4>)
 80028e4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80028e8:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <DMA2_init+0x1b4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028f0:	4b37      	ldr	r3, [pc, #220]	@ (80029d0 <DMA2_init+0x1b4>)
 80028f2:	2203      	movs	r2, #3
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80028f6:	4b36      	ldr	r3, [pc, #216]	@ (80029d0 <DMA2_init+0x1b4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028fc:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <DMA2_init+0x1b4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaCC1.Instance = DMA2_Stream1;
 8002902:	4b33      	ldr	r3, [pc, #204]	@ (80029d0 <DMA2_init+0x1b4>)
 8002904:	4a33      	ldr	r2, [pc, #204]	@ (80029d4 <DMA2_init+0x1b8>)
 8002906:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 8002908:	4831      	ldr	r0, [pc, #196]	@ (80029d0 <DMA2_init+0x1b4>)
 800290a:	f001 fae3 	bl	8003ed4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 800290e:	4830      	ldr	r0, [pc, #192]	@ (80029d0 <DMA2_init+0x1b4>)
 8002910:	f001 fa32 	bl	8003d78 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8002914:	4930      	ldr	r1, [pc, #192]	@ (80029d8 <DMA2_init+0x1bc>)
 8002916:	2330      	movs	r3, #48	@ 0x30
 8002918:	4a30      	ldr	r2, [pc, #192]	@ (80029dc <DMA2_init+0x1c0>)
 800291a:	482d      	ldr	r0, [pc, #180]	@ (80029d0 <DMA2_init+0x1b4>)
 800291c:	f001 fb38 	bl	8003f90 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002920:	4b2f      	ldr	r3, [pc, #188]	@ (80029e0 <DMA2_init+0x1c4>)
 8002922:	2240      	movs	r2, #64	@ 0x40
 8002924:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002926:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <DMA2_init+0x1c4>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800292c:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <DMA2_init+0x1c4>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002932:	4b2b      	ldr	r3, [pc, #172]	@ (80029e0 <DMA2_init+0x1c4>)
 8002934:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002938:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800293a:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <DMA2_init+0x1c4>)
 800293c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002940:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <DMA2_init+0x1c4>)
 8002944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002948:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <DMA2_init+0x1c4>)
 800294c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002950:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8002952:	4b23      	ldr	r3, [pc, #140]	@ (80029e0 <DMA2_init+0x1c4>)
 8002954:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002958:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <DMA2_init+0x1c4>)
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002960:	4b1f      	ldr	r3, [pc, #124]	@ (80029e0 <DMA2_init+0x1c4>)
 8002962:	2203      	movs	r2, #3
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <DMA2_init+0x1c4>)
 8002968:	2200      	movs	r2, #0
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <DMA2_init+0x1c4>)
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <DMA2_init+0x1c4>)
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <DMA2_init+0x1c8>)
 8002976:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8002978:	4819      	ldr	r0, [pc, #100]	@ (80029e0 <DMA2_init+0x1c4>)
 800297a:	f001 faab 	bl	8003ed4 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <DMA2_init+0x1c4>)
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <DMA2_init+0x1cc>)
 8002982:	63da      	str	r2, [r3, #60]	@ 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <DMA2_init+0x1c4>)
 8002986:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <DMA2_init+0x1d0>)
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <DMA2_init+0x1c4>)
 800298c:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <DMA2_init+0x1d4>)
 800298e:	64da      	str	r2, [r3, #76]	@ 0x4c

	HAL_DMA_Init(&dmaCC2);
 8002990:	4813      	ldr	r0, [pc, #76]	@ (80029e0 <DMA2_init+0x1c4>)
 8002992:	f001 f9f1 	bl	8003d78 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	203a      	movs	r0, #58	@ 0x3a
 800299c:	f001 f9c2 	bl	8003d24 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80029a0:	203a      	movs	r0, #58	@ 0x3a
 80029a2:	f001 f9db 	bl	8003d5c <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80029a6:	4913      	ldr	r1, [pc, #76]	@ (80029f4 <DMA2_init+0x1d8>)
 80029a8:	2330      	movs	r3, #48	@ 0x30
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <DMA2_init+0x1b0>)
 80029ac:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <DMA2_init+0x1c4>)
 80029ae:	f001 fb2a 	bl	8004006 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	200006b4 	.word	0x200006b4
 80029c4:	40026488 	.word	0x40026488
 80029c8:	200000a0 	.word	0x200000a0
 80029cc:	40020818 	.word	0x40020818
 80029d0:	20000714 	.word	0x20000714
 80029d4:	40026428 	.word	0x40026428
 80029d8:	200005cc 	.word	0x200005cc
 80029dc:	4002081a 	.word	0x4002081a
 80029e0:	20000774 	.word	0x20000774
 80029e4:	40026440 	.word	0x40026440
 80029e8:	08002cf1 	.word	0x08002cf1
 80029ec:	08002c95 	.word	0x08002c95
 80029f0:	08002c75 	.word	0x08002c75
 80029f4:	200000a4 	.word	0x200000a4

080029f8 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	1c58      	adds	r0, r3, #1
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6088      	str	r0, [r1, #8]
 8002a10:	4413      	add	r3, r2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	1c58      	adds	r0, r3, #1
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6088      	str	r0, [r1, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	1c58      	adds	r0, r3, #1
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6088      	str	r0, [r1, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d102      	bne.n	8002a50 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7b18      	ldrb	r0, [r3, #12]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b299      	uxth	r1, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	b2dc      	uxtb	r4, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	4623      	mov	r3, r4
 8002a68:	f000 f9e6 	bl	8002e38 <ws2812b_set_pixel>
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}

08002a74 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 8002a7a:	4b72      	ldr	r3, [pc, #456]	@ (8002c44 <WS2812_sendbuf+0x1d0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2020 	strb.w	r2, [r3, #32]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	e019      	b.n	8002abc <WS2812_sendbuf+0x48>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 8002a88:	4a6e      	ldr	r2, [pc, #440]	@ (8002c44 <WS2812_sendbuf+0x1d0>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4413      	add	r3, r2
 8002a90:	3308      	adds	r3, #8
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8002c44 <WS2812_sendbuf+0x1d0>)
 8002a9c:	4413      	add	r3, r2
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ffa9 	bl	80029f8 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4a66      	ldr	r2, [pc, #408]	@ (8002c44 <WS2812_sendbuf+0x1d0>)
 8002aac:	4413      	add	r3, r2
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ffa1 	bl	80029f8 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d9e2      	bls.n	8002a88 <WS2812_sendbuf+0x14>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8002ac2:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b60      	ldr	r3, [pc, #384]	@ (8002c4c <WS2812_sendbuf+0x1d8>)
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d904      	bls.n	8002ad8 <WS2812_sendbuf+0x64>
 8002ace:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002ad0:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	e019      	b.n	8002b0c <WS2812_sendbuf+0x98>
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b5d      	ldr	r3, [pc, #372]	@ (8002c54 <WS2812_sendbuf+0x1e0>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d904      	bls.n	8002aee <WS2812_sendbuf+0x7a>
 8002ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002ae6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002aea:	6093      	str	r3, [r2, #8]
 8002aec:	e00e      	b.n	8002b0c <WS2812_sendbuf+0x98>
 8002aee:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b58      	ldr	r3, [pc, #352]	@ (8002c58 <WS2812_sendbuf+0x1e4>)
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d904      	bls.n	8002b04 <WS2812_sendbuf+0x90>
 8002afa:	4a58      	ldr	r2, [pc, #352]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002afc:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e003      	b.n	8002b0c <WS2812_sendbuf+0x98>
 8002b04:	4a55      	ldr	r2, [pc, #340]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002b06:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002b0a:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8002b0c:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b4e      	ldr	r3, [pc, #312]	@ (8002c4c <WS2812_sendbuf+0x1d8>)
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d904      	bls.n	8002b22 <WS2812_sendbuf+0xae>
 8002b18:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002b1a:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	e019      	b.n	8002b56 <WS2812_sendbuf+0xe2>
 8002b22:	4b4f      	ldr	r3, [pc, #316]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <WS2812_sendbuf+0x1e0>)
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d904      	bls.n	8002b38 <WS2812_sendbuf+0xc4>
 8002b2e:	4a48      	ldr	r2, [pc, #288]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002b30:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002b34:	6093      	str	r3, [r2, #8]
 8002b36:	e00e      	b.n	8002b56 <WS2812_sendbuf+0xe2>
 8002b38:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <WS2812_sendbuf+0x1e4>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d904      	bls.n	8002b4e <WS2812_sendbuf+0xda>
 8002b44:	4a45      	ldr	r2, [pc, #276]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002b46:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002b4a:	60d3      	str	r3, [r2, #12]
 8002b4c:	e003      	b.n	8002b56 <WS2812_sendbuf+0xe2>
 8002b4e:	4a43      	ldr	r2, [pc, #268]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002b50:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002b54:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8002b56:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <WS2812_sendbuf+0x1d8>)
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d904      	bls.n	8002b6c <WS2812_sendbuf+0xf8>
 8002b62:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002b64:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	e019      	b.n	8002ba0 <WS2812_sendbuf+0x12c>
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <WS2812_sendbuf+0x1e0>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d904      	bls.n	8002b82 <WS2812_sendbuf+0x10e>
 8002b78:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <WS2812_sendbuf+0x1dc>)
 8002b7a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002b7e:	6093      	str	r3, [r2, #8]
 8002b80:	e00e      	b.n	8002ba0 <WS2812_sendbuf+0x12c>
 8002b82:	4b38      	ldr	r3, [pc, #224]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <WS2812_sendbuf+0x1e4>)
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d904      	bls.n	8002b98 <WS2812_sendbuf+0x124>
 8002b8e:	4a33      	ldr	r2, [pc, #204]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002b90:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002b94:	60d3      	str	r3, [r2, #12]
 8002b96:	e003      	b.n	8002ba0 <WS2812_sendbuf+0x12c>
 8002b98:	4a30      	ldr	r2, [pc, #192]	@ (8002c5c <WS2812_sendbuf+0x1e8>)
 8002b9a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002b9e:	6093      	str	r3, [r2, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 8002ba0:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2230      	movs	r2, #48	@ 0x30
 8002ba6:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2230      	movs	r2, #48	@ 0x30
 8002bae:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2230      	movs	r2, #48	@ 0x30
 8002bb6:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 021f 	mvn.w	r2, #31
 8002bc0:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8002bc2:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <WS2812_sendbuf+0x1d4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8002bd2:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <WS2812_sendbuf+0x1ec>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8002be2:	4b20      	ldr	r3, [pc, #128]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c64 <WS2812_sendbuf+0x1f0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c00:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c20:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <WS2812_sendbuf+0x1f8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <WS2812_sendbuf+0x1fc>)
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	6253      	str	r3, [r2, #36]	@ 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <WS2812_sendbuf+0x1f4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200003e8 	.word	0x200003e8
 8002c48:	200006b4 	.word	0x200006b4
 8002c4c:	40026458 	.word	0x40026458
 8002c50:	40026400 	.word	0x40026400
 8002c54:	400260b8 	.word	0x400260b8
 8002c58:	40026058 	.word	0x40026058
 8002c5c:	40026000 	.word	0x40026000
 8002c60:	20000714 	.word	0x20000714
 8002c64:	20000774 	.word	0x20000774
 8002c68:	2000062c 	.word	0x2000062c
 8002c6c:	200006ac 	.word	0x200006ac
 8002c70:	40010000 	.word	0x40010000

08002c74 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
	i++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <DMA_TransferHalfHandler+0x58>)
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	2b3c      	cmp	r3, #60	@ 0x3c
 8002ca2:	d108      	bne.n	8002cb6 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f8c2 	bl	8002e38 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8002cb4:	e015      	b.n	8002ce2 <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e00a      	b.n	8002cd2 <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <DMA_TransferHalfHandler+0x58>)
 8002cc2:	4413      	add	r3, r2
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe96 	bl	80029f8 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d9f1      	bls.n	8002cbc <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <DMA_TransferHalfHandler+0x58>)
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <DMA_TransferHalfHandler+0x58>)
 8002ce0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200003e8 	.word	0x200003e8

08002cf0 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dec <DMA_TransferCompleteHandler+0xfc>)
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	2b3c      	cmp	r3, #60	@ 0x3c
 8002cfe:	d15a      	bne.n	8002db6 <DMA_TransferCompleteHandler+0xc6>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8002d00:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <DMA_TransferCompleteHandler+0xfc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8002d06:	4b3a      	ldr	r3, [pc, #232]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a39      	ldr	r2, [pc, #228]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8002d12:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <DMA_TransferCompleteHandler+0x104>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <DMA_TransferCompleteHandler+0x104>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <DMA_TransferCompleteHandler+0x108>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <DMA_TransferCompleteHandler+0x108>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8002d32:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <DMA_TransferCompleteHandler+0x10c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <DMA_TransferCompleteHandler+0x10c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002d42:	4b2f      	ldr	r3, [pc, #188]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d50:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002d52:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d60:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d70:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8002d72:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002d74:	4b23      	ldr	r3, [pc, #140]	@ (8002e04 <DMA_TransferCompleteHandler+0x114>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0201 	mvn.w	r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002d90:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <DMA_TransferCompleteHandler+0x110>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <DMA_TransferCompleteHandler+0x100>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8002dac:	4a16      	ldr	r2, [pc, #88]	@ (8002e08 <DMA_TransferCompleteHandler+0x118>)
 8002dae:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <DMA_TransferCompleteHandler+0x11c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6193      	str	r3, [r2, #24]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
	#endif

}
 8002db4:	e015      	b.n	8002de2 <DMA_TransferCompleteHandler+0xf2>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e00a      	b.n	8002dd2 <DMA_TransferCompleteHandler+0xe2>
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <DMA_TransferCompleteHandler+0xfc>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fe16 	bl	80029f8 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d9f1      	bls.n	8002dbc <DMA_TransferCompleteHandler+0xcc>
		ws2812b.repeatCounter++;
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <DMA_TransferCompleteHandler+0xfc>)
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a03      	ldr	r2, [pc, #12]	@ (8002dec <DMA_TransferCompleteHandler+0xfc>)
 8002de0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200003e8 	.word	0x200003e8
 8002df0:	40010000 	.word	0x40010000
 8002df4:	200006b4 	.word	0x200006b4
 8002df8:	20000714 	.word	0x20000714
 8002dfc:	20000774 	.word	0x20000774
 8002e00:	2000062c 	.word	0x2000062c
 8002e04:	200006b0 	.word	0x200006b0
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	200000a4 	.word	0x200000a4

08002e10 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <DMA2_Stream2_IRQHandler+0x10>)
 8002e16:	f001 f9e1 	bl	80041dc <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
	#endif
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000774 	.word	0x20000774

08002e24 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e2a:	f003 fe9b 	bl	8006b64 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
	#endif
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000062c 	.word	0x2000062c

08002e38 <ws2812b_set_pixel>:
//}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8002e38:	b490      	push	{r4, r7}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	71fb      	strb	r3, [r7, #7]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80bb      	strh	r3, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	71bb      	strb	r3, [r7, #6]
 8002e52:	4613      	mov	r3, r2
 8002e54:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	4a69      	ldr	r2, [pc, #420]	@ (8003000 <ws2812b_set_pixel+0x1c8>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	4a67      	ldr	r2, [pc, #412]	@ (8003000 <ws2812b_set_pixel+0x1c8>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8002e66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e6a:	4a65      	ldr	r2, [pc, #404]	@ (8003000 <ws2812b_set_pixel+0x1c8>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28


	uint32_t calcCol = (column*24);
 8002e72:	88ba      	ldrh	r2, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 8002e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invGreen)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4a5b      	ldr	r2, [pc, #364]	@ (8003004 <ws2812b_set_pixel+0x1cc>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	f103 4361 	add.w	r3, r3, #3774873600	@ 0xe1000000
 8002e9e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8002ea2:	015b      	lsls	r3, r3, #5
 8002ea4:	79fa      	ldrb	r2, [r7, #7]
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	09da      	lsrs	r2, r3, #7
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3340      	adds	r3, #64	@ 0x40
 8002eb8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	099a      	lsrs	r2, r3, #6
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3340      	adds	r3, #64	@ 0x40
 8002ec6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	095a      	lsrs	r2, r3, #5
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3340      	adds	r3, #64	@ 0x40
 8002ed4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	091a      	lsrs	r2, r3, #4
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3340      	adds	r3, #64	@ 0x40
 8002ee2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3340      	adds	r3, #64	@ 0x40
 8002ef0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	089a      	lsrs	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3340      	adds	r3, #64	@ 0x40
 8002efe:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	085a      	lsrs	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3340      	adds	r3, #64	@ 0x40
 8002f0c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3340      	adds	r3, #64	@ 0x40
 8002f18:	60fb      	str	r3, [r7, #12]

	// GREEN
	*bitBand =  (invGreen >> 7);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	09da      	lsrs	r2, r3, #7
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3340      	adds	r3, #64	@ 0x40
 8002f26:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	099a      	lsrs	r2, r3, #6
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3340      	adds	r3, #64	@ 0x40
 8002f34:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	095a      	lsrs	r2, r3, #5
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3340      	adds	r3, #64	@ 0x40
 8002f42:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	091a      	lsrs	r2, r3, #4
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3340      	adds	r3, #64	@ 0x40
 8002f50:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	08da      	lsrs	r2, r3, #3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3340      	adds	r3, #64	@ 0x40
 8002f5e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	089a      	lsrs	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3340      	adds	r3, #64	@ 0x40
 8002f6c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	085a      	lsrs	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3340      	adds	r3, #64	@ 0x40
 8002f7a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3340      	adds	r3, #64	@ 0x40
 8002f86:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	09da      	lsrs	r2, r3, #7
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3340      	adds	r3, #64	@ 0x40
 8002f94:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	099a      	lsrs	r2, r3, #6
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3340      	adds	r3, #64	@ 0x40
 8002fa2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	095a      	lsrs	r2, r3, #5
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3340      	adds	r3, #64	@ 0x40
 8002fb0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	091a      	lsrs	r2, r3, #4
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3340      	adds	r3, #64	@ 0x40
 8002fbe:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3340      	adds	r3, #64	@ 0x40
 8002fcc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	089a      	lsrs	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3340      	adds	r3, #64	@ 0x40
 8002fda:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	085a      	lsrs	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3340      	adds	r3, #64	@ 0x40
 8002fe8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3340      	adds	r3, #64	@ 0x40
 8002ff4:	60fb      	str	r3, [r7, #12]

#endif
}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc90      	pop	{r4, r7}
 8002ffe:	4770      	bx	lr
 8003000:	0800ffe4 	.word	0x0800ffe4
 8003004:	200005cc 	.word	0x200005cc

08003008 <ws2812b_init>:


void ws2812b_init()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 800300c:	f7ff fb1e 	bl	800264c <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8003010:	f7ff fc04 	bl	800281c <DMA2_init>
	TIM1_init();
 8003014:	f7ff fb40 	bl	8002698 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8003018:	4b02      	ldr	r3, [pc, #8]	@ (8003024 <ws2812b_init+0x1c>)
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200003e8 	.word	0x200003e8

08003028 <ws2812b_handle>:


void ws2812b_handle()
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <ws2812b_handle+0x20>)
 800302e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <ws2812b_handle+0x1a>
		ws2812b.startTransfer = 0;
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <ws2812b_handle+0x20>)
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		WS2812_sendbuf();
 800303e:	f7ff fd19 	bl	8002a74 <WS2812_sendbuf>
	}

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200003e8 	.word	0x200003e8

0800304c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800304c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003050:	f7ff fa26 	bl	80024a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480c      	ldr	r0, [pc, #48]	@ (8003088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003056:	490d      	ldr	r1, [pc, #52]	@ (800308c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800306c:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800307a:	f008 fff3 	bl	800c064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800307e:	f7fe f833 	bl	80010e8 <main>
  bx  lr    
 8003082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800308c:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8003090:	080105a0 	.word	0x080105a0
  ldr r2, =_sbss
 8003094:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8003098:	20005274 	.word	0x20005274

0800309c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800309c:	e7fe      	b.n	800309c <CAN1_RX0_IRQHandler>
	...

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a4:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <HAL_Init+0x40>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <HAL_Init+0x40>)
 80030b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <HAL_Init+0x40>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 fe20 	bl	8003d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f7ff f860 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7fe ff12 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	200000ac 	.word	0x200000ac
 8003108:	200007d4 	.word	0x200007d4

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200007d4 	.word	0x200007d4

08003124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e033      	b.n	80031a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe ff06 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800316a:	f023 0302 	bic.w	r3, r3, #2
 800316e:	f043 0202 	orr.w	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fc16 	bl	80039a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40
 8003192:	e001      	b.n	8003198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Start+0x1a>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0b2      	b.n	800332c <HAL_ADC_Start+0x180>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d018      	beq.n	800320e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ec:	4b52      	ldr	r3, [pc, #328]	@ (8003338 <HAL_ADC_Start+0x18c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a52      	ldr	r2, [pc, #328]	@ (800333c <HAL_ADC_Start+0x190>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9a      	lsrs	r2, r3, #18
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003200:	e002      	b.n	8003208 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d17a      	bne.n	8003312 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003246:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325a:	d106      	bne.n	800326a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003260:	f023 0206 	bic.w	r2, r3, #6
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	@ 0x44
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003278:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <HAL_ADC_Start+0x194>)
 800327a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003284:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2b00      	cmp	r3, #0
 8003290:	d12a      	bne.n	80032e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2b      	ldr	r2, [pc, #172]	@ (8003344 <HAL_ADC_Start+0x198>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d015      	beq.n	80032c8 <HAL_ADC_Start+0x11c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a29      	ldr	r2, [pc, #164]	@ (8003348 <HAL_ADC_Start+0x19c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d105      	bne.n	80032b2 <HAL_ADC_Start+0x106>
 80032a6:	4b26      	ldr	r3, [pc, #152]	@ (8003340 <HAL_ADC_Start+0x194>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a25      	ldr	r2, [pc, #148]	@ (800334c <HAL_ADC_Start+0x1a0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d136      	bne.n	800332a <HAL_ADC_Start+0x17e>
 80032bc:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_ADC_Start+0x194>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d130      	bne.n	800332a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d129      	bne.n	800332a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	e020      	b.n	800332a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <HAL_ADC_Start+0x198>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11b      	bne.n	800332a <HAL_ADC_Start+0x17e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d114      	bne.n	800332a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e00b      	b.n	800332a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f043 0210 	orr.w	r2, r3, #16
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	20000098 	.word	0x20000098
 800333c:	431bde83 	.word	0x431bde83
 8003340:	40012300 	.word	0x40012300
 8003344:	40012000 	.word	0x40012000
 8003348:	40012100 	.word	0x40012100
 800334c:	40012200 	.word	0x40012200

08003350 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Stop+0x16>
 8003362:	2302      	movs	r3, #2
 8003364:	e021      	b.n	80033aa <HAL_ADC_Stop+0x5a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d2:	d113      	bne.n	80033fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e2:	d10b      	bne.n	80033fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e063      	b.n	80034c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7ff fe86 	bl	800310c <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003402:	e021      	b.n	8003448 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d01d      	beq.n	8003448 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_ADC_PollForConversion+0x6c>
 8003412:	f7ff fe7b 	bl	800310c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d212      	bcs.n	8003448 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d00b      	beq.n	8003448 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03d      	b.n	80034c4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d1d6      	bne.n	8003404 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0212 	mvn.w	r2, #18
 800345e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d123      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11f      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d111      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d049      	beq.n	8003596 <HAL_ADC_IRQHandler+0xca>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d046      	beq.n	8003596 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d12b      	bne.n	8003586 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d127      	bne.n	8003586 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d119      	bne.n	8003586 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0220 	bic.w	r2, r2, #32
 8003560:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8bd 	bl	8003706 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0212 	mvn.w	r2, #18
 8003594:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d057      	beq.n	800365c <HAL_ADC_IRQHandler+0x190>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d054      	beq.n	800365c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d139      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d12b      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d124      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d119      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003626:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 faa7 	bl	8003ba0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 020c 	mvn.w	r2, #12
 800365a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x1d6>
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d014      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10d      	bne.n	80036a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f841 	bl	800371a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0201 	mvn.w	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_ADC_IRQHandler+0x218>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0220 	mvn.w	r2, #32
 80036d2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f82a 	bl	800372e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0220 	mvn.w	r2, #32
 80036e2:	601a      	str	r2, [r3, #0]
  }
}
 80036e4:	bf00      	nop
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x1c>
 800375c:	2302      	movs	r3, #2
 800375e:	e113      	b.n	8003988 <HAL_ADC_ConfigChannel+0x244>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b09      	cmp	r3, #9
 800376e:	d925      	bls.n	80037bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	3b1e      	subs	r3, #30
 8003786:	2207      	movs	r2, #7
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43da      	mvns	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	400a      	ands	r2, r1
 8003794:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4403      	add	r3, r0
 80037ae:	3b1e      	subs	r3, #30
 80037b0:	409a      	lsls	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	e022      	b.n	8003802 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6919      	ldr	r1, [r3, #16]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	2207      	movs	r2, #7
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43da      	mvns	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	400a      	ands	r2, r1
 80037de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6919      	ldr	r1, [r3, #16]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4618      	mov	r0, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4403      	add	r3, r0
 80037f8:	409a      	lsls	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d824      	bhi.n	8003854 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b05      	subs	r3, #5
 800381c:	221f      	movs	r2, #31
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	400a      	ands	r2, r1
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	4618      	mov	r0, r3
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	3b05      	subs	r3, #5
 8003846:	fa00 f203 	lsl.w	r2, r0, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
 8003852:	e04c      	b.n	80038ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d824      	bhi.n	80038a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b23      	subs	r3, #35	@ 0x23
 800386e:	221f      	movs	r2, #31
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43da      	mvns	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	400a      	ands	r2, r1
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	4618      	mov	r0, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	3b23      	subs	r3, #35	@ 0x23
 8003898:	fa00 f203 	lsl.w	r2, r0, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038a4:	e023      	b.n	80038ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	3b41      	subs	r3, #65	@ 0x41
 80038b8:	221f      	movs	r2, #31
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	400a      	ands	r2, r1
 80038c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	3b41      	subs	r3, #65	@ 0x41
 80038e2:	fa00 f203 	lsl.w	r2, r0, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ee:	4b29      	ldr	r3, [pc, #164]	@ (8003994 <HAL_ADC_ConfigChannel+0x250>)
 80038f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <HAL_ADC_ConfigChannel+0x254>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10f      	bne.n	800391c <HAL_ADC_ConfigChannel+0x1d8>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b12      	cmp	r3, #18
 8003902:	d10b      	bne.n	800391c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <HAL_ADC_ConfigChannel+0x254>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23a>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <HAL_ADC_ConfigChannel+0x258>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <HAL_ADC_ConfigChannel+0x1f4>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b11      	cmp	r3, #17
 8003936:	d122      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a11      	ldr	r2, [pc, #68]	@ (800399c <HAL_ADC_ConfigChannel+0x258>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d111      	bne.n	800397e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800395a:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_ADC_ConfigChannel+0x25c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <HAL_ADC_ConfigChannel+0x260>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9a      	lsrs	r2, r3, #18
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003970:	e002      	b.n	8003978 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f9      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40012300 	.word	0x40012300
 8003998:	40012000 	.word	0x40012000
 800399c:	10000012 	.word	0x10000012
 80039a0:	20000098 	.word	0x20000098
 80039a4:	431bde83 	.word	0x431bde83

080039a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039b0:	4b79      	ldr	r3, [pc, #484]	@ (8003b98 <ADC_Init+0x1f0>)
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	021a      	lsls	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6899      	ldr	r1, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	4a58      	ldr	r2, [pc, #352]	@ (8003b9c <ADC_Init+0x1f4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6899      	ldr	r1, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6899      	ldr	r1, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	e00f      	b.n	8003aa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003aa4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0202 	bic.w	r2, r2, #2
 8003ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7e1b      	ldrb	r3, [r3, #24]
 8003ac0:	005a      	lsls	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	3b01      	subs	r3, #1
 8003b00:	035a      	lsls	r2, r3, #13
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e007      	b.n	8003b1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	051a      	lsls	r2, r3, #20
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b5e:	025a      	lsls	r2, r3, #9
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	029a      	lsls	r2, r3, #10
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40012300 	.word	0x40012300
 8003b9c:	0f000001 	.word	0x0f000001

08003ba0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be6:	4a04      	ldr	r2, [pc, #16]	@ (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c00:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <__NVIC_GetPriorityGrouping+0x18>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0307 	and.w	r3, r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	db0b      	blt.n	8003c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4907      	ldr	r1, [pc, #28]	@ (8003c50 <__NVIC_EnableIRQ+0x38>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2001      	movs	r0, #1
 8003c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e100 	.word	0xe000e100

08003c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	db0a      	blt.n	8003c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	490c      	ldr	r1, [pc, #48]	@ (8003ca0 <__NVIC_SetPriority+0x4c>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	440b      	add	r3, r1
 8003c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c7c:	e00a      	b.n	8003c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4908      	ldr	r1, [pc, #32]	@ (8003ca4 <__NVIC_SetPriority+0x50>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	440b      	add	r3, r1
 8003c92:	761a      	strb	r2, [r3, #24]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	@ 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f1c3 0307 	rsb	r3, r3, #7
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf28      	it	cs
 8003cc6:	2304      	movcs	r3, #4
 8003cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d902      	bls.n	8003cd8 <NVIC_EncodePriority+0x30>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3b03      	subs	r3, #3
 8003cd6:	e000      	b.n	8003cda <NVIC_EncodePriority+0x32>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	401a      	ands	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	43d9      	mvns	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	4313      	orrs	r3, r2
         );
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	@ 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff4c 	bl	8003bb4 <__NVIC_SetPriorityGrouping>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d36:	f7ff ff61 	bl	8003bfc <__NVIC_GetPriorityGrouping>
 8003d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	6978      	ldr	r0, [r7, #20]
 8003d42:	f7ff ffb1 	bl	8003ca8 <NVIC_EncodePriority>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff80 	bl	8003c54 <__NVIC_SetPriority>
}
 8003d54:	bf00      	nop
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff54 	bl	8003c18 <__NVIC_EnableIRQ>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d84:	f7ff f9c2 	bl	800310c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e099      	b.n	8003ec8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003db4:	e00f      	b.n	8003dd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003db6:	f7ff f9a9 	bl	800310c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d908      	bls.n	8003dd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2203      	movs	r2, #3
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e078      	b.n	8003ec8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e8      	bne.n	8003db6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4b38      	ldr	r3, [pc, #224]	@ (8003ed0 <HAL_DMA_Init+0x158>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d107      	bne.n	8003e40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d117      	bne.n	8003e9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fb9b 	bl	80045b8 <DMA_CheckFifoParam>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2240      	movs	r2, #64	@ 0x40
 8003e8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e96:	2301      	movs	r3, #1
 8003e98:	e016      	b.n	8003ec8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fb52 	bl	800454c <DMA_CalcBaseAndBitshift>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	223f      	movs	r2, #63	@ 0x3f
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	f010803f 	.word	0xf010803f

08003ed4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e050      	b.n	8003f88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e048      	b.n	8003f88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2221      	movs	r2, #33	@ 0x21
 8003f34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb08 	bl	800454c <DMA_CalcBaseAndBitshift>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	223f      	movs	r2, #63	@ 0x3f
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA_Start+0x20>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e026      	b.n	8003ffe <HAL_DMA_Start+0x6e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d115      	bne.n	8003ff0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fa89 	bl	80044f0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e005      	b.n	8003ffc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_DMA_Start_IT+0x26>
 8004028:	2302      	movs	r3, #2
 800402a:	e040      	b.n	80040ae <HAL_DMA_Start_IT+0xa8>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d12f      	bne.n	80040a0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa4b 	bl	80044f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	223f      	movs	r2, #63	@ 0x3f
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0216 	orr.w	r2, r2, #22
 8004074:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0208 	orr.w	r2, r2, #8
 800408c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e005      	b.n	80040ac <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
 80040aa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7ff f822 	bl	800310c <HAL_GetTick>
 80040c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d008      	beq.n	80040e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2280      	movs	r2, #128	@ 0x80
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e052      	b.n	800418e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0216 	bic.w	r2, r2, #22
 80040f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <HAL_DMA_Abort+0x62>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0208 	bic.w	r2, r2, #8
 8004126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004138:	e013      	b.n	8004162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800413a:	f7fe ffe7 	bl	800310c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b05      	cmp	r3, #5
 8004146:	d90c      	bls.n	8004162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2203      	movs	r2, #3
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e015      	b.n	800418e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e4      	bne.n	800413a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	223f      	movs	r2, #63	@ 0x3f
 8004176:	409a      	lsls	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2280      	movs	r2, #128	@ 0x80
 80041ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e00c      	b.n	80041ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2205      	movs	r2, #5
 80041b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004424 <HAL_DMA_IRQHandler+0x248>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004428 <HAL_DMA_IRQHandler+0x24c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	2208      	movs	r2, #8
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01a      	beq.n	8004248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0204 	bic.w	r2, r2, #4
 800422e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	2208      	movs	r2, #8
 8004236:	409a      	lsls	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	2201      	movs	r2, #1
 800426c:	409a      	lsls	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	2204      	movs	r2, #4
 8004284:	409a      	lsls	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	2204      	movs	r2, #4
 80042a2:	409a      	lsls	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	f043 0204 	orr.w	r2, r3, #4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	2210      	movs	r2, #16
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d043      	beq.n	800434c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03c      	beq.n	800434c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	2210      	movs	r2, #16
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d018      	beq.n	800431e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d108      	bne.n	800430c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d024      	beq.n	800434c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
 800430a:	e01f      	b.n	800434c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
 800431c:	e016      	b.n	800434c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0208 	bic.w	r2, r2, #8
 800433a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004350:	2220      	movs	r2, #32
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 808f 	beq.w	800447c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8087 	beq.w	800447c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	2220      	movs	r2, #32
 8004374:	409a      	lsls	r2, r3
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b05      	cmp	r3, #5
 8004384:	d136      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0216 	bic.w	r2, r2, #22
 8004394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x1da>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0208 	bic.w	r2, r2, #8
 80043c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	223f      	movs	r2, #63	@ 0x3f
 80043cc:	409a      	lsls	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d07e      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
        }
        return;
 80043f2:	e079      	b.n	80044e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01d      	beq.n	800443e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10d      	bne.n	800442c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004414:	2b00      	cmp	r3, #0
 8004416:	d031      	beq.n	800447c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
 8004420:	e02c      	b.n	800447c <HAL_DMA_IRQHandler+0x2a0>
 8004422:	bf00      	nop
 8004424:	20000098 	.word	0x20000098
 8004428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	2b00      	cmp	r3, #0
 8004432:	d023      	beq.n	800447c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
 800443c:	e01e      	b.n	800447c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10f      	bne.n	800446c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0210 	bic.w	r2, r2, #16
 800445a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	2b00      	cmp	r3, #0
 8004482:	d032      	beq.n	80044ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2205      	movs	r2, #5
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d307      	bcc.n	80044c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f2      	bne.n	80044a8 <HAL_DMA_IRQHandler+0x2cc>
 80044c2:	e000      	b.n	80044c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
 80044e6:	e000      	b.n	80044ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80044e8:	bf00      	nop
    }
  }
}
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800450c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	d108      	bne.n	8004530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800452e:	e007      	b.n	8004540 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3b10      	subs	r3, #16
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <DMA_CalcBaseAndBitshift+0x64>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004566:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d909      	bls.n	800458e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	659a      	str	r2, [r3, #88]	@ 0x58
 800458c:	e007      	b.n	800459e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	aaaaaaab 	.word	0xaaaaaaab
 80045b4:	080100e4 	.word	0x080100e4

080045b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11f      	bne.n	8004612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d856      	bhi.n	8004686 <DMA_CheckFifoParam+0xce>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <DMA_CheckFifoParam+0x28>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004603 	.word	0x08004603
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	08004687 	.word	0x08004687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d046      	beq.n	800468a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004600:	e043      	b.n	800468a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800460a:	d140      	bne.n	800468e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004610:	e03d      	b.n	800468e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800461a:	d121      	bne.n	8004660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d837      	bhi.n	8004692 <DMA_CheckFifoParam+0xda>
 8004622:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <DMA_CheckFifoParam+0x70>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	08004639 	.word	0x08004639
 800462c:	0800463f 	.word	0x0800463f
 8004630:	08004639 	.word	0x08004639
 8004634:	08004651 	.word	0x08004651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e030      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d025      	beq.n	8004696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464e:	e022      	b.n	8004696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004658:	d11f      	bne.n	800469a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800465e:	e01c      	b.n	800469a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d903      	bls.n	800466e <DMA_CheckFifoParam+0xb6>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d003      	beq.n	8004674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800466c:	e018      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      break;
 8004672:	e015      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00e      	beq.n	800469e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      break;
 8004684:	e00b      	b.n	800469e <DMA_CheckFifoParam+0xe6>
      break;
 8004686:	bf00      	nop
 8004688:	e00a      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e008      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e006      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004692:	bf00      	nop
 8004694:	e004      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <DMA_CheckFifoParam+0xe8>
      break;
 800469e:	bf00      	nop
    }
  } 
  
  return status; 
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop

080046b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	@ 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e165      	b.n	8004998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4013      	ands	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	f040 8154 	bne.w	8004992 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d005      	beq.n	8004702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d130      	bne.n	8004764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004738:	2201      	movs	r2, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 0201 	and.w	r2, r3, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b03      	cmp	r3, #3
 800476e:	d017      	beq.n	80047a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	2203      	movs	r2, #3
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d123      	bne.n	80047f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	08da      	lsrs	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3208      	adds	r2, #8
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	08da      	lsrs	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80ae 	beq.w	8004992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	4b5d      	ldr	r3, [pc, #372]	@ (80049b0 <HAL_GPIO_Init+0x300>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	4a5c      	ldr	r2, [pc, #368]	@ (80049b0 <HAL_GPIO_Init+0x300>)
 8004840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004844:	6453      	str	r3, [r2, #68]	@ 0x44
 8004846:	4b5a      	ldr	r3, [pc, #360]	@ (80049b0 <HAL_GPIO_Init+0x300>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004852:	4a58      	ldr	r2, [pc, #352]	@ (80049b4 <HAL_GPIO_Init+0x304>)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	3302      	adds	r3, #2
 800485a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	220f      	movs	r2, #15
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4f      	ldr	r2, [pc, #316]	@ (80049b8 <HAL_GPIO_Init+0x308>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d025      	beq.n	80048ca <HAL_GPIO_Init+0x21a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4e      	ldr	r2, [pc, #312]	@ (80049bc <HAL_GPIO_Init+0x30c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01f      	beq.n	80048c6 <HAL_GPIO_Init+0x216>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4d      	ldr	r2, [pc, #308]	@ (80049c0 <HAL_GPIO_Init+0x310>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d019      	beq.n	80048c2 <HAL_GPIO_Init+0x212>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4c      	ldr	r2, [pc, #304]	@ (80049c4 <HAL_GPIO_Init+0x314>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_GPIO_Init+0x20e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4b      	ldr	r2, [pc, #300]	@ (80049c8 <HAL_GPIO_Init+0x318>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00d      	beq.n	80048ba <HAL_GPIO_Init+0x20a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4a      	ldr	r2, [pc, #296]	@ (80049cc <HAL_GPIO_Init+0x31c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <HAL_GPIO_Init+0x206>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a49      	ldr	r2, [pc, #292]	@ (80049d0 <HAL_GPIO_Init+0x320>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <HAL_GPIO_Init+0x202>
 80048ae:	2306      	movs	r3, #6
 80048b0:	e00c      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00a      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048b6:	2305      	movs	r3, #5
 80048b8:	e008      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048ba:	2304      	movs	r3, #4
 80048bc:	e006      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048be:	2303      	movs	r3, #3
 80048c0:	e004      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_GPIO_Init+0x21c>
 80048ca:	2300      	movs	r3, #0
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	f002 0203 	and.w	r2, r2, #3
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	4093      	lsls	r3, r2
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048dc:	4935      	ldr	r1, [pc, #212]	@ (80049b4 <HAL_GPIO_Init+0x304>)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ea:	4b3a      	ldr	r3, [pc, #232]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800490e:	4a31      	ldr	r2, [pc, #196]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004914:	4b2f      	ldr	r3, [pc, #188]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004938:	4a26      	ldr	r2, [pc, #152]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800493e:	4b25      	ldr	r3, [pc, #148]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004962:	4a1c      	ldr	r2, [pc, #112]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800498c:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <HAL_GPIO_Init+0x324>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	f67f ae96 	bls.w	80046cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	@ 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40020000 	.word	0x40020000
 80049bc:	40020400 	.word	0x40020400
 80049c0:	40020800 	.word	0x40020800
 80049c4:	40020c00 	.word	0x40020c00
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40021400 	.word	0x40021400
 80049d0:	40021800 	.word	0x40021800
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
 80049e4:	4613      	mov	r3, r2
 80049e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049e8:	787b      	ldrb	r3, [r7, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049f4:	e003      	b.n	80049fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a1c:	887a      	ldrh	r2, [r7, #2]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e12b      	b.n	8004caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd fac0 	bl	8001fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	@ 0x24
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f001 f8e2 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4a81      	ldr	r2, [pc, #516]	@ (8004cb4 <HAL_I2C_Init+0x274>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d807      	bhi.n	8004ac4 <HAL_I2C_Init+0x84>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a80      	ldr	r2, [pc, #512]	@ (8004cb8 <HAL_I2C_Init+0x278>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e006      	b.n	8004ad2 <HAL_I2C_Init+0x92>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a7d      	ldr	r2, [pc, #500]	@ (8004cbc <HAL_I2C_Init+0x27c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	bf94      	ite	ls
 8004acc:	2301      	movls	r3, #1
 8004ace:	2300      	movhi	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e7      	b.n	8004caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a78      	ldr	r2, [pc, #480]	@ (8004cc0 <HAL_I2C_Init+0x280>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb4 <HAL_I2C_Init+0x274>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <HAL_I2C_Init+0xd4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3301      	adds	r3, #1
 8004b12:	e009      	b.n	8004b28 <HAL_I2C_Init+0xe8>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a69      	ldr	r2, [pc, #420]	@ (8004cc4 <HAL_I2C_Init+0x284>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	3301      	adds	r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	495c      	ldr	r1, [pc, #368]	@ (8004cb4 <HAL_I2C_Init+0x274>)
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d819      	bhi.n	8004b7c <HAL_I2C_Init+0x13c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e59      	subs	r1, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_I2C_Init+0x138>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e59      	subs	r1, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	e051      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e04f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <HAL_I2C_Init+0x168>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e012      	b.n	8004bce <HAL_I2C_Init+0x18e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1e58      	subs	r0, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	0099      	lsls	r1, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Init+0x196>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e022      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10e      	bne.n	8004bfc <HAL_I2C_Init+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1e58      	subs	r0, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	440b      	add	r3, r1
 8004bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bfa:	e00f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	0099      	lsls	r1, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6911      	ldr	r1, [r2, #16]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	4311      	orrs	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	000186a0 	.word	0x000186a0
 8004cb8:	001e847f 	.word	0x001e847f
 8004cbc:	003d08ff 	.word	0x003d08ff
 8004cc0:	431bde83 	.word	0x431bde83
 8004cc4:	10624dd3 	.word	0x10624dd3

08004cc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	813b      	strh	r3, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce2:	f7fe fa13 	bl	800310c <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	f040 80d9 	bne.w	8004ea8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2319      	movs	r3, #25
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	496d      	ldr	r1, [pc, #436]	@ (8004eb4 <HAL_I2C_Mem_Write+0x1ec>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fc8b 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0cc      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_Mem_Write+0x56>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0c5      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d007      	beq.n	8004d44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2221      	movs	r2, #33	@ 0x21
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2240      	movs	r2, #64	@ 0x40
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a4d      	ldr	r2, [pc, #308]	@ (8004eb8 <HAL_I2C_Mem_Write+0x1f0>)
 8004d84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d86:	88f8      	ldrh	r0, [r7, #6]
 8004d88:	893a      	ldrh	r2, [r7, #8]
 8004d8a:	8979      	ldrh	r1, [r7, #10]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4603      	mov	r3, r0
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fac2 	bl	8005320 <I2C_RequestMemoryWrite>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d052      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e081      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fd50 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e06b      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	781a      	ldrb	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d11b      	bne.n	8004e48 <HAL_I2C_Mem_Write+0x180>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1aa      	bne.n	8004da6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fd43 	bl	80058e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d107      	bne.n	8004e78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e016      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e000      	b.n	8004eaa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ea8:	2302      	movs	r3, #2
  }
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	00100002 	.word	0x00100002
 8004eb8:	ffff0000 	.word	0xffff0000

08004ebc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	@ 0x30
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	817b      	strh	r3, [r7, #10]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	813b      	strh	r3, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed6:	f7fe f919 	bl	800310c <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	f040 8214 	bne.w	8005312 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2319      	movs	r3, #25
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	497b      	ldr	r1, [pc, #492]	@ (80050e0 <HAL_I2C_Mem_Read+0x224>)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb91 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
 8004f02:	e207      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2C_Mem_Read+0x56>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e200      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2222      	movs	r2, #34	@ 0x22
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a5b      	ldr	r2, [pc, #364]	@ (80050e4 <HAL_I2C_Mem_Read+0x228>)
 8004f78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f7a:	88f8      	ldrh	r0, [r7, #6]
 8004f7c:	893a      	ldrh	r2, [r7, #8]
 8004f7e:	8979      	ldrh	r1, [r7, #10]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4603      	mov	r3, r0
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fa5e 	bl	800544c <I2C_RequestMemoryRead>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1bc      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d113      	bne.n	8004fca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e190      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11b      	bne.n	800500a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e170      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	2b02      	cmp	r3, #2
 8005010:	d11b      	bne.n	800504a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005020:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	e150      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005060:	e144      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005066:	2b03      	cmp	r3, #3
 8005068:	f200 80f1 	bhi.w	800524e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	2b01      	cmp	r3, #1
 8005072:	d123      	bne.n	80050bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005076:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fc79 	bl	8005970 <I2C_WaitOnRXNEFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e145      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050ba:	e117      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d14e      	bne.n	8005162 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	2200      	movs	r2, #0
 80050cc:	4906      	ldr	r1, [pc, #24]	@ (80050e8 <HAL_I2C_Mem_Read+0x22c>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 faa4 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e11a      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
 80050de:	bf00      	nop
 80050e0:	00100002 	.word	0x00100002
 80050e4:	ffff0000 	.word	0xffff0000
 80050e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005160:	e0c4      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	2200      	movs	r2, #0
 800516a:	496c      	ldr	r1, [pc, #432]	@ (800531c <HAL_I2C_Mem_Read+0x460>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fa55 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0cb      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800518a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	2200      	movs	r2, #0
 80051c6:	4955      	ldr	r1, [pc, #340]	@ (800531c <HAL_I2C_Mem_Read+0x460>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fa27 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e09d      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800524c:	e04e      	b.n	80052ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005250:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fb8c 	bl	8005970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e058      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d124      	bne.n	80052ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d107      	bne.n	80052ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f47f aeb6 	bne.w	8005062 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	00010004 	.word	0x00010004

08005320 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4603      	mov	r3, r0
 8005330:	817b      	strh	r3, [r7, #10]
 8005332:	460b      	mov	r3, r1
 8005334:	813b      	strh	r3, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2200      	movs	r2, #0
 8005352:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f960 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005370:	d103      	bne.n	800537a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e05f      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800538c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	6a3a      	ldr	r2, [r7, #32]
 8005392:	492d      	ldr	r1, [pc, #180]	@ (8005448 <I2C_RequestMemoryWrite+0x128>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f9bb 	bl	8005710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e04c      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa46 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e02b      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d105      	bne.n	80053f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	e021      	b.n	800543c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fa20 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e005      	b.n	800543e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005432:	893b      	ldrh	r3, [r7, #8]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	00010002 	.word	0x00010002

0800544c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	817b      	strh	r3, [r7, #10]
 800545e:	460b      	mov	r3, r1
 8005460:	813b      	strh	r3, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005474:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2200      	movs	r2, #0
 800548e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f8c2 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ac:	d103      	bne.n	80054b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e0aa      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	6a3a      	ldr	r2, [r7, #32]
 80054ce:	4952      	ldr	r1, [pc, #328]	@ (8005618 <I2C_RequestMemoryRead+0x1cc>)
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f91d 	bl	8005710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e097      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f9a8 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e076      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	611a      	str	r2, [r3, #16]
 8005532:	e021      	b.n	8005578 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	b29b      	uxth	r3, r3
 800553a:	b2da      	uxtb	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005544:	6a39      	ldr	r1, [r7, #32]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f982 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b04      	cmp	r3, #4
 8005558:	d107      	bne.n	800556a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e050      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800556e:	893b      	ldrh	r3, [r7, #8]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800557a:	6a39      	ldr	r1, [r7, #32]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f967 	bl	8005850 <I2C_WaitOnTXEFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e035      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f82b 	bl	800561c <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055da:	d103      	bne.n	80055e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e013      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055e8:	897b      	ldrh	r3, [r7, #10]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	6a3a      	ldr	r2, [r7, #32]
 80055fc:	4906      	ldr	r1, [pc, #24]	@ (8005618 <I2C_RequestMemoryRead+0x1cc>)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f886 	bl	8005710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	00010002 	.word	0x00010002

0800561c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800562c:	e048      	b.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d044      	beq.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fd fd69 	bl	800310c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d139      	bne.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	0c1b      	lsrs	r3, r3, #16
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b01      	cmp	r3, #1
 8005654:	d10d      	bne.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	43da      	mvns	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	e00c      	b.n	800568c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	43da      	mvns	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	4013      	ands	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	429a      	cmp	r2, r3
 8005690:	d116      	bne.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e023      	b.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10d      	bne.n	80056e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	43da      	mvns	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	e00c      	b.n	8005700 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4013      	ands	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	429a      	cmp	r2, r3
 8005704:	d093      	beq.n	800562e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571e:	e071      	b.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572e:	d123      	bne.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f043 0204 	orr.w	r2, r3, #4
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e067      	b.n	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d041      	beq.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005780:	f7fd fcc4 	bl	800310c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d302      	bcc.n	8005796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d136      	bne.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10c      	bne.n	80057ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	43da      	mvns	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	e00b      	b.n	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	43da      	mvns	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4013      	ands	r3, r2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e021      	b.n	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	0c1b      	lsrs	r3, r3, #16
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10c      	bne.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	43da      	mvns	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4013      	ands	r3, r2
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf14      	ite	ne
 8005820:	2301      	movne	r3, #1
 8005822:	2300      	moveq	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	e00b      	b.n	8005840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	43da      	mvns	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f af6d 	bne.w	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585c:	e034      	b.n	80058c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f8e3 	bl	8005a2a <I2C_IsAcknowledgeFailed>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e034      	b.n	80058d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d028      	beq.n	80058c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005876:	f7fd fc49 	bl	800310c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d302      	bcc.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11d      	bne.n	80058c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b80      	cmp	r3, #128	@ 0x80
 8005898:	d016      	beq.n	80058c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e007      	b.n	80058d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d2:	2b80      	cmp	r3, #128	@ 0x80
 80058d4:	d1c3      	bne.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ec:	e034      	b.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f89b 	bl	8005a2a <I2C_IsAcknowledgeFailed>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e034      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d028      	beq.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fd fc01 	bl	800310c <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11d      	bne.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b04      	cmp	r3, #4
 8005928:	d016      	beq.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e007      	b.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b04      	cmp	r3, #4
 8005964:	d1c3      	bne.n	80058ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800597c:	e049      	b.n	8005a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b10      	cmp	r3, #16
 800598a:	d119      	bne.n	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0210 	mvn.w	r2, #16
 8005994:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e030      	b.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c0:	f7fd fba4 	bl	800310c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d302      	bcc.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11d      	bne.n	8005a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	d016      	beq.n	8005a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e007      	b.n	8005a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	d1ae      	bne.n	800597e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a40:	d11b      	bne.n	8005a7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f043 0204 	orr.w	r2, r3, #4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0cc      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b68      	ldr	r3, [pc, #416]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d90c      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b65      	ldr	r3, [pc, #404]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b63      	ldr	r3, [pc, #396]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0b8      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005adc:	4b59      	ldr	r3, [pc, #356]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a58      	ldr	r2, [pc, #352]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af4:	4b53      	ldr	r3, [pc, #332]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a52      	ldr	r2, [pc, #328]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b00:	4b50      	ldr	r3, [pc, #320]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	494d      	ldr	r1, [pc, #308]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d044      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d119      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e07f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b46:	4b3f      	ldr	r3, [pc, #252]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e06f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e067      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b37      	ldr	r3, [pc, #220]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4934      	ldr	r1, [pc, #208]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fd fac8 	bl	800310c <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fd fac4 	bl	800310c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e04f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b25      	ldr	r3, [pc, #148]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d20c      	bcs.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbe:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e032      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bdc:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4916      	ldr	r1, [pc, #88]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfa:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	490e      	ldr	r1, [pc, #56]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c0e:	f000 f887 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	490a      	ldr	r1, [pc, #40]	@ (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	5ccb      	ldrb	r3, [r1, r3]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fc fab0 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023c00 	.word	0x40023c00
 8005c44:	40023800 	.word	0x40023800
 8005c48:	0800ffcc 	.word	0x0800ffcc
 8005c4c:	20000098 	.word	0x20000098
 8005c50:	200000a8 	.word	0x200000a8

08005c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c58:	4b03      	ldr	r3, [pc, #12]	@ (8005c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000098 	.word	0x20000098

08005c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c70:	f7ff fff0 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0a9b      	lsrs	r3, r3, #10
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	@ (8005c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	0800ffdc 	.word	0x0800ffdc

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c98:	f7ff ffdc 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	0b5b      	lsrs	r3, r3, #13
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4903      	ldr	r1, [pc, #12]	@ (8005cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	0800ffdc 	.word	0x0800ffdc

08005cbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	220f      	movs	r2, #15
 8005cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ccc:	4b12      	ldr	r3, [pc, #72]	@ (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0203 	and.w	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cf0:	4b09      	ldr	r3, [pc, #36]	@ (8005d18 <HAL_RCC_GetClockConfig+0x5c>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cfe:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <HAL_RCC_GetClockConfig+0x60>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 020f 	and.w	r2, r3, #15
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	40023c00 	.word	0x40023c00

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d24:	b0ae      	sub	sp, #184	@ 0xb8
 8005d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d46:	4bcb      	ldr	r3, [pc, #812]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b0c      	cmp	r3, #12
 8005d50:	f200 8206 	bhi.w	8006160 <HAL_RCC_GetSysClockFreq+0x440>
 8005d54:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08006161 	.word	0x08006161
 8005d64:	08006161 	.word	0x08006161
 8005d68:	08006161 	.word	0x08006161
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	08006161 	.word	0x08006161
 8005d74:	08006161 	.word	0x08006161
 8005d78:	08006161 	.word	0x08006161
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08006161 	.word	0x08006161
 8005d84:	08006161 	.word	0x08006161
 8005d88:	08006161 	.word	0x08006161
 8005d8c:	08005f91 	.word	0x08005f91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d90:	4bb9      	ldr	r3, [pc, #740]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x358>)
 8005d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d96:	e1e7      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d98:	4bb8      	ldr	r3, [pc, #736]	@ (800607c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005d9e:	e1e3      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da0:	4bb4      	ldr	r3, [pc, #720]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dac:	4bb1      	ldr	r3, [pc, #708]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d071      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db8:	4bae      	ldr	r3, [pc, #696]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	099b      	lsrs	r3, r3, #6
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	0159      	lsls	r1, r3, #5
 8005dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df0:	0150      	lsls	r0, r2, #5
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4621      	mov	r1, r4
 8005df8:	1a51      	subs	r1, r2, r1
 8005dfa:	6439      	str	r1, [r7, #64]	@ 0x40
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005e10:	4649      	mov	r1, r9
 8005e12:	018b      	lsls	r3, r1, #6
 8005e14:	4641      	mov	r1, r8
 8005e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	018a      	lsls	r2, r1, #6
 8005e1e:	4641      	mov	r1, r8
 8005e20:	1a51      	subs	r1, r2, r1
 8005e22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e24:	4649      	mov	r1, r9
 8005e26:	eb63 0301 	sbc.w	r3, r3, r1
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005e38:	4649      	mov	r1, r9
 8005e3a:	00cb      	lsls	r3, r1, #3
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e42:	4641      	mov	r1, r8
 8005e44:	00ca      	lsls	r2, r1, #3
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e52:	462b      	mov	r3, r5
 8005e54:	460a      	mov	r2, r1
 8005e56:	eb42 0303 	adc.w	r3, r2, r3
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e68:	4629      	mov	r1, r5
 8005e6a:	024b      	lsls	r3, r1, #9
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e72:	4621      	mov	r1, r4
 8005e74:	024a      	lsls	r2, r1, #9
 8005e76:	4610      	mov	r0, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005e8c:	f7fa ff1c 	bl	8000cc8 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4613      	mov	r3, r2
 8005e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e9a:	e067      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9c:	4b75      	ldr	r3, [pc, #468]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	0159      	lsls	r1, r3, #5
 8005ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed0:	0150      	lsls	r0, r2, #5
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	1a51      	subs	r1, r2, r1
 8005eda:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005edc:	4629      	mov	r1, r5
 8005ede:	eb63 0301 	sbc.w	r3, r3, r1
 8005ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	018b      	lsls	r3, r1, #6
 8005ef4:	4641      	mov	r1, r8
 8005ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005efa:	4641      	mov	r1, r8
 8005efc:	018a      	lsls	r2, r1, #6
 8005efe:	4641      	mov	r1, r8
 8005f00:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f04:	4649      	mov	r1, r9
 8005f06:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f1e:	4692      	mov	sl, r2
 8005f20:	469b      	mov	fp, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	eb1a 0303 	adds.w	r3, sl, r3
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005f3e:	4629      	mov	r1, r5
 8005f40:	028b      	lsls	r3, r1, #10
 8005f42:	4621      	mov	r1, r4
 8005f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f48:	4621      	mov	r1, r4
 8005f4a:	028a      	lsls	r2, r1, #10
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f54:	2200      	movs	r2, #0
 8005f56:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f58:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005f5e:	f7fa feb3 	bl	8000cc8 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4613      	mov	r3, r2
 8005f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f6c:	4b41      	ldr	r3, [pc, #260]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	0c1b      	lsrs	r3, r3, #16
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	3301      	adds	r3, #1
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f8e:	e0eb      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f90:	4b38      	ldr	r3, [pc, #224]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f9c:	4b35      	ldr	r3, [pc, #212]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d06b      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa8:	4b32      	ldr	r3, [pc, #200]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x354>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	2200      	movs	r2, #0
 8005fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	f04f 0000 	mov.w	r0, #0
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	0159      	lsls	r1, r3, #5
 8005fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd6:	0150      	lsls	r0, r2, #5
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4621      	mov	r1, r4
 8005fde:	1a51      	subs	r1, r2, r1
 8005fe0:	61b9      	str	r1, [r7, #24]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	018b      	lsls	r3, r1, #6
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006000:	4651      	mov	r1, sl
 8006002:	018a      	lsls	r2, r1, #6
 8006004:	4651      	mov	r1, sl
 8006006:	ebb2 0801 	subs.w	r8, r2, r1
 800600a:	4659      	mov	r1, fp
 800600c:	eb63 0901 	sbc.w	r9, r3, r1
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800601c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006020:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006024:	4690      	mov	r8, r2
 8006026:	4699      	mov	r9, r3
 8006028:	4623      	mov	r3, r4
 800602a:	eb18 0303 	adds.w	r3, r8, r3
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	462b      	mov	r3, r5
 8006032:	eb49 0303 	adc.w	r3, r9, r3
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006044:	4629      	mov	r1, r5
 8006046:	024b      	lsls	r3, r1, #9
 8006048:	4621      	mov	r1, r4
 800604a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800604e:	4621      	mov	r1, r4
 8006050:	024a      	lsls	r2, r1, #9
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800605a:	2200      	movs	r2, #0
 800605c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800605e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006060:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006064:	f7fa fe30 	bl	8000cc8 <__aeabi_uldivmod>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	4613      	mov	r3, r2
 800606e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006072:	e065      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x420>
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400
 800607c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006080:	4b3d      	ldr	r3, [pc, #244]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x458>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	099b      	lsrs	r3, r3, #6
 8006086:	2200      	movs	r2, #0
 8006088:	4618      	mov	r0, r3
 800608a:	4611      	mov	r1, r2
 800608c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006090:	653b      	str	r3, [r7, #80]	@ 0x50
 8006092:	2300      	movs	r3, #0
 8006094:	657b      	str	r3, [r7, #84]	@ 0x54
 8006096:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800609a:	4642      	mov	r2, r8
 800609c:	464b      	mov	r3, r9
 800609e:	f04f 0000 	mov.w	r0, #0
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	0159      	lsls	r1, r3, #5
 80060a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ac:	0150      	lsls	r0, r2, #5
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4641      	mov	r1, r8
 80060b4:	1a51      	subs	r1, r2, r1
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4649      	mov	r1, r9
 80060ba:	eb63 0301 	sbc.w	r3, r3, r1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80060cc:	4659      	mov	r1, fp
 80060ce:	018b      	lsls	r3, r1, #6
 80060d0:	4651      	mov	r1, sl
 80060d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060d6:	4651      	mov	r1, sl
 80060d8:	018a      	lsls	r2, r1, #6
 80060da:	4651      	mov	r1, sl
 80060dc:	1a54      	subs	r4, r2, r1
 80060de:	4659      	mov	r1, fp
 80060e0:	eb63 0501 	sbc.w	r5, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	00eb      	lsls	r3, r5, #3
 80060ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	18e3      	adds	r3, r4, r3
 80060fc:	603b      	str	r3, [r7, #0]
 80060fe:	464b      	mov	r3, r9
 8006100:	eb45 0303 	adc.w	r3, r5, r3
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006112:	4629      	mov	r1, r5
 8006114:	028b      	lsls	r3, r1, #10
 8006116:	4621      	mov	r1, r4
 8006118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800611c:	4621      	mov	r1, r4
 800611e:	028a      	lsls	r2, r1, #10
 8006120:	4610      	mov	r0, r2
 8006122:	4619      	mov	r1, r3
 8006124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006128:	2200      	movs	r2, #0
 800612a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800612e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006132:	f7fa fdc9 	bl	8000cc8 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4613      	mov	r3, r2
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006140:	4b0d      	ldr	r3, [pc, #52]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x458>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	0f1b      	lsrs	r3, r3, #28
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800614e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800615e:	e003      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006160:	4b06      	ldr	r3, [pc, #24]	@ (800617c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006168:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800616c:	4618      	mov	r0, r3
 800616e:	37b8      	adds	r7, #184	@ 0xb8
 8006170:	46bd      	mov	sp, r7
 8006172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	00f42400 	.word	0x00f42400

08006180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e28d      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8083 	beq.w	80062a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061a0:	4b94      	ldr	r3, [pc, #592]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d019      	beq.n	80061e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80061ac:	4b91      	ldr	r3, [pc, #580]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d106      	bne.n	80061c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80061b8:	4b8e      	ldr	r3, [pc, #568]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c4:	d00c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c6:	4b8b      	ldr	r3, [pc, #556]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80061ce:	2b0c      	cmp	r3, #12
 80061d0:	d112      	bne.n	80061f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d2:	4b88      	ldr	r3, [pc, #544]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061de:	d10b      	bne.n	80061f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	4b84      	ldr	r3, [pc, #528]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05b      	beq.n	80062a4 <HAL_RCC_OscConfig+0x124>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d157      	bne.n	80062a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e25a      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006200:	d106      	bne.n	8006210 <HAL_RCC_OscConfig+0x90>
 8006202:	4b7c      	ldr	r3, [pc, #496]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7b      	ldr	r2, [pc, #492]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e01d      	b.n	800624c <HAL_RCC_OscConfig+0xcc>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0xb4>
 800621a:	4b76      	ldr	r3, [pc, #472]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a75      	ldr	r2, [pc, #468]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b73      	ldr	r3, [pc, #460]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a72      	ldr	r2, [pc, #456]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e00b      	b.n	800624c <HAL_RCC_OscConfig+0xcc>
 8006234:	4b6f      	ldr	r3, [pc, #444]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a6e      	ldr	r2, [pc, #440]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 800623a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4b6c      	ldr	r3, [pc, #432]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a6b      	ldr	r2, [pc, #428]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800624a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc ff5a 	bl	800310c <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fc ff56 	bl	800310c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	@ 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e21f      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	4b61      	ldr	r3, [pc, #388]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0xdc>
 800627a:	e014      	b.n	80062a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627c:	f7fc ff46 	bl	800310c <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006284:	f7fc ff42 	bl	800310c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	@ 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e20b      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006296:	4b57      	ldr	r3, [pc, #348]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x104>
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d06f      	beq.n	8006392 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062b2:	4b50      	ldr	r3, [pc, #320]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d017      	beq.n	80062ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80062be:	4b4d      	ldr	r3, [pc, #308]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d105      	bne.n	80062d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80062ca:	4b4a      	ldr	r3, [pc, #296]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062d6:	4b47      	ldr	r3, [pc, #284]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d11c      	bne.n	800631c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e2:	4b44      	ldr	r3, [pc, #272]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d116      	bne.n	800631c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ee:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_RCC_OscConfig+0x186>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d001      	beq.n	8006306 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e1d3      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006306:	4b3b      	ldr	r3, [pc, #236]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4937      	ldr	r1, [pc, #220]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006316:	4313      	orrs	r3, r2
 8006318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631a:	e03a      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d020      	beq.n	8006366 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006324:	4b34      	ldr	r3, [pc, #208]	@ (80063f8 <HAL_RCC_OscConfig+0x278>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fc feef 	bl	800310c <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006332:	f7fc feeb 	bl	800310c <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e1b4      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006344:	4b2b      	ldr	r3, [pc, #172]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006350:	4b28      	ldr	r3, [pc, #160]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4925      	ldr	r1, [pc, #148]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
 8006364:	e015      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006366:	4b24      	ldr	r3, [pc, #144]	@ (80063f8 <HAL_RCC_OscConfig+0x278>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fc fece 	bl	800310c <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006374:	f7fc feca 	bl	800310c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e193      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006386:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d036      	beq.n	800640c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d016      	beq.n	80063d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a6:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <HAL_RCC_OscConfig+0x27c>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ac:	f7fc feae 	bl	800310c <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b4:	f7fc feaa 	bl	800310c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e173      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c6:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <HAL_RCC_OscConfig+0x274>)
 80063c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x234>
 80063d2:	e01b      	b.n	800640c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d4:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <HAL_RCC_OscConfig+0x27c>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063da:	f7fc fe97 	bl	800310c <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e0:	e00e      	b.n	8006400 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e2:	f7fc fe93 	bl	800310c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d907      	bls.n	8006400 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e15c      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
 80063f4:	40023800 	.word	0x40023800
 80063f8:	42470000 	.word	0x42470000
 80063fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006400:	4b8a      	ldr	r3, [pc, #552]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ea      	bne.n	80063e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8097 	beq.w	8006548 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800641e:	4b83      	ldr	r3, [pc, #524]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]
 800642e:	4b7f      	ldr	r3, [pc, #508]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	4a7e      	ldr	r2, [pc, #504]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006438:	6413      	str	r3, [r2, #64]	@ 0x40
 800643a:	4b7c      	ldr	r3, [pc, #496]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644a:	4b79      	ldr	r3, [pc, #484]	@ (8006630 <HAL_RCC_OscConfig+0x4b0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d118      	bne.n	8006488 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006456:	4b76      	ldr	r3, [pc, #472]	@ (8006630 <HAL_RCC_OscConfig+0x4b0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a75      	ldr	r2, [pc, #468]	@ (8006630 <HAL_RCC_OscConfig+0x4b0>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006462:	f7fc fe53 	bl	800310c <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800646a:	f7fc fe4f 	bl	800310c <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e118      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647c:	4b6c      	ldr	r3, [pc, #432]	@ (8006630 <HAL_RCC_OscConfig+0x4b0>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d106      	bne.n	800649e <HAL_RCC_OscConfig+0x31e>
 8006490:	4b66      	ldr	r3, [pc, #408]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006494:	4a65      	ldr	r2, [pc, #404]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	6713      	str	r3, [r2, #112]	@ 0x70
 800649c:	e01c      	b.n	80064d8 <HAL_RCC_OscConfig+0x358>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b05      	cmp	r3, #5
 80064a4:	d10c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x340>
 80064a6:	4b61      	ldr	r3, [pc, #388]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064aa:	4a60      	ldr	r2, [pc, #384]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064ac:	f043 0304 	orr.w	r3, r3, #4
 80064b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b2:	4b5e      	ldr	r3, [pc, #376]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	4a5d      	ldr	r2, [pc, #372]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064be:	e00b      	b.n	80064d8 <HAL_RCC_OscConfig+0x358>
 80064c0:	4b5a      	ldr	r3, [pc, #360]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c4:	4a59      	ldr	r2, [pc, #356]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80064cc:	4b57      	ldr	r3, [pc, #348]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d0:	4a56      	ldr	r2, [pc, #344]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80064d2:	f023 0304 	bic.w	r3, r3, #4
 80064d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d015      	beq.n	800650c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e0:	f7fc fe14 	bl	800310c <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e8:	f7fc fe10 	bl	800310c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e0d7      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fe:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0ee      	beq.n	80064e8 <HAL_RCC_OscConfig+0x368>
 800650a:	e014      	b.n	8006536 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fc fdfe 	bl	800310c <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006512:	e00a      	b.n	800652a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006514:	f7fc fdfa 	bl	800310c <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006522:	4293      	cmp	r3, r2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e0c1      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652a:	4b40      	ldr	r3, [pc, #256]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1ee      	bne.n	8006514 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d105      	bne.n	8006548 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800653c:	4b3b      	ldr	r3, [pc, #236]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	4a3a      	ldr	r2, [pc, #232]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006546:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80ad 	beq.w	80066ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006552:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b08      	cmp	r3, #8
 800655c:	d060      	beq.n	8006620 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d145      	bne.n	80065f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006566:	4b33      	ldr	r3, [pc, #204]	@ (8006634 <HAL_RCC_OscConfig+0x4b4>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fc fdce 	bl	800310c <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006574:	f7fc fdca 	bl	800310c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e093      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006586:	4b29      	ldr	r3, [pc, #164]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69da      	ldr	r2, [r3, #28]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a0:	019b      	lsls	r3, r3, #6
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	3b01      	subs	r3, #1
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	071b      	lsls	r3, r3, #28
 80065be:	491b      	ldr	r1, [pc, #108]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <HAL_RCC_OscConfig+0x4b4>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fc fd9f 	bl	800310c <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d2:	f7fc fd9b 	bl	800310c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e064      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e4:	4b11      	ldr	r3, [pc, #68]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x452>
 80065f0:	e05c      	b.n	80066ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f2:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <HAL_RCC_OscConfig+0x4b4>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fc fd88 	bl	800310c <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006600:	f7fc fd84 	bl	800310c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e04d      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_RCC_OscConfig+0x4ac>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x480>
 800661e:	e045      	b.n	80066ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d107      	bne.n	8006638 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e040      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
 800662c:	40023800 	.word	0x40023800
 8006630:	40007000 	.word	0x40007000
 8006634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006638:	4b1f      	ldr	r3, [pc, #124]	@ (80066b8 <HAL_RCC_OscConfig+0x538>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d030      	beq.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d129      	bne.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d122      	bne.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800666e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006670:	4293      	cmp	r3, r2
 8006672:	d119      	bne.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	085b      	lsrs	r3, r3, #1
 8006680:	3b01      	subs	r3, #1
 8006682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d10f      	bne.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d107      	bne.n	80066a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800

080066bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e041      	b.n	8006752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f839 	bl	800675a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f000 fc0c 	bl	8006f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d001      	beq.n	8006788 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e046      	b.n	8006816 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a23      	ldr	r2, [pc, #140]	@ (8006824 <HAL_TIM_Base_Start+0xb4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a2:	d01d      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006828 <HAL_TIM_Base_Start+0xb8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1e      	ldr	r2, [pc, #120]	@ (800682c <HAL_TIM_Base_Start+0xbc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006830 <HAL_TIM_Base_Start+0xc0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <HAL_TIM_Base_Start+0xc4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a19      	ldr	r2, [pc, #100]	@ (8006838 <HAL_TIM_Base_Start+0xc8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIM_Base_Start+0x70>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a18      	ldr	r2, [pc, #96]	@ (800683c <HAL_TIM_Base_Start+0xcc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d111      	bne.n	8006804 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b06      	cmp	r3, #6
 80067f0:	d010      	beq.n	8006814 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	e007      	b.n	8006814 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40010400 	.word	0x40010400
 8006838:	40014000 	.word	0x40014000
 800683c:	40001800 	.word	0x40001800

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d001      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e04e      	b.n	80068f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a23      	ldr	r2, [pc, #140]	@ (8006904 <HAL_TIM_Base_Start_IT+0xc4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d022      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d01d      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1f      	ldr	r2, [pc, #124]	@ (8006908 <HAL_TIM_Base_Start_IT+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1e      	ldr	r2, [pc, #120]	@ (800690c <HAL_TIM_Base_Start_IT+0xcc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <HAL_TIM_Base_Start_IT+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006914 <HAL_TIM_Base_Start_IT+0xd4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	@ (8006918 <HAL_TIM_Base_Start_IT+0xd8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x80>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	@ (800691c <HAL_TIM_Base_Start_IT+0xdc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d111      	bne.n	80068e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d010      	beq.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e2:	e007      	b.n	80068f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40010400 	.word	0x40010400
 8006918:	40014000 	.word	0x40014000
 800691c:	40001800 	.word	0x40001800

08006920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e041      	b.n	80069b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f839 	bl	80069be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f000 fada 	bl	8006f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <HAL_TIM_PWM_Start+0x24>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	e022      	b.n	8006a3e <HAL_TIM_PWM_Start+0x6a>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d109      	bne.n	8006a12 <HAL_TIM_PWM_Start+0x3e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	bf14      	ite	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	2300      	moveq	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	e015      	b.n	8006a3e <HAL_TIM_PWM_Start+0x6a>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d109      	bne.n	8006a2c <HAL_TIM_PWM_Start+0x58>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	e008      	b.n	8006a3e <HAL_TIM_PWM_Start+0x6a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	bf14      	ite	ne
 8006a38:	2301      	movne	r3, #1
 8006a3a:	2300      	moveq	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e07c      	b.n	8006b40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_TIM_PWM_Start+0x82>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a54:	e013      	b.n	8006a7e <HAL_TIM_PWM_Start+0xaa>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x92>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a64:	e00b      	b.n	8006a7e <HAL_TIM_PWM_Start+0xaa>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start+0xa2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a74:	e003      	b.n	8006a7e <HAL_TIM_PWM_Start+0xaa>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fca2 	bl	80073d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a2d      	ldr	r2, [pc, #180]	@ (8006b48 <HAL_TIM_PWM_Start+0x174>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0xcc>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b4c <HAL_TIM_PWM_Start+0x178>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_PWM_Start+0xd0>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_TIM_PWM_Start+0xd2>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a22      	ldr	r2, [pc, #136]	@ (8006b48 <HAL_TIM_PWM_Start+0x174>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d01d      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b50 <HAL_TIM_PWM_Start+0x17c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b54 <HAL_TIM_PWM_Start+0x180>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b58 <HAL_TIM_PWM_Start+0x184>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a16      	ldr	r2, [pc, #88]	@ (8006b4c <HAL_TIM_PWM_Start+0x178>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	@ (8006b5c <HAL_TIM_PWM_Start+0x188>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x136>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <HAL_TIM_PWM_Start+0x18c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d111      	bne.n	8006b2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d010      	beq.n	8006b3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	e007      	b.n	8006b3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40010400 	.word	0x40010400
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40001800 	.word	0x40001800

08006b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d020      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01b      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0202 	mvn.w	r2, #2
 8006b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f994 	bl	8006edc <HAL_TIM_IC_CaptureCallback>
 8006bb4:	e005      	b.n	8006bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f986 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f997 	bl	8006ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d020      	beq.n	8006c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01b      	beq.n	8006c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0204 	mvn.w	r2, #4
 8006be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f96e 	bl	8006edc <HAL_TIM_IC_CaptureCallback>
 8006c00:	e005      	b.n	8006c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f960 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f971 	bl	8006ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d020      	beq.n	8006c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01b      	beq.n	8006c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0208 	mvn.w	r2, #8
 8006c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2204      	movs	r2, #4
 8006c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f948 	bl	8006edc <HAL_TIM_IC_CaptureCallback>
 8006c4c:	e005      	b.n	8006c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f93a 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f94b 	bl	8006ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d020      	beq.n	8006cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 0310 	and.w	r3, r3, #16
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01b      	beq.n	8006cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0210 	mvn.w	r2, #16
 8006c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2208      	movs	r2, #8
 8006c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f922 	bl	8006edc <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f914 	bl	8006ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f925 	bl	8006ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00c      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0201 	mvn.w	r2, #1
 8006cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fa fd62 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fb9d 	bl	800742e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d007      	beq.n	8006d18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8f6 	bl	8006f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0220 	mvn.w	r2, #32
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fb6f 	bl	800741a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e0ae      	b.n	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b0c      	cmp	r3, #12
 8006d6e:	f200 809f 	bhi.w	8006eb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d72:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006dad 	.word	0x08006dad
 8006d7c:	08006eb1 	.word	0x08006eb1
 8006d80:	08006eb1 	.word	0x08006eb1
 8006d84:	08006eb1 	.word	0x08006eb1
 8006d88:	08006ded 	.word	0x08006ded
 8006d8c:	08006eb1 	.word	0x08006eb1
 8006d90:	08006eb1 	.word	0x08006eb1
 8006d94:	08006eb1 	.word	0x08006eb1
 8006d98:	08006e2f 	.word	0x08006e2f
 8006d9c:	08006eb1 	.word	0x08006eb1
 8006da0:	08006eb1 	.word	0x08006eb1
 8006da4:	08006eb1 	.word	0x08006eb1
 8006da8:	08006e6f 	.word	0x08006e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f95c 	bl	8007070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0204 	bic.w	r2, r2, #4
 8006dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6999      	ldr	r1, [r3, #24]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	619a      	str	r2, [r3, #24]
      break;
 8006dea:	e064      	b.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f9ac 	bl	8007150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6999      	ldr	r1, [r3, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	619a      	str	r2, [r3, #24]
      break;
 8006e2c:	e043      	b.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fa01 	bl	800723c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0208 	orr.w	r2, r2, #8
 8006e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0204 	bic.w	r2, r2, #4
 8006e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69d9      	ldr	r1, [r3, #28]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	61da      	str	r2, [r3, #28]
      break;
 8006e6c:	e023      	b.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fa55 	bl	8007324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69d9      	ldr	r1, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	021a      	lsls	r2, r3, #8
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	61da      	str	r2, [r3, #28]
      break;
 8006eae:	e002      	b.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a46      	ldr	r2, [pc, #280]	@ (8007044 <TIM_Base_SetConfig+0x12c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <TIM_Base_SetConfig+0x40>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f36:	d00f      	beq.n	8006f58 <TIM_Base_SetConfig+0x40>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a43      	ldr	r2, [pc, #268]	@ (8007048 <TIM_Base_SetConfig+0x130>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <TIM_Base_SetConfig+0x40>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a42      	ldr	r2, [pc, #264]	@ (800704c <TIM_Base_SetConfig+0x134>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_Base_SetConfig+0x40>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a41      	ldr	r2, [pc, #260]	@ (8007050 <TIM_Base_SetConfig+0x138>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a40      	ldr	r2, [pc, #256]	@ (8007054 <TIM_Base_SetConfig+0x13c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d108      	bne.n	8006f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a35      	ldr	r2, [pc, #212]	@ (8007044 <TIM_Base_SetConfig+0x12c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02b      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f78:	d027      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a32      	ldr	r2, [pc, #200]	@ (8007048 <TIM_Base_SetConfig+0x130>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d023      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a31      	ldr	r2, [pc, #196]	@ (800704c <TIM_Base_SetConfig+0x134>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01f      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a30      	ldr	r2, [pc, #192]	@ (8007050 <TIM_Base_SetConfig+0x138>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d01b      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2f      	ldr	r2, [pc, #188]	@ (8007054 <TIM_Base_SetConfig+0x13c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d017      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007058 <TIM_Base_SetConfig+0x140>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800705c <TIM_Base_SetConfig+0x144>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00f      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <TIM_Base_SetConfig+0x148>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00b      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8007064 <TIM_Base_SetConfig+0x14c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007068 <TIM_Base_SetConfig+0x150>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a29      	ldr	r2, [pc, #164]	@ (800706c <TIM_Base_SetConfig+0x154>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a10      	ldr	r2, [pc, #64]	@ (8007044 <TIM_Base_SetConfig+0x12c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_Base_SetConfig+0xf8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a12      	ldr	r2, [pc, #72]	@ (8007054 <TIM_Base_SetConfig+0x13c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d103      	bne.n	8007018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b01      	cmp	r3, #1
 8007028:	d105      	bne.n	8007036 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f023 0201 	bic.w	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	611a      	str	r2, [r3, #16]
  }
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800
 8007064:	40001800 	.word	0x40001800
 8007068:	40001c00 	.word	0x40001c00
 800706c:	40002000 	.word	0x40002000

08007070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0201 	bic.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 0302 	bic.w	r3, r3, #2
 80070b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a20      	ldr	r2, [pc, #128]	@ (8007148 <TIM_OC1_SetConfig+0xd8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC1_SetConfig+0x64>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <TIM_OC1_SetConfig+0xdc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10c      	bne.n	80070ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0308 	bic.w	r3, r3, #8
 80070da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 0304 	bic.w	r3, r3, #4
 80070ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <TIM_OC1_SetConfig+0xd8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC1_SetConfig+0x8e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a14      	ldr	r2, [pc, #80]	@ (800714c <TIM_OC1_SetConfig+0xdc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d111      	bne.n	8007122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4313      	orrs	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	621a      	str	r2, [r3, #32]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400

08007150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f023 0210 	bic.w	r2, r3, #16
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0320 	bic.w	r3, r3, #32
 800719a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a22      	ldr	r2, [pc, #136]	@ (8007234 <TIM_OC2_SetConfig+0xe4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC2_SetConfig+0x68>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a21      	ldr	r2, [pc, #132]	@ (8007238 <TIM_OC2_SetConfig+0xe8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d10d      	bne.n	80071d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a17      	ldr	r2, [pc, #92]	@ (8007234 <TIM_OC2_SetConfig+0xe4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC2_SetConfig+0x94>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a16      	ldr	r2, [pc, #88]	@ (8007238 <TIM_OC2_SetConfig+0xe8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d113      	bne.n	800720c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40010400 	.word	0x40010400

0800723c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a21      	ldr	r2, [pc, #132]	@ (800731c <TIM_OC3_SetConfig+0xe0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_OC3_SetConfig+0x66>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a20      	ldr	r2, [pc, #128]	@ (8007320 <TIM_OC3_SetConfig+0xe4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10d      	bne.n	80072be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a16      	ldr	r2, [pc, #88]	@ (800731c <TIM_OC3_SetConfig+0xe0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC3_SetConfig+0x92>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <TIM_OC3_SetConfig+0xe4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d113      	bne.n	80072f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	621a      	str	r2, [r3, #32]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400

08007324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800735a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800736e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	031b      	lsls	r3, r3, #12
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a12      	ldr	r2, [pc, #72]	@ (80073c8 <TIM_OC4_SetConfig+0xa4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_OC4_SetConfig+0x68>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <TIM_OC4_SetConfig+0xa8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d109      	bne.n	80073a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	019b      	lsls	r3, r3, #6
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40010400 	.word	0x40010400

080073d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2201      	movs	r2, #1
 80073e4:	fa02 f303 	lsl.w	r3, r2, r3
 80073e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a1a      	ldr	r2, [r3, #32]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	431a      	orrs	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e042      	b.n	80074da <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fa fe07 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2224      	movs	r2, #36	@ 0x24
 8007472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007484:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fdbe 	bl	8008008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800749a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695a      	ldr	r2, [r3, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	@ 0x28
 80074e6:	af02      	add	r7, sp, #8
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d175      	bne.n	80075ee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <HAL_UART_Transmit+0x2c>
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e06e      	b.n	80075f0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2221      	movs	r2, #33	@ 0x21
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007520:	f7fb fdf4 	bl	800310c <HAL_GetTick>
 8007524:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	88fa      	ldrh	r2, [r7, #6]
 800752a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753a:	d108      	bne.n	800754e <HAL_UART_Transmit+0x6c>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e003      	b.n	8007556 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007556:	e02e      	b.n	80075b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2200      	movs	r2, #0
 8007560:	2180      	movs	r1, #128	@ 0x80
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fb20 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e03a      	b.n	80075f0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800758e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	3302      	adds	r3, #2
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e007      	b.n	80075a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	3301      	adds	r3, #1
 80075a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1cb      	bne.n	8007558 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	2140      	movs	r1, #64	@ 0x40
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 faec 	bl	8007ba8 <UART_WaitOnFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2220      	movs	r2, #32
 80075da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e006      	b.n	80075f0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e000      	b.n	80075f0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b20      	cmp	r3, #32
 8007610:	d112      	bne.n	8007638 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_UART_Receive_IT+0x26>
 8007618:	88fb      	ldrh	r3, [r7, #6]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e00b      	b.n	800763a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	461a      	mov	r2, r3
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fb13 	bl	8007c5a <UART_Start_Receive_IT>
 8007634:	4603      	mov	r3, r0
 8007636:	e000      	b.n	800763a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007638:	2302      	movs	r3, #2
  }
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b0ba      	sub	sp, #232	@ 0xe8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800766a:	2300      	movs	r3, #0
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <HAL_UART_IRQHandler+0x66>
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fbf2 	bl	8007e8c <UART_Receive_IT>
      return;
 80076a8:	e25b      	b.n	8007b62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80de 	beq.w	8007870 <HAL_UART_IRQHandler+0x22c>
 80076b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d106      	bne.n	80076ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80d1 	beq.w	8007870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_UART_IRQHandler+0xae>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ea:	f043 0201 	orr.w	r2, r3, #1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <HAL_UART_IRQHandler+0xd2>
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_UART_IRQHandler+0xf6>
 8007722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800773a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d011      	beq.n	800776a <HAL_UART_IRQHandler+0x126>
 8007746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d105      	bne.n	800775e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007762:	f043 0208 	orr.w	r2, r3, #8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 81f2 	beq.w	8007b58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d008      	beq.n	8007792 <HAL_UART_IRQHandler+0x14e>
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb7d 	bl	8007e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779c:	2b40      	cmp	r3, #64	@ 0x40
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <HAL_UART_IRQHandler+0x17a>
 80077b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d04f      	beq.n	800785e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa85 	bl	8007cce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ce:	2b40      	cmp	r3, #64	@ 0x40
 80077d0:	d141      	bne.n	8007856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3314      	adds	r3, #20
 80077d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3314      	adds	r3, #20
 80077fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800780a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1d9      	bne.n	80077d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d013      	beq.n	800784e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a24 <HAL_UART_IRQHandler+0x3e0>)
 800782c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007832:	4618      	mov	r0, r3
 8007834:	f7fc fcaf 	bl	8004196 <HAL_DMA_Abort_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	e00e      	b.n	800786c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f994 	bl	8007b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	e00a      	b.n	800786c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f990 	bl	8007b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785c:	e006      	b.n	800786c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f98c 	bl	8007b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800786a:	e175      	b.n	8007b58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786c:	bf00      	nop
    return;
 800786e:	e173      	b.n	8007b58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007874:	2b01      	cmp	r3, #1
 8007876:	f040 814f 	bne.w	8007b18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8148 	beq.w	8007b18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8141 	beq.w	8007b18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b6:	2b40      	cmp	r3, #64	@ 0x40
 80078b8:	f040 80b6 	bne.w	8007a28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8145 	beq.w	8007b5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078da:	429a      	cmp	r2, r3
 80078dc:	f080 813e 	bcs.w	8007b5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078f2:	f000 8088 	beq.w	8007a06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800790c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	330c      	adds	r3, #12
 800791e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800792e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800793a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1d9      	bne.n	80078f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3314      	adds	r3, #20
 8007948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3314      	adds	r3, #20
 8007962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007966:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800796a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800796e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e1      	bne.n	8007942 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3314      	adds	r3, #20
 8007984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800798e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3314      	adds	r3, #20
 800799e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e3      	bne.n	800797e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d6:	f023 0310 	bic.w	r3, r3, #16
 80079da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e3      	bne.n	80079c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fc fb58 	bl	80040b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8b7 	bl	8007b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a22:	e09b      	b.n	8007b5c <HAL_UART_IRQHandler+0x518>
 8007a24:	08007d95 	.word	0x08007d95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 808e 	beq.w	8007b60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8089 	beq.w	8007b60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e3      	bne.n	8007a4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e3      	bne.n	8007a86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	330c      	adds	r3, #12
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	330c      	adds	r3, #12
 8007aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007af0:	61fa      	str	r2, [r7, #28]
 8007af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e3      	bne.n	8007acc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f83d 	bl	8007b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b16:	e023      	b.n	8007b60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <HAL_UART_IRQHandler+0x4f4>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f943 	bl	8007dbc <UART_Transmit_IT>
    return;
 8007b36:	e014      	b.n	8007b62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00e      	beq.n	8007b62 <HAL_UART_IRQHandler+0x51e>
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f983 	bl	8007e5c <UART_EndTransmit_IT>
    return;
 8007b56:	e004      	b.n	8007b62 <HAL_UART_IRQHandler+0x51e>
    return;
 8007b58:	bf00      	nop
 8007b5a:	e002      	b.n	8007b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b5c:	bf00      	nop
 8007b5e:	e000      	b.n	8007b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b60:	bf00      	nop
  }
}
 8007b62:	37e8      	adds	r7, #232	@ 0xe8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb8:	e03b      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d037      	beq.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc2:	f7fb faa3 	bl	800310c <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	6a3a      	ldr	r2, [r7, #32]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d302      	bcc.n	8007bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e03a      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0304 	and.w	r3, r3, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d023      	beq.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b80      	cmp	r3, #128	@ 0x80
 8007bee:	d020      	beq.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d01d      	beq.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d116      	bne.n	8007c32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f857 	bl	8007cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2208      	movs	r2, #8
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e00f      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d0b4      	beq.n	8007bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	4613      	mov	r3, r2
 8007c66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	88fa      	ldrh	r2, [r7, #6]
 8007c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2222      	movs	r2, #34	@ 0x22
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695a      	ldr	r2, [r3, #20]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0220 	orr.w	r2, r2, #32
 8007cbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b095      	sub	sp, #84	@ 0x54
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cf6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3314      	adds	r3, #20
 8007d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	f023 0301 	bic.w	r3, r3, #1
 8007d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d119      	bne.n	8007d7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	330c      	adds	r3, #12
 8007d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f023 0310 	bic.w	r3, r3, #16
 8007d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d66:	61ba      	str	r2, [r7, #24]
 8007d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6979      	ldr	r1, [r7, #20]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	613b      	str	r3, [r7, #16]
   return(result);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e5      	bne.n	8007d46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d88:	bf00      	nop
 8007d8a:	3754      	adds	r7, #84	@ 0x54
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fee4 	bl	8007b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b21      	cmp	r3, #33	@ 0x21
 8007dce:	d13e      	bne.n	8007e4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd8:	d114      	bne.n	8007e04 <UART_Transmit_IT+0x48>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d110      	bne.n	8007e04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007df6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	1c9a      	adds	r2, r3, #2
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]
 8007e02:	e008      	b.n	8007e16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	1c59      	adds	r1, r3, #1
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6211      	str	r1, [r2, #32]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10f      	bne.n	8007e4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e000      	b.n	8007e50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
  }
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fe73 	bl	8007b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08c      	sub	sp, #48	@ 0x30
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b22      	cmp	r3, #34	@ 0x22
 8007e9e:	f040 80ae 	bne.w	8007ffe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eaa:	d117      	bne.n	8007edc <UART_Receive_IT+0x50>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d113      	bne.n	8007edc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed4:	1c9a      	adds	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	629a      	str	r2, [r3, #40]	@ 0x28
 8007eda:	e026      	b.n	8007f2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eee:	d007      	beq.n	8007f00 <UART_Receive_IT+0x74>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <UART_Receive_IT+0x82>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e008      	b.n	8007f20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d15d      	bne.n	8007ffa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0220 	bic.w	r2, r2, #32
 8007f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d135      	bne.n	8007ff0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	330c      	adds	r3, #12
 8007f90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007faa:	623a      	str	r2, [r7, #32]
 8007fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	69f9      	ldr	r1, [r7, #28]
 8007fb0:	6a3a      	ldr	r2, [r7, #32]
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d10a      	bne.n	8007fe2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fdd1 	bl	8007b90 <HAL_UARTEx_RxEventCallback>
 8007fee:	e002      	b.n	8007ff6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7f9 f817 	bl	8001024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e002      	b.n	8008000 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e000      	b.n	8008000 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3730      	adds	r7, #48	@ 0x30
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800800c:	b0c0      	sub	sp, #256	@ 0x100
 800800e:	af00      	add	r7, sp, #0
 8008010:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008024:	68d9      	ldr	r1, [r3, #12]
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	ea40 0301 	orr.w	r3, r0, r1
 8008030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	431a      	orrs	r2, r3
 8008040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	431a      	orrs	r2, r3
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4313      	orrs	r3, r2
 8008050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008060:	f021 010c 	bic.w	r1, r1, #12
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800806e:	430b      	orrs	r3, r1
 8008070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008082:	6999      	ldr	r1, [r3, #24]
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	ea40 0301 	orr.w	r3, r0, r1
 800808e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b8f      	ldr	r3, [pc, #572]	@ (80082d4 <UART_SetConfig+0x2cc>)
 8008098:	429a      	cmp	r2, r3
 800809a:	d005      	beq.n	80080a8 <UART_SetConfig+0xa0>
 800809c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b8d      	ldr	r3, [pc, #564]	@ (80082d8 <UART_SetConfig+0x2d0>)
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d104      	bne.n	80080b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080a8:	f7fd fdf4 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 80080ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80080b0:	e003      	b.n	80080ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080b2:	f7fd fddb 	bl	8005c6c <HAL_RCC_GetPCLK1Freq>
 80080b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c4:	f040 810c 	bne.w	80082e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80080d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80080da:	4622      	mov	r2, r4
 80080dc:	462b      	mov	r3, r5
 80080de:	1891      	adds	r1, r2, r2
 80080e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80080e2:	415b      	adcs	r3, r3
 80080e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80080ea:	4621      	mov	r1, r4
 80080ec:	eb12 0801 	adds.w	r8, r2, r1
 80080f0:	4629      	mov	r1, r5
 80080f2:	eb43 0901 	adc.w	r9, r3, r1
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800810a:	4690      	mov	r8, r2
 800810c:	4699      	mov	r9, r3
 800810e:	4623      	mov	r3, r4
 8008110:	eb18 0303 	adds.w	r3, r8, r3
 8008114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008118:	462b      	mov	r3, r5
 800811a:	eb49 0303 	adc.w	r3, r9, r3
 800811e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800812e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008136:	460b      	mov	r3, r1
 8008138:	18db      	adds	r3, r3, r3
 800813a:	653b      	str	r3, [r7, #80]	@ 0x50
 800813c:	4613      	mov	r3, r2
 800813e:	eb42 0303 	adc.w	r3, r2, r3
 8008142:	657b      	str	r3, [r7, #84]	@ 0x54
 8008144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800814c:	f7f8 fdbc 	bl	8000cc8 <__aeabi_uldivmod>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4b61      	ldr	r3, [pc, #388]	@ (80082dc <UART_SetConfig+0x2d4>)
 8008156:	fba3 2302 	umull	r2, r3, r3, r2
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	011c      	lsls	r4, r3, #4
 800815e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008162:	2200      	movs	r2, #0
 8008164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008168:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800816c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	1891      	adds	r1, r2, r2
 8008176:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008178:	415b      	adcs	r3, r3
 800817a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800817c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008180:	4641      	mov	r1, r8
 8008182:	eb12 0a01 	adds.w	sl, r2, r1
 8008186:	4649      	mov	r1, r9
 8008188:	eb43 0b01 	adc.w	fp, r3, r1
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800819c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081a0:	4692      	mov	sl, r2
 80081a2:	469b      	mov	fp, r3
 80081a4:	4643      	mov	r3, r8
 80081a6:	eb1a 0303 	adds.w	r3, sl, r3
 80081aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081ae:	464b      	mov	r3, r9
 80081b0:	eb4b 0303 	adc.w	r3, fp, r3
 80081b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80081c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081cc:	460b      	mov	r3, r1
 80081ce:	18db      	adds	r3, r3, r3
 80081d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081d2:	4613      	mov	r3, r2
 80081d4:	eb42 0303 	adc.w	r3, r2, r3
 80081d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80081e2:	f7f8 fd71 	bl	8000cc8 <__aeabi_uldivmod>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	4b3b      	ldr	r3, [pc, #236]	@ (80082dc <UART_SetConfig+0x2d4>)
 80081ee:	fba3 2301 	umull	r2, r3, r3, r1
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	2264      	movs	r2, #100	@ 0x64
 80081f6:	fb02 f303 	mul.w	r3, r2, r3
 80081fa:	1acb      	subs	r3, r1, r3
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008202:	4b36      	ldr	r3, [pc, #216]	@ (80082dc <UART_SetConfig+0x2d4>)
 8008204:	fba3 2302 	umull	r2, r3, r3, r2
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008210:	441c      	add	r4, r3
 8008212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008216:	2200      	movs	r2, #0
 8008218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800821c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	1891      	adds	r1, r2, r2
 800822a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800822c:	415b      	adcs	r3, r3
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008234:	4641      	mov	r1, r8
 8008236:	1851      	adds	r1, r2, r1
 8008238:	6339      	str	r1, [r7, #48]	@ 0x30
 800823a:	4649      	mov	r1, r9
 800823c:	414b      	adcs	r3, r1
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800824c:	4659      	mov	r1, fp
 800824e:	00cb      	lsls	r3, r1, #3
 8008250:	4651      	mov	r1, sl
 8008252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008256:	4651      	mov	r1, sl
 8008258:	00ca      	lsls	r2, r1, #3
 800825a:	4610      	mov	r0, r2
 800825c:	4619      	mov	r1, r3
 800825e:	4603      	mov	r3, r0
 8008260:	4642      	mov	r2, r8
 8008262:	189b      	adds	r3, r3, r2
 8008264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008268:	464b      	mov	r3, r9
 800826a:	460a      	mov	r2, r1
 800826c:	eb42 0303 	adc.w	r3, r2, r3
 8008270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008280:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008288:	460b      	mov	r3, r1
 800828a:	18db      	adds	r3, r3, r3
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800828e:	4613      	mov	r3, r2
 8008290:	eb42 0303 	adc.w	r3, r2, r3
 8008294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800829a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800829e:	f7f8 fd13 	bl	8000cc8 <__aeabi_uldivmod>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4b0d      	ldr	r3, [pc, #52]	@ (80082dc <UART_SetConfig+0x2d4>)
 80082a8:	fba3 1302 	umull	r1, r3, r3, r2
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	2164      	movs	r1, #100	@ 0x64
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	3332      	adds	r3, #50	@ 0x32
 80082ba:	4a08      	ldr	r2, [pc, #32]	@ (80082dc <UART_SetConfig+0x2d4>)
 80082bc:	fba2 2303 	umull	r2, r3, r2, r3
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	f003 0207 	and.w	r2, r3, #7
 80082c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4422      	add	r2, r4
 80082ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082d0:	e106      	b.n	80084e0 <UART_SetConfig+0x4d8>
 80082d2:	bf00      	nop
 80082d4:	40011000 	.word	0x40011000
 80082d8:	40011400 	.word	0x40011400
 80082dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80082ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80082f2:	4642      	mov	r2, r8
 80082f4:	464b      	mov	r3, r9
 80082f6:	1891      	adds	r1, r2, r2
 80082f8:	6239      	str	r1, [r7, #32]
 80082fa:	415b      	adcs	r3, r3
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80082fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008302:	4641      	mov	r1, r8
 8008304:	1854      	adds	r4, r2, r1
 8008306:	4649      	mov	r1, r9
 8008308:	eb43 0501 	adc.w	r5, r3, r1
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	00eb      	lsls	r3, r5, #3
 8008316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800831a:	00e2      	lsls	r2, r4, #3
 800831c:	4614      	mov	r4, r2
 800831e:	461d      	mov	r5, r3
 8008320:	4643      	mov	r3, r8
 8008322:	18e3      	adds	r3, r4, r3
 8008324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008328:	464b      	mov	r3, r9
 800832a:	eb45 0303 	adc.w	r3, r5, r3
 800832e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800833e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800834e:	4629      	mov	r1, r5
 8008350:	008b      	lsls	r3, r1, #2
 8008352:	4621      	mov	r1, r4
 8008354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008358:	4621      	mov	r1, r4
 800835a:	008a      	lsls	r2, r1, #2
 800835c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008360:	f7f8 fcb2 	bl	8000cc8 <__aeabi_uldivmod>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4b60      	ldr	r3, [pc, #384]	@ (80084ec <UART_SetConfig+0x4e4>)
 800836a:	fba3 2302 	umull	r2, r3, r3, r2
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	011c      	lsls	r4, r3, #4
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800837c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	1891      	adds	r1, r2, r2
 800838a:	61b9      	str	r1, [r7, #24]
 800838c:	415b      	adcs	r3, r3
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008394:	4641      	mov	r1, r8
 8008396:	1851      	adds	r1, r2, r1
 8008398:	6139      	str	r1, [r7, #16]
 800839a:	4649      	mov	r1, r9
 800839c:	414b      	adcs	r3, r1
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083ac:	4659      	mov	r1, fp
 80083ae:	00cb      	lsls	r3, r1, #3
 80083b0:	4651      	mov	r1, sl
 80083b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b6:	4651      	mov	r1, sl
 80083b8:	00ca      	lsls	r2, r1, #3
 80083ba:	4610      	mov	r0, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	4642      	mov	r2, r8
 80083c2:	189b      	adds	r3, r3, r2
 80083c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083c8:	464b      	mov	r3, r9
 80083ca:	460a      	mov	r2, r1
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80083ec:	4649      	mov	r1, r9
 80083ee:	008b      	lsls	r3, r1, #2
 80083f0:	4641      	mov	r1, r8
 80083f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083f6:	4641      	mov	r1, r8
 80083f8:	008a      	lsls	r2, r1, #2
 80083fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083fe:	f7f8 fc63 	bl	8000cc8 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4611      	mov	r1, r2
 8008408:	4b38      	ldr	r3, [pc, #224]	@ (80084ec <UART_SetConfig+0x4e4>)
 800840a:	fba3 2301 	umull	r2, r3, r3, r1
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2264      	movs	r2, #100	@ 0x64
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	1acb      	subs	r3, r1, r3
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	3332      	adds	r3, #50	@ 0x32
 800841c:	4a33      	ldr	r2, [pc, #204]	@ (80084ec <UART_SetConfig+0x4e4>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008428:	441c      	add	r4, r3
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	673b      	str	r3, [r7, #112]	@ 0x70
 8008432:	677a      	str	r2, [r7, #116]	@ 0x74
 8008434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	1891      	adds	r1, r2, r2
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	415b      	adcs	r3, r3
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008448:	4641      	mov	r1, r8
 800844a:	1851      	adds	r1, r2, r1
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	4649      	mov	r1, r9
 8008450:	414b      	adcs	r3, r1
 8008452:	607b      	str	r3, [r7, #4]
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008460:	4659      	mov	r1, fp
 8008462:	00cb      	lsls	r3, r1, #3
 8008464:	4651      	mov	r1, sl
 8008466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846a:	4651      	mov	r1, sl
 800846c:	00ca      	lsls	r2, r1, #3
 800846e:	4610      	mov	r0, r2
 8008470:	4619      	mov	r1, r3
 8008472:	4603      	mov	r3, r0
 8008474:	4642      	mov	r2, r8
 8008476:	189b      	adds	r3, r3, r2
 8008478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800847a:	464b      	mov	r3, r9
 800847c:	460a      	mov	r2, r1
 800847e:	eb42 0303 	adc.w	r3, r2, r3
 8008482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	663b      	str	r3, [r7, #96]	@ 0x60
 800848e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800849c:	4649      	mov	r1, r9
 800849e:	008b      	lsls	r3, r1, #2
 80084a0:	4641      	mov	r1, r8
 80084a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a6:	4641      	mov	r1, r8
 80084a8:	008a      	lsls	r2, r1, #2
 80084aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80084ae:	f7f8 fc0b 	bl	8000cc8 <__aeabi_uldivmod>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <UART_SetConfig+0x4e4>)
 80084b8:	fba3 1302 	umull	r1, r3, r3, r2
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	2164      	movs	r1, #100	@ 0x64
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	3332      	adds	r3, #50	@ 0x32
 80084ca:	4a08      	ldr	r2, [pc, #32]	@ (80084ec <UART_SetConfig+0x4e4>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f003 020f 	and.w	r2, r3, #15
 80084d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4422      	add	r2, r4
 80084de:	609a      	str	r2, [r3, #8]
}
 80084e0:	bf00      	nop
 80084e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80084e6:	46bd      	mov	sp, r7
 80084e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ec:	51eb851f 	.word	0x51eb851f

080084f0 <__NVIC_SetPriority>:
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008500:	2b00      	cmp	r3, #0
 8008502:	db0a      	blt.n	800851a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	b2da      	uxtb	r2, r3
 8008508:	490c      	ldr	r1, [pc, #48]	@ (800853c <__NVIC_SetPriority+0x4c>)
 800850a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800850e:	0112      	lsls	r2, r2, #4
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	440b      	add	r3, r1
 8008514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008518:	e00a      	b.n	8008530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	b2da      	uxtb	r2, r3
 800851e:	4908      	ldr	r1, [pc, #32]	@ (8008540 <__NVIC_SetPriority+0x50>)
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	3b04      	subs	r3, #4
 8008528:	0112      	lsls	r2, r2, #4
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	440b      	add	r3, r1
 800852e:	761a      	strb	r2, [r3, #24]
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	e000e100 	.word	0xe000e100
 8008540:	e000ed00 	.word	0xe000ed00

08008544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <SysTick_Handler+0x1c>)
 800854a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800854c:	f001 fd18 	bl	8009f80 <xTaskGetSchedulerState>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008556:	f002 fb0f 	bl	800ab78 <xPortSysTickHandler>
  }
}
 800855a:	bf00      	nop
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	e000e010 	.word	0xe000e010

08008564 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008568:	2100      	movs	r1, #0
 800856a:	f06f 0004 	mvn.w	r0, #4
 800856e:	f7ff ffbf 	bl	80084f0 <__NVIC_SetPriority>
#endif
}
 8008572:	bf00      	nop
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	603b      	str	r3, [r7, #0]
  return(result);
 8008584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800858a:	f06f 0305 	mvn.w	r3, #5
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	e00c      	b.n	80085ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <osKernelInitialize+0x44>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800859a:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <osKernelInitialize+0x44>)
 800859c:	2201      	movs	r2, #1
 800859e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	e002      	b.n	80085ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295
 80085aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085ac:	687b      	ldr	r3, [r7, #4]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200007d8 	.word	0x200007d8

080085c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c6:	f3ef 8305 	mrs	r3, IPSR
 80085ca:	603b      	str	r3, [r7, #0]
  return(result);
 80085cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <osKernelStart+0x1a>
    stat = osErrorISR;
 80085d2:	f06f 0305 	mvn.w	r3, #5
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	e010      	b.n	80085fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085da:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <osKernelStart+0x48>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d109      	bne.n	80085f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085e2:	f7ff ffbf 	bl	8008564 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085e6:	4b08      	ldr	r3, [pc, #32]	@ (8008608 <osKernelStart+0x48>)
 80085e8:	2202      	movs	r2, #2
 80085ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80085ec:	f001 f87a 	bl	80096e4 <vTaskStartScheduler>
      stat = osOK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	e002      	b.n	80085fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80085f6:	f04f 33ff 	mov.w	r3, #4294967295
 80085fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085fc:	687b      	ldr	r3, [r7, #4]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	200007d8 	.word	0x200007d8

0800860c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	@ 0x38
 8008610:	af04      	add	r7, sp, #16
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800861c:	f3ef 8305 	mrs	r3, IPSR
 8008620:	617b      	str	r3, [r7, #20]
  return(result);
 8008622:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008624:	2b00      	cmp	r3, #0
 8008626:	d17e      	bne.n	8008726 <osThreadNew+0x11a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d07b      	beq.n	8008726 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800862e:	2380      	movs	r3, #128	@ 0x80
 8008630:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008632:	2318      	movs	r3, #24
 8008634:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d045      	beq.n	80086d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <osThreadNew+0x48>
        name = attr->name;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <osThreadNew+0x6e>
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	2b38      	cmp	r3, #56	@ 0x38
 800866c:	d805      	bhi.n	800867a <osThreadNew+0x6e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <osThreadNew+0x72>
        return (NULL);
 800867a:	2300      	movs	r3, #0
 800867c:	e054      	b.n	8008728 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <osThreadNew+0xa8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b5b      	cmp	r3, #91	@ 0x5b
 800869c:	d90a      	bls.n	80086b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d006      	beq.n	80086b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <osThreadNew+0xa8>
        mem = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e010      	b.n	80086d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10c      	bne.n	80086d6 <osThreadNew+0xca>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <osThreadNew+0xca>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <osThreadNew+0xca>
          mem = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61bb      	str	r3, [r7, #24]
 80086d0:	e001      	b.n	80086d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d110      	bne.n	80086fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086e4:	9202      	str	r2, [sp, #8]
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fe1a 	bl	800932c <xTaskCreateStatic>
 80086f8:	4603      	mov	r3, r0
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	e013      	b.n	8008726 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d110      	bne.n	8008726 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	b29a      	uxth	r2, r3
 8008708:	f107 0310 	add.w	r3, r7, #16
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fe68 	bl	80093ec <xTaskCreate>
 800871c:	4603      	mov	r3, r0
 800871e:	2b01      	cmp	r3, #1
 8008720:	d001      	beq.n	8008726 <osThreadNew+0x11a>
            hTask = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008726:	693b      	ldr	r3, [r7, #16]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3728      	adds	r7, #40	@ 0x28
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008738:	f3ef 8305 	mrs	r3, IPSR
 800873c:	60bb      	str	r3, [r7, #8]
  return(result);
 800873e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <osDelay+0x1c>
    stat = osErrorISR;
 8008744:	f06f 0305 	mvn.w	r3, #5
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	e007      	b.n	800875c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 ff8e 	bl	8009678 <vTaskDelay>
    }
  }

  return (stat);
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4a07      	ldr	r2, [pc, #28]	@ (8008794 <vApplicationGetIdleTaskMemory+0x2c>)
 8008778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4a06      	ldr	r2, [pc, #24]	@ (8008798 <vApplicationGetIdleTaskMemory+0x30>)
 800877e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2280      	movs	r2, #128	@ 0x80
 8008784:	601a      	str	r2, [r3, #0]
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	200007dc 	.word	0x200007dc
 8008798:	20000838 	.word	0x20000838

0800879c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4a07      	ldr	r2, [pc, #28]	@ (80087c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80087ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <vApplicationGetTimerTaskMemory+0x30>)
 80087b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087ba:	601a      	str	r2, [r3, #0]
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	20000a38 	.word	0x20000a38
 80087cc:	20000a94 	.word	0x20000a94

080087d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f103 0208 	add.w	r2, r3, #8
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f103 0208 	add.w	r2, r3, #8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f103 0208 	add.w	r2, r3, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	e00c      	b.n	80088ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3308      	adds	r3, #8
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e002      	b.n	80088a0 <vListInsert+0x2e>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d2f6      	bcs.n	800889a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6892      	ldr	r2, [r2, #8]
 80088fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6852      	ldr	r2, [r2, #4]
 8008904:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	429a      	cmp	r2, r3
 800890e:	d103      	bne.n	8008918 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	1e5a      	subs	r2, r3, #1
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10b      	bne.n	8008964 <xQueueGenericReset+0x2c>
	__asm volatile
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	60bb      	str	r3, [r7, #8]
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008964:	f002 f878 	bl	800aa58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008974:	fb01 f303 	mul.w	r3, r1, r3
 8008978:	441a      	add	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008994:	3b01      	subs	r3, #1
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	22ff      	movs	r2, #255	@ 0xff
 80089a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	22ff      	movs	r2, #255	@ 0xff
 80089b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d114      	bne.n	80089e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01a      	beq.n	80089f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3310      	adds	r3, #16
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 f91a 	bl	8009c00 <xTaskRemoveFromEventList>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d012      	beq.n	80089f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <xQueueGenericReset+0xd0>)
 80089d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	e009      	b.n	80089f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3310      	adds	r3, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fef1 	bl	80087d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3324      	adds	r3, #36	@ 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff feec 	bl	80087d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089f8:	f002 f860 	bl	800aabc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089fc:	2301      	movs	r3, #1
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08e      	sub	sp, #56	@ 0x38
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10b      	bne.n	8008a56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <xQueueGenericCreateStatic+0x56>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <xQueueGenericCreateStatic+0x5a>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericCreateStatic+0x5c>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	623b      	str	r3, [r7, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d102      	bne.n	8008a90 <xQueueGenericCreateStatic+0x84>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <xQueueGenericCreateStatic+0x88>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <xQueueGenericCreateStatic+0x8a>
 8008a94:	2300      	movs	r3, #0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	61fb      	str	r3, [r7, #28]
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	e7fd      	b.n	8008aae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ab2:	2350      	movs	r3, #80	@ 0x50
 8008ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b50      	cmp	r3, #80	@ 0x50
 8008aba:	d00b      	beq.n	8008ad4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	61bb      	str	r3, [r7, #24]
}
 8008ace:	bf00      	nop
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ad4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ae8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	4613      	mov	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f805 	bl	8008b06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3730      	adds	r7, #48	@ 0x30
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d103      	bne.n	8008b22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e002      	b.n	8008b28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b34:	2101      	movs	r1, #1
 8008b36:	69b8      	ldr	r0, [r7, #24]
 8008b38:	f7ff fefe 	bl	8008938 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08e      	sub	sp, #56	@ 0x38
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <xQueueGenericSend+0x34>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d103      	bne.n	8008b8e <xQueueGenericSend+0x42>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <xQueueGenericSend+0x46>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <xQueueGenericSend+0x48>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10b      	bne.n	8008bb0 <xQueueGenericSend+0x64>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d103      	bne.n	8008bbe <xQueueGenericSend+0x72>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d101      	bne.n	8008bc2 <xQueueGenericSend+0x76>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <xQueueGenericSend+0x78>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <xQueueGenericSend+0x94>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	623b      	str	r3, [r7, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008be0:	f001 f9ce 	bl	8009f80 <xTaskGetSchedulerState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <xQueueGenericSend+0xa4>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <xQueueGenericSend+0xa8>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <xQueueGenericSend+0xaa>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <xQueueGenericSend+0xc6>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	61fb      	str	r3, [r7, #28]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c12:	f001 ff21 	bl	800aa58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d302      	bcc.n	8008c28 <xQueueGenericSend+0xdc>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d129      	bne.n	8008c7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c2e:	f000 fa0f 	bl	8009050 <prvCopyDataToQueue>
 8008c32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	3324      	adds	r3, #36	@ 0x24
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 ffdd 	bl	8009c00 <xTaskRemoveFromEventList>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d4c <xQueueGenericSend+0x200>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	e00a      	b.n	8008c74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c64:	4b39      	ldr	r3, [pc, #228]	@ (8008d4c <xQueueGenericSend+0x200>)
 8008c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c74:	f001 ff22 	bl	800aabc <vPortExitCritical>
				return pdPASS;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e063      	b.n	8008d44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c82:	f001 ff1b 	bl	800aabc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e05c      	b.n	8008d44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 f817 	bl	8009cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c9e:	f001 ff0d 	bl	800aabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ca2:	f000 fd87 	bl	80097b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ca6:	f001 fed7 	bl	800aa58 <vPortEnterCritical>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cb0:	b25b      	sxtb	r3, r3
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb6:	d103      	bne.n	8008cc0 <xQueueGenericSend+0x174>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cc6:	b25b      	sxtb	r3, r3
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d103      	bne.n	8008cd6 <xQueueGenericSend+0x18a>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cd6:	f001 fef1 	bl	800aabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cda:	1d3a      	adds	r2, r7, #4
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f001 f806 	bl	8009cf4 <xTaskCheckForTimeOut>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d124      	bne.n	8008d38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cf0:	f000 faa6 	bl	8009240 <prvIsQueueFull>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d018      	beq.n	8008d2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 ff2a 	bl	8009b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d0a:	f000 fa31 	bl	8009170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d0e:	f000 fd5f 	bl	80097d0 <xTaskResumeAll>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f47f af7c 	bne.w	8008c12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <xQueueGenericSend+0x200>)
 8008d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	e772      	b.n	8008c12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d2e:	f000 fa1f 	bl	8009170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d32:	f000 fd4d 	bl	80097d0 <xTaskResumeAll>
 8008d36:	e76c      	b.n	8008c12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d3a:	f000 fa19 	bl	8009170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d3e:	f000 fd47 	bl	80097d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3738      	adds	r7, #56	@ 0x38
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b090      	sub	sp, #64	@ 0x40
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <xQueueGenericSendFromISR+0x3e>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <xQueueGenericSendFromISR+0x42>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <xQueueGenericSendFromISR+0x44>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d103      	bne.n	8008dbe <xQueueGenericSendFromISR+0x6e>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <xQueueGenericSendFromISR+0x72>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <xQueueGenericSendFromISR+0x74>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	623b      	str	r3, [r7, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008de0:	f001 ff1a 	bl	800ac18 <vPortValidateInterruptPriority>
	__asm volatile
 8008de4:	f3ef 8211 	mrs	r2, BASEPRI
 8008de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	61fa      	str	r2, [r7, #28]
 8008dfa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dfe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <xQueueGenericSendFromISR+0xc2>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d12f      	bne.n	8008e72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e28:	f000 f912 	bl	8009050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d112      	bne.n	8008e5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d016      	beq.n	8008e6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	3324      	adds	r3, #36	@ 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fedc 	bl	8009c00 <xTaskRemoveFromEventList>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00e      	beq.n	8008e6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e007      	b.n	8008e6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e60:	3301      	adds	r3, #1
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	b25a      	sxtb	r2, r3
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e70:	e001      	b.n	8008e76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e78:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	f383 8811 	msr	BASEPRI, r3
}
 8008e80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3740      	adds	r7, #64	@ 0x40
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08c      	sub	sp, #48	@ 0x30
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <xQueueReceive+0x32>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	623b      	str	r3, [r7, #32]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <xQueueReceive+0x40>
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <xQueueReceive+0x44>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e000      	b.n	8008ed2 <xQueueReceive+0x46>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <xQueueReceive+0x62>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	61fb      	str	r3, [r7, #28]
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eee:	f001 f847 	bl	8009f80 <xTaskGetSchedulerState>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <xQueueReceive+0x72>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <xQueueReceive+0x76>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueReceive+0x78>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10b      	bne.n	8008f20 <xQueueReceive+0x94>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	61bb      	str	r3, [r7, #24]
}
 8008f1a:	bf00      	nop
 8008f1c:	bf00      	nop
 8008f1e:	e7fd      	b.n	8008f1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f20:	f001 fd9a 	bl	800aa58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01f      	beq.n	8008f70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f34:	f000 f8f6 	bl	8009124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	1e5a      	subs	r2, r3, #1
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00f      	beq.n	8008f68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	3310      	adds	r3, #16
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fe57 	bl	8009c00 <xTaskRemoveFromEventList>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f58:	4b3c      	ldr	r3, [pc, #240]	@ (800904c <xQueueReceive+0x1c0>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f68:	f001 fda8 	bl	800aabc <vPortExitCritical>
				return pdPASS;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e069      	b.n	8009044 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f76:	f001 fda1 	bl	800aabc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e062      	b.n	8009044 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fe9d 	bl	8009cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f92:	f001 fd93 	bl	800aabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f96:	f000 fc0d 	bl	80097b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f9a:	f001 fd5d 	bl	800aa58 <vPortEnterCritical>
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008faa:	d103      	bne.n	8008fb4 <xQueueReceive+0x128>
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fba:	b25b      	sxtb	r3, r3
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d103      	bne.n	8008fca <xQueueReceive+0x13e>
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fca:	f001 fd77 	bl	800aabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fce:	1d3a      	adds	r2, r7, #4
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fe8c 	bl	8009cf4 <xTaskCheckForTimeOut>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d123      	bne.n	800902a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe4:	f000 f916 	bl	8009214 <prvIsQueueEmpty>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d017      	beq.n	800901e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff0:	3324      	adds	r3, #36	@ 0x24
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fdb0 	bl	8009b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ffe:	f000 f8b7 	bl	8009170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009002:	f000 fbe5 	bl	80097d0 <xTaskResumeAll>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d189      	bne.n	8008f20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800900c:	4b0f      	ldr	r3, [pc, #60]	@ (800904c <xQueueReceive+0x1c0>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	e780      	b.n	8008f20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800901e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009020:	f000 f8a6 	bl	8009170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009024:	f000 fbd4 	bl	80097d0 <xTaskResumeAll>
 8009028:	e77a      	b.n	8008f20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800902a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800902c:	f000 f8a0 	bl	8009170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009030:	f000 fbce 	bl	80097d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009036:	f000 f8ed 	bl	8009214 <prvIsQueueEmpty>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	f43f af6f 	beq.w	8008f20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009042:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009044:	4618      	mov	r0, r3
 8009046:	3730      	adds	r7, #48	@ 0x30
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10d      	bne.n	800908a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d14d      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 ff9e 	bl	8009fbc <xTaskPriorityDisinherit>
 8009080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	e043      	b.n	8009112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d119      	bne.n	80090c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6858      	ldr	r0, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009098:	461a      	mov	r2, r3
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	f003 f809 	bl	800c0b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	441a      	add	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d32b      	bcc.n	8009112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	e026      	b.n	8009112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68d8      	ldr	r0, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090cc:	461a      	mov	r2, r3
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	f002 ffef 	bl	800c0b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090dc:	425b      	negs	r3, r3
 80090de:	441a      	add	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d207      	bcs.n	8009100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f8:	425b      	negs	r3, r3
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d105      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3b01      	subs	r3, #1
 8009110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	d018      	beq.n	8009168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	441a      	add	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	d303      	bcc.n	8009158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68d9      	ldr	r1, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009160:	461a      	mov	r2, r3
 8009162:	6838      	ldr	r0, [r7, #0]
 8009164:	f002 ffa5 	bl	800c0b2 <memcpy>
	}
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009178:	f001 fc6e 	bl	800aa58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009184:	e011      	b.n	80091aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d012      	beq.n	80091b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3324      	adds	r3, #36	@ 0x24
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fd34 	bl	8009c00 <xTaskRemoveFromEventList>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800919e:	f000 fe0d 	bl	8009dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dce9      	bgt.n	8009186 <prvUnlockQueue+0x16>
 80091b2:	e000      	b.n	80091b6 <prvUnlockQueue+0x46>
					break;
 80091b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	22ff      	movs	r2, #255	@ 0xff
 80091ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80091be:	f001 fc7d 	bl	800aabc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091c2:	f001 fc49 	bl	800aa58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ce:	e011      	b.n	80091f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d012      	beq.n	80091fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3310      	adds	r3, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fd0f 	bl	8009c00 <xTaskRemoveFromEventList>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091e8:	f000 fde8 	bl	8009dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dce9      	bgt.n	80091d0 <prvUnlockQueue+0x60>
 80091fc:	e000      	b.n	8009200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	22ff      	movs	r2, #255	@ 0xff
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009208:	f001 fc58 	bl	800aabc <vPortExitCritical>
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800921c:	f001 fc1c 	bl	800aa58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e001      	b.n	8009232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009232:	f001 fc43 	bl	800aabc <vPortExitCritical>

	return xReturn;
 8009236:	68fb      	ldr	r3, [r7, #12]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009248:	f001 fc06 	bl	800aa58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009254:	429a      	cmp	r2, r3
 8009256:	d102      	bne.n	800925e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009258:	2301      	movs	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e001      	b.n	8009262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009262:	f001 fc2b 	bl	800aabc <vPortExitCritical>

	return xReturn;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e014      	b.n	80092aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009280:	4a0f      	ldr	r2, [pc, #60]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10b      	bne.n	80092a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800928c:	490c      	ldr	r1, [pc, #48]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009296:	4a0a      	ldr	r2, [pc, #40]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	4413      	add	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092a2:	e006      	b.n	80092b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b07      	cmp	r3, #7
 80092ae:	d9e7      	bls.n	8009280 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000e94 	.word	0x20000e94

080092c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092d4:	f001 fbc0 	bl	800aa58 <vPortEnterCritical>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092de:	b25b      	sxtb	r3, r3
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d103      	bne.n	80092ee <vQueueWaitForMessageRestricted+0x2a>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092f4:	b25b      	sxtb	r3, r3
 80092f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fa:	d103      	bne.n	8009304 <vQueueWaitForMessageRestricted+0x40>
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009304:	f001 fbda 	bl	800aabc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930c:	2b00      	cmp	r3, #0
 800930e:	d106      	bne.n	800931e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3324      	adds	r3, #36	@ 0x24
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fc45 	bl	8009ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff26 	bl	8009170 <prvUnlockQueue>
	}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	@ 0x38
 8009330:	af04      	add	r7, sp, #16
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800933a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	623b      	str	r3, [r7, #32]
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	e7fd      	b.n	8009354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	61fb      	str	r3, [r7, #28]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009376:	235c      	movs	r3, #92	@ 0x5c
 8009378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2b5c      	cmp	r3, #92	@ 0x5c
 800937e:	d00b      	beq.n	8009398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61bb      	str	r3, [r7, #24]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01e      	beq.n	80093de <xTaskCreateStatic+0xb2>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093b8:	2300      	movs	r3, #0
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f850 	bl	8009476 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093d8:	f000 f8de 	bl	8009598 <prvAddNewTaskToReadyList>
 80093dc:	e001      	b.n	80093e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093e2:	697b      	ldr	r3, [r7, #20]
	}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3728      	adds	r7, #40	@ 0x28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08c      	sub	sp, #48	@ 0x30
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fc4b 	bl	800ac9c <pvPortMalloc>
 8009406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800940e:	205c      	movs	r0, #92	@ 0x5c
 8009410:	f001 fc44 	bl	800ac9c <pvPortMalloc>
 8009414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	631a      	str	r2, [r3, #48]	@ 0x30
 8009422:	e005      	b.n	8009430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009424:	6978      	ldr	r0, [r7, #20]
 8009426:	f001 fd07 	bl	800ae38 <vPortFree>
 800942a:	e001      	b.n	8009430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800942c:	2300      	movs	r3, #0
 800942e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d017      	beq.n	8009466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800943e:	88fa      	ldrh	r2, [r7, #6]
 8009440:	2300      	movs	r3, #0
 8009442:	9303      	str	r3, [sp, #12]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	9302      	str	r3, [sp, #8]
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 f80e 	bl	8009476 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800945a:	69f8      	ldr	r0, [r7, #28]
 800945c:	f000 f89c 	bl	8009598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009460:	2301      	movs	r3, #1
 8009462:	61bb      	str	r3, [r7, #24]
 8009464:	e002      	b.n	800946c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009466:	f04f 33ff 	mov.w	r3, #4294967295
 800946a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800946c:	69bb      	ldr	r3, [r7, #24]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	461a      	mov	r2, r3
 800948e:	21a5      	movs	r1, #165	@ 0xa5
 8009490:	f002 fd83 	bl	800bf9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800949e:	3b01      	subs	r3, #1
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	617b      	str	r3, [r7, #20]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01f      	beq.n	8009516 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094d6:	2300      	movs	r3, #0
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	e012      	b.n	8009502 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	4413      	add	r3, r2
 80094e2:	7819      	ldrb	r1, [r3, #0]
 80094e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	3334      	adds	r3, #52	@ 0x34
 80094ec:	460a      	mov	r2, r1
 80094ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d006      	beq.n	800950a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	3301      	adds	r3, #1
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	2b0f      	cmp	r3, #15
 8009506:	d9e9      	bls.n	80094dc <prvInitialiseNewTask+0x66>
 8009508:	e000      	b.n	800950c <prvInitialiseNewTask+0x96>
			{
				break;
 800950a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009514:	e003      	b.n	800951e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800951e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009520:	2b37      	cmp	r3, #55	@ 0x37
 8009522:	d901      	bls.n	8009528 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009524:	2337      	movs	r3, #55	@ 0x37
 8009526:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800952c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009532:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	2200      	movs	r2, #0
 8009538:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	3304      	adds	r3, #4
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff f966 	bl	8008810 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009546:	3318      	adds	r3, #24
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff f961 	bl	8008810 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009562:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	2200      	movs	r2, #0
 8009568:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	68f9      	ldr	r1, [r7, #12]
 8009576:	69b8      	ldr	r0, [r7, #24]
 8009578:	f001 f93e 	bl	800a7f8 <pxPortInitialiseStack>
 800957c:	4602      	mov	r2, r0
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800958c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800958e:	bf00      	nop
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095a0:	f001 fa5a 	bl	800aa58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095a4:	4b2d      	ldr	r3, [pc, #180]	@ (800965c <prvAddNewTaskToReadyList+0xc4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3301      	adds	r3, #1
 80095aa:	4a2c      	ldr	r2, [pc, #176]	@ (800965c <prvAddNewTaskToReadyList+0xc4>)
 80095ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009660 <prvAddNewTaskToReadyList+0xc8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009660 <prvAddNewTaskToReadyList+0xc8>)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095bc:	4b27      	ldr	r3, [pc, #156]	@ (800965c <prvAddNewTaskToReadyList+0xc4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d110      	bne.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095c4:	f000 fc1e 	bl	8009e04 <prvInitialiseTaskLists>
 80095c8:	e00d      	b.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095ca:	4b26      	ldr	r3, [pc, #152]	@ (8009664 <prvAddNewTaskToReadyList+0xcc>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095d2:	4b23      	ldr	r3, [pc, #140]	@ (8009660 <prvAddNewTaskToReadyList+0xc8>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d802      	bhi.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009660 <prvAddNewTaskToReadyList+0xc8>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095e6:	4b20      	ldr	r3, [pc, #128]	@ (8009668 <prvAddNewTaskToReadyList+0xd0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3301      	adds	r3, #1
 80095ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009668 <prvAddNewTaskToReadyList+0xd0>)
 80095ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009668 <prvAddNewTaskToReadyList+0xd0>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095fc:	4b1b      	ldr	r3, [pc, #108]	@ (800966c <prvAddNewTaskToReadyList+0xd4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <prvAddNewTaskToReadyList+0x74>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	4a18      	ldr	r2, [pc, #96]	@ (800966c <prvAddNewTaskToReadyList+0xd4>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a15      	ldr	r2, [pc, #84]	@ (8009670 <prvAddNewTaskToReadyList+0xd8>)
 800961a:	441a      	add	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7ff f901 	bl	800882a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009628:	f001 fa48 	bl	800aabc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800962c:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <prvAddNewTaskToReadyList+0xcc>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00e      	beq.n	8009652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009634:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <prvAddNewTaskToReadyList+0xc8>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963e:	429a      	cmp	r2, r3
 8009640:	d207      	bcs.n	8009652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009642:	4b0c      	ldr	r3, [pc, #48]	@ (8009674 <prvAddNewTaskToReadyList+0xdc>)
 8009644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	200013a8 	.word	0x200013a8
 8009660:	20000ed4 	.word	0x20000ed4
 8009664:	200013b4 	.word	0x200013b4
 8009668:	200013c4 	.word	0x200013c4
 800966c:	200013b0 	.word	0x200013b0
 8009670:	20000ed8 	.word	0x20000ed8
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d018      	beq.n	80096bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800968a:	4b14      	ldr	r3, [pc, #80]	@ (80096dc <vTaskDelay+0x64>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <vTaskDelay+0x32>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	60bb      	str	r3, [r7, #8]
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	e7fd      	b.n	80096a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096aa:	f000 f883 	bl	80097b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fcf3 	bl	800a09c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096b6:	f000 f88b 	bl	80097d0 <xTaskResumeAll>
 80096ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d107      	bne.n	80096d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80096c2:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <vTaskDelay+0x68>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	200013d0 	.word	0x200013d0
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08a      	sub	sp, #40	@ 0x28
 80096e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096f2:	463a      	mov	r2, r7
 80096f4:	1d39      	adds	r1, r7, #4
 80096f6:	f107 0308 	add.w	r3, r7, #8
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff f834 	bl	8008768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	9202      	str	r2, [sp, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	2300      	movs	r3, #0
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	2300      	movs	r3, #0
 8009710:	460a      	mov	r2, r1
 8009712:	4922      	ldr	r1, [pc, #136]	@ (800979c <vTaskStartScheduler+0xb8>)
 8009714:	4822      	ldr	r0, [pc, #136]	@ (80097a0 <vTaskStartScheduler+0xbc>)
 8009716:	f7ff fe09 	bl	800932c <xTaskCreateStatic>
 800971a:	4603      	mov	r3, r0
 800971c:	4a21      	ldr	r2, [pc, #132]	@ (80097a4 <vTaskStartScheduler+0xc0>)
 800971e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009720:	4b20      	ldr	r3, [pc, #128]	@ (80097a4 <vTaskStartScheduler+0xc0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e001      	b.n	8009732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d102      	bne.n	800973e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009738:	f000 fd04 	bl	800a144 <xTimerCreateTimerTask>
 800973c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d116      	bne.n	8009772 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	613b      	str	r3, [r7, #16]
}
 8009756:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009758:	4b13      	ldr	r3, [pc, #76]	@ (80097a8 <vTaskStartScheduler+0xc4>)
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009760:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <vTaskStartScheduler+0xc8>)
 8009762:	2201      	movs	r2, #1
 8009764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009766:	4b12      	ldr	r3, [pc, #72]	@ (80097b0 <vTaskStartScheduler+0xcc>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800976c:	f001 f8d0 	bl	800a910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009770:	e00f      	b.n	8009792 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d10b      	bne.n	8009792 <vTaskStartScheduler+0xae>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	60fb      	str	r3, [r7, #12]
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <vTaskStartScheduler+0xaa>
}
 8009792:	bf00      	nop
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	0800ff24 	.word	0x0800ff24
 80097a0:	08009dd5 	.word	0x08009dd5
 80097a4:	200013cc 	.word	0x200013cc
 80097a8:	200013c8 	.word	0x200013c8
 80097ac:	200013b4 	.word	0x200013b4
 80097b0:	200013ac 	.word	0x200013ac

080097b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097b8:	4b04      	ldr	r3, [pc, #16]	@ (80097cc <vTaskSuspendAll+0x18>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3301      	adds	r3, #1
 80097be:	4a03      	ldr	r2, [pc, #12]	@ (80097cc <vTaskSuspendAll+0x18>)
 80097c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097c2:	bf00      	nop
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	200013d0 	.word	0x200013d0

080097d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097de:	4b42      	ldr	r3, [pc, #264]	@ (80098e8 <xTaskResumeAll+0x118>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <xTaskResumeAll+0x2e>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	603b      	str	r3, [r7, #0]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097fe:	f001 f92b 	bl	800aa58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009802:	4b39      	ldr	r3, [pc, #228]	@ (80098e8 <xTaskResumeAll+0x118>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3b01      	subs	r3, #1
 8009808:	4a37      	ldr	r2, [pc, #220]	@ (80098e8 <xTaskResumeAll+0x118>)
 800980a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980c:	4b36      	ldr	r3, [pc, #216]	@ (80098e8 <xTaskResumeAll+0x118>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d162      	bne.n	80098da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009814:	4b35      	ldr	r3, [pc, #212]	@ (80098ec <xTaskResumeAll+0x11c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d05e      	beq.n	80098da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800981c:	e02f      	b.n	800987e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981e:	4b34      	ldr	r3, [pc, #208]	@ (80098f0 <xTaskResumeAll+0x120>)
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3318      	adds	r3, #24
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff f85a 	bl	80088e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff f855 	bl	80088e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800983e:	4b2d      	ldr	r3, [pc, #180]	@ (80098f4 <xTaskResumeAll+0x124>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d903      	bls.n	800984e <xTaskResumeAll+0x7e>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	4a2a      	ldr	r2, [pc, #168]	@ (80098f4 <xTaskResumeAll+0x124>)
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4a27      	ldr	r2, [pc, #156]	@ (80098f8 <xTaskResumeAll+0x128>)
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fe ffe0 	bl	800882a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986e:	4b23      	ldr	r3, [pc, #140]	@ (80098fc <xTaskResumeAll+0x12c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	429a      	cmp	r2, r3
 8009876:	d302      	bcc.n	800987e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009878:	4b21      	ldr	r3, [pc, #132]	@ (8009900 <xTaskResumeAll+0x130>)
 800987a:	2201      	movs	r2, #1
 800987c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800987e:	4b1c      	ldr	r3, [pc, #112]	@ (80098f0 <xTaskResumeAll+0x120>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1cb      	bne.n	800981e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800988c:	f000 fb58 	bl	8009f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009890:	4b1c      	ldr	r3, [pc, #112]	@ (8009904 <xTaskResumeAll+0x134>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d010      	beq.n	80098be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800989c:	f000 f846 	bl	800992c <xTaskIncrementTick>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80098a6:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <xTaskResumeAll+0x130>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1f1      	bne.n	800989c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80098b8:	4b12      	ldr	r3, [pc, #72]	@ (8009904 <xTaskResumeAll+0x134>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098be:	4b10      	ldr	r3, [pc, #64]	@ (8009900 <xTaskResumeAll+0x130>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098c6:	2301      	movs	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <xTaskResumeAll+0x138>)
 80098cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098da:	f001 f8ef 	bl	800aabc <vPortExitCritical>

	return xAlreadyYielded;
 80098de:	68bb      	ldr	r3, [r7, #8]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	200013d0 	.word	0x200013d0
 80098ec:	200013a8 	.word	0x200013a8
 80098f0:	20001368 	.word	0x20001368
 80098f4:	200013b0 	.word	0x200013b0
 80098f8:	20000ed8 	.word	0x20000ed8
 80098fc:	20000ed4 	.word	0x20000ed4
 8009900:	200013bc 	.word	0x200013bc
 8009904:	200013b8 	.word	0x200013b8
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009912:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <xTaskGetTickCount+0x1c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009918:	687b      	ldr	r3, [r7, #4]
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	200013ac 	.word	0x200013ac

0800992c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009936:	4b4f      	ldr	r3, [pc, #316]	@ (8009a74 <xTaskIncrementTick+0x148>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f040 8090 	bne.w	8009a60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009940:	4b4d      	ldr	r3, [pc, #308]	@ (8009a78 <xTaskIncrementTick+0x14c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009948:	4a4b      	ldr	r2, [pc, #300]	@ (8009a78 <xTaskIncrementTick+0x14c>)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d121      	bne.n	8009998 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009954:	4b49      	ldr	r3, [pc, #292]	@ (8009a7c <xTaskIncrementTick+0x150>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <xTaskIncrementTick+0x4a>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	603b      	str	r3, [r7, #0]
}
 8009970:	bf00      	nop
 8009972:	bf00      	nop
 8009974:	e7fd      	b.n	8009972 <xTaskIncrementTick+0x46>
 8009976:	4b41      	ldr	r3, [pc, #260]	@ (8009a7c <xTaskIncrementTick+0x150>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	4b40      	ldr	r3, [pc, #256]	@ (8009a80 <xTaskIncrementTick+0x154>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a3e      	ldr	r2, [pc, #248]	@ (8009a7c <xTaskIncrementTick+0x150>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4a3e      	ldr	r2, [pc, #248]	@ (8009a80 <xTaskIncrementTick+0x154>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	4b3e      	ldr	r3, [pc, #248]	@ (8009a84 <xTaskIncrementTick+0x158>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3301      	adds	r3, #1
 8009990:	4a3c      	ldr	r2, [pc, #240]	@ (8009a84 <xTaskIncrementTick+0x158>)
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	f000 fad4 	bl	8009f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009998:	4b3b      	ldr	r3, [pc, #236]	@ (8009a88 <xTaskIncrementTick+0x15c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d349      	bcc.n	8009a36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a2:	4b36      	ldr	r3, [pc, #216]	@ (8009a7c <xTaskIncrementTick+0x150>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ac:	4b36      	ldr	r3, [pc, #216]	@ (8009a88 <xTaskIncrementTick+0x15c>)
 80099ae:	f04f 32ff 	mov.w	r2, #4294967295
 80099b2:	601a      	str	r2, [r3, #0]
					break;
 80099b4:	e03f      	b.n	8009a36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b6:	4b31      	ldr	r3, [pc, #196]	@ (8009a7c <xTaskIncrementTick+0x150>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d203      	bcs.n	80099d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009a88 <xTaskIncrementTick+0x15c>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099d4:	e02f      	b.n	8009a36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe ff82 	bl	80088e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	3318      	adds	r3, #24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe ff79 	bl	80088e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f6:	4b25      	ldr	r3, [pc, #148]	@ (8009a8c <xTaskIncrementTick+0x160>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d903      	bls.n	8009a06 <xTaskIncrementTick+0xda>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	4a22      	ldr	r2, [pc, #136]	@ (8009a8c <xTaskIncrementTick+0x160>)
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4a1f      	ldr	r2, [pc, #124]	@ (8009a90 <xTaskIncrementTick+0x164>)
 8009a14:	441a      	add	r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fe ff04 	bl	800882a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a26:	4b1b      	ldr	r3, [pc, #108]	@ (8009a94 <xTaskIncrementTick+0x168>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3b8      	bcc.n	80099a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a30:	2301      	movs	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a34:	e7b5      	b.n	80099a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a36:	4b17      	ldr	r3, [pc, #92]	@ (8009a94 <xTaskIncrementTick+0x168>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	4914      	ldr	r1, [pc, #80]	@ (8009a90 <xTaskIncrementTick+0x164>)
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	440b      	add	r3, r1
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d901      	bls.n	8009a52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a52:	4b11      	ldr	r3, [pc, #68]	@ (8009a98 <xTaskIncrementTick+0x16c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d007      	beq.n	8009a6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e004      	b.n	8009a6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a60:	4b0e      	ldr	r3, [pc, #56]	@ (8009a9c <xTaskIncrementTick+0x170>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a0d      	ldr	r2, [pc, #52]	@ (8009a9c <xTaskIncrementTick+0x170>)
 8009a68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a6a:	697b      	ldr	r3, [r7, #20]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200013d0 	.word	0x200013d0
 8009a78:	200013ac 	.word	0x200013ac
 8009a7c:	20001360 	.word	0x20001360
 8009a80:	20001364 	.word	0x20001364
 8009a84:	200013c0 	.word	0x200013c0
 8009a88:	200013c8 	.word	0x200013c8
 8009a8c:	200013b0 	.word	0x200013b0
 8009a90:	20000ed8 	.word	0x20000ed8
 8009a94:	20000ed4 	.word	0x20000ed4
 8009a98:	200013bc 	.word	0x200013bc
 8009a9c:	200013b8 	.word	0x200013b8

08009aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aa6:	4b28      	ldr	r3, [pc, #160]	@ (8009b48 <vTaskSwitchContext+0xa8>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009aae:	4b27      	ldr	r3, [pc, #156]	@ (8009b4c <vTaskSwitchContext+0xac>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ab4:	e042      	b.n	8009b3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009ab6:	4b25      	ldr	r3, [pc, #148]	@ (8009b4c <vTaskSwitchContext+0xac>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009abc:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <vTaskSwitchContext+0xb0>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	60fb      	str	r3, [r7, #12]
 8009ac2:	e011      	b.n	8009ae8 <vTaskSwitchContext+0x48>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10b      	bne.n	8009ae2 <vTaskSwitchContext+0x42>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	607b      	str	r3, [r7, #4]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <vTaskSwitchContext+0x3e>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	491a      	ldr	r1, [pc, #104]	@ (8009b54 <vTaskSwitchContext+0xb4>)
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	440b      	add	r3, r1
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0e3      	beq.n	8009ac4 <vTaskSwitchContext+0x24>
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4a13      	ldr	r2, [pc, #76]	@ (8009b54 <vTaskSwitchContext+0xb4>)
 8009b08:	4413      	add	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d104      	bne.n	8009b2c <vTaskSwitchContext+0x8c>
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	605a      	str	r2, [r3, #4]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	4a09      	ldr	r2, [pc, #36]	@ (8009b58 <vTaskSwitchContext+0xb8>)
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	4a06      	ldr	r2, [pc, #24]	@ (8009b50 <vTaskSwitchContext+0xb0>)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6013      	str	r3, [r2, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	200013d0 	.word	0x200013d0
 8009b4c:	200013bc 	.word	0x200013bc
 8009b50:	200013b0 	.word	0x200013b0
 8009b54:	20000ed8 	.word	0x20000ed8
 8009b58:	20000ed4 	.word	0x20000ed4

08009b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10b      	bne.n	8009b84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60fb      	str	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b84:	4b07      	ldr	r3, [pc, #28]	@ (8009ba4 <vTaskPlaceOnEventList+0x48>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7fe fe70 	bl	8008872 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b92:	2101      	movs	r1, #1
 8009b94:	6838      	ldr	r0, [r7, #0]
 8009b96:	f000 fa81 	bl	800a09c <prvAddCurrentTaskToDelayedList>
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000ed4 	.word	0x20000ed4

08009ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	617b      	str	r3, [r7, #20]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3318      	adds	r3, #24
 8009bd8:	4619      	mov	r1, r3
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7fe fe25 	bl	800882a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f000 fa54 	bl	800a09c <prvAddCurrentTaskToDelayedList>
	}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000ed4 	.word	0x20000ed4

08009c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	3318      	adds	r3, #24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fe56 	bl	80088e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c38:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb0 <xTaskRemoveFromEventList+0xb0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d11d      	bne.n	8009c7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fe4d 	bl	80088e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4e:	4b19      	ldr	r3, [pc, #100]	@ (8009cb4 <xTaskRemoveFromEventList+0xb4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d903      	bls.n	8009c5e <xTaskRemoveFromEventList+0x5e>
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5a:	4a16      	ldr	r2, [pc, #88]	@ (8009cb4 <xTaskRemoveFromEventList+0xb4>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4a13      	ldr	r2, [pc, #76]	@ (8009cb8 <xTaskRemoveFromEventList+0xb8>)
 8009c6c:	441a      	add	r2, r3
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f7fe fdd8 	bl	800882a <vListInsertEnd>
 8009c7a:	e005      	b.n	8009c88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3318      	adds	r3, #24
 8009c80:	4619      	mov	r1, r3
 8009c82:	480e      	ldr	r0, [pc, #56]	@ (8009cbc <xTaskRemoveFromEventList+0xbc>)
 8009c84:	f7fe fdd1 	bl	800882a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <xTaskRemoveFromEventList+0xc0>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d905      	bls.n	8009ca2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc4 <xTaskRemoveFromEventList+0xc4>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	e001      	b.n	8009ca6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ca6:	697b      	ldr	r3, [r7, #20]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200013d0 	.word	0x200013d0
 8009cb4:	200013b0 	.word	0x200013b0
 8009cb8:	20000ed8 	.word	0x20000ed8
 8009cbc:	20001368 	.word	0x20001368
 8009cc0:	20000ed4 	.word	0x20000ed4
 8009cc4:	200013bc 	.word	0x200013bc

08009cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cd0:	4b06      	ldr	r3, [pc, #24]	@ (8009cec <vTaskInternalSetTimeOutState+0x24>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cd8:	4b05      	ldr	r3, [pc, #20]	@ (8009cf0 <vTaskInternalSetTimeOutState+0x28>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	605a      	str	r2, [r3, #4]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	200013c0 	.word	0x200013c0
 8009cf0:	200013ac 	.word	0x200013ac

08009cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10b      	bne.n	8009d1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	613b      	str	r3, [r7, #16]
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	e7fd      	b.n	8009d18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10b      	bne.n	8009d3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	60fb      	str	r3, [r7, #12]
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	e7fd      	b.n	8009d36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009d3a:	f000 fe8d 	bl	800aa58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009db4 <xTaskCheckForTimeOut+0xc0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d102      	bne.n	8009d5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e023      	b.n	8009da6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b15      	ldr	r3, [pc, #84]	@ (8009db8 <xTaskCheckForTimeOut+0xc4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d007      	beq.n	8009d7a <xTaskCheckForTimeOut+0x86>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d302      	bcc.n	8009d7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	61fb      	str	r3, [r7, #28]
 8009d78:	e015      	b.n	8009da6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d20b      	bcs.n	8009d9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	1ad2      	subs	r2, r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff ff99 	bl	8009cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	e004      	b.n	8009da6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009da2:	2301      	movs	r3, #1
 8009da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009da6:	f000 fe89 	bl	800aabc <vPortExitCritical>

	return xReturn;
 8009daa:	69fb      	ldr	r3, [r7, #28]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3720      	adds	r7, #32
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	200013ac 	.word	0x200013ac
 8009db8:	200013c0 	.word	0x200013c0

08009dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dc0:	4b03      	ldr	r3, [pc, #12]	@ (8009dd0 <vTaskMissedYield+0x14>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	601a      	str	r2, [r3, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	200013bc 	.word	0x200013bc

08009dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ddc:	f000 f852 	bl	8009e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009de0:	4b06      	ldr	r3, [pc, #24]	@ (8009dfc <prvIdleTask+0x28>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d9f9      	bls.n	8009ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009de8:	4b05      	ldr	r3, [pc, #20]	@ (8009e00 <prvIdleTask+0x2c>)
 8009dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009df8:	e7f0      	b.n	8009ddc <prvIdleTask+0x8>
 8009dfa:	bf00      	nop
 8009dfc:	20000ed8 	.word	0x20000ed8
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	e00c      	b.n	8009e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4a12      	ldr	r2, [pc, #72]	@ (8009e64 <prvInitialiseTaskLists+0x60>)
 8009e1c:	4413      	add	r3, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fcd6 	bl	80087d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3301      	adds	r3, #1
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b37      	cmp	r3, #55	@ 0x37
 8009e2e:	d9ef      	bls.n	8009e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e30:	480d      	ldr	r0, [pc, #52]	@ (8009e68 <prvInitialiseTaskLists+0x64>)
 8009e32:	f7fe fccd 	bl	80087d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e36:	480d      	ldr	r0, [pc, #52]	@ (8009e6c <prvInitialiseTaskLists+0x68>)
 8009e38:	f7fe fcca 	bl	80087d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e3c:	480c      	ldr	r0, [pc, #48]	@ (8009e70 <prvInitialiseTaskLists+0x6c>)
 8009e3e:	f7fe fcc7 	bl	80087d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e42:	480c      	ldr	r0, [pc, #48]	@ (8009e74 <prvInitialiseTaskLists+0x70>)
 8009e44:	f7fe fcc4 	bl	80087d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e48:	480b      	ldr	r0, [pc, #44]	@ (8009e78 <prvInitialiseTaskLists+0x74>)
 8009e4a:	f7fe fcc1 	bl	80087d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e7c <prvInitialiseTaskLists+0x78>)
 8009e50:	4a05      	ldr	r2, [pc, #20]	@ (8009e68 <prvInitialiseTaskLists+0x64>)
 8009e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e54:	4b0a      	ldr	r3, [pc, #40]	@ (8009e80 <prvInitialiseTaskLists+0x7c>)
 8009e56:	4a05      	ldr	r2, [pc, #20]	@ (8009e6c <prvInitialiseTaskLists+0x68>)
 8009e58:	601a      	str	r2, [r3, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20000ed8 	.word	0x20000ed8
 8009e68:	20001338 	.word	0x20001338
 8009e6c:	2000134c 	.word	0x2000134c
 8009e70:	20001368 	.word	0x20001368
 8009e74:	2000137c 	.word	0x2000137c
 8009e78:	20001394 	.word	0x20001394
 8009e7c:	20001360 	.word	0x20001360
 8009e80:	20001364 	.word	0x20001364

08009e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e8a:	e019      	b.n	8009ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e8c:	f000 fde4 	bl	800aa58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e90:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <prvCheckTasksWaitingTermination+0x50>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fd21 	bl	80088e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed8 <prvCheckTasksWaitingTermination+0x54>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8009ed8 <prvCheckTasksWaitingTermination+0x54>)
 8009eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009eac:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <prvCheckTasksWaitingTermination+0x58>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009edc <prvCheckTasksWaitingTermination+0x58>)
 8009eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009eb6:	f000 fe01 	bl	800aabc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f810 	bl	8009ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ec0:	4b06      	ldr	r3, [pc, #24]	@ (8009edc <prvCheckTasksWaitingTermination+0x58>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e1      	bne.n	8009e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	2000137c 	.word	0x2000137c
 8009ed8:	200013a8 	.word	0x200013a8
 8009edc:	20001390 	.word	0x20001390

08009ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d108      	bne.n	8009f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 ff9e 	bl	800ae38 <vPortFree>
				vPortFree( pxTCB );
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 ff9b 	bl	800ae38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f02:	e019      	b.n	8009f38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d103      	bne.n	8009f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 ff92 	bl	800ae38 <vPortFree>
	}
 8009f14:	e010      	b.n	8009f38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d00b      	beq.n	8009f38 <prvDeleteTCB+0x58>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60fb      	str	r3, [r7, #12]
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <prvDeleteTCB+0x54>
	}
 8009f38:	bf00      	nop
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f46:	4b0c      	ldr	r3, [pc, #48]	@ (8009f78 <prvResetNextTaskUnblockTime+0x38>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f50:	4b0a      	ldr	r3, [pc, #40]	@ (8009f7c <prvResetNextTaskUnblockTime+0x3c>)
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295
 8009f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f58:	e008      	b.n	8009f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f5a:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <prvResetNextTaskUnblockTime+0x38>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	4a04      	ldr	r2, [pc, #16]	@ (8009f7c <prvResetNextTaskUnblockTime+0x3c>)
 8009f6a:	6013      	str	r3, [r2, #0]
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20001360 	.word	0x20001360
 8009f7c:	200013c8 	.word	0x200013c8

08009f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f86:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <xTaskGetSchedulerState+0x34>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	e008      	b.n	8009fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f94:	4b08      	ldr	r3, [pc, #32]	@ (8009fb8 <xTaskGetSchedulerState+0x38>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	e001      	b.n	8009fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fa6:	687b      	ldr	r3, [r7, #4]
	}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	200013b4 	.word	0x200013b4
 8009fb8:	200013d0 	.word	0x200013d0

08009fbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d058      	beq.n	800a084 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fd2:	4b2f      	ldr	r3, [pc, #188]	@ (800a090 <xTaskPriorityDisinherit+0xd4>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d00b      	beq.n	8009ff4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60fb      	str	r3, [r7, #12]
}
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10b      	bne.n	800a014 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a000:	f383 8811 	msr	BASEPRI, r3
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	60bb      	str	r3, [r7, #8]
}
 800a00e:	bf00      	nop
 800a010:	bf00      	nop
 800a012:	e7fd      	b.n	800a010 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a018:	1e5a      	subs	r2, r3, #1
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a026:	429a      	cmp	r2, r3
 800a028:	d02c      	beq.n	800a084 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d128      	bne.n	800a084 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	3304      	adds	r3, #4
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe fc54 	bl	80088e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a054:	4b0f      	ldr	r3, [pc, #60]	@ (800a094 <xTaskPriorityDisinherit+0xd8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d903      	bls.n	800a064 <xTaskPriorityDisinherit+0xa8>
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a060:	4a0c      	ldr	r2, [pc, #48]	@ (800a094 <xTaskPriorityDisinherit+0xd8>)
 800a062:	6013      	str	r3, [r2, #0]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4a09      	ldr	r2, [pc, #36]	@ (800a098 <xTaskPriorityDisinherit+0xdc>)
 800a072:	441a      	add	r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	3304      	adds	r3, #4
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f7fe fbd5 	bl	800882a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a080:	2301      	movs	r3, #1
 800a082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a084:	697b      	ldr	r3, [r7, #20]
	}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000ed4 	.word	0x20000ed4
 800a094:	200013b0 	.word	0x200013b0
 800a098:	20000ed8 	.word	0x20000ed8

0800a09c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0a6:	4b21      	ldr	r3, [pc, #132]	@ (800a12c <prvAddCurrentTaskToDelayedList+0x90>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ac:	4b20      	ldr	r3, [pc, #128]	@ (800a130 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fc16 	bl	80088e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d10a      	bne.n	800a0d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a130 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4819      	ldr	r0, [pc, #100]	@ (800a134 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0d0:	f7fe fbab 	bl	800882a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0d4:	e026      	b.n	800a124 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4413      	add	r3, r2
 800a0dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0de:	4b14      	ldr	r3, [pc, #80]	@ (800a130 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d209      	bcs.n	800a102 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ee:	4b12      	ldr	r3, [pc, #72]	@ (800a138 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a130 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fbb9 	bl	8008872 <vListInsert>
}
 800a100:	e010      	b.n	800a124 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a102:	4b0e      	ldr	r3, [pc, #56]	@ (800a13c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <prvAddCurrentTaskToDelayedList+0x94>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f7fe fbaf 	bl	8008872 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a114:	4b0a      	ldr	r3, [pc, #40]	@ (800a140 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d202      	bcs.n	800a124 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a11e:	4a08      	ldr	r2, [pc, #32]	@ (800a140 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6013      	str	r3, [r2, #0]
}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	200013ac 	.word	0x200013ac
 800a130:	20000ed4 	.word	0x20000ed4
 800a134:	20001394 	.word	0x20001394
 800a138:	20001364 	.word	0x20001364
 800a13c:	20001360 	.word	0x20001360
 800a140:	200013c8 	.word	0x200013c8

0800a144 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	@ 0x28
 800a148:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a14e:	f000 fb13 	bl	800a778 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a152:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c8 <xTimerCreateTimerTask+0x84>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d021      	beq.n	800a19e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a162:	1d3a      	adds	r2, r7, #4
 800a164:	f107 0108 	add.w	r1, r7, #8
 800a168:	f107 030c 	add.w	r3, r7, #12
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fe fb15 	bl	800879c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	9202      	str	r2, [sp, #8]
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	2302      	movs	r3, #2
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	2300      	movs	r3, #0
 800a182:	460a      	mov	r2, r1
 800a184:	4911      	ldr	r1, [pc, #68]	@ (800a1cc <xTimerCreateTimerTask+0x88>)
 800a186:	4812      	ldr	r0, [pc, #72]	@ (800a1d0 <xTimerCreateTimerTask+0x8c>)
 800a188:	f7ff f8d0 	bl	800932c <xTaskCreateStatic>
 800a18c:	4603      	mov	r3, r0
 800a18e:	4a11      	ldr	r2, [pc, #68]	@ (800a1d4 <xTimerCreateTimerTask+0x90>)
 800a190:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a192:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <xTimerCreateTimerTask+0x90>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a19a:	2301      	movs	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10b      	bne.n	800a1bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	613b      	str	r3, [r7, #16]
}
 800a1b6:	bf00      	nop
 800a1b8:	bf00      	nop
 800a1ba:	e7fd      	b.n	800a1b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1bc:	697b      	ldr	r3, [r7, #20]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20001404 	.word	0x20001404
 800a1cc:	0800ff2c 	.word	0x0800ff2c
 800a1d0:	0800a311 	.word	0x0800a311
 800a1d4:	20001408 	.word	0x20001408

0800a1d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	@ 0x28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10b      	bne.n	800a208 <xTimerGenericCommand+0x30>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	623b      	str	r3, [r7, #32]
}
 800a202:	bf00      	nop
 800a204:	bf00      	nop
 800a206:	e7fd      	b.n	800a204 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a208:	4b19      	ldr	r3, [pc, #100]	@ (800a270 <xTimerGenericCommand+0x98>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d02a      	beq.n	800a266 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b05      	cmp	r3, #5
 800a220:	dc18      	bgt.n	800a254 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a222:	f7ff fead 	bl	8009f80 <xTaskGetSchedulerState>
 800a226:	4603      	mov	r3, r0
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d109      	bne.n	800a240 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a22c:	4b10      	ldr	r3, [pc, #64]	@ (800a270 <xTimerGenericCommand+0x98>)
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	f107 0110 	add.w	r1, r7, #16
 800a234:	2300      	movs	r3, #0
 800a236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a238:	f7fe fc88 	bl	8008b4c <xQueueGenericSend>
 800a23c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a23e:	e012      	b.n	800a266 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a240:	4b0b      	ldr	r3, [pc, #44]	@ (800a270 <xTimerGenericCommand+0x98>)
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	f107 0110 	add.w	r1, r7, #16
 800a248:	2300      	movs	r3, #0
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7fe fc7e 	bl	8008b4c <xQueueGenericSend>
 800a250:	6278      	str	r0, [r7, #36]	@ 0x24
 800a252:	e008      	b.n	800a266 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a254:	4b06      	ldr	r3, [pc, #24]	@ (800a270 <xTimerGenericCommand+0x98>)
 800a256:	6818      	ldr	r0, [r3, #0]
 800a258:	f107 0110 	add.w	r1, r7, #16
 800a25c:	2300      	movs	r3, #0
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	f7fe fd76 	bl	8008d50 <xQueueGenericSendFromISR>
 800a264:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3728      	adds	r7, #40	@ 0x28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20001404 	.word	0x20001404

0800a274 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af02      	add	r7, sp, #8
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27e:	4b23      	ldr	r3, [pc, #140]	@ (800a30c <prvProcessExpiredTimer+0x98>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe fb29 	bl	80088e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d023      	beq.n	800a2e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	699a      	ldr	r2, [r3, #24]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	18d1      	adds	r1, r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	6978      	ldr	r0, [r7, #20]
 800a2ae:	f000 f8d5 	bl	800a45c <prvInsertTimerInActiveList>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d020      	beq.n	800a2fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6978      	ldr	r0, [r7, #20]
 800a2c4:	f7ff ff88 	bl	800a1d8 <xTimerGenericCommand>
 800a2c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d114      	bne.n	800a2fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
}
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
 800a2e6:	e7fd      	b.n	800a2e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	6978      	ldr	r0, [r7, #20]
 800a300:	4798      	blx	r3
}
 800a302:	bf00      	nop
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	200013fc 	.word	0x200013fc

0800a310 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 f859 	bl	800a3d4 <prvGetNextExpireTime>
 800a322:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4619      	mov	r1, r3
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f805 	bl	800a338 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a32e:	f000 f8d7 	bl	800a4e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a332:	bf00      	nop
 800a334:	e7f0      	b.n	800a318 <prvTimerTask+0x8>
	...

0800a338 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a342:	f7ff fa37 	bl	80097b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a346:	f107 0308 	add.w	r3, r7, #8
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 f866 	bl	800a41c <prvSampleTimeNow>
 800a350:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d130      	bne.n	800a3ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <prvProcessTimerOrBlockTask+0x3c>
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	429a      	cmp	r2, r3
 800a364:	d806      	bhi.n	800a374 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a366:	f7ff fa33 	bl	80097d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff81 	bl	800a274 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a372:	e024      	b.n	800a3be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a37a:	4b13      	ldr	r3, [pc, #76]	@ (800a3c8 <prvProcessTimerOrBlockTask+0x90>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <prvProcessTimerOrBlockTask+0x50>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <prvProcessTimerOrBlockTask+0x52>
 800a388:	2300      	movs	r3, #0
 800a38a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a38c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3cc <prvProcessTimerOrBlockTask+0x94>)
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	f7fe ff93 	bl	80092c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a39e:	f7ff fa17 	bl	80097d0 <xTaskResumeAll>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3a8:	4b09      	ldr	r3, [pc, #36]	@ (800a3d0 <prvProcessTimerOrBlockTask+0x98>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
}
 800a3b8:	e001      	b.n	800a3be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3ba:	f7ff fa09 	bl	80097d0 <xTaskResumeAll>
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20001400 	.word	0x20001400
 800a3cc:	20001404 	.word	0x20001404
 800a3d0:	e000ed04 	.word	0xe000ed04

0800a3d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a418 <prvGetNextExpireTime+0x44>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <prvGetNextExpireTime+0x16>
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	e000      	b.n	800a3ec <prvGetNextExpireTime+0x18>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d105      	bne.n	800a404 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3f8:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <prvGetNextExpireTime+0x44>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e001      	b.n	800a408 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a408:	68fb      	ldr	r3, [r7, #12]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	200013fc 	.word	0x200013fc

0800a41c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a424:	f7ff fa72 	bl	800990c <xTaskGetTickCount>
 800a428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a42a:	4b0b      	ldr	r3, [pc, #44]	@ (800a458 <prvSampleTimeNow+0x3c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	429a      	cmp	r2, r3
 800a432:	d205      	bcs.n	800a440 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a434:	f000 f93a 	bl	800a6ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e002      	b.n	800a446 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a446:	4a04      	ldr	r2, [pc, #16]	@ (800a458 <prvSampleTimeNow+0x3c>)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	2000140c 	.word	0x2000140c

0800a45c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d812      	bhi.n	800a4a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d302      	bcc.n	800a496 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e01b      	b.n	800a4ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a496:	4b10      	ldr	r3, [pc, #64]	@ (800a4d8 <prvInsertTimerInActiveList+0x7c>)
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7fe f9e6 	bl	8008872 <vListInsert>
 800a4a6:	e012      	b.n	800a4ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d206      	bcs.n	800a4be <prvInsertTimerInActiveList+0x62>
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d302      	bcc.n	800a4be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	617b      	str	r3, [r7, #20]
 800a4bc:	e007      	b.n	800a4ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4be:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <prvInsertTimerInActiveList+0x80>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	f7fe f9d2 	bl	8008872 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4ce:	697b      	ldr	r3, [r7, #20]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20001400 	.word	0x20001400
 800a4dc:	200013fc 	.word	0x200013fc

0800a4e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08e      	sub	sp, #56	@ 0x38
 800a4e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4e6:	e0ce      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	da19      	bge.n	800a522 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	61fb      	str	r3, [r7, #28]
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a518:	6850      	ldr	r0, [r2, #4]
 800a51a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a51c:	6892      	ldr	r2, [r2, #8]
 800a51e:	4611      	mov	r1, r2
 800a520:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	f2c0 80ae 	blt.w	800a686 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d004      	beq.n	800a540 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a538:	3304      	adds	r3, #4
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe f9d2 	bl	80088e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a540:	463b      	mov	r3, r7
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff ff6a 	bl	800a41c <prvSampleTimeNow>
 800a548:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	f200 8097 	bhi.w	800a680 <prvProcessReceivedCommands+0x1a0>
 800a552:	a201      	add	r2, pc, #4	@ (adr r2, 800a558 <prvProcessReceivedCommands+0x78>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a5f7 	.word	0x0800a5f7
 800a568:	0800a60b 	.word	0x0800a60b
 800a56c:	0800a657 	.word	0x0800a657
 800a570:	0800a581 	.word	0x0800a581
 800a574:	0800a581 	.word	0x0800a581
 800a578:	0800a5f7 	.word	0x0800a5f7
 800a57c:	0800a60b 	.word	0x0800a60b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	18d1      	adds	r1, r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5a0:	f7ff ff5c 	bl	800a45c <prvInsertTimerInActiveList>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d06c      	beq.n	800a684 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d061      	beq.n	800a684 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	441a      	add	r2, r3
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5d2:	f7ff fe01 	bl	800a1d8 <xTimerGenericCommand>
 800a5d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d152      	bne.n	800a684 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	61bb      	str	r3, [r7, #24]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5fc:	f023 0301 	bic.w	r3, r3, #1
 800a600:	b2da      	uxtb	r2, r3
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a608:	e03d      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a610:	f043 0301 	orr.w	r3, r3, #1
 800a614:	b2da      	uxtb	r2, r3
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10b      	bne.n	800a642 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	617b      	str	r3, [r7, #20]
}
 800a63c:	bf00      	nop
 800a63e:	bf00      	nop
 800a640:	e7fd      	b.n	800a63e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a644:	699a      	ldr	r2, [r3, #24]
 800a646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a648:	18d1      	adds	r1, r2, r3
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a64e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a650:	f7ff ff04 	bl	800a45c <prvInsertTimerInActiveList>
					break;
 800a654:	e017      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d103      	bne.n	800a66c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a666:	f000 fbe7 	bl	800ae38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a66a:	e00c      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a672:	f023 0301 	bic.w	r3, r3, #1
 800a676:	b2da      	uxtb	r2, r3
 800a678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a67e:	e002      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a680:	bf00      	nop
 800a682:	e000      	b.n	800a686 <prvProcessReceivedCommands+0x1a6>
					break;
 800a684:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a686:	4b08      	ldr	r3, [pc, #32]	@ (800a6a8 <prvProcessReceivedCommands+0x1c8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	1d39      	adds	r1, r7, #4
 800a68c:	2200      	movs	r2, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fbfc 	bl	8008e8c <xQueueReceive>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	f47f af26 	bne.w	800a4e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	3730      	adds	r7, #48	@ 0x30
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20001404 	.word	0x20001404

0800a6ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6b2:	e049      	b.n	800a748 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6b4:	4b2e      	ldr	r3, [pc, #184]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6be:	4b2c      	ldr	r3, [pc, #176]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe f909 	bl	80088e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d02f      	beq.n	800a748 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d90e      	bls.n	800a718 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a706:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3304      	adds	r3, #4
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fe f8ae 	bl	8008872 <vListInsert>
 800a716:	e017      	b.n	800a748 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7ff fd58 	bl	800a1d8 <xTimerGenericCommand>
 800a728:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	603b      	str	r3, [r7, #0]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a748:	4b09      	ldr	r3, [pc, #36]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1b0      	bne.n	800a6b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a752:	4b07      	ldr	r3, [pc, #28]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a758:	4b06      	ldr	r3, [pc, #24]	@ (800a774 <prvSwitchTimerLists+0xc8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a04      	ldr	r2, [pc, #16]	@ (800a770 <prvSwitchTimerLists+0xc4>)
 800a75e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a760:	4a04      	ldr	r2, [pc, #16]	@ (800a774 <prvSwitchTimerLists+0xc8>)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	6013      	str	r3, [r2, #0]
}
 800a766:	bf00      	nop
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	200013fc 	.word	0x200013fc
 800a774:	20001400 	.word	0x20001400

0800a778 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a77e:	f000 f96b 	bl	800aa58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a782:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <prvCheckForValidListAndQueue+0x60>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d120      	bne.n	800a7cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a78a:	4814      	ldr	r0, [pc, #80]	@ (800a7dc <prvCheckForValidListAndQueue+0x64>)
 800a78c:	f7fe f820 	bl	80087d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a790:	4813      	ldr	r0, [pc, #76]	@ (800a7e0 <prvCheckForValidListAndQueue+0x68>)
 800a792:	f7fe f81d 	bl	80087d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a796:	4b13      	ldr	r3, [pc, #76]	@ (800a7e4 <prvCheckForValidListAndQueue+0x6c>)
 800a798:	4a10      	ldr	r2, [pc, #64]	@ (800a7dc <prvCheckForValidListAndQueue+0x64>)
 800a79a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a79c:	4b12      	ldr	r3, [pc, #72]	@ (800a7e8 <prvCheckForValidListAndQueue+0x70>)
 800a79e:	4a10      	ldr	r2, [pc, #64]	@ (800a7e0 <prvCheckForValidListAndQueue+0x68>)
 800a7a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	4b11      	ldr	r3, [pc, #68]	@ (800a7ec <prvCheckForValidListAndQueue+0x74>)
 800a7a8:	4a11      	ldr	r2, [pc, #68]	@ (800a7f0 <prvCheckForValidListAndQueue+0x78>)
 800a7aa:	2110      	movs	r1, #16
 800a7ac:	200a      	movs	r0, #10
 800a7ae:	f7fe f92d 	bl	8008a0c <xQueueGenericCreateStatic>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	4a08      	ldr	r2, [pc, #32]	@ (800a7d8 <prvCheckForValidListAndQueue+0x60>)
 800a7b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7b8:	4b07      	ldr	r3, [pc, #28]	@ (800a7d8 <prvCheckForValidListAndQueue+0x60>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7c0:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <prvCheckForValidListAndQueue+0x60>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	490b      	ldr	r1, [pc, #44]	@ (800a7f4 <prvCheckForValidListAndQueue+0x7c>)
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fd52 	bl	8009270 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7cc:	f000 f976 	bl	800aabc <vPortExitCritical>
}
 800a7d0:	bf00      	nop
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20001404 	.word	0x20001404
 800a7dc:	200013d4 	.word	0x200013d4
 800a7e0:	200013e8 	.word	0x200013e8
 800a7e4:	200013fc 	.word	0x200013fc
 800a7e8:	20001400 	.word	0x20001400
 800a7ec:	200014b0 	.word	0x200014b0
 800a7f0:	20001410 	.word	0x20001410
 800a7f4:	0800ff34 	.word	0x0800ff34

0800a7f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3b04      	subs	r3, #4
 800a808:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3b04      	subs	r3, #4
 800a816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	f023 0201 	bic.w	r2, r3, #1
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3b04      	subs	r3, #4
 800a826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a828:	4a0c      	ldr	r2, [pc, #48]	@ (800a85c <pxPortInitialiseStack+0x64>)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3b14      	subs	r3, #20
 800a832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3b04      	subs	r3, #4
 800a83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f06f 0202 	mvn.w	r2, #2
 800a846:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3b20      	subs	r3, #32
 800a84c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a84e:	68fb      	ldr	r3, [r7, #12]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	0800a861 	.word	0x0800a861

0800a860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a86a:	4b13      	ldr	r3, [pc, #76]	@ (800a8b8 <prvTaskExitError+0x58>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d00b      	beq.n	800a88c <prvTaskExitError+0x2c>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	60fb      	str	r3, [r7, #12]
}
 800a886:	bf00      	nop
 800a888:	bf00      	nop
 800a88a:	e7fd      	b.n	800a888 <prvTaskExitError+0x28>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	60bb      	str	r3, [r7, #8]
}
 800a89e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8a0:	bf00      	nop
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0fc      	beq.n	800a8a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	200000b0 	.word	0x200000b0
 800a8bc:	00000000 	.word	0x00000000

0800a8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <pxCurrentTCBConst2>)
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	6808      	ldr	r0, [r1, #0]
 800a8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	f380 8809 	msr	PSP, r0
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f04f 0000 	mov.w	r0, #0
 800a8d6:	f380 8811 	msr	BASEPRI, r0
 800a8da:	4770      	bx	lr
 800a8dc:	f3af 8000 	nop.w

0800a8e0 <pxCurrentTCBConst2>:
 800a8e0:	20000ed4 	.word	0x20000ed4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a8e8:	4808      	ldr	r0, [pc, #32]	@ (800a90c <prvPortStartFirstTask+0x24>)
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	f380 8808 	msr	MSP, r0
 800a8f2:	f04f 0000 	mov.w	r0, #0
 800a8f6:	f380 8814 	msr	CONTROL, r0
 800a8fa:	b662      	cpsie	i
 800a8fc:	b661      	cpsie	f
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	df00      	svc	0
 800a908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a90a:	bf00      	nop
 800a90c:	e000ed08 	.word	0xe000ed08

0800a910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a916:	4b47      	ldr	r3, [pc, #284]	@ (800aa34 <xPortStartScheduler+0x124>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a47      	ldr	r2, [pc, #284]	@ (800aa38 <xPortStartScheduler+0x128>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d10b      	bne.n	800a938 <xPortStartScheduler+0x28>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	613b      	str	r3, [r7, #16]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a938:	4b3e      	ldr	r3, [pc, #248]	@ (800aa34 <xPortStartScheduler+0x124>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa3c <xPortStartScheduler+0x12c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d10b      	bne.n	800a95a <xPortStartScheduler+0x4a>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	60fb      	str	r3, [r7, #12]
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop
 800a958:	e7fd      	b.n	800a956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a95a:	4b39      	ldr	r3, [pc, #228]	@ (800aa40 <xPortStartScheduler+0x130>)
 800a95c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	22ff      	movs	r2, #255	@ 0xff
 800a96a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	4b31      	ldr	r3, [pc, #196]	@ (800aa44 <xPortStartScheduler+0x134>)
 800a980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a982:	4b31      	ldr	r3, [pc, #196]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a984:	2207      	movs	r2, #7
 800a986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a988:	e009      	b.n	800a99e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a98a:	4b2f      	ldr	r3, [pc, #188]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3b01      	subs	r3, #1
 800a990:	4a2d      	ldr	r2, [pc, #180]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a6:	2b80      	cmp	r3, #128	@ 0x80
 800a9a8:	d0ef      	beq.n	800a98a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9aa:	4b27      	ldr	r3, [pc, #156]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f1c3 0307 	rsb	r3, r3, #7
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d00b      	beq.n	800a9ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60bb      	str	r3, [r7, #8]
}
 800a9c8:	bf00      	nop
 800a9ca:	bf00      	nop
 800a9cc:	e7fd      	b.n	800a9ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	021b      	lsls	r3, r3, #8
 800a9d4:	4a1c      	ldr	r2, [pc, #112]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a9d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9e0:	4a19      	ldr	r2, [pc, #100]	@ (800aa48 <xPortStartScheduler+0x138>)
 800a9e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9ec:	4b17      	ldr	r3, [pc, #92]	@ (800aa4c <xPortStartScheduler+0x13c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a16      	ldr	r2, [pc, #88]	@ (800aa4c <xPortStartScheduler+0x13c>)
 800a9f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a9f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9f8:	4b14      	ldr	r3, [pc, #80]	@ (800aa4c <xPortStartScheduler+0x13c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a13      	ldr	r2, [pc, #76]	@ (800aa4c <xPortStartScheduler+0x13c>)
 800a9fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa04:	f000 f8da 	bl	800abbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa08:	4b11      	ldr	r3, [pc, #68]	@ (800aa50 <xPortStartScheduler+0x140>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa0e:	f000 f8f9 	bl	800ac04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa12:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <xPortStartScheduler+0x144>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a0f      	ldr	r2, [pc, #60]	@ (800aa54 <xPortStartScheduler+0x144>)
 800aa18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa1e:	f7ff ff63 	bl	800a8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa22:	f7ff f83d 	bl	8009aa0 <vTaskSwitchContext>
	prvTaskExitError();
 800aa26:	f7ff ff1b 	bl	800a860 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	e000ed00 	.word	0xe000ed00
 800aa38:	410fc271 	.word	0x410fc271
 800aa3c:	410fc270 	.word	0x410fc270
 800aa40:	e000e400 	.word	0xe000e400
 800aa44:	20001500 	.word	0x20001500
 800aa48:	20001504 	.word	0x20001504
 800aa4c:	e000ed20 	.word	0xe000ed20
 800aa50:	200000b0 	.word	0x200000b0
 800aa54:	e000ef34 	.word	0xe000ef34

0800aa58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa72:	4b10      	ldr	r3, [pc, #64]	@ (800aab4 <vPortEnterCritical+0x5c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	4a0e      	ldr	r2, [pc, #56]	@ (800aab4 <vPortEnterCritical+0x5c>)
 800aa7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	@ (800aab4 <vPortEnterCritical+0x5c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d110      	bne.n	800aaa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa84:	4b0c      	ldr	r3, [pc, #48]	@ (800aab8 <vPortEnterCritical+0x60>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00b      	beq.n	800aaa6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <vPortEnterCritical+0x4a>
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	200000b0 	.word	0x200000b0
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aac2:	4b12      	ldr	r3, [pc, #72]	@ (800ab0c <vPortExitCritical+0x50>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10b      	bne.n	800aae2 <vPortExitCritical+0x26>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	607b      	str	r3, [r7, #4]
}
 800aadc:	bf00      	nop
 800aade:	bf00      	nop
 800aae0:	e7fd      	b.n	800aade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aae2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab0c <vPortExitCritical+0x50>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	4a08      	ldr	r2, [pc, #32]	@ (800ab0c <vPortExitCritical+0x50>)
 800aaea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaec:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <vPortExitCritical+0x50>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d105      	bne.n	800ab00 <vPortExitCritical+0x44>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	f383 8811 	msr	BASEPRI, r3
}
 800aafe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	200000b0 	.word	0x200000b0

0800ab10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab10:	f3ef 8009 	mrs	r0, PSP
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	4b15      	ldr	r3, [pc, #84]	@ (800ab70 <pxCurrentTCBConst>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f01e 0f10 	tst.w	lr, #16
 800ab20:	bf08      	it	eq
 800ab22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	6010      	str	r0, [r2, #0]
 800ab2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab34:	f380 8811 	msr	BASEPRI, r0
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f7fe ffae 	bl	8009aa0 <vTaskSwitchContext>
 800ab44:	f04f 0000 	mov.w	r0, #0
 800ab48:	f380 8811 	msr	BASEPRI, r0
 800ab4c:	bc09      	pop	{r0, r3}
 800ab4e:	6819      	ldr	r1, [r3, #0]
 800ab50:	6808      	ldr	r0, [r1, #0]
 800ab52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab56:	f01e 0f10 	tst.w	lr, #16
 800ab5a:	bf08      	it	eq
 800ab5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab60:	f380 8809 	msr	PSP, r0
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	f3af 8000 	nop.w

0800ab70 <pxCurrentTCBConst>:
 800ab70:	20000ed4 	.word	0x20000ed4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop

0800ab78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab92:	f7fe fecb 	bl	800992c <xTaskIncrementTick>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab9c:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <xPortSysTickHandler+0x40>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	2300      	movs	r3, #0
 800aba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	f383 8811 	msr	BASEPRI, r3
}
 800abae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abc0:	4b0b      	ldr	r3, [pc, #44]	@ (800abf0 <vPortSetupTimerInterrupt+0x34>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abc6:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <vPortSetupTimerInterrupt+0x38>)
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abcc:	4b0a      	ldr	r3, [pc, #40]	@ (800abf8 <vPortSetupTimerInterrupt+0x3c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	@ (800abfc <vPortSetupTimerInterrupt+0x40>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	099b      	lsrs	r3, r3, #6
 800abd8:	4a09      	ldr	r2, [pc, #36]	@ (800ac00 <vPortSetupTimerInterrupt+0x44>)
 800abda:	3b01      	subs	r3, #1
 800abdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abde:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <vPortSetupTimerInterrupt+0x34>)
 800abe0:	2207      	movs	r2, #7
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	e000e010 	.word	0xe000e010
 800abf4:	e000e018 	.word	0xe000e018
 800abf8:	20000098 	.word	0x20000098
 800abfc:	10624dd3 	.word	0x10624dd3
 800ac00:	e000e014 	.word	0xe000e014

0800ac04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac14 <vPortEnableVFP+0x10>
 800ac08:	6801      	ldr	r1, [r0, #0]
 800ac0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac0e:	6001      	str	r1, [r0, #0]
 800ac10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac12:	bf00      	nop
 800ac14:	e000ed88 	.word	0xe000ed88

0800ac18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac1e:	f3ef 8305 	mrs	r3, IPSR
 800ac22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d915      	bls.n	800ac56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac2a:	4a18      	ldr	r2, [pc, #96]	@ (800ac8c <vPortValidateInterruptPriority+0x74>)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac34:	4b16      	ldr	r3, [pc, #88]	@ (800ac90 <vPortValidateInterruptPriority+0x78>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	7afa      	ldrb	r2, [r7, #11]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d20b      	bcs.n	800ac56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	607b      	str	r3, [r7, #4]
}
 800ac50:	bf00      	nop
 800ac52:	bf00      	nop
 800ac54:	e7fd      	b.n	800ac52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac56:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <vPortValidateInterruptPriority+0x7c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <vPortValidateInterruptPriority+0x80>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d90b      	bls.n	800ac7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	603b      	str	r3, [r7, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	e7fd      	b.n	800ac7a <vPortValidateInterruptPriority+0x62>
	}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	e000e3f0 	.word	0xe000e3f0
 800ac90:	20001500 	.word	0x20001500
 800ac94:	e000ed0c 	.word	0xe000ed0c
 800ac98:	20001504 	.word	0x20001504

0800ac9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	@ 0x28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aca8:	f7fe fd84 	bl	80097b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acac:	4b5c      	ldr	r3, [pc, #368]	@ (800ae20 <pvPortMalloc+0x184>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acb4:	f000 f924 	bl	800af00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae24 <pvPortMalloc+0x188>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4013      	ands	r3, r2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f040 8095 	bne.w	800adf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d01e      	beq.n	800ad0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800accc:	2208      	movs	r2, #8
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4413      	add	r3, r2
 800acd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d015      	beq.n	800ad0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f023 0307 	bic.w	r3, r3, #7
 800ace4:	3308      	adds	r3, #8
 800ace6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00b      	beq.n	800ad0a <pvPortMalloc+0x6e>
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	617b      	str	r3, [r7, #20]
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop
 800ad08:	e7fd      	b.n	800ad06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d06f      	beq.n	800adf0 <pvPortMalloc+0x154>
 800ad10:	4b45      	ldr	r3, [pc, #276]	@ (800ae28 <pvPortMalloc+0x18c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d86a      	bhi.n	800adf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad1a:	4b44      	ldr	r3, [pc, #272]	@ (800ae2c <pvPortMalloc+0x190>)
 800ad1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad1e:	4b43      	ldr	r3, [pc, #268]	@ (800ae2c <pvPortMalloc+0x190>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad24:	e004      	b.n	800ad30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d903      	bls.n	800ad42 <pvPortMalloc+0xa6>
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1f1      	bne.n	800ad26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad42:	4b37      	ldr	r3, [pc, #220]	@ (800ae20 <pvPortMalloc+0x184>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d051      	beq.n	800adf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2208      	movs	r2, #8
 800ad52:	4413      	add	r3, r2
 800ad54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	1ad2      	subs	r2, r2, r3
 800ad66:	2308      	movs	r3, #8
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d920      	bls.n	800adb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <pvPortMalloc+0xfc>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	613b      	str	r3, [r7, #16]
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ada4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adaa:	69b8      	ldr	r0, [r7, #24]
 800adac:	f000 f90a 	bl	800afc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae28 <pvPortMalloc+0x18c>)
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	4a1b      	ldr	r2, [pc, #108]	@ (800ae28 <pvPortMalloc+0x18c>)
 800adbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ae28 <pvPortMalloc+0x18c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae30 <pvPortMalloc+0x194>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d203      	bcs.n	800add2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adca:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <pvPortMalloc+0x18c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a18      	ldr	r2, [pc, #96]	@ (800ae30 <pvPortMalloc+0x194>)
 800add0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4b13      	ldr	r3, [pc, #76]	@ (800ae24 <pvPortMalloc+0x188>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	431a      	orrs	r2, r3
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ade6:	4b13      	ldr	r3, [pc, #76]	@ (800ae34 <pvPortMalloc+0x198>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3301      	adds	r3, #1
 800adec:	4a11      	ldr	r2, [pc, #68]	@ (800ae34 <pvPortMalloc+0x198>)
 800adee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800adf0:	f7fe fcee 	bl	80097d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <pvPortMalloc+0x17a>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	60fb      	str	r3, [r7, #12]
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	e7fd      	b.n	800ae12 <pvPortMalloc+0x176>
	return pvReturn;
 800ae16:	69fb      	ldr	r3, [r7, #28]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3728      	adds	r7, #40	@ 0x28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20005110 	.word	0x20005110
 800ae24:	20005124 	.word	0x20005124
 800ae28:	20005114 	.word	0x20005114
 800ae2c:	20005108 	.word	0x20005108
 800ae30:	20005118 	.word	0x20005118
 800ae34:	2000511c 	.word	0x2000511c

0800ae38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d04f      	beq.n	800aeea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	425b      	negs	r3, r3
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	4413      	add	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	4b25      	ldr	r3, [pc, #148]	@ (800aef4 <vPortFree+0xbc>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4013      	ands	r3, r2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <vPortFree+0x46>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	60fb      	str	r3, [r7, #12]
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	e7fd      	b.n	800ae7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00b      	beq.n	800ae9e <vPortFree+0x66>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	60bb      	str	r3, [r7, #8]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <vPortFree+0xbc>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d01e      	beq.n	800aeea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11a      	bne.n	800aeea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	4b0e      	ldr	r3, [pc, #56]	@ (800aef4 <vPortFree+0xbc>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	43db      	mvns	r3, r3
 800aebe:	401a      	ands	r2, r3
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aec4:	f7fe fc76 	bl	80097b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <vPortFree+0xc0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4413      	add	r3, r2
 800aed2:	4a09      	ldr	r2, [pc, #36]	@ (800aef8 <vPortFree+0xc0>)
 800aed4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aed6:	6938      	ldr	r0, [r7, #16]
 800aed8:	f000 f874 	bl	800afc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aedc:	4b07      	ldr	r3, [pc, #28]	@ (800aefc <vPortFree+0xc4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3301      	adds	r3, #1
 800aee2:	4a06      	ldr	r2, [pc, #24]	@ (800aefc <vPortFree+0xc4>)
 800aee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aee6:	f7fe fc73 	bl	80097d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aeea:	bf00      	nop
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20005124 	.word	0x20005124
 800aef8:	20005114 	.word	0x20005114
 800aefc:	20005120 	.word	0x20005120

0800af00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af0c:	4b27      	ldr	r3, [pc, #156]	@ (800afac <prvHeapInit+0xac>)
 800af0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00c      	beq.n	800af34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3307      	adds	r3, #7
 800af1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0307 	bic.w	r3, r3, #7
 800af26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	4a1f      	ldr	r2, [pc, #124]	@ (800afac <prvHeapInit+0xac>)
 800af30:	4413      	add	r3, r2
 800af32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af38:	4a1d      	ldr	r2, [pc, #116]	@ (800afb0 <prvHeapInit+0xb0>)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af3e:	4b1c      	ldr	r3, [pc, #112]	@ (800afb0 <prvHeapInit+0xb0>)
 800af40:	2200      	movs	r2, #0
 800af42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af4c:	2208      	movs	r2, #8
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4a15      	ldr	r2, [pc, #84]	@ (800afb4 <prvHeapInit+0xb4>)
 800af60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af62:	4b14      	ldr	r3, [pc, #80]	@ (800afb4 <prvHeapInit+0xb4>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2200      	movs	r2, #0
 800af68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af6a:	4b12      	ldr	r3, [pc, #72]	@ (800afb4 <prvHeapInit+0xb4>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af80:	4b0c      	ldr	r3, [pc, #48]	@ (800afb4 <prvHeapInit+0xb4>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4a0a      	ldr	r2, [pc, #40]	@ (800afb8 <prvHeapInit+0xb8>)
 800af8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4a09      	ldr	r2, [pc, #36]	@ (800afbc <prvHeapInit+0xbc>)
 800af96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af98:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <prvHeapInit+0xc0>)
 800af9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	20001508 	.word	0x20001508
 800afb0:	20005108 	.word	0x20005108
 800afb4:	20005110 	.word	0x20005110
 800afb8:	20005118 	.word	0x20005118
 800afbc:	20005114 	.word	0x20005114
 800afc0:	20005124 	.word	0x20005124

0800afc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afcc:	4b28      	ldr	r3, [pc, #160]	@ (800b070 <prvInsertBlockIntoFreeList+0xac>)
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	e002      	b.n	800afd8 <prvInsertBlockIntoFreeList+0x14>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d8f7      	bhi.n	800afd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	4413      	add	r3, r2
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d108      	bne.n	800b006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	441a      	add	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d118      	bne.n	800b04c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	4b15      	ldr	r3, [pc, #84]	@ (800b074 <prvInsertBlockIntoFreeList+0xb0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d00d      	beq.n	800b042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	441a      	add	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	e008      	b.n	800b054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b042:	4b0c      	ldr	r3, [pc, #48]	@ (800b074 <prvInsertBlockIntoFreeList+0xb0>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	e003      	b.n	800b054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d002      	beq.n	800b062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b062:	bf00      	nop
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	20005108 	.word	0x20005108
 800b074:	20005110 	.word	0x20005110

0800b078 <__cvt>:
 800b078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b07c:	ec57 6b10 	vmov	r6, r7, d0
 800b080:	2f00      	cmp	r7, #0
 800b082:	460c      	mov	r4, r1
 800b084:	4619      	mov	r1, r3
 800b086:	463b      	mov	r3, r7
 800b088:	bfbb      	ittet	lt
 800b08a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b08e:	461f      	movlt	r7, r3
 800b090:	2300      	movge	r3, #0
 800b092:	232d      	movlt	r3, #45	@ 0x2d
 800b094:	700b      	strb	r3, [r1, #0]
 800b096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b098:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b09c:	4691      	mov	r9, r2
 800b09e:	f023 0820 	bic.w	r8, r3, #32
 800b0a2:	bfbc      	itt	lt
 800b0a4:	4632      	movlt	r2, r6
 800b0a6:	4616      	movlt	r6, r2
 800b0a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0ac:	d005      	beq.n	800b0ba <__cvt+0x42>
 800b0ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b0b2:	d100      	bne.n	800b0b6 <__cvt+0x3e>
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	e000      	b.n	800b0bc <__cvt+0x44>
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	ab03      	add	r3, sp, #12
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	ab02      	add	r3, sp, #8
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	ec47 6b10 	vmov	d0, r6, r7
 800b0c8:	4653      	mov	r3, sl
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	f001 f8ac 	bl	800c228 <_dtoa_r>
 800b0d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	d119      	bne.n	800b10c <__cvt+0x94>
 800b0d8:	f019 0f01 	tst.w	r9, #1
 800b0dc:	d00e      	beq.n	800b0fc <__cvt+0x84>
 800b0de:	eb00 0904 	add.w	r9, r0, r4
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	f7f5 fd0d 	bl	8000b08 <__aeabi_dcmpeq>
 800b0ee:	b108      	cbz	r0, 800b0f4 <__cvt+0x7c>
 800b0f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0f4:	2230      	movs	r2, #48	@ 0x30
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	454b      	cmp	r3, r9
 800b0fa:	d31e      	bcc.n	800b13a <__cvt+0xc2>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b100:	1b5b      	subs	r3, r3, r5
 800b102:	4628      	mov	r0, r5
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	b004      	add	sp, #16
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b110:	eb00 0904 	add.w	r9, r0, r4
 800b114:	d1e5      	bne.n	800b0e2 <__cvt+0x6a>
 800b116:	7803      	ldrb	r3, [r0, #0]
 800b118:	2b30      	cmp	r3, #48	@ 0x30
 800b11a:	d10a      	bne.n	800b132 <__cvt+0xba>
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	4630      	mov	r0, r6
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 fcf0 	bl	8000b08 <__aeabi_dcmpeq>
 800b128:	b918      	cbnz	r0, 800b132 <__cvt+0xba>
 800b12a:	f1c4 0401 	rsb	r4, r4, #1
 800b12e:	f8ca 4000 	str.w	r4, [sl]
 800b132:	f8da 3000 	ldr.w	r3, [sl]
 800b136:	4499      	add	r9, r3
 800b138:	e7d3      	b.n	800b0e2 <__cvt+0x6a>
 800b13a:	1c59      	adds	r1, r3, #1
 800b13c:	9103      	str	r1, [sp, #12]
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e7d9      	b.n	800b0f6 <__cvt+0x7e>

0800b142 <__exponent>:
 800b142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b144:	2900      	cmp	r1, #0
 800b146:	bfba      	itte	lt
 800b148:	4249      	neglt	r1, r1
 800b14a:	232d      	movlt	r3, #45	@ 0x2d
 800b14c:	232b      	movge	r3, #43	@ 0x2b
 800b14e:	2909      	cmp	r1, #9
 800b150:	7002      	strb	r2, [r0, #0]
 800b152:	7043      	strb	r3, [r0, #1]
 800b154:	dd29      	ble.n	800b1aa <__exponent+0x68>
 800b156:	f10d 0307 	add.w	r3, sp, #7
 800b15a:	461d      	mov	r5, r3
 800b15c:	270a      	movs	r7, #10
 800b15e:	461a      	mov	r2, r3
 800b160:	fbb1 f6f7 	udiv	r6, r1, r7
 800b164:	fb07 1416 	mls	r4, r7, r6, r1
 800b168:	3430      	adds	r4, #48	@ 0x30
 800b16a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b16e:	460c      	mov	r4, r1
 800b170:	2c63      	cmp	r4, #99	@ 0x63
 800b172:	f103 33ff 	add.w	r3, r3, #4294967295
 800b176:	4631      	mov	r1, r6
 800b178:	dcf1      	bgt.n	800b15e <__exponent+0x1c>
 800b17a:	3130      	adds	r1, #48	@ 0x30
 800b17c:	1e94      	subs	r4, r2, #2
 800b17e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b182:	1c41      	adds	r1, r0, #1
 800b184:	4623      	mov	r3, r4
 800b186:	42ab      	cmp	r3, r5
 800b188:	d30a      	bcc.n	800b1a0 <__exponent+0x5e>
 800b18a:	f10d 0309 	add.w	r3, sp, #9
 800b18e:	1a9b      	subs	r3, r3, r2
 800b190:	42ac      	cmp	r4, r5
 800b192:	bf88      	it	hi
 800b194:	2300      	movhi	r3, #0
 800b196:	3302      	adds	r3, #2
 800b198:	4403      	add	r3, r0
 800b19a:	1a18      	subs	r0, r3, r0
 800b19c:	b003      	add	sp, #12
 800b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b1a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b1a8:	e7ed      	b.n	800b186 <__exponent+0x44>
 800b1aa:	2330      	movs	r3, #48	@ 0x30
 800b1ac:	3130      	adds	r1, #48	@ 0x30
 800b1ae:	7083      	strb	r3, [r0, #2]
 800b1b0:	70c1      	strb	r1, [r0, #3]
 800b1b2:	1d03      	adds	r3, r0, #4
 800b1b4:	e7f1      	b.n	800b19a <__exponent+0x58>
	...

0800b1b8 <_printf_float>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	b08d      	sub	sp, #52	@ 0x34
 800b1be:	460c      	mov	r4, r1
 800b1c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b1c4:	4616      	mov	r6, r2
 800b1c6:	461f      	mov	r7, r3
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	f000 fefb 	bl	800bfc4 <_localeconv_r>
 800b1ce:	6803      	ldr	r3, [r0, #0]
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7f5 f86c 	bl	80002b0 <strlen>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e0:	9005      	str	r0, [sp, #20]
 800b1e2:	3307      	adds	r3, #7
 800b1e4:	f023 0307 	bic.w	r3, r3, #7
 800b1e8:	f103 0208 	add.w	r2, r3, #8
 800b1ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1f0:	f8d4 b000 	ldr.w	fp, [r4]
 800b1f4:	f8c8 2000 	str.w	r2, [r8]
 800b1f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b200:	9307      	str	r3, [sp, #28]
 800b202:	f8cd 8018 	str.w	r8, [sp, #24]
 800b206:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b20a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b20e:	4b9c      	ldr	r3, [pc, #624]	@ (800b480 <_printf_float+0x2c8>)
 800b210:	f04f 32ff 	mov.w	r2, #4294967295
 800b214:	f7f5 fcaa 	bl	8000b6c <__aeabi_dcmpun>
 800b218:	bb70      	cbnz	r0, 800b278 <_printf_float+0xc0>
 800b21a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b21e:	4b98      	ldr	r3, [pc, #608]	@ (800b480 <_printf_float+0x2c8>)
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	f7f5 fc84 	bl	8000b30 <__aeabi_dcmple>
 800b228:	bb30      	cbnz	r0, 800b278 <_printf_float+0xc0>
 800b22a:	2200      	movs	r2, #0
 800b22c:	2300      	movs	r3, #0
 800b22e:	4640      	mov	r0, r8
 800b230:	4649      	mov	r1, r9
 800b232:	f7f5 fc73 	bl	8000b1c <__aeabi_dcmplt>
 800b236:	b110      	cbz	r0, 800b23e <_printf_float+0x86>
 800b238:	232d      	movs	r3, #45	@ 0x2d
 800b23a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b23e:	4a91      	ldr	r2, [pc, #580]	@ (800b484 <_printf_float+0x2cc>)
 800b240:	4b91      	ldr	r3, [pc, #580]	@ (800b488 <_printf_float+0x2d0>)
 800b242:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b246:	bf94      	ite	ls
 800b248:	4690      	movls	r8, r2
 800b24a:	4698      	movhi	r8, r3
 800b24c:	2303      	movs	r3, #3
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	f02b 0304 	bic.w	r3, fp, #4
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	f04f 0900 	mov.w	r9, #0
 800b25a:	9700      	str	r7, [sp, #0]
 800b25c:	4633      	mov	r3, r6
 800b25e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b260:	4621      	mov	r1, r4
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f9d2 	bl	800b60c <_printf_common>
 800b268:	3001      	adds	r0, #1
 800b26a:	f040 808d 	bne.w	800b388 <_printf_float+0x1d0>
 800b26e:	f04f 30ff 	mov.w	r0, #4294967295
 800b272:	b00d      	add	sp, #52	@ 0x34
 800b274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b278:	4642      	mov	r2, r8
 800b27a:	464b      	mov	r3, r9
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 fc74 	bl	8000b6c <__aeabi_dcmpun>
 800b284:	b140      	cbz	r0, 800b298 <_printf_float+0xe0>
 800b286:	464b      	mov	r3, r9
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bfbc      	itt	lt
 800b28c:	232d      	movlt	r3, #45	@ 0x2d
 800b28e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b292:	4a7e      	ldr	r2, [pc, #504]	@ (800b48c <_printf_float+0x2d4>)
 800b294:	4b7e      	ldr	r3, [pc, #504]	@ (800b490 <_printf_float+0x2d8>)
 800b296:	e7d4      	b.n	800b242 <_printf_float+0x8a>
 800b298:	6863      	ldr	r3, [r4, #4]
 800b29a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b29e:	9206      	str	r2, [sp, #24]
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	d13b      	bne.n	800b31c <_printf_float+0x164>
 800b2a4:	2306      	movs	r3, #6
 800b2a6:	6063      	str	r3, [r4, #4]
 800b2a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	9303      	str	r3, [sp, #12]
 800b2b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b2b8:	ab09      	add	r3, sp, #36	@ 0x24
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	6861      	ldr	r1, [r4, #4]
 800b2be:	ec49 8b10 	vmov	d0, r8, r9
 800b2c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7ff fed6 	bl	800b078 <__cvt>
 800b2cc:	9b06      	ldr	r3, [sp, #24]
 800b2ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2d0:	2b47      	cmp	r3, #71	@ 0x47
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	d129      	bne.n	800b32a <_printf_float+0x172>
 800b2d6:	1cc8      	adds	r0, r1, #3
 800b2d8:	db02      	blt.n	800b2e0 <_printf_float+0x128>
 800b2da:	6863      	ldr	r3, [r4, #4]
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	dd41      	ble.n	800b364 <_printf_float+0x1ac>
 800b2e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2e4:	fa5f fa8a 	uxtb.w	sl, sl
 800b2e8:	3901      	subs	r1, #1
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2f2:	f7ff ff26 	bl	800b142 <__exponent>
 800b2f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2f8:	1813      	adds	r3, r2, r0
 800b2fa:	2a01      	cmp	r2, #1
 800b2fc:	4681      	mov	r9, r0
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	dc02      	bgt.n	800b308 <_printf_float+0x150>
 800b302:	6822      	ldr	r2, [r4, #0]
 800b304:	07d2      	lsls	r2, r2, #31
 800b306:	d501      	bpl.n	800b30c <_printf_float+0x154>
 800b308:	3301      	adds	r3, #1
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0a2      	beq.n	800b25a <_printf_float+0xa2>
 800b314:	232d      	movs	r3, #45	@ 0x2d
 800b316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b31a:	e79e      	b.n	800b25a <_printf_float+0xa2>
 800b31c:	9a06      	ldr	r2, [sp, #24]
 800b31e:	2a47      	cmp	r2, #71	@ 0x47
 800b320:	d1c2      	bne.n	800b2a8 <_printf_float+0xf0>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1c0      	bne.n	800b2a8 <_printf_float+0xf0>
 800b326:	2301      	movs	r3, #1
 800b328:	e7bd      	b.n	800b2a6 <_printf_float+0xee>
 800b32a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b32e:	d9db      	bls.n	800b2e8 <_printf_float+0x130>
 800b330:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b334:	d118      	bne.n	800b368 <_printf_float+0x1b0>
 800b336:	2900      	cmp	r1, #0
 800b338:	6863      	ldr	r3, [r4, #4]
 800b33a:	dd0b      	ble.n	800b354 <_printf_float+0x19c>
 800b33c:	6121      	str	r1, [r4, #16]
 800b33e:	b913      	cbnz	r3, 800b346 <_printf_float+0x18e>
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	07d0      	lsls	r0, r2, #31
 800b344:	d502      	bpl.n	800b34c <_printf_float+0x194>
 800b346:	3301      	adds	r3, #1
 800b348:	440b      	add	r3, r1
 800b34a:	6123      	str	r3, [r4, #16]
 800b34c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b34e:	f04f 0900 	mov.w	r9, #0
 800b352:	e7db      	b.n	800b30c <_printf_float+0x154>
 800b354:	b913      	cbnz	r3, 800b35c <_printf_float+0x1a4>
 800b356:	6822      	ldr	r2, [r4, #0]
 800b358:	07d2      	lsls	r2, r2, #31
 800b35a:	d501      	bpl.n	800b360 <_printf_float+0x1a8>
 800b35c:	3302      	adds	r3, #2
 800b35e:	e7f4      	b.n	800b34a <_printf_float+0x192>
 800b360:	2301      	movs	r3, #1
 800b362:	e7f2      	b.n	800b34a <_printf_float+0x192>
 800b364:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b36a:	4299      	cmp	r1, r3
 800b36c:	db05      	blt.n	800b37a <_printf_float+0x1c2>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	6121      	str	r1, [r4, #16]
 800b372:	07d8      	lsls	r0, r3, #31
 800b374:	d5ea      	bpl.n	800b34c <_printf_float+0x194>
 800b376:	1c4b      	adds	r3, r1, #1
 800b378:	e7e7      	b.n	800b34a <_printf_float+0x192>
 800b37a:	2900      	cmp	r1, #0
 800b37c:	bfd4      	ite	le
 800b37e:	f1c1 0202 	rsble	r2, r1, #2
 800b382:	2201      	movgt	r2, #1
 800b384:	4413      	add	r3, r2
 800b386:	e7e0      	b.n	800b34a <_printf_float+0x192>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	055a      	lsls	r2, r3, #21
 800b38c:	d407      	bmi.n	800b39e <_printf_float+0x1e6>
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	4642      	mov	r2, r8
 800b392:	4631      	mov	r1, r6
 800b394:	4628      	mov	r0, r5
 800b396:	47b8      	blx	r7
 800b398:	3001      	adds	r0, #1
 800b39a:	d12b      	bne.n	800b3f4 <_printf_float+0x23c>
 800b39c:	e767      	b.n	800b26e <_printf_float+0xb6>
 800b39e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3a2:	f240 80dd 	bls.w	800b560 <_printf_float+0x3a8>
 800b3a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f7f5 fbab 	bl	8000b08 <__aeabi_dcmpeq>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d033      	beq.n	800b41e <_printf_float+0x266>
 800b3b6:	4a37      	ldr	r2, [pc, #220]	@ (800b494 <_printf_float+0x2dc>)
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	f43f af54 	beq.w	800b26e <_printf_float+0xb6>
 800b3c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b3ca:	4543      	cmp	r3, r8
 800b3cc:	db02      	blt.n	800b3d4 <_printf_float+0x21c>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	07d8      	lsls	r0, r3, #31
 800b3d2:	d50f      	bpl.n	800b3f4 <_printf_float+0x23c>
 800b3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af45 	beq.w	800b26e <_printf_float+0xb6>
 800b3e4:	f04f 0900 	mov.w	r9, #0
 800b3e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3ec:	f104 0a1a 	add.w	sl, r4, #26
 800b3f0:	45c8      	cmp	r8, r9
 800b3f2:	dc09      	bgt.n	800b408 <_printf_float+0x250>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	079b      	lsls	r3, r3, #30
 800b3f8:	f100 8103 	bmi.w	800b602 <_printf_float+0x44a>
 800b3fc:	68e0      	ldr	r0, [r4, #12]
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b400:	4298      	cmp	r0, r3
 800b402:	bfb8      	it	lt
 800b404:	4618      	movlt	r0, r3
 800b406:	e734      	b.n	800b272 <_printf_float+0xba>
 800b408:	2301      	movs	r3, #1
 800b40a:	4652      	mov	r2, sl
 800b40c:	4631      	mov	r1, r6
 800b40e:	4628      	mov	r0, r5
 800b410:	47b8      	blx	r7
 800b412:	3001      	adds	r0, #1
 800b414:	f43f af2b 	beq.w	800b26e <_printf_float+0xb6>
 800b418:	f109 0901 	add.w	r9, r9, #1
 800b41c:	e7e8      	b.n	800b3f0 <_printf_float+0x238>
 800b41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b420:	2b00      	cmp	r3, #0
 800b422:	dc39      	bgt.n	800b498 <_printf_float+0x2e0>
 800b424:	4a1b      	ldr	r2, [pc, #108]	@ (800b494 <_printf_float+0x2dc>)
 800b426:	2301      	movs	r3, #1
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af1d 	beq.w	800b26e <_printf_float+0xb6>
 800b434:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b438:	ea59 0303 	orrs.w	r3, r9, r3
 800b43c:	d102      	bne.n	800b444 <_printf_float+0x28c>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	07d9      	lsls	r1, r3, #31
 800b442:	d5d7      	bpl.n	800b3f4 <_printf_float+0x23c>
 800b444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b448:	4631      	mov	r1, r6
 800b44a:	4628      	mov	r0, r5
 800b44c:	47b8      	blx	r7
 800b44e:	3001      	adds	r0, #1
 800b450:	f43f af0d 	beq.w	800b26e <_printf_float+0xb6>
 800b454:	f04f 0a00 	mov.w	sl, #0
 800b458:	f104 0b1a 	add.w	fp, r4, #26
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	425b      	negs	r3, r3
 800b460:	4553      	cmp	r3, sl
 800b462:	dc01      	bgt.n	800b468 <_printf_float+0x2b0>
 800b464:	464b      	mov	r3, r9
 800b466:	e793      	b.n	800b390 <_printf_float+0x1d8>
 800b468:	2301      	movs	r3, #1
 800b46a:	465a      	mov	r2, fp
 800b46c:	4631      	mov	r1, r6
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	f43f aefb 	beq.w	800b26e <_printf_float+0xb6>
 800b478:	f10a 0a01 	add.w	sl, sl, #1
 800b47c:	e7ee      	b.n	800b45c <_printf_float+0x2a4>
 800b47e:	bf00      	nop
 800b480:	7fefffff 	.word	0x7fefffff
 800b484:	080100ec 	.word	0x080100ec
 800b488:	080100f0 	.word	0x080100f0
 800b48c:	080100f4 	.word	0x080100f4
 800b490:	080100f8 	.word	0x080100f8
 800b494:	080100fc 	.word	0x080100fc
 800b498:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b49a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b49e:	4553      	cmp	r3, sl
 800b4a0:	bfa8      	it	ge
 800b4a2:	4653      	movge	r3, sl
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	4699      	mov	r9, r3
 800b4a8:	dc36      	bgt.n	800b518 <_printf_float+0x360>
 800b4aa:	f04f 0b00 	mov.w	fp, #0
 800b4ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4b2:	f104 021a 	add.w	r2, r4, #26
 800b4b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4b8:	9306      	str	r3, [sp, #24]
 800b4ba:	eba3 0309 	sub.w	r3, r3, r9
 800b4be:	455b      	cmp	r3, fp
 800b4c0:	dc31      	bgt.n	800b526 <_printf_float+0x36e>
 800b4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c4:	459a      	cmp	sl, r3
 800b4c6:	dc3a      	bgt.n	800b53e <_printf_float+0x386>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	07da      	lsls	r2, r3, #31
 800b4cc:	d437      	bmi.n	800b53e <_printf_float+0x386>
 800b4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d0:	ebaa 0903 	sub.w	r9, sl, r3
 800b4d4:	9b06      	ldr	r3, [sp, #24]
 800b4d6:	ebaa 0303 	sub.w	r3, sl, r3
 800b4da:	4599      	cmp	r9, r3
 800b4dc:	bfa8      	it	ge
 800b4de:	4699      	movge	r9, r3
 800b4e0:	f1b9 0f00 	cmp.w	r9, #0
 800b4e4:	dc33      	bgt.n	800b54e <_printf_float+0x396>
 800b4e6:	f04f 0800 	mov.w	r8, #0
 800b4ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ee:	f104 0b1a 	add.w	fp, r4, #26
 800b4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b4f8:	eba3 0309 	sub.w	r3, r3, r9
 800b4fc:	4543      	cmp	r3, r8
 800b4fe:	f77f af79 	ble.w	800b3f4 <_printf_float+0x23c>
 800b502:	2301      	movs	r3, #1
 800b504:	465a      	mov	r2, fp
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	f43f aeae 	beq.w	800b26e <_printf_float+0xb6>
 800b512:	f108 0801 	add.w	r8, r8, #1
 800b516:	e7ec      	b.n	800b4f2 <_printf_float+0x33a>
 800b518:	4642      	mov	r2, r8
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	d1c2      	bne.n	800b4aa <_printf_float+0x2f2>
 800b524:	e6a3      	b.n	800b26e <_printf_float+0xb6>
 800b526:	2301      	movs	r3, #1
 800b528:	4631      	mov	r1, r6
 800b52a:	4628      	mov	r0, r5
 800b52c:	9206      	str	r2, [sp, #24]
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	f43f ae9c 	beq.w	800b26e <_printf_float+0xb6>
 800b536:	9a06      	ldr	r2, [sp, #24]
 800b538:	f10b 0b01 	add.w	fp, fp, #1
 800b53c:	e7bb      	b.n	800b4b6 <_printf_float+0x2fe>
 800b53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b542:	4631      	mov	r1, r6
 800b544:	4628      	mov	r0, r5
 800b546:	47b8      	blx	r7
 800b548:	3001      	adds	r0, #1
 800b54a:	d1c0      	bne.n	800b4ce <_printf_float+0x316>
 800b54c:	e68f      	b.n	800b26e <_printf_float+0xb6>
 800b54e:	9a06      	ldr	r2, [sp, #24]
 800b550:	464b      	mov	r3, r9
 800b552:	4442      	add	r2, r8
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	d1c3      	bne.n	800b4e6 <_printf_float+0x32e>
 800b55e:	e686      	b.n	800b26e <_printf_float+0xb6>
 800b560:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b564:	f1ba 0f01 	cmp.w	sl, #1
 800b568:	dc01      	bgt.n	800b56e <_printf_float+0x3b6>
 800b56a:	07db      	lsls	r3, r3, #31
 800b56c:	d536      	bpl.n	800b5dc <_printf_float+0x424>
 800b56e:	2301      	movs	r3, #1
 800b570:	4642      	mov	r2, r8
 800b572:	4631      	mov	r1, r6
 800b574:	4628      	mov	r0, r5
 800b576:	47b8      	blx	r7
 800b578:	3001      	adds	r0, #1
 800b57a:	f43f ae78 	beq.w	800b26e <_printf_float+0xb6>
 800b57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	f43f ae70 	beq.w	800b26e <_printf_float+0xb6>
 800b58e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b592:	2200      	movs	r2, #0
 800b594:	2300      	movs	r3, #0
 800b596:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b59a:	f7f5 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 800b59e:	b9c0      	cbnz	r0, 800b5d2 <_printf_float+0x41a>
 800b5a0:	4653      	mov	r3, sl
 800b5a2:	f108 0201 	add.w	r2, r8, #1
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	47b8      	blx	r7
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d10c      	bne.n	800b5ca <_printf_float+0x412>
 800b5b0:	e65d      	b.n	800b26e <_printf_float+0xb6>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	465a      	mov	r2, fp
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b8      	blx	r7
 800b5bc:	3001      	adds	r0, #1
 800b5be:	f43f ae56 	beq.w	800b26e <_printf_float+0xb6>
 800b5c2:	f108 0801 	add.w	r8, r8, #1
 800b5c6:	45d0      	cmp	r8, sl
 800b5c8:	dbf3      	blt.n	800b5b2 <_printf_float+0x3fa>
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b5d0:	e6df      	b.n	800b392 <_printf_float+0x1da>
 800b5d2:	f04f 0800 	mov.w	r8, #0
 800b5d6:	f104 0b1a 	add.w	fp, r4, #26
 800b5da:	e7f4      	b.n	800b5c6 <_printf_float+0x40e>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4642      	mov	r2, r8
 800b5e0:	e7e1      	b.n	800b5a6 <_printf_float+0x3ee>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	464a      	mov	r2, r9
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	47b8      	blx	r7
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f43f ae3e 	beq.w	800b26e <_printf_float+0xb6>
 800b5f2:	f108 0801 	add.w	r8, r8, #1
 800b5f6:	68e3      	ldr	r3, [r4, #12]
 800b5f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5fa:	1a5b      	subs	r3, r3, r1
 800b5fc:	4543      	cmp	r3, r8
 800b5fe:	dcf0      	bgt.n	800b5e2 <_printf_float+0x42a>
 800b600:	e6fc      	b.n	800b3fc <_printf_float+0x244>
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	f104 0919 	add.w	r9, r4, #25
 800b60a:	e7f4      	b.n	800b5f6 <_printf_float+0x43e>

0800b60c <_printf_common>:
 800b60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	4616      	mov	r6, r2
 800b612:	4698      	mov	r8, r3
 800b614:	688a      	ldr	r2, [r1, #8]
 800b616:	690b      	ldr	r3, [r1, #16]
 800b618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b61c:	4293      	cmp	r3, r2
 800b61e:	bfb8      	it	lt
 800b620:	4613      	movlt	r3, r2
 800b622:	6033      	str	r3, [r6, #0]
 800b624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b628:	4607      	mov	r7, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	b10a      	cbz	r2, 800b632 <_printf_common+0x26>
 800b62e:	3301      	adds	r3, #1
 800b630:	6033      	str	r3, [r6, #0]
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	0699      	lsls	r1, r3, #26
 800b636:	bf42      	ittt	mi
 800b638:	6833      	ldrmi	r3, [r6, #0]
 800b63a:	3302      	addmi	r3, #2
 800b63c:	6033      	strmi	r3, [r6, #0]
 800b63e:	6825      	ldr	r5, [r4, #0]
 800b640:	f015 0506 	ands.w	r5, r5, #6
 800b644:	d106      	bne.n	800b654 <_printf_common+0x48>
 800b646:	f104 0a19 	add.w	sl, r4, #25
 800b64a:	68e3      	ldr	r3, [r4, #12]
 800b64c:	6832      	ldr	r2, [r6, #0]
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	42ab      	cmp	r3, r5
 800b652:	dc26      	bgt.n	800b6a2 <_printf_common+0x96>
 800b654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b658:	6822      	ldr	r2, [r4, #0]
 800b65a:	3b00      	subs	r3, #0
 800b65c:	bf18      	it	ne
 800b65e:	2301      	movne	r3, #1
 800b660:	0692      	lsls	r2, r2, #26
 800b662:	d42b      	bmi.n	800b6bc <_printf_common+0xb0>
 800b664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b668:	4641      	mov	r1, r8
 800b66a:	4638      	mov	r0, r7
 800b66c:	47c8      	blx	r9
 800b66e:	3001      	adds	r0, #1
 800b670:	d01e      	beq.n	800b6b0 <_printf_common+0xa4>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	6922      	ldr	r2, [r4, #16]
 800b676:	f003 0306 	and.w	r3, r3, #6
 800b67a:	2b04      	cmp	r3, #4
 800b67c:	bf02      	ittt	eq
 800b67e:	68e5      	ldreq	r5, [r4, #12]
 800b680:	6833      	ldreq	r3, [r6, #0]
 800b682:	1aed      	subeq	r5, r5, r3
 800b684:	68a3      	ldr	r3, [r4, #8]
 800b686:	bf0c      	ite	eq
 800b688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b68c:	2500      	movne	r5, #0
 800b68e:	4293      	cmp	r3, r2
 800b690:	bfc4      	itt	gt
 800b692:	1a9b      	subgt	r3, r3, r2
 800b694:	18ed      	addgt	r5, r5, r3
 800b696:	2600      	movs	r6, #0
 800b698:	341a      	adds	r4, #26
 800b69a:	42b5      	cmp	r5, r6
 800b69c:	d11a      	bne.n	800b6d4 <_printf_common+0xc8>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e008      	b.n	800b6b4 <_printf_common+0xa8>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	4652      	mov	r2, sl
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	47c8      	blx	r9
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d103      	bne.n	800b6b8 <_printf_common+0xac>
 800b6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b8:	3501      	adds	r5, #1
 800b6ba:	e7c6      	b.n	800b64a <_printf_common+0x3e>
 800b6bc:	18e1      	adds	r1, r4, r3
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	2030      	movs	r0, #48	@ 0x30
 800b6c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6c6:	4422      	add	r2, r4
 800b6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	e7c7      	b.n	800b664 <_printf_common+0x58>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	4641      	mov	r1, r8
 800b6da:	4638      	mov	r0, r7
 800b6dc:	47c8      	blx	r9
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d0e6      	beq.n	800b6b0 <_printf_common+0xa4>
 800b6e2:	3601      	adds	r6, #1
 800b6e4:	e7d9      	b.n	800b69a <_printf_common+0x8e>
	...

0800b6e8 <_printf_i>:
 800b6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	7e0f      	ldrb	r7, [r1, #24]
 800b6ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6f0:	2f78      	cmp	r7, #120	@ 0x78
 800b6f2:	4691      	mov	r9, r2
 800b6f4:	4680      	mov	r8, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	469a      	mov	sl, r3
 800b6fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6fe:	d807      	bhi.n	800b710 <_printf_i+0x28>
 800b700:	2f62      	cmp	r7, #98	@ 0x62
 800b702:	d80a      	bhi.n	800b71a <_printf_i+0x32>
 800b704:	2f00      	cmp	r7, #0
 800b706:	f000 80d2 	beq.w	800b8ae <_printf_i+0x1c6>
 800b70a:	2f58      	cmp	r7, #88	@ 0x58
 800b70c:	f000 80b9 	beq.w	800b882 <_printf_i+0x19a>
 800b710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b718:	e03a      	b.n	800b790 <_printf_i+0xa8>
 800b71a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b71e:	2b15      	cmp	r3, #21
 800b720:	d8f6      	bhi.n	800b710 <_printf_i+0x28>
 800b722:	a101      	add	r1, pc, #4	@ (adr r1, 800b728 <_printf_i+0x40>)
 800b724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b728:	0800b781 	.word	0x0800b781
 800b72c:	0800b795 	.word	0x0800b795
 800b730:	0800b711 	.word	0x0800b711
 800b734:	0800b711 	.word	0x0800b711
 800b738:	0800b711 	.word	0x0800b711
 800b73c:	0800b711 	.word	0x0800b711
 800b740:	0800b795 	.word	0x0800b795
 800b744:	0800b711 	.word	0x0800b711
 800b748:	0800b711 	.word	0x0800b711
 800b74c:	0800b711 	.word	0x0800b711
 800b750:	0800b711 	.word	0x0800b711
 800b754:	0800b895 	.word	0x0800b895
 800b758:	0800b7bf 	.word	0x0800b7bf
 800b75c:	0800b84f 	.word	0x0800b84f
 800b760:	0800b711 	.word	0x0800b711
 800b764:	0800b711 	.word	0x0800b711
 800b768:	0800b8b7 	.word	0x0800b8b7
 800b76c:	0800b711 	.word	0x0800b711
 800b770:	0800b7bf 	.word	0x0800b7bf
 800b774:	0800b711 	.word	0x0800b711
 800b778:	0800b711 	.word	0x0800b711
 800b77c:	0800b857 	.word	0x0800b857
 800b780:	6833      	ldr	r3, [r6, #0]
 800b782:	1d1a      	adds	r2, r3, #4
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6032      	str	r2, [r6, #0]
 800b788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b78c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b790:	2301      	movs	r3, #1
 800b792:	e09d      	b.n	800b8d0 <_printf_i+0x1e8>
 800b794:	6833      	ldr	r3, [r6, #0]
 800b796:	6820      	ldr	r0, [r4, #0]
 800b798:	1d19      	adds	r1, r3, #4
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	0606      	lsls	r6, r0, #24
 800b79e:	d501      	bpl.n	800b7a4 <_printf_i+0xbc>
 800b7a0:	681d      	ldr	r5, [r3, #0]
 800b7a2:	e003      	b.n	800b7ac <_printf_i+0xc4>
 800b7a4:	0645      	lsls	r5, r0, #25
 800b7a6:	d5fb      	bpl.n	800b7a0 <_printf_i+0xb8>
 800b7a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	da03      	bge.n	800b7b8 <_printf_i+0xd0>
 800b7b0:	232d      	movs	r3, #45	@ 0x2d
 800b7b2:	426d      	negs	r5, r5
 800b7b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7b8:	4859      	ldr	r0, [pc, #356]	@ (800b920 <_printf_i+0x238>)
 800b7ba:	230a      	movs	r3, #10
 800b7bc:	e011      	b.n	800b7e2 <_printf_i+0xfa>
 800b7be:	6821      	ldr	r1, [r4, #0]
 800b7c0:	6833      	ldr	r3, [r6, #0]
 800b7c2:	0608      	lsls	r0, r1, #24
 800b7c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7c8:	d402      	bmi.n	800b7d0 <_printf_i+0xe8>
 800b7ca:	0649      	lsls	r1, r1, #25
 800b7cc:	bf48      	it	mi
 800b7ce:	b2ad      	uxthmi	r5, r5
 800b7d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7d2:	4853      	ldr	r0, [pc, #332]	@ (800b920 <_printf_i+0x238>)
 800b7d4:	6033      	str	r3, [r6, #0]
 800b7d6:	bf14      	ite	ne
 800b7d8:	230a      	movne	r3, #10
 800b7da:	2308      	moveq	r3, #8
 800b7dc:	2100      	movs	r1, #0
 800b7de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7e2:	6866      	ldr	r6, [r4, #4]
 800b7e4:	60a6      	str	r6, [r4, #8]
 800b7e6:	2e00      	cmp	r6, #0
 800b7e8:	bfa2      	ittt	ge
 800b7ea:	6821      	ldrge	r1, [r4, #0]
 800b7ec:	f021 0104 	bicge.w	r1, r1, #4
 800b7f0:	6021      	strge	r1, [r4, #0]
 800b7f2:	b90d      	cbnz	r5, 800b7f8 <_printf_i+0x110>
 800b7f4:	2e00      	cmp	r6, #0
 800b7f6:	d04b      	beq.n	800b890 <_printf_i+0x1a8>
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7fe:	fb03 5711 	mls	r7, r3, r1, r5
 800b802:	5dc7      	ldrb	r7, [r0, r7]
 800b804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b808:	462f      	mov	r7, r5
 800b80a:	42bb      	cmp	r3, r7
 800b80c:	460d      	mov	r5, r1
 800b80e:	d9f4      	bls.n	800b7fa <_printf_i+0x112>
 800b810:	2b08      	cmp	r3, #8
 800b812:	d10b      	bne.n	800b82c <_printf_i+0x144>
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	07df      	lsls	r7, r3, #31
 800b818:	d508      	bpl.n	800b82c <_printf_i+0x144>
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	6861      	ldr	r1, [r4, #4]
 800b81e:	4299      	cmp	r1, r3
 800b820:	bfde      	ittt	le
 800b822:	2330      	movle	r3, #48	@ 0x30
 800b824:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b828:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b82c:	1b92      	subs	r2, r2, r6
 800b82e:	6122      	str	r2, [r4, #16]
 800b830:	f8cd a000 	str.w	sl, [sp]
 800b834:	464b      	mov	r3, r9
 800b836:	aa03      	add	r2, sp, #12
 800b838:	4621      	mov	r1, r4
 800b83a:	4640      	mov	r0, r8
 800b83c:	f7ff fee6 	bl	800b60c <_printf_common>
 800b840:	3001      	adds	r0, #1
 800b842:	d14a      	bne.n	800b8da <_printf_i+0x1f2>
 800b844:	f04f 30ff 	mov.w	r0, #4294967295
 800b848:	b004      	add	sp, #16
 800b84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	f043 0320 	orr.w	r3, r3, #32
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	4833      	ldr	r0, [pc, #204]	@ (800b924 <_printf_i+0x23c>)
 800b858:	2778      	movs	r7, #120	@ 0x78
 800b85a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	6831      	ldr	r1, [r6, #0]
 800b862:	061f      	lsls	r7, r3, #24
 800b864:	f851 5b04 	ldr.w	r5, [r1], #4
 800b868:	d402      	bmi.n	800b870 <_printf_i+0x188>
 800b86a:	065f      	lsls	r7, r3, #25
 800b86c:	bf48      	it	mi
 800b86e:	b2ad      	uxthmi	r5, r5
 800b870:	6031      	str	r1, [r6, #0]
 800b872:	07d9      	lsls	r1, r3, #31
 800b874:	bf44      	itt	mi
 800b876:	f043 0320 	orrmi.w	r3, r3, #32
 800b87a:	6023      	strmi	r3, [r4, #0]
 800b87c:	b11d      	cbz	r5, 800b886 <_printf_i+0x19e>
 800b87e:	2310      	movs	r3, #16
 800b880:	e7ac      	b.n	800b7dc <_printf_i+0xf4>
 800b882:	4827      	ldr	r0, [pc, #156]	@ (800b920 <_printf_i+0x238>)
 800b884:	e7e9      	b.n	800b85a <_printf_i+0x172>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	f023 0320 	bic.w	r3, r3, #32
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	e7f6      	b.n	800b87e <_printf_i+0x196>
 800b890:	4616      	mov	r6, r2
 800b892:	e7bd      	b.n	800b810 <_printf_i+0x128>
 800b894:	6833      	ldr	r3, [r6, #0]
 800b896:	6825      	ldr	r5, [r4, #0]
 800b898:	6961      	ldr	r1, [r4, #20]
 800b89a:	1d18      	adds	r0, r3, #4
 800b89c:	6030      	str	r0, [r6, #0]
 800b89e:	062e      	lsls	r6, r5, #24
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	d501      	bpl.n	800b8a8 <_printf_i+0x1c0>
 800b8a4:	6019      	str	r1, [r3, #0]
 800b8a6:	e002      	b.n	800b8ae <_printf_i+0x1c6>
 800b8a8:	0668      	lsls	r0, r5, #25
 800b8aa:	d5fb      	bpl.n	800b8a4 <_printf_i+0x1bc>
 800b8ac:	8019      	strh	r1, [r3, #0]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	4616      	mov	r6, r2
 800b8b4:	e7bc      	b.n	800b830 <_printf_i+0x148>
 800b8b6:	6833      	ldr	r3, [r6, #0]
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	6032      	str	r2, [r6, #0]
 800b8bc:	681e      	ldr	r6, [r3, #0]
 800b8be:	6862      	ldr	r2, [r4, #4]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f7f4 fca4 	bl	8000210 <memchr>
 800b8c8:	b108      	cbz	r0, 800b8ce <_printf_i+0x1e6>
 800b8ca:	1b80      	subs	r0, r0, r6
 800b8cc:	6060      	str	r0, [r4, #4]
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d8:	e7aa      	b.n	800b830 <_printf_i+0x148>
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4649      	mov	r1, r9
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	47d0      	blx	sl
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d0ad      	beq.n	800b844 <_printf_i+0x15c>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	079b      	lsls	r3, r3, #30
 800b8ec:	d413      	bmi.n	800b916 <_printf_i+0x22e>
 800b8ee:	68e0      	ldr	r0, [r4, #12]
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	4298      	cmp	r0, r3
 800b8f4:	bfb8      	it	lt
 800b8f6:	4618      	movlt	r0, r3
 800b8f8:	e7a6      	b.n	800b848 <_printf_i+0x160>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	4649      	mov	r1, r9
 800b900:	4640      	mov	r0, r8
 800b902:	47d0      	blx	sl
 800b904:	3001      	adds	r0, #1
 800b906:	d09d      	beq.n	800b844 <_printf_i+0x15c>
 800b908:	3501      	adds	r5, #1
 800b90a:	68e3      	ldr	r3, [r4, #12]
 800b90c:	9903      	ldr	r1, [sp, #12]
 800b90e:	1a5b      	subs	r3, r3, r1
 800b910:	42ab      	cmp	r3, r5
 800b912:	dcf2      	bgt.n	800b8fa <_printf_i+0x212>
 800b914:	e7eb      	b.n	800b8ee <_printf_i+0x206>
 800b916:	2500      	movs	r5, #0
 800b918:	f104 0619 	add.w	r6, r4, #25
 800b91c:	e7f5      	b.n	800b90a <_printf_i+0x222>
 800b91e:	bf00      	nop
 800b920:	080100fe 	.word	0x080100fe
 800b924:	0801010f 	.word	0x0801010f

0800b928 <_scanf_float>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	b087      	sub	sp, #28
 800b92e:	4617      	mov	r7, r2
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	688b      	ldr	r3, [r1, #8]
 800b934:	1e5a      	subs	r2, r3, #1
 800b936:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b93a:	bf81      	itttt	hi
 800b93c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b940:	eb03 0b05 	addhi.w	fp, r3, r5
 800b944:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b948:	608b      	strhi	r3, [r1, #8]
 800b94a:	680b      	ldr	r3, [r1, #0]
 800b94c:	460a      	mov	r2, r1
 800b94e:	f04f 0500 	mov.w	r5, #0
 800b952:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b956:	f842 3b1c 	str.w	r3, [r2], #28
 800b95a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b95e:	4680      	mov	r8, r0
 800b960:	460c      	mov	r4, r1
 800b962:	bf98      	it	ls
 800b964:	f04f 0b00 	movls.w	fp, #0
 800b968:	9201      	str	r2, [sp, #4]
 800b96a:	4616      	mov	r6, r2
 800b96c:	46aa      	mov	sl, r5
 800b96e:	46a9      	mov	r9, r5
 800b970:	9502      	str	r5, [sp, #8]
 800b972:	68a2      	ldr	r2, [r4, #8]
 800b974:	b152      	cbz	r2, 800b98c <_scanf_float+0x64>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b97c:	d864      	bhi.n	800ba48 <_scanf_float+0x120>
 800b97e:	2b40      	cmp	r3, #64	@ 0x40
 800b980:	d83c      	bhi.n	800b9fc <_scanf_float+0xd4>
 800b982:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b986:	b2c8      	uxtb	r0, r1
 800b988:	280e      	cmp	r0, #14
 800b98a:	d93a      	bls.n	800ba02 <_scanf_float+0xda>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	d003      	beq.n	800b99a <_scanf_float+0x72>
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b99e:	f1ba 0f01 	cmp.w	sl, #1
 800b9a2:	f200 8117 	bhi.w	800bbd4 <_scanf_float+0x2ac>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	429e      	cmp	r6, r3
 800b9aa:	f200 8108 	bhi.w	800bbbe <_scanf_float+0x296>
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	b007      	add	sp, #28
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b9ba:	2a0d      	cmp	r2, #13
 800b9bc:	d8e6      	bhi.n	800b98c <_scanf_float+0x64>
 800b9be:	a101      	add	r1, pc, #4	@ (adr r1, 800b9c4 <_scanf_float+0x9c>)
 800b9c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9c4:	0800bb0b 	.word	0x0800bb0b
 800b9c8:	0800b98d 	.word	0x0800b98d
 800b9cc:	0800b98d 	.word	0x0800b98d
 800b9d0:	0800b98d 	.word	0x0800b98d
 800b9d4:	0800bb6b 	.word	0x0800bb6b
 800b9d8:	0800bb43 	.word	0x0800bb43
 800b9dc:	0800b98d 	.word	0x0800b98d
 800b9e0:	0800b98d 	.word	0x0800b98d
 800b9e4:	0800bb19 	.word	0x0800bb19
 800b9e8:	0800b98d 	.word	0x0800b98d
 800b9ec:	0800b98d 	.word	0x0800b98d
 800b9f0:	0800b98d 	.word	0x0800b98d
 800b9f4:	0800b98d 	.word	0x0800b98d
 800b9f8:	0800bad1 	.word	0x0800bad1
 800b9fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ba00:	e7db      	b.n	800b9ba <_scanf_float+0x92>
 800ba02:	290e      	cmp	r1, #14
 800ba04:	d8c2      	bhi.n	800b98c <_scanf_float+0x64>
 800ba06:	a001      	add	r0, pc, #4	@ (adr r0, 800ba0c <_scanf_float+0xe4>)
 800ba08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ba0c:	0800bac1 	.word	0x0800bac1
 800ba10:	0800b98d 	.word	0x0800b98d
 800ba14:	0800bac1 	.word	0x0800bac1
 800ba18:	0800bb57 	.word	0x0800bb57
 800ba1c:	0800b98d 	.word	0x0800b98d
 800ba20:	0800ba69 	.word	0x0800ba69
 800ba24:	0800baa7 	.word	0x0800baa7
 800ba28:	0800baa7 	.word	0x0800baa7
 800ba2c:	0800baa7 	.word	0x0800baa7
 800ba30:	0800baa7 	.word	0x0800baa7
 800ba34:	0800baa7 	.word	0x0800baa7
 800ba38:	0800baa7 	.word	0x0800baa7
 800ba3c:	0800baa7 	.word	0x0800baa7
 800ba40:	0800baa7 	.word	0x0800baa7
 800ba44:	0800baa7 	.word	0x0800baa7
 800ba48:	2b6e      	cmp	r3, #110	@ 0x6e
 800ba4a:	d809      	bhi.n	800ba60 <_scanf_float+0x138>
 800ba4c:	2b60      	cmp	r3, #96	@ 0x60
 800ba4e:	d8b2      	bhi.n	800b9b6 <_scanf_float+0x8e>
 800ba50:	2b54      	cmp	r3, #84	@ 0x54
 800ba52:	d07b      	beq.n	800bb4c <_scanf_float+0x224>
 800ba54:	2b59      	cmp	r3, #89	@ 0x59
 800ba56:	d199      	bne.n	800b98c <_scanf_float+0x64>
 800ba58:	2d07      	cmp	r5, #7
 800ba5a:	d197      	bne.n	800b98c <_scanf_float+0x64>
 800ba5c:	2508      	movs	r5, #8
 800ba5e:	e02c      	b.n	800baba <_scanf_float+0x192>
 800ba60:	2b74      	cmp	r3, #116	@ 0x74
 800ba62:	d073      	beq.n	800bb4c <_scanf_float+0x224>
 800ba64:	2b79      	cmp	r3, #121	@ 0x79
 800ba66:	e7f6      	b.n	800ba56 <_scanf_float+0x12e>
 800ba68:	6821      	ldr	r1, [r4, #0]
 800ba6a:	05c8      	lsls	r0, r1, #23
 800ba6c:	d51b      	bpl.n	800baa6 <_scanf_float+0x17e>
 800ba6e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ba72:	6021      	str	r1, [r4, #0]
 800ba74:	f109 0901 	add.w	r9, r9, #1
 800ba78:	f1bb 0f00 	cmp.w	fp, #0
 800ba7c:	d003      	beq.n	800ba86 <_scanf_float+0x15e>
 800ba7e:	3201      	adds	r2, #1
 800ba80:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba84:	60a2      	str	r2, [r4, #8]
 800ba86:	68a3      	ldr	r3, [r4, #8]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	60a3      	str	r3, [r4, #8]
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	6123      	str	r3, [r4, #16]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	607b      	str	r3, [r7, #4]
 800ba9a:	f340 8087 	ble.w	800bbac <_scanf_float+0x284>
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	e765      	b.n	800b972 <_scanf_float+0x4a>
 800baa6:	eb1a 0105 	adds.w	r1, sl, r5
 800baaa:	f47f af6f 	bne.w	800b98c <_scanf_float+0x64>
 800baae:	6822      	ldr	r2, [r4, #0]
 800bab0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bab4:	6022      	str	r2, [r4, #0]
 800bab6:	460d      	mov	r5, r1
 800bab8:	468a      	mov	sl, r1
 800baba:	f806 3b01 	strb.w	r3, [r6], #1
 800babe:	e7e2      	b.n	800ba86 <_scanf_float+0x15e>
 800bac0:	6822      	ldr	r2, [r4, #0]
 800bac2:	0610      	lsls	r0, r2, #24
 800bac4:	f57f af62 	bpl.w	800b98c <_scanf_float+0x64>
 800bac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bacc:	6022      	str	r2, [r4, #0]
 800bace:	e7f4      	b.n	800baba <_scanf_float+0x192>
 800bad0:	f1ba 0f00 	cmp.w	sl, #0
 800bad4:	d10e      	bne.n	800baf4 <_scanf_float+0x1cc>
 800bad6:	f1b9 0f00 	cmp.w	r9, #0
 800bada:	d10e      	bne.n	800bafa <_scanf_float+0x1d2>
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bae2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bae6:	d108      	bne.n	800bafa <_scanf_float+0x1d2>
 800bae8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baec:	6022      	str	r2, [r4, #0]
 800baee:	f04f 0a01 	mov.w	sl, #1
 800baf2:	e7e2      	b.n	800baba <_scanf_float+0x192>
 800baf4:	f1ba 0f02 	cmp.w	sl, #2
 800baf8:	d055      	beq.n	800bba6 <_scanf_float+0x27e>
 800bafa:	2d01      	cmp	r5, #1
 800bafc:	d002      	beq.n	800bb04 <_scanf_float+0x1dc>
 800bafe:	2d04      	cmp	r5, #4
 800bb00:	f47f af44 	bne.w	800b98c <_scanf_float+0x64>
 800bb04:	3501      	adds	r5, #1
 800bb06:	b2ed      	uxtb	r5, r5
 800bb08:	e7d7      	b.n	800baba <_scanf_float+0x192>
 800bb0a:	f1ba 0f01 	cmp.w	sl, #1
 800bb0e:	f47f af3d 	bne.w	800b98c <_scanf_float+0x64>
 800bb12:	f04f 0a02 	mov.w	sl, #2
 800bb16:	e7d0      	b.n	800baba <_scanf_float+0x192>
 800bb18:	b97d      	cbnz	r5, 800bb3a <_scanf_float+0x212>
 800bb1a:	f1b9 0f00 	cmp.w	r9, #0
 800bb1e:	f47f af38 	bne.w	800b992 <_scanf_float+0x6a>
 800bb22:	6822      	ldr	r2, [r4, #0]
 800bb24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb2c:	f040 8108 	bne.w	800bd40 <_scanf_float+0x418>
 800bb30:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb34:	6022      	str	r2, [r4, #0]
 800bb36:	2501      	movs	r5, #1
 800bb38:	e7bf      	b.n	800baba <_scanf_float+0x192>
 800bb3a:	2d03      	cmp	r5, #3
 800bb3c:	d0e2      	beq.n	800bb04 <_scanf_float+0x1dc>
 800bb3e:	2d05      	cmp	r5, #5
 800bb40:	e7de      	b.n	800bb00 <_scanf_float+0x1d8>
 800bb42:	2d02      	cmp	r5, #2
 800bb44:	f47f af22 	bne.w	800b98c <_scanf_float+0x64>
 800bb48:	2503      	movs	r5, #3
 800bb4a:	e7b6      	b.n	800baba <_scanf_float+0x192>
 800bb4c:	2d06      	cmp	r5, #6
 800bb4e:	f47f af1d 	bne.w	800b98c <_scanf_float+0x64>
 800bb52:	2507      	movs	r5, #7
 800bb54:	e7b1      	b.n	800baba <_scanf_float+0x192>
 800bb56:	6822      	ldr	r2, [r4, #0]
 800bb58:	0591      	lsls	r1, r2, #22
 800bb5a:	f57f af17 	bpl.w	800b98c <_scanf_float+0x64>
 800bb5e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bb62:	6022      	str	r2, [r4, #0]
 800bb64:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb68:	e7a7      	b.n	800baba <_scanf_float+0x192>
 800bb6a:	6822      	ldr	r2, [r4, #0]
 800bb6c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bb70:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb74:	d006      	beq.n	800bb84 <_scanf_float+0x25c>
 800bb76:	0550      	lsls	r0, r2, #21
 800bb78:	f57f af08 	bpl.w	800b98c <_scanf_float+0x64>
 800bb7c:	f1b9 0f00 	cmp.w	r9, #0
 800bb80:	f000 80de 	beq.w	800bd40 <_scanf_float+0x418>
 800bb84:	0591      	lsls	r1, r2, #22
 800bb86:	bf58      	it	pl
 800bb88:	9902      	ldrpl	r1, [sp, #8]
 800bb8a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb8e:	bf58      	it	pl
 800bb90:	eba9 0101 	subpl.w	r1, r9, r1
 800bb94:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb98:	bf58      	it	pl
 800bb9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb9e:	6022      	str	r2, [r4, #0]
 800bba0:	f04f 0900 	mov.w	r9, #0
 800bba4:	e789      	b.n	800baba <_scanf_float+0x192>
 800bba6:	f04f 0a03 	mov.w	sl, #3
 800bbaa:	e786      	b.n	800baba <_scanf_float+0x192>
 800bbac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	4798      	blx	r3
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	f43f aedb 	beq.w	800b972 <_scanf_float+0x4a>
 800bbbc:	e6e6      	b.n	800b98c <_scanf_float+0x64>
 800bbbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbc6:	463a      	mov	r2, r7
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4798      	blx	r3
 800bbcc:	6923      	ldr	r3, [r4, #16]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	6123      	str	r3, [r4, #16]
 800bbd2:	e6e8      	b.n	800b9a6 <_scanf_float+0x7e>
 800bbd4:	1e6b      	subs	r3, r5, #1
 800bbd6:	2b06      	cmp	r3, #6
 800bbd8:	d824      	bhi.n	800bc24 <_scanf_float+0x2fc>
 800bbda:	2d02      	cmp	r5, #2
 800bbdc:	d836      	bhi.n	800bc4c <_scanf_float+0x324>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	429e      	cmp	r6, r3
 800bbe2:	f67f aee4 	bls.w	800b9ae <_scanf_float+0x86>
 800bbe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbee:	463a      	mov	r2, r7
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4798      	blx	r3
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	6123      	str	r3, [r4, #16]
 800bbfa:	e7f0      	b.n	800bbde <_scanf_float+0x2b6>
 800bbfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc00:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bc04:	463a      	mov	r2, r7
 800bc06:	4640      	mov	r0, r8
 800bc08:	4798      	blx	r3
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc14:	fa5f fa8a 	uxtb.w	sl, sl
 800bc18:	f1ba 0f02 	cmp.w	sl, #2
 800bc1c:	d1ee      	bne.n	800bbfc <_scanf_float+0x2d4>
 800bc1e:	3d03      	subs	r5, #3
 800bc20:	b2ed      	uxtb	r5, r5
 800bc22:	1b76      	subs	r6, r6, r5
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	05da      	lsls	r2, r3, #23
 800bc28:	d530      	bpl.n	800bc8c <_scanf_float+0x364>
 800bc2a:	055b      	lsls	r3, r3, #21
 800bc2c:	d511      	bpl.n	800bc52 <_scanf_float+0x32a>
 800bc2e:	9b01      	ldr	r3, [sp, #4]
 800bc30:	429e      	cmp	r6, r3
 800bc32:	f67f aebc 	bls.w	800b9ae <_scanf_float+0x86>
 800bc36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc3e:	463a      	mov	r2, r7
 800bc40:	4640      	mov	r0, r8
 800bc42:	4798      	blx	r3
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	6123      	str	r3, [r4, #16]
 800bc4a:	e7f0      	b.n	800bc2e <_scanf_float+0x306>
 800bc4c:	46aa      	mov	sl, r5
 800bc4e:	46b3      	mov	fp, r6
 800bc50:	e7de      	b.n	800bc10 <_scanf_float+0x2e8>
 800bc52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	2965      	cmp	r1, #101	@ 0x65
 800bc5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc5e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bc62:	6123      	str	r3, [r4, #16]
 800bc64:	d00c      	beq.n	800bc80 <_scanf_float+0x358>
 800bc66:	2945      	cmp	r1, #69	@ 0x45
 800bc68:	d00a      	beq.n	800bc80 <_scanf_float+0x358>
 800bc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc6e:	463a      	mov	r2, r7
 800bc70:	4640      	mov	r0, r8
 800bc72:	4798      	blx	r3
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	1eb5      	subs	r5, r6, #2
 800bc7e:	6123      	str	r3, [r4, #16]
 800bc80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc84:	463a      	mov	r2, r7
 800bc86:	4640      	mov	r0, r8
 800bc88:	4798      	blx	r3
 800bc8a:	462e      	mov	r6, r5
 800bc8c:	6822      	ldr	r2, [r4, #0]
 800bc8e:	f012 0210 	ands.w	r2, r2, #16
 800bc92:	d001      	beq.n	800bc98 <_scanf_float+0x370>
 800bc94:	2000      	movs	r0, #0
 800bc96:	e68b      	b.n	800b9b0 <_scanf_float+0x88>
 800bc98:	7032      	strb	r2, [r6, #0]
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bca4:	d11c      	bne.n	800bce0 <_scanf_float+0x3b8>
 800bca6:	9b02      	ldr	r3, [sp, #8]
 800bca8:	454b      	cmp	r3, r9
 800bcaa:	eba3 0209 	sub.w	r2, r3, r9
 800bcae:	d123      	bne.n	800bcf8 <_scanf_float+0x3d0>
 800bcb0:	9901      	ldr	r1, [sp, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	f002 fc2f 	bl	800e518 <_strtod_r>
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	6821      	ldr	r1, [r4, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f011 0f02 	tst.w	r1, #2
 800bcc4:	ec57 6b10 	vmov	r6, r7, d0
 800bcc8:	f103 0204 	add.w	r2, r3, #4
 800bccc:	d01f      	beq.n	800bd0e <_scanf_float+0x3e6>
 800bcce:	9903      	ldr	r1, [sp, #12]
 800bcd0:	600a      	str	r2, [r1, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	e9c3 6700 	strd	r6, r7, [r3]
 800bcd8:	68e3      	ldr	r3, [r4, #12]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	60e3      	str	r3, [r4, #12]
 800bcde:	e7d9      	b.n	800bc94 <_scanf_float+0x36c>
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0e4      	beq.n	800bcb0 <_scanf_float+0x388>
 800bce6:	9905      	ldr	r1, [sp, #20]
 800bce8:	230a      	movs	r3, #10
 800bcea:	3101      	adds	r1, #1
 800bcec:	4640      	mov	r0, r8
 800bcee:	f002 fc93 	bl	800e618 <_strtol_r>
 800bcf2:	9b04      	ldr	r3, [sp, #16]
 800bcf4:	9e05      	ldr	r6, [sp, #20]
 800bcf6:	1ac2      	subs	r2, r0, r3
 800bcf8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bcfc:	429e      	cmp	r6, r3
 800bcfe:	bf28      	it	cs
 800bd00:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bd04:	4910      	ldr	r1, [pc, #64]	@ (800bd48 <_scanf_float+0x420>)
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f8e4 	bl	800bed4 <siprintf>
 800bd0c:	e7d0      	b.n	800bcb0 <_scanf_float+0x388>
 800bd0e:	f011 0f04 	tst.w	r1, #4
 800bd12:	9903      	ldr	r1, [sp, #12]
 800bd14:	600a      	str	r2, [r1, #0]
 800bd16:	d1dc      	bne.n	800bcd2 <_scanf_float+0x3aa>
 800bd18:	681d      	ldr	r5, [r3, #0]
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 ff23 	bl	8000b6c <__aeabi_dcmpun>
 800bd26:	b128      	cbz	r0, 800bd34 <_scanf_float+0x40c>
 800bd28:	4808      	ldr	r0, [pc, #32]	@ (800bd4c <_scanf_float+0x424>)
 800bd2a:	f000 f9d1 	bl	800c0d0 <nanf>
 800bd2e:	ed85 0a00 	vstr	s0, [r5]
 800bd32:	e7d1      	b.n	800bcd8 <_scanf_float+0x3b0>
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 ff76 	bl	8000c28 <__aeabi_d2f>
 800bd3c:	6028      	str	r0, [r5, #0]
 800bd3e:	e7cb      	b.n	800bcd8 <_scanf_float+0x3b0>
 800bd40:	f04f 0900 	mov.w	r9, #0
 800bd44:	e629      	b.n	800b99a <_scanf_float+0x72>
 800bd46:	bf00      	nop
 800bd48:	08010120 	.word	0x08010120
 800bd4c:	08010160 	.word	0x08010160

0800bd50 <std>:
 800bd50:	2300      	movs	r3, #0
 800bd52:	b510      	push	{r4, lr}
 800bd54:	4604      	mov	r4, r0
 800bd56:	e9c0 3300 	strd	r3, r3, [r0]
 800bd5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd5e:	6083      	str	r3, [r0, #8]
 800bd60:	8181      	strh	r1, [r0, #12]
 800bd62:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd64:	81c2      	strh	r2, [r0, #14]
 800bd66:	6183      	str	r3, [r0, #24]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	2208      	movs	r2, #8
 800bd6c:	305c      	adds	r0, #92	@ 0x5c
 800bd6e:	f000 f914 	bl	800bf9a <memset>
 800bd72:	4b0d      	ldr	r3, [pc, #52]	@ (800bda8 <std+0x58>)
 800bd74:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd76:	4b0d      	ldr	r3, [pc, #52]	@ (800bdac <std+0x5c>)
 800bd78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bdb0 <std+0x60>)
 800bd7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bdb4 <std+0x64>)
 800bd80:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd82:	4b0d      	ldr	r3, [pc, #52]	@ (800bdb8 <std+0x68>)
 800bd84:	6224      	str	r4, [r4, #32]
 800bd86:	429c      	cmp	r4, r3
 800bd88:	d006      	beq.n	800bd98 <std+0x48>
 800bd8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd8e:	4294      	cmp	r4, r2
 800bd90:	d002      	beq.n	800bd98 <std+0x48>
 800bd92:	33d0      	adds	r3, #208	@ 0xd0
 800bd94:	429c      	cmp	r4, r3
 800bd96:	d105      	bne.n	800bda4 <std+0x54>
 800bd98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bda0:	f000 b984 	b.w	800c0ac <__retarget_lock_init_recursive>
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	bf00      	nop
 800bda8:	0800bf15 	.word	0x0800bf15
 800bdac:	0800bf37 	.word	0x0800bf37
 800bdb0:	0800bf6f 	.word	0x0800bf6f
 800bdb4:	0800bf93 	.word	0x0800bf93
 800bdb8:	20005128 	.word	0x20005128

0800bdbc <stdio_exit_handler>:
 800bdbc:	4a02      	ldr	r2, [pc, #8]	@ (800bdc8 <stdio_exit_handler+0xc>)
 800bdbe:	4903      	ldr	r1, [pc, #12]	@ (800bdcc <stdio_exit_handler+0x10>)
 800bdc0:	4803      	ldr	r0, [pc, #12]	@ (800bdd0 <stdio_exit_handler+0x14>)
 800bdc2:	f000 b869 	b.w	800be98 <_fwalk_sglue>
 800bdc6:	bf00      	nop
 800bdc8:	200000b4 	.word	0x200000b4
 800bdcc:	0800e9d5 	.word	0x0800e9d5
 800bdd0:	200000c4 	.word	0x200000c4

0800bdd4 <cleanup_stdio>:
 800bdd4:	6841      	ldr	r1, [r0, #4]
 800bdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <cleanup_stdio+0x34>)
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	b510      	push	{r4, lr}
 800bddc:	4604      	mov	r4, r0
 800bdde:	d001      	beq.n	800bde4 <cleanup_stdio+0x10>
 800bde0:	f002 fdf8 	bl	800e9d4 <_fflush_r>
 800bde4:	68a1      	ldr	r1, [r4, #8]
 800bde6:	4b09      	ldr	r3, [pc, #36]	@ (800be0c <cleanup_stdio+0x38>)
 800bde8:	4299      	cmp	r1, r3
 800bdea:	d002      	beq.n	800bdf2 <cleanup_stdio+0x1e>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f002 fdf1 	bl	800e9d4 <_fflush_r>
 800bdf2:	68e1      	ldr	r1, [r4, #12]
 800bdf4:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <cleanup_stdio+0x3c>)
 800bdf6:	4299      	cmp	r1, r3
 800bdf8:	d004      	beq.n	800be04 <cleanup_stdio+0x30>
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be00:	f002 bde8 	b.w	800e9d4 <_fflush_r>
 800be04:	bd10      	pop	{r4, pc}
 800be06:	bf00      	nop
 800be08:	20005128 	.word	0x20005128
 800be0c:	20005190 	.word	0x20005190
 800be10:	200051f8 	.word	0x200051f8

0800be14 <global_stdio_init.part.0>:
 800be14:	b510      	push	{r4, lr}
 800be16:	4b0b      	ldr	r3, [pc, #44]	@ (800be44 <global_stdio_init.part.0+0x30>)
 800be18:	4c0b      	ldr	r4, [pc, #44]	@ (800be48 <global_stdio_init.part.0+0x34>)
 800be1a:	4a0c      	ldr	r2, [pc, #48]	@ (800be4c <global_stdio_init.part.0+0x38>)
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	4620      	mov	r0, r4
 800be20:	2200      	movs	r2, #0
 800be22:	2104      	movs	r1, #4
 800be24:	f7ff ff94 	bl	800bd50 <std>
 800be28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be2c:	2201      	movs	r2, #1
 800be2e:	2109      	movs	r1, #9
 800be30:	f7ff ff8e 	bl	800bd50 <std>
 800be34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be38:	2202      	movs	r2, #2
 800be3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be3e:	2112      	movs	r1, #18
 800be40:	f7ff bf86 	b.w	800bd50 <std>
 800be44:	20005260 	.word	0x20005260
 800be48:	20005128 	.word	0x20005128
 800be4c:	0800bdbd 	.word	0x0800bdbd

0800be50 <__sfp_lock_acquire>:
 800be50:	4801      	ldr	r0, [pc, #4]	@ (800be58 <__sfp_lock_acquire+0x8>)
 800be52:	f000 b92c 	b.w	800c0ae <__retarget_lock_acquire_recursive>
 800be56:	bf00      	nop
 800be58:	20005269 	.word	0x20005269

0800be5c <__sfp_lock_release>:
 800be5c:	4801      	ldr	r0, [pc, #4]	@ (800be64 <__sfp_lock_release+0x8>)
 800be5e:	f000 b927 	b.w	800c0b0 <__retarget_lock_release_recursive>
 800be62:	bf00      	nop
 800be64:	20005269 	.word	0x20005269

0800be68 <__sinit>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	4604      	mov	r4, r0
 800be6c:	f7ff fff0 	bl	800be50 <__sfp_lock_acquire>
 800be70:	6a23      	ldr	r3, [r4, #32]
 800be72:	b11b      	cbz	r3, 800be7c <__sinit+0x14>
 800be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be78:	f7ff bff0 	b.w	800be5c <__sfp_lock_release>
 800be7c:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <__sinit+0x28>)
 800be7e:	6223      	str	r3, [r4, #32]
 800be80:	4b04      	ldr	r3, [pc, #16]	@ (800be94 <__sinit+0x2c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1f5      	bne.n	800be74 <__sinit+0xc>
 800be88:	f7ff ffc4 	bl	800be14 <global_stdio_init.part.0>
 800be8c:	e7f2      	b.n	800be74 <__sinit+0xc>
 800be8e:	bf00      	nop
 800be90:	0800bdd5 	.word	0x0800bdd5
 800be94:	20005260 	.word	0x20005260

0800be98 <_fwalk_sglue>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	4607      	mov	r7, r0
 800be9e:	4688      	mov	r8, r1
 800bea0:	4614      	mov	r4, r2
 800bea2:	2600      	movs	r6, #0
 800bea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bea8:	f1b9 0901 	subs.w	r9, r9, #1
 800beac:	d505      	bpl.n	800beba <_fwalk_sglue+0x22>
 800beae:	6824      	ldr	r4, [r4, #0]
 800beb0:	2c00      	cmp	r4, #0
 800beb2:	d1f7      	bne.n	800bea4 <_fwalk_sglue+0xc>
 800beb4:	4630      	mov	r0, r6
 800beb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d907      	bls.n	800bed0 <_fwalk_sglue+0x38>
 800bec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bec4:	3301      	adds	r3, #1
 800bec6:	d003      	beq.n	800bed0 <_fwalk_sglue+0x38>
 800bec8:	4629      	mov	r1, r5
 800beca:	4638      	mov	r0, r7
 800becc:	47c0      	blx	r8
 800bece:	4306      	orrs	r6, r0
 800bed0:	3568      	adds	r5, #104	@ 0x68
 800bed2:	e7e9      	b.n	800bea8 <_fwalk_sglue+0x10>

0800bed4 <siprintf>:
 800bed4:	b40e      	push	{r1, r2, r3}
 800bed6:	b500      	push	{lr}
 800bed8:	b09c      	sub	sp, #112	@ 0x70
 800beda:	ab1d      	add	r3, sp, #116	@ 0x74
 800bedc:	9002      	str	r0, [sp, #8]
 800bede:	9006      	str	r0, [sp, #24]
 800bee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bee4:	4809      	ldr	r0, [pc, #36]	@ (800bf0c <siprintf+0x38>)
 800bee6:	9107      	str	r1, [sp, #28]
 800bee8:	9104      	str	r1, [sp, #16]
 800beea:	4909      	ldr	r1, [pc, #36]	@ (800bf10 <siprintf+0x3c>)
 800beec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef0:	9105      	str	r1, [sp, #20]
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	a902      	add	r1, sp, #8
 800bef8:	f002 fbec 	bl	800e6d4 <_svfiprintf_r>
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	2200      	movs	r2, #0
 800bf00:	701a      	strb	r2, [r3, #0]
 800bf02:	b01c      	add	sp, #112	@ 0x70
 800bf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf08:	b003      	add	sp, #12
 800bf0a:	4770      	bx	lr
 800bf0c:	200000c0 	.word	0x200000c0
 800bf10:	ffff0208 	.word	0xffff0208

0800bf14 <__sread>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	460c      	mov	r4, r1
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	f000 f878 	bl	800c010 <_read_r>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	bfab      	itete	ge
 800bf24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf26:	89a3      	ldrhlt	r3, [r4, #12]
 800bf28:	181b      	addge	r3, r3, r0
 800bf2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf2e:	bfac      	ite	ge
 800bf30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf32:	81a3      	strhlt	r3, [r4, #12]
 800bf34:	bd10      	pop	{r4, pc}

0800bf36 <__swrite>:
 800bf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3a:	461f      	mov	r7, r3
 800bf3c:	898b      	ldrh	r3, [r1, #12]
 800bf3e:	05db      	lsls	r3, r3, #23
 800bf40:	4605      	mov	r5, r0
 800bf42:	460c      	mov	r4, r1
 800bf44:	4616      	mov	r6, r2
 800bf46:	d505      	bpl.n	800bf54 <__swrite+0x1e>
 800bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f000 f84c 	bl	800bfec <_lseek_r>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	4632      	mov	r2, r6
 800bf62:	463b      	mov	r3, r7
 800bf64:	4628      	mov	r0, r5
 800bf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	f000 b863 	b.w	800c034 <_write_r>

0800bf6e <__sseek>:
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf76:	f000 f839 	bl	800bfec <_lseek_r>
 800bf7a:	1c43      	adds	r3, r0, #1
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	bf15      	itete	ne
 800bf80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf8a:	81a3      	strheq	r3, [r4, #12]
 800bf8c:	bf18      	it	ne
 800bf8e:	81a3      	strhne	r3, [r4, #12]
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <__sclose>:
 800bf92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf96:	f000 b819 	b.w	800bfcc <_close_r>

0800bf9a <memset>:
 800bf9a:	4402      	add	r2, r0
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d100      	bne.n	800bfa4 <memset+0xa>
 800bfa2:	4770      	bx	lr
 800bfa4:	f803 1b01 	strb.w	r1, [r3], #1
 800bfa8:	e7f9      	b.n	800bf9e <memset+0x4>

0800bfaa <strchr>:
 800bfaa:	b2c9      	uxtb	r1, r1
 800bfac:	4603      	mov	r3, r0
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb4:	b112      	cbz	r2, 800bfbc <strchr+0x12>
 800bfb6:	428a      	cmp	r2, r1
 800bfb8:	d1f9      	bne.n	800bfae <strchr+0x4>
 800bfba:	4770      	bx	lr
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	bf18      	it	ne
 800bfc0:	2000      	movne	r0, #0
 800bfc2:	4770      	bx	lr

0800bfc4 <_localeconv_r>:
 800bfc4:	4800      	ldr	r0, [pc, #0]	@ (800bfc8 <_localeconv_r+0x4>)
 800bfc6:	4770      	bx	lr
 800bfc8:	20000200 	.word	0x20000200

0800bfcc <_close_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d06      	ldr	r5, [pc, #24]	@ (800bfe8 <_close_r+0x1c>)
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	602b      	str	r3, [r5, #0]
 800bfd8:	f7f6 f9f8 	bl	80023cc <_close>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d102      	bne.n	800bfe6 <_close_r+0x1a>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	b103      	cbz	r3, 800bfe6 <_close_r+0x1a>
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	20005264 	.word	0x20005264

0800bfec <_lseek_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4d07      	ldr	r5, [pc, #28]	@ (800c00c <_lseek_r+0x20>)
 800bff0:	4604      	mov	r4, r0
 800bff2:	4608      	mov	r0, r1
 800bff4:	4611      	mov	r1, r2
 800bff6:	2200      	movs	r2, #0
 800bff8:	602a      	str	r2, [r5, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	f7f6 fa0d 	bl	800241a <_lseek>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_lseek_r+0x1e>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_lseek_r+0x1e>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	20005264 	.word	0x20005264

0800c010 <_read_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4d07      	ldr	r5, [pc, #28]	@ (800c030 <_read_r+0x20>)
 800c014:	4604      	mov	r4, r0
 800c016:	4608      	mov	r0, r1
 800c018:	4611      	mov	r1, r2
 800c01a:	2200      	movs	r2, #0
 800c01c:	602a      	str	r2, [r5, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	f7f6 f99b 	bl	800235a <_read>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_read_r+0x1e>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_read_r+0x1e>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	20005264 	.word	0x20005264

0800c034 <_write_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4d07      	ldr	r5, [pc, #28]	@ (800c054 <_write_r+0x20>)
 800c038:	4604      	mov	r4, r0
 800c03a:	4608      	mov	r0, r1
 800c03c:	4611      	mov	r1, r2
 800c03e:	2200      	movs	r2, #0
 800c040:	602a      	str	r2, [r5, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	f7f6 f9a6 	bl	8002394 <_write>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_write_r+0x1e>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_write_r+0x1e>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	20005264 	.word	0x20005264

0800c058 <__errno>:
 800c058:	4b01      	ldr	r3, [pc, #4]	@ (800c060 <__errno+0x8>)
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	200000c0 	.word	0x200000c0

0800c064 <__libc_init_array>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4d0d      	ldr	r5, [pc, #52]	@ (800c09c <__libc_init_array+0x38>)
 800c068:	4c0d      	ldr	r4, [pc, #52]	@ (800c0a0 <__libc_init_array+0x3c>)
 800c06a:	1b64      	subs	r4, r4, r5
 800c06c:	10a4      	asrs	r4, r4, #2
 800c06e:	2600      	movs	r6, #0
 800c070:	42a6      	cmp	r6, r4
 800c072:	d109      	bne.n	800c088 <__libc_init_array+0x24>
 800c074:	4d0b      	ldr	r5, [pc, #44]	@ (800c0a4 <__libc_init_array+0x40>)
 800c076:	4c0c      	ldr	r4, [pc, #48]	@ (800c0a8 <__libc_init_array+0x44>)
 800c078:	f003 fee0 	bl	800fe3c <_init>
 800c07c:	1b64      	subs	r4, r4, r5
 800c07e:	10a4      	asrs	r4, r4, #2
 800c080:	2600      	movs	r6, #0
 800c082:	42a6      	cmp	r6, r4
 800c084:	d105      	bne.n	800c092 <__libc_init_array+0x2e>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08c:	4798      	blx	r3
 800c08e:	3601      	adds	r6, #1
 800c090:	e7ee      	b.n	800c070 <__libc_init_array+0xc>
 800c092:	f855 3b04 	ldr.w	r3, [r5], #4
 800c096:	4798      	blx	r3
 800c098:	3601      	adds	r6, #1
 800c09a:	e7f2      	b.n	800c082 <__libc_init_array+0x1e>
 800c09c:	08010598 	.word	0x08010598
 800c0a0:	08010598 	.word	0x08010598
 800c0a4:	08010598 	.word	0x08010598
 800c0a8:	0801059c 	.word	0x0801059c

0800c0ac <__retarget_lock_init_recursive>:
 800c0ac:	4770      	bx	lr

0800c0ae <__retarget_lock_acquire_recursive>:
 800c0ae:	4770      	bx	lr

0800c0b0 <__retarget_lock_release_recursive>:
 800c0b0:	4770      	bx	lr

0800c0b2 <memcpy>:
 800c0b2:	440a      	add	r2, r1
 800c0b4:	4291      	cmp	r1, r2
 800c0b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0ba:	d100      	bne.n	800c0be <memcpy+0xc>
 800c0bc:	4770      	bx	lr
 800c0be:	b510      	push	{r4, lr}
 800c0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0c8:	4291      	cmp	r1, r2
 800c0ca:	d1f9      	bne.n	800c0c0 <memcpy+0xe>
 800c0cc:	bd10      	pop	{r4, pc}
	...

0800c0d0 <nanf>:
 800c0d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c0d8 <nanf+0x8>
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	7fc00000 	.word	0x7fc00000

0800c0dc <__assert_func>:
 800c0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0de:	4614      	mov	r4, r2
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b09      	ldr	r3, [pc, #36]	@ (800c108 <__assert_func+0x2c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	68d8      	ldr	r0, [r3, #12]
 800c0ea:	b954      	cbnz	r4, 800c102 <__assert_func+0x26>
 800c0ec:	4b07      	ldr	r3, [pc, #28]	@ (800c10c <__assert_func+0x30>)
 800c0ee:	461c      	mov	r4, r3
 800c0f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0f4:	9100      	str	r1, [sp, #0]
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	4905      	ldr	r1, [pc, #20]	@ (800c110 <__assert_func+0x34>)
 800c0fa:	f002 fc93 	bl	800ea24 <fiprintf>
 800c0fe:	f002 fce7 	bl	800ead0 <abort>
 800c102:	4b04      	ldr	r3, [pc, #16]	@ (800c114 <__assert_func+0x38>)
 800c104:	e7f4      	b.n	800c0f0 <__assert_func+0x14>
 800c106:	bf00      	nop
 800c108:	200000c0 	.word	0x200000c0
 800c10c:	08010160 	.word	0x08010160
 800c110:	08010132 	.word	0x08010132
 800c114:	08010125 	.word	0x08010125

0800c118 <quorem>:
 800c118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	6903      	ldr	r3, [r0, #16]
 800c11e:	690c      	ldr	r4, [r1, #16]
 800c120:	42a3      	cmp	r3, r4
 800c122:	4607      	mov	r7, r0
 800c124:	db7e      	blt.n	800c224 <quorem+0x10c>
 800c126:	3c01      	subs	r4, #1
 800c128:	f101 0814 	add.w	r8, r1, #20
 800c12c:	00a3      	lsls	r3, r4, #2
 800c12e:	f100 0514 	add.w	r5, r0, #20
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c13e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c142:	3301      	adds	r3, #1
 800c144:	429a      	cmp	r2, r3
 800c146:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c14a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c14e:	d32e      	bcc.n	800c1ae <quorem+0x96>
 800c150:	f04f 0a00 	mov.w	sl, #0
 800c154:	46c4      	mov	ip, r8
 800c156:	46ae      	mov	lr, r5
 800c158:	46d3      	mov	fp, sl
 800c15a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c15e:	b298      	uxth	r0, r3
 800c160:	fb06 a000 	mla	r0, r6, r0, sl
 800c164:	0c02      	lsrs	r2, r0, #16
 800c166:	0c1b      	lsrs	r3, r3, #16
 800c168:	fb06 2303 	mla	r3, r6, r3, r2
 800c16c:	f8de 2000 	ldr.w	r2, [lr]
 800c170:	b280      	uxth	r0, r0
 800c172:	b292      	uxth	r2, r2
 800c174:	1a12      	subs	r2, r2, r0
 800c176:	445a      	add	r2, fp
 800c178:	f8de 0000 	ldr.w	r0, [lr]
 800c17c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c180:	b29b      	uxth	r3, r3
 800c182:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c186:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c18a:	b292      	uxth	r2, r2
 800c18c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c190:	45e1      	cmp	r9, ip
 800c192:	f84e 2b04 	str.w	r2, [lr], #4
 800c196:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c19a:	d2de      	bcs.n	800c15a <quorem+0x42>
 800c19c:	9b00      	ldr	r3, [sp, #0]
 800c19e:	58eb      	ldr	r3, [r5, r3]
 800c1a0:	b92b      	cbnz	r3, 800c1ae <quorem+0x96>
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	3b04      	subs	r3, #4
 800c1a6:	429d      	cmp	r5, r3
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	d32f      	bcc.n	800c20c <quorem+0xf4>
 800c1ac:	613c      	str	r4, [r7, #16]
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f001 f9c2 	bl	800d538 <__mcmp>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	db25      	blt.n	800c204 <quorem+0xec>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c1c0:	f8d1 c000 	ldr.w	ip, [r1]
 800c1c4:	fa1f fe82 	uxth.w	lr, r2
 800c1c8:	fa1f f38c 	uxth.w	r3, ip
 800c1cc:	eba3 030e 	sub.w	r3, r3, lr
 800c1d0:	4403      	add	r3, r0
 800c1d2:	0c12      	lsrs	r2, r2, #16
 800c1d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c1d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1e2:	45c1      	cmp	r9, r8
 800c1e4:	f841 3b04 	str.w	r3, [r1], #4
 800c1e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c1ec:	d2e6      	bcs.n	800c1bc <quorem+0xa4>
 800c1ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1f6:	b922      	cbnz	r2, 800c202 <quorem+0xea>
 800c1f8:	3b04      	subs	r3, #4
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	d30b      	bcc.n	800c218 <quorem+0x100>
 800c200:	613c      	str	r4, [r7, #16]
 800c202:	3601      	adds	r6, #1
 800c204:	4630      	mov	r0, r6
 800c206:	b003      	add	sp, #12
 800c208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20c:	6812      	ldr	r2, [r2, #0]
 800c20e:	3b04      	subs	r3, #4
 800c210:	2a00      	cmp	r2, #0
 800c212:	d1cb      	bne.n	800c1ac <quorem+0x94>
 800c214:	3c01      	subs	r4, #1
 800c216:	e7c6      	b.n	800c1a6 <quorem+0x8e>
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	3b04      	subs	r3, #4
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d1ef      	bne.n	800c200 <quorem+0xe8>
 800c220:	3c01      	subs	r4, #1
 800c222:	e7ea      	b.n	800c1fa <quorem+0xe2>
 800c224:	2000      	movs	r0, #0
 800c226:	e7ee      	b.n	800c206 <quorem+0xee>

0800c228 <_dtoa_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	69c7      	ldr	r7, [r0, #28]
 800c22e:	b099      	sub	sp, #100	@ 0x64
 800c230:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c234:	ec55 4b10 	vmov	r4, r5, d0
 800c238:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c23a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c23c:	4683      	mov	fp, r0
 800c23e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c240:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c242:	b97f      	cbnz	r7, 800c264 <_dtoa_r+0x3c>
 800c244:	2010      	movs	r0, #16
 800c246:	f000 fdfd 	bl	800ce44 <malloc>
 800c24a:	4602      	mov	r2, r0
 800c24c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c250:	b920      	cbnz	r0, 800c25c <_dtoa_r+0x34>
 800c252:	4ba7      	ldr	r3, [pc, #668]	@ (800c4f0 <_dtoa_r+0x2c8>)
 800c254:	21ef      	movs	r1, #239	@ 0xef
 800c256:	48a7      	ldr	r0, [pc, #668]	@ (800c4f4 <_dtoa_r+0x2cc>)
 800c258:	f7ff ff40 	bl	800c0dc <__assert_func>
 800c25c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c260:	6007      	str	r7, [r0, #0]
 800c262:	60c7      	str	r7, [r0, #12]
 800c264:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	b159      	cbz	r1, 800c284 <_dtoa_r+0x5c>
 800c26c:	685a      	ldr	r2, [r3, #4]
 800c26e:	604a      	str	r2, [r1, #4]
 800c270:	2301      	movs	r3, #1
 800c272:	4093      	lsls	r3, r2
 800c274:	608b      	str	r3, [r1, #8]
 800c276:	4658      	mov	r0, fp
 800c278:	f000 feda 	bl	800d030 <_Bfree>
 800c27c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	1e2b      	subs	r3, r5, #0
 800c286:	bfb9      	ittee	lt
 800c288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c28c:	9303      	strlt	r3, [sp, #12]
 800c28e:	2300      	movge	r3, #0
 800c290:	6033      	strge	r3, [r6, #0]
 800c292:	9f03      	ldr	r7, [sp, #12]
 800c294:	4b98      	ldr	r3, [pc, #608]	@ (800c4f8 <_dtoa_r+0x2d0>)
 800c296:	bfbc      	itt	lt
 800c298:	2201      	movlt	r2, #1
 800c29a:	6032      	strlt	r2, [r6, #0]
 800c29c:	43bb      	bics	r3, r7
 800c29e:	d112      	bne.n	800c2c6 <_dtoa_r+0x9e>
 800c2a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2ac:	4323      	orrs	r3, r4
 800c2ae:	f000 854d 	beq.w	800cd4c <_dtoa_r+0xb24>
 800c2b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c50c <_dtoa_r+0x2e4>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 854f 	beq.w	800cd5c <_dtoa_r+0xb34>
 800c2be:	f10a 0303 	add.w	r3, sl, #3
 800c2c2:	f000 bd49 	b.w	800cd58 <_dtoa_r+0xb30>
 800c2c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	ec51 0b17 	vmov	r0, r1, d7
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c2d6:	f7f4 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 800c2da:	4680      	mov	r8, r0
 800c2dc:	b158      	cbz	r0, 800c2f6 <_dtoa_r+0xce>
 800c2de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	6013      	str	r3, [r2, #0]
 800c2e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2e6:	b113      	cbz	r3, 800c2ee <_dtoa_r+0xc6>
 800c2e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c2ea:	4b84      	ldr	r3, [pc, #528]	@ (800c4fc <_dtoa_r+0x2d4>)
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c510 <_dtoa_r+0x2e8>
 800c2f2:	f000 bd33 	b.w	800cd5c <_dtoa_r+0xb34>
 800c2f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2fa:	aa16      	add	r2, sp, #88	@ 0x58
 800c2fc:	a917      	add	r1, sp, #92	@ 0x5c
 800c2fe:	4658      	mov	r0, fp
 800c300:	f001 fa3a 	bl	800d778 <__d2b>
 800c304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c308:	4681      	mov	r9, r0
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	d077      	beq.n	800c3fe <_dtoa_r+0x1d6>
 800c30e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c310:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c31c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c328:	4619      	mov	r1, r3
 800c32a:	2200      	movs	r2, #0
 800c32c:	4b74      	ldr	r3, [pc, #464]	@ (800c500 <_dtoa_r+0x2d8>)
 800c32e:	f7f3 ffcb 	bl	80002c8 <__aeabi_dsub>
 800c332:	a369      	add	r3, pc, #420	@ (adr r3, 800c4d8 <_dtoa_r+0x2b0>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f4 f97e 	bl	8000638 <__aeabi_dmul>
 800c33c:	a368      	add	r3, pc, #416	@ (adr r3, 800c4e0 <_dtoa_r+0x2b8>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f3 ffc3 	bl	80002cc <__adddf3>
 800c346:	4604      	mov	r4, r0
 800c348:	4630      	mov	r0, r6
 800c34a:	460d      	mov	r5, r1
 800c34c:	f7f4 f90a 	bl	8000564 <__aeabi_i2d>
 800c350:	a365      	add	r3, pc, #404	@ (adr r3, 800c4e8 <_dtoa_r+0x2c0>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f4 f96f 	bl	8000638 <__aeabi_dmul>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4620      	mov	r0, r4
 800c360:	4629      	mov	r1, r5
 800c362:	f7f3 ffb3 	bl	80002cc <__adddf3>
 800c366:	4604      	mov	r4, r0
 800c368:	460d      	mov	r5, r1
 800c36a:	f7f4 fc15 	bl	8000b98 <__aeabi_d2iz>
 800c36e:	2200      	movs	r2, #0
 800c370:	4607      	mov	r7, r0
 800c372:	2300      	movs	r3, #0
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f7f4 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800c37c:	b140      	cbz	r0, 800c390 <_dtoa_r+0x168>
 800c37e:	4638      	mov	r0, r7
 800c380:	f7f4 f8f0 	bl	8000564 <__aeabi_i2d>
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	f7f4 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800c38c:	b900      	cbnz	r0, 800c390 <_dtoa_r+0x168>
 800c38e:	3f01      	subs	r7, #1
 800c390:	2f16      	cmp	r7, #22
 800c392:	d851      	bhi.n	800c438 <_dtoa_r+0x210>
 800c394:	4b5b      	ldr	r3, [pc, #364]	@ (800c504 <_dtoa_r+0x2dc>)
 800c396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3a2:	f7f4 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d048      	beq.n	800c43c <_dtoa_r+0x214>
 800c3aa:	3f01      	subs	r7, #1
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3b2:	1b9b      	subs	r3, r3, r6
 800c3b4:	1e5a      	subs	r2, r3, #1
 800c3b6:	bf44      	itt	mi
 800c3b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c3bc:	2300      	movmi	r3, #0
 800c3be:	9208      	str	r2, [sp, #32]
 800c3c0:	bf54      	ite	pl
 800c3c2:	f04f 0800 	movpl.w	r8, #0
 800c3c6:	9308      	strmi	r3, [sp, #32]
 800c3c8:	2f00      	cmp	r7, #0
 800c3ca:	db39      	blt.n	800c440 <_dtoa_r+0x218>
 800c3cc:	9b08      	ldr	r3, [sp, #32]
 800c3ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c3d0:	443b      	add	r3, r7
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3da:	2b09      	cmp	r3, #9
 800c3dc:	d864      	bhi.n	800c4a8 <_dtoa_r+0x280>
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	bfc4      	itt	gt
 800c3e2:	3b04      	subgt	r3, #4
 800c3e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e8:	f1a3 0302 	sub.w	r3, r3, #2
 800c3ec:	bfcc      	ite	gt
 800c3ee:	2400      	movgt	r4, #0
 800c3f0:	2401      	movle	r4, #1
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d863      	bhi.n	800c4be <_dtoa_r+0x296>
 800c3f6:	e8df f003 	tbb	[pc, r3]
 800c3fa:	372a      	.short	0x372a
 800c3fc:	5535      	.short	0x5535
 800c3fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c402:	441e      	add	r6, r3
 800c404:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c408:	2b20      	cmp	r3, #32
 800c40a:	bfc1      	itttt	gt
 800c40c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c410:	409f      	lslgt	r7, r3
 800c412:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c416:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c41a:	bfd6      	itet	le
 800c41c:	f1c3 0320 	rsble	r3, r3, #32
 800c420:	ea47 0003 	orrgt.w	r0, r7, r3
 800c424:	fa04 f003 	lslle.w	r0, r4, r3
 800c428:	f7f4 f88c 	bl	8000544 <__aeabi_ui2d>
 800c42c:	2201      	movs	r2, #1
 800c42e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c432:	3e01      	subs	r6, #1
 800c434:	9214      	str	r2, [sp, #80]	@ 0x50
 800c436:	e777      	b.n	800c328 <_dtoa_r+0x100>
 800c438:	2301      	movs	r3, #1
 800c43a:	e7b8      	b.n	800c3ae <_dtoa_r+0x186>
 800c43c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c43e:	e7b7      	b.n	800c3b0 <_dtoa_r+0x188>
 800c440:	427b      	negs	r3, r7
 800c442:	930a      	str	r3, [sp, #40]	@ 0x28
 800c444:	2300      	movs	r3, #0
 800c446:	eba8 0807 	sub.w	r8, r8, r7
 800c44a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c44c:	e7c4      	b.n	800c3d8 <_dtoa_r+0x1b0>
 800c44e:	2300      	movs	r3, #0
 800c450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc35      	bgt.n	800c4c4 <_dtoa_r+0x29c>
 800c458:	2301      	movs	r3, #1
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	461a      	mov	r2, r3
 800c460:	920e      	str	r2, [sp, #56]	@ 0x38
 800c462:	e00b      	b.n	800c47c <_dtoa_r+0x254>
 800c464:	2301      	movs	r3, #1
 800c466:	e7f3      	b.n	800c450 <_dtoa_r+0x228>
 800c468:	2300      	movs	r3, #0
 800c46a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c46e:	18fb      	adds	r3, r7, r3
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	3301      	adds	r3, #1
 800c474:	2b01      	cmp	r3, #1
 800c476:	9307      	str	r3, [sp, #28]
 800c478:	bfb8      	it	lt
 800c47a:	2301      	movlt	r3, #1
 800c47c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c480:	2100      	movs	r1, #0
 800c482:	2204      	movs	r2, #4
 800c484:	f102 0514 	add.w	r5, r2, #20
 800c488:	429d      	cmp	r5, r3
 800c48a:	d91f      	bls.n	800c4cc <_dtoa_r+0x2a4>
 800c48c:	6041      	str	r1, [r0, #4]
 800c48e:	4658      	mov	r0, fp
 800c490:	f000 fd8e 	bl	800cfb0 <_Balloc>
 800c494:	4682      	mov	sl, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	d13c      	bne.n	800c514 <_dtoa_r+0x2ec>
 800c49a:	4b1b      	ldr	r3, [pc, #108]	@ (800c508 <_dtoa_r+0x2e0>)
 800c49c:	4602      	mov	r2, r0
 800c49e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c4a2:	e6d8      	b.n	800c256 <_dtoa_r+0x2e>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e7e0      	b.n	800c46a <_dtoa_r+0x242>
 800c4a8:	2401      	movs	r4, #1
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	9307      	str	r3, [sp, #28]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2312      	movs	r3, #18
 800c4bc:	e7d0      	b.n	800c460 <_dtoa_r+0x238>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4c2:	e7f5      	b.n	800c4b0 <_dtoa_r+0x288>
 800c4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	9307      	str	r3, [sp, #28]
 800c4ca:	e7d7      	b.n	800c47c <_dtoa_r+0x254>
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	0052      	lsls	r2, r2, #1
 800c4d0:	e7d8      	b.n	800c484 <_dtoa_r+0x25c>
 800c4d2:	bf00      	nop
 800c4d4:	f3af 8000 	nop.w
 800c4d8:	636f4361 	.word	0x636f4361
 800c4dc:	3fd287a7 	.word	0x3fd287a7
 800c4e0:	8b60c8b3 	.word	0x8b60c8b3
 800c4e4:	3fc68a28 	.word	0x3fc68a28
 800c4e8:	509f79fb 	.word	0x509f79fb
 800c4ec:	3fd34413 	.word	0x3fd34413
 800c4f0:	0801016e 	.word	0x0801016e
 800c4f4:	08010185 	.word	0x08010185
 800c4f8:	7ff00000 	.word	0x7ff00000
 800c4fc:	080100fd 	.word	0x080100fd
 800c500:	3ff80000 	.word	0x3ff80000
 800c504:	08010280 	.word	0x08010280
 800c508:	080101dd 	.word	0x080101dd
 800c50c:	0801016a 	.word	0x0801016a
 800c510:	080100fc 	.word	0x080100fc
 800c514:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c518:	6018      	str	r0, [r3, #0]
 800c51a:	9b07      	ldr	r3, [sp, #28]
 800c51c:	2b0e      	cmp	r3, #14
 800c51e:	f200 80a4 	bhi.w	800c66a <_dtoa_r+0x442>
 800c522:	2c00      	cmp	r4, #0
 800c524:	f000 80a1 	beq.w	800c66a <_dtoa_r+0x442>
 800c528:	2f00      	cmp	r7, #0
 800c52a:	dd33      	ble.n	800c594 <_dtoa_r+0x36c>
 800c52c:	4bad      	ldr	r3, [pc, #692]	@ (800c7e4 <_dtoa_r+0x5bc>)
 800c52e:	f007 020f 	and.w	r2, r7, #15
 800c532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c536:	ed93 7b00 	vldr	d7, [r3]
 800c53a:	05f8      	lsls	r0, r7, #23
 800c53c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c540:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c544:	d516      	bpl.n	800c574 <_dtoa_r+0x34c>
 800c546:	4ba8      	ldr	r3, [pc, #672]	@ (800c7e8 <_dtoa_r+0x5c0>)
 800c548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c54c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c550:	f7f4 f99c 	bl	800088c <__aeabi_ddiv>
 800c554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c558:	f004 040f 	and.w	r4, r4, #15
 800c55c:	2603      	movs	r6, #3
 800c55e:	4da2      	ldr	r5, [pc, #648]	@ (800c7e8 <_dtoa_r+0x5c0>)
 800c560:	b954      	cbnz	r4, 800c578 <_dtoa_r+0x350>
 800c562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c56a:	f7f4 f98f 	bl	800088c <__aeabi_ddiv>
 800c56e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c572:	e028      	b.n	800c5c6 <_dtoa_r+0x39e>
 800c574:	2602      	movs	r6, #2
 800c576:	e7f2      	b.n	800c55e <_dtoa_r+0x336>
 800c578:	07e1      	lsls	r1, r4, #31
 800c57a:	d508      	bpl.n	800c58e <_dtoa_r+0x366>
 800c57c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c580:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c584:	f7f4 f858 	bl	8000638 <__aeabi_dmul>
 800c588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c58c:	3601      	adds	r6, #1
 800c58e:	1064      	asrs	r4, r4, #1
 800c590:	3508      	adds	r5, #8
 800c592:	e7e5      	b.n	800c560 <_dtoa_r+0x338>
 800c594:	f000 80d2 	beq.w	800c73c <_dtoa_r+0x514>
 800c598:	427c      	negs	r4, r7
 800c59a:	4b92      	ldr	r3, [pc, #584]	@ (800c7e4 <_dtoa_r+0x5bc>)
 800c59c:	4d92      	ldr	r5, [pc, #584]	@ (800c7e8 <_dtoa_r+0x5c0>)
 800c59e:	f004 020f 	and.w	r2, r4, #15
 800c5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5ae:	f7f4 f843 	bl	8000638 <__aeabi_dmul>
 800c5b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5b6:	1124      	asrs	r4, r4, #4
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	2602      	movs	r6, #2
 800c5bc:	2c00      	cmp	r4, #0
 800c5be:	f040 80b2 	bne.w	800c726 <_dtoa_r+0x4fe>
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1d3      	bne.n	800c56e <_dtoa_r+0x346>
 800c5c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c5c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 80b7 	beq.w	800c740 <_dtoa_r+0x518>
 800c5d2:	4b86      	ldr	r3, [pc, #536]	@ (800c7ec <_dtoa_r+0x5c4>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	4629      	mov	r1, r5
 800c5da:	f7f4 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f000 80ae 	beq.w	800c740 <_dtoa_r+0x518>
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80aa 	beq.w	800c740 <_dtoa_r+0x518>
 800c5ec:	9b00      	ldr	r3, [sp, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	dd37      	ble.n	800c662 <_dtoa_r+0x43a>
 800c5f2:	1e7b      	subs	r3, r7, #1
 800c5f4:	9304      	str	r3, [sp, #16]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4b7d      	ldr	r3, [pc, #500]	@ (800c7f0 <_dtoa_r+0x5c8>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	f7f4 f81b 	bl	8000638 <__aeabi_dmul>
 800c602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c606:	9c00      	ldr	r4, [sp, #0]
 800c608:	3601      	adds	r6, #1
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7f3 ffaa 	bl	8000564 <__aeabi_i2d>
 800c610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c614:	f7f4 f810 	bl	8000638 <__aeabi_dmul>
 800c618:	4b76      	ldr	r3, [pc, #472]	@ (800c7f4 <_dtoa_r+0x5cc>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	f7f3 fe56 	bl	80002cc <__adddf3>
 800c620:	4605      	mov	r5, r0
 800c622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c626:	2c00      	cmp	r4, #0
 800c628:	f040 808d 	bne.w	800c746 <_dtoa_r+0x51e>
 800c62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c630:	4b71      	ldr	r3, [pc, #452]	@ (800c7f8 <_dtoa_r+0x5d0>)
 800c632:	2200      	movs	r2, #0
 800c634:	f7f3 fe48 	bl	80002c8 <__aeabi_dsub>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c640:	462a      	mov	r2, r5
 800c642:	4633      	mov	r3, r6
 800c644:	f7f4 fa88 	bl	8000b58 <__aeabi_dcmpgt>
 800c648:	2800      	cmp	r0, #0
 800c64a:	f040 828b 	bne.w	800cb64 <_dtoa_r+0x93c>
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	462a      	mov	r2, r5
 800c654:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c658:	f7f4 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	f040 8128 	bne.w	800c8b2 <_dtoa_r+0x68a>
 800c662:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c66a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f2c0 815a 	blt.w	800c926 <_dtoa_r+0x6fe>
 800c672:	2f0e      	cmp	r7, #14
 800c674:	f300 8157 	bgt.w	800c926 <_dtoa_r+0x6fe>
 800c678:	4b5a      	ldr	r3, [pc, #360]	@ (800c7e4 <_dtoa_r+0x5bc>)
 800c67a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c67e:	ed93 7b00 	vldr	d7, [r3]
 800c682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c684:	2b00      	cmp	r3, #0
 800c686:	ed8d 7b00 	vstr	d7, [sp]
 800c68a:	da03      	bge.n	800c694 <_dtoa_r+0x46c>
 800c68c:	9b07      	ldr	r3, [sp, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f340 8101 	ble.w	800c896 <_dtoa_r+0x66e>
 800c694:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c698:	4656      	mov	r6, sl
 800c69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f4 f8f3 	bl	800088c <__aeabi_ddiv>
 800c6a6:	f7f4 fa77 	bl	8000b98 <__aeabi_d2iz>
 800c6aa:	4680      	mov	r8, r0
 800c6ac:	f7f3 ff5a 	bl	8000564 <__aeabi_i2d>
 800c6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b4:	f7f3 ffc0 	bl	8000638 <__aeabi_dmul>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4620      	mov	r0, r4
 800c6be:	4629      	mov	r1, r5
 800c6c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c6c4:	f7f3 fe00 	bl	80002c8 <__aeabi_dsub>
 800c6c8:	f806 4b01 	strb.w	r4, [r6], #1
 800c6cc:	9d07      	ldr	r5, [sp, #28]
 800c6ce:	eba6 040a 	sub.w	r4, r6, sl
 800c6d2:	42a5      	cmp	r5, r4
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	f040 8117 	bne.w	800c90a <_dtoa_r+0x6e2>
 800c6dc:	f7f3 fdf6 	bl	80002cc <__adddf3>
 800c6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	460d      	mov	r5, r1
 800c6e8:	f7f4 fa36 	bl	8000b58 <__aeabi_dcmpgt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f040 80f9 	bne.w	800c8e4 <_dtoa_r+0x6bc>
 800c6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f7f4 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 800c6fe:	b118      	cbz	r0, 800c708 <_dtoa_r+0x4e0>
 800c700:	f018 0f01 	tst.w	r8, #1
 800c704:	f040 80ee 	bne.w	800c8e4 <_dtoa_r+0x6bc>
 800c708:	4649      	mov	r1, r9
 800c70a:	4658      	mov	r0, fp
 800c70c:	f000 fc90 	bl	800d030 <_Bfree>
 800c710:	2300      	movs	r3, #0
 800c712:	7033      	strb	r3, [r6, #0]
 800c714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c716:	3701      	adds	r7, #1
 800c718:	601f      	str	r7, [r3, #0]
 800c71a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 831d 	beq.w	800cd5c <_dtoa_r+0xb34>
 800c722:	601e      	str	r6, [r3, #0]
 800c724:	e31a      	b.n	800cd5c <_dtoa_r+0xb34>
 800c726:	07e2      	lsls	r2, r4, #31
 800c728:	d505      	bpl.n	800c736 <_dtoa_r+0x50e>
 800c72a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c72e:	f7f3 ff83 	bl	8000638 <__aeabi_dmul>
 800c732:	3601      	adds	r6, #1
 800c734:	2301      	movs	r3, #1
 800c736:	1064      	asrs	r4, r4, #1
 800c738:	3508      	adds	r5, #8
 800c73a:	e73f      	b.n	800c5bc <_dtoa_r+0x394>
 800c73c:	2602      	movs	r6, #2
 800c73e:	e742      	b.n	800c5c6 <_dtoa_r+0x39e>
 800c740:	9c07      	ldr	r4, [sp, #28]
 800c742:	9704      	str	r7, [sp, #16]
 800c744:	e761      	b.n	800c60a <_dtoa_r+0x3e2>
 800c746:	4b27      	ldr	r3, [pc, #156]	@ (800c7e4 <_dtoa_r+0x5bc>)
 800c748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c74a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c74e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c752:	4454      	add	r4, sl
 800c754:	2900      	cmp	r1, #0
 800c756:	d053      	beq.n	800c800 <_dtoa_r+0x5d8>
 800c758:	4928      	ldr	r1, [pc, #160]	@ (800c7fc <_dtoa_r+0x5d4>)
 800c75a:	2000      	movs	r0, #0
 800c75c:	f7f4 f896 	bl	800088c <__aeabi_ddiv>
 800c760:	4633      	mov	r3, r6
 800c762:	462a      	mov	r2, r5
 800c764:	f7f3 fdb0 	bl	80002c8 <__aeabi_dsub>
 800c768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c76c:	4656      	mov	r6, sl
 800c76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c772:	f7f4 fa11 	bl	8000b98 <__aeabi_d2iz>
 800c776:	4605      	mov	r5, r0
 800c778:	f7f3 fef4 	bl	8000564 <__aeabi_i2d>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c784:	f7f3 fda0 	bl	80002c8 <__aeabi_dsub>
 800c788:	3530      	adds	r5, #48	@ 0x30
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c792:	f806 5b01 	strb.w	r5, [r6], #1
 800c796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c79a:	f7f4 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d171      	bne.n	800c886 <_dtoa_r+0x65e>
 800c7a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7a6:	4911      	ldr	r1, [pc, #68]	@ (800c7ec <_dtoa_r+0x5c4>)
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	f7f3 fd8d 	bl	80002c8 <__aeabi_dsub>
 800c7ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c7b2:	f7f4 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f040 8095 	bne.w	800c8e6 <_dtoa_r+0x6be>
 800c7bc:	42a6      	cmp	r6, r4
 800c7be:	f43f af50 	beq.w	800c662 <_dtoa_r+0x43a>
 800c7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c7f0 <_dtoa_r+0x5c8>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f7f3 ff35 	bl	8000638 <__aeabi_dmul>
 800c7ce:	4b08      	ldr	r3, [pc, #32]	@ (800c7f0 <_dtoa_r+0x5c8>)
 800c7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7da:	f7f3 ff2d 	bl	8000638 <__aeabi_dmul>
 800c7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e2:	e7c4      	b.n	800c76e <_dtoa_r+0x546>
 800c7e4:	08010280 	.word	0x08010280
 800c7e8:	08010258 	.word	0x08010258
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	40240000 	.word	0x40240000
 800c7f4:	401c0000 	.word	0x401c0000
 800c7f8:	40140000 	.word	0x40140000
 800c7fc:	3fe00000 	.word	0x3fe00000
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	f7f3 ff18 	bl	8000638 <__aeabi_dmul>
 800c808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c80c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c80e:	4656      	mov	r6, sl
 800c810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c814:	f7f4 f9c0 	bl	8000b98 <__aeabi_d2iz>
 800c818:	4605      	mov	r5, r0
 800c81a:	f7f3 fea3 	bl	8000564 <__aeabi_i2d>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c826:	f7f3 fd4f 	bl	80002c8 <__aeabi_dsub>
 800c82a:	3530      	adds	r5, #48	@ 0x30
 800c82c:	f806 5b01 	strb.w	r5, [r6], #1
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	42a6      	cmp	r6, r4
 800c836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c83a:	f04f 0200 	mov.w	r2, #0
 800c83e:	d124      	bne.n	800c88a <_dtoa_r+0x662>
 800c840:	4bac      	ldr	r3, [pc, #688]	@ (800caf4 <_dtoa_r+0x8cc>)
 800c842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c846:	f7f3 fd41 	bl	80002cc <__adddf3>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c852:	f7f4 f981 	bl	8000b58 <__aeabi_dcmpgt>
 800c856:	2800      	cmp	r0, #0
 800c858:	d145      	bne.n	800c8e6 <_dtoa_r+0x6be>
 800c85a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c85e:	49a5      	ldr	r1, [pc, #660]	@ (800caf4 <_dtoa_r+0x8cc>)
 800c860:	2000      	movs	r0, #0
 800c862:	f7f3 fd31 	bl	80002c8 <__aeabi_dsub>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c86e:	f7f4 f955 	bl	8000b1c <__aeabi_dcmplt>
 800c872:	2800      	cmp	r0, #0
 800c874:	f43f aef5 	beq.w	800c662 <_dtoa_r+0x43a>
 800c878:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c87a:	1e73      	subs	r3, r6, #1
 800c87c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c87e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c882:	2b30      	cmp	r3, #48	@ 0x30
 800c884:	d0f8      	beq.n	800c878 <_dtoa_r+0x650>
 800c886:	9f04      	ldr	r7, [sp, #16]
 800c888:	e73e      	b.n	800c708 <_dtoa_r+0x4e0>
 800c88a:	4b9b      	ldr	r3, [pc, #620]	@ (800caf8 <_dtoa_r+0x8d0>)
 800c88c:	f7f3 fed4 	bl	8000638 <__aeabi_dmul>
 800c890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c894:	e7bc      	b.n	800c810 <_dtoa_r+0x5e8>
 800c896:	d10c      	bne.n	800c8b2 <_dtoa_r+0x68a>
 800c898:	4b98      	ldr	r3, [pc, #608]	@ (800cafc <_dtoa_r+0x8d4>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8a0:	f7f3 feca 	bl	8000638 <__aeabi_dmul>
 800c8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a8:	f7f4 f94c 	bl	8000b44 <__aeabi_dcmpge>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	f000 8157 	beq.w	800cb60 <_dtoa_r+0x938>
 800c8b2:	2400      	movs	r4, #0
 800c8b4:	4625      	mov	r5, r4
 800c8b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b8:	43db      	mvns	r3, r3
 800c8ba:	9304      	str	r3, [sp, #16]
 800c8bc:	4656      	mov	r6, sl
 800c8be:	2700      	movs	r7, #0
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4658      	mov	r0, fp
 800c8c4:	f000 fbb4 	bl	800d030 <_Bfree>
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	d0dc      	beq.n	800c886 <_dtoa_r+0x65e>
 800c8cc:	b12f      	cbz	r7, 800c8da <_dtoa_r+0x6b2>
 800c8ce:	42af      	cmp	r7, r5
 800c8d0:	d003      	beq.n	800c8da <_dtoa_r+0x6b2>
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	f000 fbab 	bl	800d030 <_Bfree>
 800c8da:	4629      	mov	r1, r5
 800c8dc:	4658      	mov	r0, fp
 800c8de:	f000 fba7 	bl	800d030 <_Bfree>
 800c8e2:	e7d0      	b.n	800c886 <_dtoa_r+0x65e>
 800c8e4:	9704      	str	r7, [sp, #16]
 800c8e6:	4633      	mov	r3, r6
 800c8e8:	461e      	mov	r6, r3
 800c8ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ee:	2a39      	cmp	r2, #57	@ 0x39
 800c8f0:	d107      	bne.n	800c902 <_dtoa_r+0x6da>
 800c8f2:	459a      	cmp	sl, r3
 800c8f4:	d1f8      	bne.n	800c8e8 <_dtoa_r+0x6c0>
 800c8f6:	9a04      	ldr	r2, [sp, #16]
 800c8f8:	3201      	adds	r2, #1
 800c8fa:	9204      	str	r2, [sp, #16]
 800c8fc:	2230      	movs	r2, #48	@ 0x30
 800c8fe:	f88a 2000 	strb.w	r2, [sl]
 800c902:	781a      	ldrb	r2, [r3, #0]
 800c904:	3201      	adds	r2, #1
 800c906:	701a      	strb	r2, [r3, #0]
 800c908:	e7bd      	b.n	800c886 <_dtoa_r+0x65e>
 800c90a:	4b7b      	ldr	r3, [pc, #492]	@ (800caf8 <_dtoa_r+0x8d0>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	2200      	movs	r2, #0
 800c914:	2300      	movs	r3, #0
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7f4 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800c91e:	2800      	cmp	r0, #0
 800c920:	f43f aebb 	beq.w	800c69a <_dtoa_r+0x472>
 800c924:	e6f0      	b.n	800c708 <_dtoa_r+0x4e0>
 800c926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c928:	2a00      	cmp	r2, #0
 800c92a:	f000 80db 	beq.w	800cae4 <_dtoa_r+0x8bc>
 800c92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c930:	2a01      	cmp	r2, #1
 800c932:	f300 80bf 	bgt.w	800cab4 <_dtoa_r+0x88c>
 800c936:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c938:	2a00      	cmp	r2, #0
 800c93a:	f000 80b7 	beq.w	800caac <_dtoa_r+0x884>
 800c93e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c942:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c944:	4646      	mov	r6, r8
 800c946:	9a08      	ldr	r2, [sp, #32]
 800c948:	2101      	movs	r1, #1
 800c94a:	441a      	add	r2, r3
 800c94c:	4658      	mov	r0, fp
 800c94e:	4498      	add	r8, r3
 800c950:	9208      	str	r2, [sp, #32]
 800c952:	f000 fc6b 	bl	800d22c <__i2b>
 800c956:	4605      	mov	r5, r0
 800c958:	b15e      	cbz	r6, 800c972 <_dtoa_r+0x74a>
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dd08      	ble.n	800c972 <_dtoa_r+0x74a>
 800c960:	42b3      	cmp	r3, r6
 800c962:	9a08      	ldr	r2, [sp, #32]
 800c964:	bfa8      	it	ge
 800c966:	4633      	movge	r3, r6
 800c968:	eba8 0803 	sub.w	r8, r8, r3
 800c96c:	1af6      	subs	r6, r6, r3
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	9308      	str	r3, [sp, #32]
 800c972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c974:	b1f3      	cbz	r3, 800c9b4 <_dtoa_r+0x78c>
 800c976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 80b7 	beq.w	800caec <_dtoa_r+0x8c4>
 800c97e:	b18c      	cbz	r4, 800c9a4 <_dtoa_r+0x77c>
 800c980:	4629      	mov	r1, r5
 800c982:	4622      	mov	r2, r4
 800c984:	4658      	mov	r0, fp
 800c986:	f000 fd11 	bl	800d3ac <__pow5mult>
 800c98a:	464a      	mov	r2, r9
 800c98c:	4601      	mov	r1, r0
 800c98e:	4605      	mov	r5, r0
 800c990:	4658      	mov	r0, fp
 800c992:	f000 fc61 	bl	800d258 <__multiply>
 800c996:	4649      	mov	r1, r9
 800c998:	9004      	str	r0, [sp, #16]
 800c99a:	4658      	mov	r0, fp
 800c99c:	f000 fb48 	bl	800d030 <_Bfree>
 800c9a0:	9b04      	ldr	r3, [sp, #16]
 800c9a2:	4699      	mov	r9, r3
 800c9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9a6:	1b1a      	subs	r2, r3, r4
 800c9a8:	d004      	beq.n	800c9b4 <_dtoa_r+0x78c>
 800c9aa:	4649      	mov	r1, r9
 800c9ac:	4658      	mov	r0, fp
 800c9ae:	f000 fcfd 	bl	800d3ac <__pow5mult>
 800c9b2:	4681      	mov	r9, r0
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f000 fc38 	bl	800d22c <__i2b>
 800c9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9be:	4604      	mov	r4, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 81cf 	beq.w	800cd64 <_dtoa_r+0xb3c>
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	4658      	mov	r0, fp
 800c9cc:	f000 fcee 	bl	800d3ac <__pow5mult>
 800c9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	f300 8095 	bgt.w	800cb04 <_dtoa_r+0x8dc>
 800c9da:	9b02      	ldr	r3, [sp, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 8087 	bne.w	800caf0 <_dtoa_r+0x8c8>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f040 8089 	bne.w	800cb00 <_dtoa_r+0x8d8>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9f4:	0d1b      	lsrs	r3, r3, #20
 800c9f6:	051b      	lsls	r3, r3, #20
 800c9f8:	b12b      	cbz	r3, 800ca06 <_dtoa_r+0x7de>
 800c9fa:	9b08      	ldr	r3, [sp, #32]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	9308      	str	r3, [sp, #32]
 800ca00:	f108 0801 	add.w	r8, r8, #1
 800ca04:	2301      	movs	r3, #1
 800ca06:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 81b0 	beq.w	800cd70 <_dtoa_r+0xb48>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca16:	6918      	ldr	r0, [r3, #16]
 800ca18:	f000 fbbc 	bl	800d194 <__hi0bits>
 800ca1c:	f1c0 0020 	rsb	r0, r0, #32
 800ca20:	9b08      	ldr	r3, [sp, #32]
 800ca22:	4418      	add	r0, r3
 800ca24:	f010 001f 	ands.w	r0, r0, #31
 800ca28:	d077      	beq.n	800cb1a <_dtoa_r+0x8f2>
 800ca2a:	f1c0 0320 	rsb	r3, r0, #32
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	dd6b      	ble.n	800cb0a <_dtoa_r+0x8e2>
 800ca32:	9b08      	ldr	r3, [sp, #32]
 800ca34:	f1c0 001c 	rsb	r0, r0, #28
 800ca38:	4403      	add	r3, r0
 800ca3a:	4480      	add	r8, r0
 800ca3c:	4406      	add	r6, r0
 800ca3e:	9308      	str	r3, [sp, #32]
 800ca40:	f1b8 0f00 	cmp.w	r8, #0
 800ca44:	dd05      	ble.n	800ca52 <_dtoa_r+0x82a>
 800ca46:	4649      	mov	r1, r9
 800ca48:	4642      	mov	r2, r8
 800ca4a:	4658      	mov	r0, fp
 800ca4c:	f000 fd08 	bl	800d460 <__lshift>
 800ca50:	4681      	mov	r9, r0
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dd05      	ble.n	800ca64 <_dtoa_r+0x83c>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	4658      	mov	r0, fp
 800ca5e:	f000 fcff 	bl	800d460 <__lshift>
 800ca62:	4604      	mov	r4, r0
 800ca64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d059      	beq.n	800cb1e <_dtoa_r+0x8f6>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4648      	mov	r0, r9
 800ca6e:	f000 fd63 	bl	800d538 <__mcmp>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	da53      	bge.n	800cb1e <_dtoa_r+0x8f6>
 800ca76:	1e7b      	subs	r3, r7, #1
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	220a      	movs	r2, #10
 800ca80:	4658      	mov	r0, fp
 800ca82:	f000 faf7 	bl	800d074 <__multadd>
 800ca86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca88:	4681      	mov	r9, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 8172 	beq.w	800cd74 <_dtoa_r+0xb4c>
 800ca90:	2300      	movs	r3, #0
 800ca92:	4629      	mov	r1, r5
 800ca94:	220a      	movs	r2, #10
 800ca96:	4658      	mov	r0, fp
 800ca98:	f000 faec 	bl	800d074 <__multadd>
 800ca9c:	9b00      	ldr	r3, [sp, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	4605      	mov	r5, r0
 800caa2:	dc67      	bgt.n	800cb74 <_dtoa_r+0x94c>
 800caa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	dc41      	bgt.n	800cb2e <_dtoa_r+0x906>
 800caaa:	e063      	b.n	800cb74 <_dtoa_r+0x94c>
 800caac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800caae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cab2:	e746      	b.n	800c942 <_dtoa_r+0x71a>
 800cab4:	9b07      	ldr	r3, [sp, #28]
 800cab6:	1e5c      	subs	r4, r3, #1
 800cab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caba:	42a3      	cmp	r3, r4
 800cabc:	bfbf      	itttt	lt
 800cabe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cac0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cac2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cac4:	1ae3      	sublt	r3, r4, r3
 800cac6:	bfb4      	ite	lt
 800cac8:	18d2      	addlt	r2, r2, r3
 800caca:	1b1c      	subge	r4, r3, r4
 800cacc:	9b07      	ldr	r3, [sp, #28]
 800cace:	bfbc      	itt	lt
 800cad0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cad2:	2400      	movlt	r4, #0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	bfb5      	itete	lt
 800cad8:	eba8 0603 	sublt.w	r6, r8, r3
 800cadc:	9b07      	ldrge	r3, [sp, #28]
 800cade:	2300      	movlt	r3, #0
 800cae0:	4646      	movge	r6, r8
 800cae2:	e730      	b.n	800c946 <_dtoa_r+0x71e>
 800cae4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cae6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cae8:	4646      	mov	r6, r8
 800caea:	e735      	b.n	800c958 <_dtoa_r+0x730>
 800caec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800caee:	e75c      	b.n	800c9aa <_dtoa_r+0x782>
 800caf0:	2300      	movs	r3, #0
 800caf2:	e788      	b.n	800ca06 <_dtoa_r+0x7de>
 800caf4:	3fe00000 	.word	0x3fe00000
 800caf8:	40240000 	.word	0x40240000
 800cafc:	40140000 	.word	0x40140000
 800cb00:	9b02      	ldr	r3, [sp, #8]
 800cb02:	e780      	b.n	800ca06 <_dtoa_r+0x7de>
 800cb04:	2300      	movs	r3, #0
 800cb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb08:	e782      	b.n	800ca10 <_dtoa_r+0x7e8>
 800cb0a:	d099      	beq.n	800ca40 <_dtoa_r+0x818>
 800cb0c:	9a08      	ldr	r2, [sp, #32]
 800cb0e:	331c      	adds	r3, #28
 800cb10:	441a      	add	r2, r3
 800cb12:	4498      	add	r8, r3
 800cb14:	441e      	add	r6, r3
 800cb16:	9208      	str	r2, [sp, #32]
 800cb18:	e792      	b.n	800ca40 <_dtoa_r+0x818>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	e7f6      	b.n	800cb0c <_dtoa_r+0x8e4>
 800cb1e:	9b07      	ldr	r3, [sp, #28]
 800cb20:	9704      	str	r7, [sp, #16]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dc20      	bgt.n	800cb68 <_dtoa_r+0x940>
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	dd1e      	ble.n	800cb6c <_dtoa_r+0x944>
 800cb2e:	9b00      	ldr	r3, [sp, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f47f aec0 	bne.w	800c8b6 <_dtoa_r+0x68e>
 800cb36:	4621      	mov	r1, r4
 800cb38:	2205      	movs	r2, #5
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	f000 fa9a 	bl	800d074 <__multadd>
 800cb40:	4601      	mov	r1, r0
 800cb42:	4604      	mov	r4, r0
 800cb44:	4648      	mov	r0, r9
 800cb46:	f000 fcf7 	bl	800d538 <__mcmp>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	f77f aeb3 	ble.w	800c8b6 <_dtoa_r+0x68e>
 800cb50:	4656      	mov	r6, sl
 800cb52:	2331      	movs	r3, #49	@ 0x31
 800cb54:	f806 3b01 	strb.w	r3, [r6], #1
 800cb58:	9b04      	ldr	r3, [sp, #16]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	9304      	str	r3, [sp, #16]
 800cb5e:	e6ae      	b.n	800c8be <_dtoa_r+0x696>
 800cb60:	9c07      	ldr	r4, [sp, #28]
 800cb62:	9704      	str	r7, [sp, #16]
 800cb64:	4625      	mov	r5, r4
 800cb66:	e7f3      	b.n	800cb50 <_dtoa_r+0x928>
 800cb68:	9b07      	ldr	r3, [sp, #28]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8104 	beq.w	800cd7c <_dtoa_r+0xb54>
 800cb74:	2e00      	cmp	r6, #0
 800cb76:	dd05      	ble.n	800cb84 <_dtoa_r+0x95c>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4632      	mov	r2, r6
 800cb7c:	4658      	mov	r0, fp
 800cb7e:	f000 fc6f 	bl	800d460 <__lshift>
 800cb82:	4605      	mov	r5, r0
 800cb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d05a      	beq.n	800cc40 <_dtoa_r+0xa18>
 800cb8a:	6869      	ldr	r1, [r5, #4]
 800cb8c:	4658      	mov	r0, fp
 800cb8e:	f000 fa0f 	bl	800cfb0 <_Balloc>
 800cb92:	4606      	mov	r6, r0
 800cb94:	b928      	cbnz	r0, 800cba2 <_dtoa_r+0x97a>
 800cb96:	4b84      	ldr	r3, [pc, #528]	@ (800cda8 <_dtoa_r+0xb80>)
 800cb98:	4602      	mov	r2, r0
 800cb9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb9e:	f7ff bb5a 	b.w	800c256 <_dtoa_r+0x2e>
 800cba2:	692a      	ldr	r2, [r5, #16]
 800cba4:	3202      	adds	r2, #2
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	f105 010c 	add.w	r1, r5, #12
 800cbac:	300c      	adds	r0, #12
 800cbae:	f7ff fa80 	bl	800c0b2 <memcpy>
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	4658      	mov	r0, fp
 800cbb8:	f000 fc52 	bl	800d460 <__lshift>
 800cbbc:	f10a 0301 	add.w	r3, sl, #1
 800cbc0:	9307      	str	r3, [sp, #28]
 800cbc2:	9b00      	ldr	r3, [sp, #0]
 800cbc4:	4453      	add	r3, sl
 800cbc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbc8:	9b02      	ldr	r3, [sp, #8]
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	462f      	mov	r7, r5
 800cbd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	9b07      	ldr	r3, [sp, #28]
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	4648      	mov	r0, r9
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	f7ff fa9b 	bl	800c118 <quorem>
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	9002      	str	r0, [sp, #8]
 800cbe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbea:	4648      	mov	r0, r9
 800cbec:	f000 fca4 	bl	800d538 <__mcmp>
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	9008      	str	r0, [sp, #32]
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4658      	mov	r0, fp
 800cbf8:	f000 fcba 	bl	800d570 <__mdiff>
 800cbfc:	68c2      	ldr	r2, [r0, #12]
 800cbfe:	4606      	mov	r6, r0
 800cc00:	bb02      	cbnz	r2, 800cc44 <_dtoa_r+0xa1c>
 800cc02:	4601      	mov	r1, r0
 800cc04:	4648      	mov	r0, r9
 800cc06:	f000 fc97 	bl	800d538 <__mcmp>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	4631      	mov	r1, r6
 800cc0e:	4658      	mov	r0, fp
 800cc10:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc12:	f000 fa0d 	bl	800d030 <_Bfree>
 800cc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc1a:	9e07      	ldr	r6, [sp, #28]
 800cc1c:	ea43 0102 	orr.w	r1, r3, r2
 800cc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc22:	4319      	orrs	r1, r3
 800cc24:	d110      	bne.n	800cc48 <_dtoa_r+0xa20>
 800cc26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc2a:	d029      	beq.n	800cc80 <_dtoa_r+0xa58>
 800cc2c:	9b08      	ldr	r3, [sp, #32]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dd02      	ble.n	800cc38 <_dtoa_r+0xa10>
 800cc32:	9b02      	ldr	r3, [sp, #8]
 800cc34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cc38:	9b00      	ldr	r3, [sp, #0]
 800cc3a:	f883 8000 	strb.w	r8, [r3]
 800cc3e:	e63f      	b.n	800c8c0 <_dtoa_r+0x698>
 800cc40:	4628      	mov	r0, r5
 800cc42:	e7bb      	b.n	800cbbc <_dtoa_r+0x994>
 800cc44:	2201      	movs	r2, #1
 800cc46:	e7e1      	b.n	800cc0c <_dtoa_r+0x9e4>
 800cc48:	9b08      	ldr	r3, [sp, #32]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	db04      	blt.n	800cc58 <_dtoa_r+0xa30>
 800cc4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc50:	430b      	orrs	r3, r1
 800cc52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc54:	430b      	orrs	r3, r1
 800cc56:	d120      	bne.n	800cc9a <_dtoa_r+0xa72>
 800cc58:	2a00      	cmp	r2, #0
 800cc5a:	dded      	ble.n	800cc38 <_dtoa_r+0xa10>
 800cc5c:	4649      	mov	r1, r9
 800cc5e:	2201      	movs	r2, #1
 800cc60:	4658      	mov	r0, fp
 800cc62:	f000 fbfd 	bl	800d460 <__lshift>
 800cc66:	4621      	mov	r1, r4
 800cc68:	4681      	mov	r9, r0
 800cc6a:	f000 fc65 	bl	800d538 <__mcmp>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	dc03      	bgt.n	800cc7a <_dtoa_r+0xa52>
 800cc72:	d1e1      	bne.n	800cc38 <_dtoa_r+0xa10>
 800cc74:	f018 0f01 	tst.w	r8, #1
 800cc78:	d0de      	beq.n	800cc38 <_dtoa_r+0xa10>
 800cc7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc7e:	d1d8      	bne.n	800cc32 <_dtoa_r+0xa0a>
 800cc80:	9a00      	ldr	r2, [sp, #0]
 800cc82:	2339      	movs	r3, #57	@ 0x39
 800cc84:	7013      	strb	r3, [r2, #0]
 800cc86:	4633      	mov	r3, r6
 800cc88:	461e      	mov	r6, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc90:	2a39      	cmp	r2, #57	@ 0x39
 800cc92:	d052      	beq.n	800cd3a <_dtoa_r+0xb12>
 800cc94:	3201      	adds	r2, #1
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e612      	b.n	800c8c0 <_dtoa_r+0x698>
 800cc9a:	2a00      	cmp	r2, #0
 800cc9c:	dd07      	ble.n	800ccae <_dtoa_r+0xa86>
 800cc9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cca2:	d0ed      	beq.n	800cc80 <_dtoa_r+0xa58>
 800cca4:	9a00      	ldr	r2, [sp, #0]
 800cca6:	f108 0301 	add.w	r3, r8, #1
 800ccaa:	7013      	strb	r3, [r2, #0]
 800ccac:	e608      	b.n	800c8c0 <_dtoa_r+0x698>
 800ccae:	9b07      	ldr	r3, [sp, #28]
 800ccb0:	9a07      	ldr	r2, [sp, #28]
 800ccb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ccb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d028      	beq.n	800cd0e <_dtoa_r+0xae6>
 800ccbc:	4649      	mov	r1, r9
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	220a      	movs	r2, #10
 800ccc2:	4658      	mov	r0, fp
 800ccc4:	f000 f9d6 	bl	800d074 <__multadd>
 800ccc8:	42af      	cmp	r7, r5
 800ccca:	4681      	mov	r9, r0
 800cccc:	f04f 0300 	mov.w	r3, #0
 800ccd0:	f04f 020a 	mov.w	r2, #10
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	4658      	mov	r0, fp
 800ccd8:	d107      	bne.n	800ccea <_dtoa_r+0xac2>
 800ccda:	f000 f9cb 	bl	800d074 <__multadd>
 800ccde:	4607      	mov	r7, r0
 800cce0:	4605      	mov	r5, r0
 800cce2:	9b07      	ldr	r3, [sp, #28]
 800cce4:	3301      	adds	r3, #1
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	e774      	b.n	800cbd4 <_dtoa_r+0x9ac>
 800ccea:	f000 f9c3 	bl	800d074 <__multadd>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	220a      	movs	r2, #10
 800ccf6:	4658      	mov	r0, fp
 800ccf8:	f000 f9bc 	bl	800d074 <__multadd>
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	e7f0      	b.n	800cce2 <_dtoa_r+0xaba>
 800cd00:	9b00      	ldr	r3, [sp, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfcc      	ite	gt
 800cd06:	461e      	movgt	r6, r3
 800cd08:	2601      	movle	r6, #1
 800cd0a:	4456      	add	r6, sl
 800cd0c:	2700      	movs	r7, #0
 800cd0e:	4649      	mov	r1, r9
 800cd10:	2201      	movs	r2, #1
 800cd12:	4658      	mov	r0, fp
 800cd14:	f000 fba4 	bl	800d460 <__lshift>
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4681      	mov	r9, r0
 800cd1c:	f000 fc0c 	bl	800d538 <__mcmp>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	dcb0      	bgt.n	800cc86 <_dtoa_r+0xa5e>
 800cd24:	d102      	bne.n	800cd2c <_dtoa_r+0xb04>
 800cd26:	f018 0f01 	tst.w	r8, #1
 800cd2a:	d1ac      	bne.n	800cc86 <_dtoa_r+0xa5e>
 800cd2c:	4633      	mov	r3, r6
 800cd2e:	461e      	mov	r6, r3
 800cd30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd34:	2a30      	cmp	r2, #48	@ 0x30
 800cd36:	d0fa      	beq.n	800cd2e <_dtoa_r+0xb06>
 800cd38:	e5c2      	b.n	800c8c0 <_dtoa_r+0x698>
 800cd3a:	459a      	cmp	sl, r3
 800cd3c:	d1a4      	bne.n	800cc88 <_dtoa_r+0xa60>
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	3301      	adds	r3, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	2331      	movs	r3, #49	@ 0x31
 800cd46:	f88a 3000 	strb.w	r3, [sl]
 800cd4a:	e5b9      	b.n	800c8c0 <_dtoa_r+0x698>
 800cd4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cdac <_dtoa_r+0xb84>
 800cd52:	b11b      	cbz	r3, 800cd5c <_dtoa_r+0xb34>
 800cd54:	f10a 0308 	add.w	r3, sl, #8
 800cd58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	4650      	mov	r0, sl
 800cd5e:	b019      	add	sp, #100	@ 0x64
 800cd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	f77f ae37 	ble.w	800c9da <_dtoa_r+0x7b2>
 800cd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd70:	2001      	movs	r0, #1
 800cd72:	e655      	b.n	800ca20 <_dtoa_r+0x7f8>
 800cd74:	9b00      	ldr	r3, [sp, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f77f aed6 	ble.w	800cb28 <_dtoa_r+0x900>
 800cd7c:	4656      	mov	r6, sl
 800cd7e:	4621      	mov	r1, r4
 800cd80:	4648      	mov	r0, r9
 800cd82:	f7ff f9c9 	bl	800c118 <quorem>
 800cd86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd8a:	f806 8b01 	strb.w	r8, [r6], #1
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	eba6 020a 	sub.w	r2, r6, sl
 800cd94:	4293      	cmp	r3, r2
 800cd96:	ddb3      	ble.n	800cd00 <_dtoa_r+0xad8>
 800cd98:	4649      	mov	r1, r9
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	220a      	movs	r2, #10
 800cd9e:	4658      	mov	r0, fp
 800cda0:	f000 f968 	bl	800d074 <__multadd>
 800cda4:	4681      	mov	r9, r0
 800cda6:	e7ea      	b.n	800cd7e <_dtoa_r+0xb56>
 800cda8:	080101dd 	.word	0x080101dd
 800cdac:	08010161 	.word	0x08010161

0800cdb0 <_free_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	d041      	beq.n	800ce3c <_free_r+0x8c>
 800cdb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdbc:	1f0c      	subs	r4, r1, #4
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	bfb8      	it	lt
 800cdc2:	18e4      	addlt	r4, r4, r3
 800cdc4:	f000 f8e8 	bl	800cf98 <__malloc_lock>
 800cdc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce40 <_free_r+0x90>)
 800cdca:	6813      	ldr	r3, [r2, #0]
 800cdcc:	b933      	cbnz	r3, 800cddc <_free_r+0x2c>
 800cdce:	6063      	str	r3, [r4, #4]
 800cdd0:	6014      	str	r4, [r2, #0]
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdd8:	f000 b8e4 	b.w	800cfa4 <__malloc_unlock>
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	d908      	bls.n	800cdf2 <_free_r+0x42>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	1821      	adds	r1, r4, r0
 800cde4:	428b      	cmp	r3, r1
 800cde6:	bf01      	itttt	eq
 800cde8:	6819      	ldreq	r1, [r3, #0]
 800cdea:	685b      	ldreq	r3, [r3, #4]
 800cdec:	1809      	addeq	r1, r1, r0
 800cdee:	6021      	streq	r1, [r4, #0]
 800cdf0:	e7ed      	b.n	800cdce <_free_r+0x1e>
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	b10b      	cbz	r3, 800cdfc <_free_r+0x4c>
 800cdf8:	42a3      	cmp	r3, r4
 800cdfa:	d9fa      	bls.n	800cdf2 <_free_r+0x42>
 800cdfc:	6811      	ldr	r1, [r2, #0]
 800cdfe:	1850      	adds	r0, r2, r1
 800ce00:	42a0      	cmp	r0, r4
 800ce02:	d10b      	bne.n	800ce1c <_free_r+0x6c>
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	4401      	add	r1, r0
 800ce08:	1850      	adds	r0, r2, r1
 800ce0a:	4283      	cmp	r3, r0
 800ce0c:	6011      	str	r1, [r2, #0]
 800ce0e:	d1e0      	bne.n	800cdd2 <_free_r+0x22>
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	6053      	str	r3, [r2, #4]
 800ce16:	4408      	add	r0, r1
 800ce18:	6010      	str	r0, [r2, #0]
 800ce1a:	e7da      	b.n	800cdd2 <_free_r+0x22>
 800ce1c:	d902      	bls.n	800ce24 <_free_r+0x74>
 800ce1e:	230c      	movs	r3, #12
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	e7d6      	b.n	800cdd2 <_free_r+0x22>
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	1821      	adds	r1, r4, r0
 800ce28:	428b      	cmp	r3, r1
 800ce2a:	bf04      	itt	eq
 800ce2c:	6819      	ldreq	r1, [r3, #0]
 800ce2e:	685b      	ldreq	r3, [r3, #4]
 800ce30:	6063      	str	r3, [r4, #4]
 800ce32:	bf04      	itt	eq
 800ce34:	1809      	addeq	r1, r1, r0
 800ce36:	6021      	streq	r1, [r4, #0]
 800ce38:	6054      	str	r4, [r2, #4]
 800ce3a:	e7ca      	b.n	800cdd2 <_free_r+0x22>
 800ce3c:	bd38      	pop	{r3, r4, r5, pc}
 800ce3e:	bf00      	nop
 800ce40:	20005270 	.word	0x20005270

0800ce44 <malloc>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	@ (800ce50 <malloc+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f000 b825 	b.w	800ce98 <_malloc_r>
 800ce4e:	bf00      	nop
 800ce50:	200000c0 	.word	0x200000c0

0800ce54 <sbrk_aligned>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	4e0f      	ldr	r6, [pc, #60]	@ (800ce94 <sbrk_aligned+0x40>)
 800ce58:	460c      	mov	r4, r1
 800ce5a:	6831      	ldr	r1, [r6, #0]
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	b911      	cbnz	r1, 800ce66 <sbrk_aligned+0x12>
 800ce60:	f001 fe1e 	bl	800eaa0 <_sbrk_r>
 800ce64:	6030      	str	r0, [r6, #0]
 800ce66:	4621      	mov	r1, r4
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f001 fe19 	bl	800eaa0 <_sbrk_r>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d103      	bne.n	800ce7a <sbrk_aligned+0x26>
 800ce72:	f04f 34ff 	mov.w	r4, #4294967295
 800ce76:	4620      	mov	r0, r4
 800ce78:	bd70      	pop	{r4, r5, r6, pc}
 800ce7a:	1cc4      	adds	r4, r0, #3
 800ce7c:	f024 0403 	bic.w	r4, r4, #3
 800ce80:	42a0      	cmp	r0, r4
 800ce82:	d0f8      	beq.n	800ce76 <sbrk_aligned+0x22>
 800ce84:	1a21      	subs	r1, r4, r0
 800ce86:	4628      	mov	r0, r5
 800ce88:	f001 fe0a 	bl	800eaa0 <_sbrk_r>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d1f2      	bne.n	800ce76 <sbrk_aligned+0x22>
 800ce90:	e7ef      	b.n	800ce72 <sbrk_aligned+0x1e>
 800ce92:	bf00      	nop
 800ce94:	2000526c 	.word	0x2000526c

0800ce98 <_malloc_r>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	1ccd      	adds	r5, r1, #3
 800ce9e:	f025 0503 	bic.w	r5, r5, #3
 800cea2:	3508      	adds	r5, #8
 800cea4:	2d0c      	cmp	r5, #12
 800cea6:	bf38      	it	cc
 800cea8:	250c      	movcc	r5, #12
 800ceaa:	2d00      	cmp	r5, #0
 800ceac:	4606      	mov	r6, r0
 800ceae:	db01      	blt.n	800ceb4 <_malloc_r+0x1c>
 800ceb0:	42a9      	cmp	r1, r5
 800ceb2:	d904      	bls.n	800cebe <_malloc_r+0x26>
 800ceb4:	230c      	movs	r3, #12
 800ceb6:	6033      	str	r3, [r6, #0]
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf94 <_malloc_r+0xfc>
 800cec2:	f000 f869 	bl	800cf98 <__malloc_lock>
 800cec6:	f8d8 3000 	ldr.w	r3, [r8]
 800ceca:	461c      	mov	r4, r3
 800cecc:	bb44      	cbnz	r4, 800cf20 <_malloc_r+0x88>
 800cece:	4629      	mov	r1, r5
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff ffbf 	bl	800ce54 <sbrk_aligned>
 800ced6:	1c43      	adds	r3, r0, #1
 800ced8:	4604      	mov	r4, r0
 800ceda:	d158      	bne.n	800cf8e <_malloc_r+0xf6>
 800cedc:	f8d8 4000 	ldr.w	r4, [r8]
 800cee0:	4627      	mov	r7, r4
 800cee2:	2f00      	cmp	r7, #0
 800cee4:	d143      	bne.n	800cf6e <_malloc_r+0xd6>
 800cee6:	2c00      	cmp	r4, #0
 800cee8:	d04b      	beq.n	800cf82 <_malloc_r+0xea>
 800ceea:	6823      	ldr	r3, [r4, #0]
 800ceec:	4639      	mov	r1, r7
 800ceee:	4630      	mov	r0, r6
 800cef0:	eb04 0903 	add.w	r9, r4, r3
 800cef4:	f001 fdd4 	bl	800eaa0 <_sbrk_r>
 800cef8:	4581      	cmp	r9, r0
 800cefa:	d142      	bne.n	800cf82 <_malloc_r+0xea>
 800cefc:	6821      	ldr	r1, [r4, #0]
 800cefe:	1a6d      	subs	r5, r5, r1
 800cf00:	4629      	mov	r1, r5
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7ff ffa6 	bl	800ce54 <sbrk_aligned>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d03a      	beq.n	800cf82 <_malloc_r+0xea>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	442b      	add	r3, r5
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	f8d8 3000 	ldr.w	r3, [r8]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	bb62      	cbnz	r2, 800cf74 <_malloc_r+0xdc>
 800cf1a:	f8c8 7000 	str.w	r7, [r8]
 800cf1e:	e00f      	b.n	800cf40 <_malloc_r+0xa8>
 800cf20:	6822      	ldr	r2, [r4, #0]
 800cf22:	1b52      	subs	r2, r2, r5
 800cf24:	d420      	bmi.n	800cf68 <_malloc_r+0xd0>
 800cf26:	2a0b      	cmp	r2, #11
 800cf28:	d917      	bls.n	800cf5a <_malloc_r+0xc2>
 800cf2a:	1961      	adds	r1, r4, r5
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	6025      	str	r5, [r4, #0]
 800cf30:	bf18      	it	ne
 800cf32:	6059      	strne	r1, [r3, #4]
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	bf08      	it	eq
 800cf38:	f8c8 1000 	streq.w	r1, [r8]
 800cf3c:	5162      	str	r2, [r4, r5]
 800cf3e:	604b      	str	r3, [r1, #4]
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 f82f 	bl	800cfa4 <__malloc_unlock>
 800cf46:	f104 000b 	add.w	r0, r4, #11
 800cf4a:	1d23      	adds	r3, r4, #4
 800cf4c:	f020 0007 	bic.w	r0, r0, #7
 800cf50:	1ac2      	subs	r2, r0, r3
 800cf52:	bf1c      	itt	ne
 800cf54:	1a1b      	subne	r3, r3, r0
 800cf56:	50a3      	strne	r3, [r4, r2]
 800cf58:	e7af      	b.n	800ceba <_malloc_r+0x22>
 800cf5a:	6862      	ldr	r2, [r4, #4]
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	bf0c      	ite	eq
 800cf60:	f8c8 2000 	streq.w	r2, [r8]
 800cf64:	605a      	strne	r2, [r3, #4]
 800cf66:	e7eb      	b.n	800cf40 <_malloc_r+0xa8>
 800cf68:	4623      	mov	r3, r4
 800cf6a:	6864      	ldr	r4, [r4, #4]
 800cf6c:	e7ae      	b.n	800cecc <_malloc_r+0x34>
 800cf6e:	463c      	mov	r4, r7
 800cf70:	687f      	ldr	r7, [r7, #4]
 800cf72:	e7b6      	b.n	800cee2 <_malloc_r+0x4a>
 800cf74:	461a      	mov	r2, r3
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	d1fb      	bne.n	800cf74 <_malloc_r+0xdc>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6053      	str	r3, [r2, #4]
 800cf80:	e7de      	b.n	800cf40 <_malloc_r+0xa8>
 800cf82:	230c      	movs	r3, #12
 800cf84:	6033      	str	r3, [r6, #0]
 800cf86:	4630      	mov	r0, r6
 800cf88:	f000 f80c 	bl	800cfa4 <__malloc_unlock>
 800cf8c:	e794      	b.n	800ceb8 <_malloc_r+0x20>
 800cf8e:	6005      	str	r5, [r0, #0]
 800cf90:	e7d6      	b.n	800cf40 <_malloc_r+0xa8>
 800cf92:	bf00      	nop
 800cf94:	20005270 	.word	0x20005270

0800cf98 <__malloc_lock>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__malloc_lock+0x8>)
 800cf9a:	f7ff b888 	b.w	800c0ae <__retarget_lock_acquire_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	20005268 	.word	0x20005268

0800cfa4 <__malloc_unlock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	@ (800cfac <__malloc_unlock+0x8>)
 800cfa6:	f7ff b883 	b.w	800c0b0 <__retarget_lock_release_recursive>
 800cfaa:	bf00      	nop
 800cfac:	20005268 	.word	0x20005268

0800cfb0 <_Balloc>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	69c6      	ldr	r6, [r0, #28]
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	b976      	cbnz	r6, 800cfd8 <_Balloc+0x28>
 800cfba:	2010      	movs	r0, #16
 800cfbc:	f7ff ff42 	bl	800ce44 <malloc>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	61e0      	str	r0, [r4, #28]
 800cfc4:	b920      	cbnz	r0, 800cfd0 <_Balloc+0x20>
 800cfc6:	4b18      	ldr	r3, [pc, #96]	@ (800d028 <_Balloc+0x78>)
 800cfc8:	4818      	ldr	r0, [pc, #96]	@ (800d02c <_Balloc+0x7c>)
 800cfca:	216b      	movs	r1, #107	@ 0x6b
 800cfcc:	f7ff f886 	bl	800c0dc <__assert_func>
 800cfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd4:	6006      	str	r6, [r0, #0]
 800cfd6:	60c6      	str	r6, [r0, #12]
 800cfd8:	69e6      	ldr	r6, [r4, #28]
 800cfda:	68f3      	ldr	r3, [r6, #12]
 800cfdc:	b183      	cbz	r3, 800d000 <_Balloc+0x50>
 800cfde:	69e3      	ldr	r3, [r4, #28]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfe6:	b9b8      	cbnz	r0, 800d018 <_Balloc+0x68>
 800cfe8:	2101      	movs	r1, #1
 800cfea:	fa01 f605 	lsl.w	r6, r1, r5
 800cfee:	1d72      	adds	r2, r6, #5
 800cff0:	0092      	lsls	r2, r2, #2
 800cff2:	4620      	mov	r0, r4
 800cff4:	f001 fd73 	bl	800eade <_calloc_r>
 800cff8:	b160      	cbz	r0, 800d014 <_Balloc+0x64>
 800cffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cffe:	e00e      	b.n	800d01e <_Balloc+0x6e>
 800d000:	2221      	movs	r2, #33	@ 0x21
 800d002:	2104      	movs	r1, #4
 800d004:	4620      	mov	r0, r4
 800d006:	f001 fd6a 	bl	800eade <_calloc_r>
 800d00a:	69e3      	ldr	r3, [r4, #28]
 800d00c:	60f0      	str	r0, [r6, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1e4      	bne.n	800cfde <_Balloc+0x2e>
 800d014:	2000      	movs	r0, #0
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	6802      	ldr	r2, [r0, #0]
 800d01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d01e:	2300      	movs	r3, #0
 800d020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d024:	e7f7      	b.n	800d016 <_Balloc+0x66>
 800d026:	bf00      	nop
 800d028:	0801016e 	.word	0x0801016e
 800d02c:	080101ee 	.word	0x080101ee

0800d030 <_Bfree>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	69c6      	ldr	r6, [r0, #28]
 800d034:	4605      	mov	r5, r0
 800d036:	460c      	mov	r4, r1
 800d038:	b976      	cbnz	r6, 800d058 <_Bfree+0x28>
 800d03a:	2010      	movs	r0, #16
 800d03c:	f7ff ff02 	bl	800ce44 <malloc>
 800d040:	4602      	mov	r2, r0
 800d042:	61e8      	str	r0, [r5, #28]
 800d044:	b920      	cbnz	r0, 800d050 <_Bfree+0x20>
 800d046:	4b09      	ldr	r3, [pc, #36]	@ (800d06c <_Bfree+0x3c>)
 800d048:	4809      	ldr	r0, [pc, #36]	@ (800d070 <_Bfree+0x40>)
 800d04a:	218f      	movs	r1, #143	@ 0x8f
 800d04c:	f7ff f846 	bl	800c0dc <__assert_func>
 800d050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d054:	6006      	str	r6, [r0, #0]
 800d056:	60c6      	str	r6, [r0, #12]
 800d058:	b13c      	cbz	r4, 800d06a <_Bfree+0x3a>
 800d05a:	69eb      	ldr	r3, [r5, #28]
 800d05c:	6862      	ldr	r2, [r4, #4]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d064:	6021      	str	r1, [r4, #0]
 800d066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	0801016e 	.word	0x0801016e
 800d070:	080101ee 	.word	0x080101ee

0800d074 <__multadd>:
 800d074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d078:	690d      	ldr	r5, [r1, #16]
 800d07a:	4607      	mov	r7, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	461e      	mov	r6, r3
 800d080:	f101 0c14 	add.w	ip, r1, #20
 800d084:	2000      	movs	r0, #0
 800d086:	f8dc 3000 	ldr.w	r3, [ip]
 800d08a:	b299      	uxth	r1, r3
 800d08c:	fb02 6101 	mla	r1, r2, r1, r6
 800d090:	0c1e      	lsrs	r6, r3, #16
 800d092:	0c0b      	lsrs	r3, r1, #16
 800d094:	fb02 3306 	mla	r3, r2, r6, r3
 800d098:	b289      	uxth	r1, r1
 800d09a:	3001      	adds	r0, #1
 800d09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0a0:	4285      	cmp	r5, r0
 800d0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800d0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0aa:	dcec      	bgt.n	800d086 <__multadd+0x12>
 800d0ac:	b30e      	cbz	r6, 800d0f2 <__multadd+0x7e>
 800d0ae:	68a3      	ldr	r3, [r4, #8]
 800d0b0:	42ab      	cmp	r3, r5
 800d0b2:	dc19      	bgt.n	800d0e8 <__multadd+0x74>
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	3101      	adds	r1, #1
 800d0ba:	f7ff ff79 	bl	800cfb0 <_Balloc>
 800d0be:	4680      	mov	r8, r0
 800d0c0:	b928      	cbnz	r0, 800d0ce <__multadd+0x5a>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f8 <__multadd+0x84>)
 800d0c6:	480d      	ldr	r0, [pc, #52]	@ (800d0fc <__multadd+0x88>)
 800d0c8:	21ba      	movs	r1, #186	@ 0xba
 800d0ca:	f7ff f807 	bl	800c0dc <__assert_func>
 800d0ce:	6922      	ldr	r2, [r4, #16]
 800d0d0:	3202      	adds	r2, #2
 800d0d2:	f104 010c 	add.w	r1, r4, #12
 800d0d6:	0092      	lsls	r2, r2, #2
 800d0d8:	300c      	adds	r0, #12
 800d0da:	f7fe ffea 	bl	800c0b2 <memcpy>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f7ff ffa5 	bl	800d030 <_Bfree>
 800d0e6:	4644      	mov	r4, r8
 800d0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0ec:	3501      	adds	r5, #1
 800d0ee:	615e      	str	r6, [r3, #20]
 800d0f0:	6125      	str	r5, [r4, #16]
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	080101dd 	.word	0x080101dd
 800d0fc:	080101ee 	.word	0x080101ee

0800d100 <__s2b>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	4615      	mov	r5, r2
 800d108:	461f      	mov	r7, r3
 800d10a:	2209      	movs	r2, #9
 800d10c:	3308      	adds	r3, #8
 800d10e:	4606      	mov	r6, r0
 800d110:	fb93 f3f2 	sdiv	r3, r3, r2
 800d114:	2100      	movs	r1, #0
 800d116:	2201      	movs	r2, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	db09      	blt.n	800d130 <__s2b+0x30>
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7ff ff47 	bl	800cfb0 <_Balloc>
 800d122:	b940      	cbnz	r0, 800d136 <__s2b+0x36>
 800d124:	4602      	mov	r2, r0
 800d126:	4b19      	ldr	r3, [pc, #100]	@ (800d18c <__s2b+0x8c>)
 800d128:	4819      	ldr	r0, [pc, #100]	@ (800d190 <__s2b+0x90>)
 800d12a:	21d3      	movs	r1, #211	@ 0xd3
 800d12c:	f7fe ffd6 	bl	800c0dc <__assert_func>
 800d130:	0052      	lsls	r2, r2, #1
 800d132:	3101      	adds	r1, #1
 800d134:	e7f0      	b.n	800d118 <__s2b+0x18>
 800d136:	9b08      	ldr	r3, [sp, #32]
 800d138:	6143      	str	r3, [r0, #20]
 800d13a:	2d09      	cmp	r5, #9
 800d13c:	f04f 0301 	mov.w	r3, #1
 800d140:	6103      	str	r3, [r0, #16]
 800d142:	dd16      	ble.n	800d172 <__s2b+0x72>
 800d144:	f104 0909 	add.w	r9, r4, #9
 800d148:	46c8      	mov	r8, r9
 800d14a:	442c      	add	r4, r5
 800d14c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d150:	4601      	mov	r1, r0
 800d152:	3b30      	subs	r3, #48	@ 0x30
 800d154:	220a      	movs	r2, #10
 800d156:	4630      	mov	r0, r6
 800d158:	f7ff ff8c 	bl	800d074 <__multadd>
 800d15c:	45a0      	cmp	r8, r4
 800d15e:	d1f5      	bne.n	800d14c <__s2b+0x4c>
 800d160:	f1a5 0408 	sub.w	r4, r5, #8
 800d164:	444c      	add	r4, r9
 800d166:	1b2d      	subs	r5, r5, r4
 800d168:	1963      	adds	r3, r4, r5
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	db04      	blt.n	800d178 <__s2b+0x78>
 800d16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d172:	340a      	adds	r4, #10
 800d174:	2509      	movs	r5, #9
 800d176:	e7f6      	b.n	800d166 <__s2b+0x66>
 800d178:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d17c:	4601      	mov	r1, r0
 800d17e:	3b30      	subs	r3, #48	@ 0x30
 800d180:	220a      	movs	r2, #10
 800d182:	4630      	mov	r0, r6
 800d184:	f7ff ff76 	bl	800d074 <__multadd>
 800d188:	e7ee      	b.n	800d168 <__s2b+0x68>
 800d18a:	bf00      	nop
 800d18c:	080101dd 	.word	0x080101dd
 800d190:	080101ee 	.word	0x080101ee

0800d194 <__hi0bits>:
 800d194:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d198:	4603      	mov	r3, r0
 800d19a:	bf36      	itet	cc
 800d19c:	0403      	lslcc	r3, r0, #16
 800d19e:	2000      	movcs	r0, #0
 800d1a0:	2010      	movcc	r0, #16
 800d1a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d1a6:	bf3c      	itt	cc
 800d1a8:	021b      	lslcc	r3, r3, #8
 800d1aa:	3008      	addcc	r0, #8
 800d1ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1b0:	bf3c      	itt	cc
 800d1b2:	011b      	lslcc	r3, r3, #4
 800d1b4:	3004      	addcc	r0, #4
 800d1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1ba:	bf3c      	itt	cc
 800d1bc:	009b      	lslcc	r3, r3, #2
 800d1be:	3002      	addcc	r0, #2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db05      	blt.n	800d1d0 <__hi0bits+0x3c>
 800d1c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1c8:	f100 0001 	add.w	r0, r0, #1
 800d1cc:	bf08      	it	eq
 800d1ce:	2020      	moveq	r0, #32
 800d1d0:	4770      	bx	lr

0800d1d2 <__lo0bits>:
 800d1d2:	6803      	ldr	r3, [r0, #0]
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	f013 0007 	ands.w	r0, r3, #7
 800d1da:	d00b      	beq.n	800d1f4 <__lo0bits+0x22>
 800d1dc:	07d9      	lsls	r1, r3, #31
 800d1de:	d421      	bmi.n	800d224 <__lo0bits+0x52>
 800d1e0:	0798      	lsls	r0, r3, #30
 800d1e2:	bf49      	itett	mi
 800d1e4:	085b      	lsrmi	r3, r3, #1
 800d1e6:	089b      	lsrpl	r3, r3, #2
 800d1e8:	2001      	movmi	r0, #1
 800d1ea:	6013      	strmi	r3, [r2, #0]
 800d1ec:	bf5c      	itt	pl
 800d1ee:	6013      	strpl	r3, [r2, #0]
 800d1f0:	2002      	movpl	r0, #2
 800d1f2:	4770      	bx	lr
 800d1f4:	b299      	uxth	r1, r3
 800d1f6:	b909      	cbnz	r1, 800d1fc <__lo0bits+0x2a>
 800d1f8:	0c1b      	lsrs	r3, r3, #16
 800d1fa:	2010      	movs	r0, #16
 800d1fc:	b2d9      	uxtb	r1, r3
 800d1fe:	b909      	cbnz	r1, 800d204 <__lo0bits+0x32>
 800d200:	3008      	adds	r0, #8
 800d202:	0a1b      	lsrs	r3, r3, #8
 800d204:	0719      	lsls	r1, r3, #28
 800d206:	bf04      	itt	eq
 800d208:	091b      	lsreq	r3, r3, #4
 800d20a:	3004      	addeq	r0, #4
 800d20c:	0799      	lsls	r1, r3, #30
 800d20e:	bf04      	itt	eq
 800d210:	089b      	lsreq	r3, r3, #2
 800d212:	3002      	addeq	r0, #2
 800d214:	07d9      	lsls	r1, r3, #31
 800d216:	d403      	bmi.n	800d220 <__lo0bits+0x4e>
 800d218:	085b      	lsrs	r3, r3, #1
 800d21a:	f100 0001 	add.w	r0, r0, #1
 800d21e:	d003      	beq.n	800d228 <__lo0bits+0x56>
 800d220:	6013      	str	r3, [r2, #0]
 800d222:	4770      	bx	lr
 800d224:	2000      	movs	r0, #0
 800d226:	4770      	bx	lr
 800d228:	2020      	movs	r0, #32
 800d22a:	4770      	bx	lr

0800d22c <__i2b>:
 800d22c:	b510      	push	{r4, lr}
 800d22e:	460c      	mov	r4, r1
 800d230:	2101      	movs	r1, #1
 800d232:	f7ff febd 	bl	800cfb0 <_Balloc>
 800d236:	4602      	mov	r2, r0
 800d238:	b928      	cbnz	r0, 800d246 <__i2b+0x1a>
 800d23a:	4b05      	ldr	r3, [pc, #20]	@ (800d250 <__i2b+0x24>)
 800d23c:	4805      	ldr	r0, [pc, #20]	@ (800d254 <__i2b+0x28>)
 800d23e:	f240 1145 	movw	r1, #325	@ 0x145
 800d242:	f7fe ff4b 	bl	800c0dc <__assert_func>
 800d246:	2301      	movs	r3, #1
 800d248:	6144      	str	r4, [r0, #20]
 800d24a:	6103      	str	r3, [r0, #16]
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	bf00      	nop
 800d250:	080101dd 	.word	0x080101dd
 800d254:	080101ee 	.word	0x080101ee

0800d258 <__multiply>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	4614      	mov	r4, r2
 800d25e:	690a      	ldr	r2, [r1, #16]
 800d260:	6923      	ldr	r3, [r4, #16]
 800d262:	429a      	cmp	r2, r3
 800d264:	bfa8      	it	ge
 800d266:	4623      	movge	r3, r4
 800d268:	460f      	mov	r7, r1
 800d26a:	bfa4      	itt	ge
 800d26c:	460c      	movge	r4, r1
 800d26e:	461f      	movge	r7, r3
 800d270:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d274:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d278:	68a3      	ldr	r3, [r4, #8]
 800d27a:	6861      	ldr	r1, [r4, #4]
 800d27c:	eb0a 0609 	add.w	r6, sl, r9
 800d280:	42b3      	cmp	r3, r6
 800d282:	b085      	sub	sp, #20
 800d284:	bfb8      	it	lt
 800d286:	3101      	addlt	r1, #1
 800d288:	f7ff fe92 	bl	800cfb0 <_Balloc>
 800d28c:	b930      	cbnz	r0, 800d29c <__multiply+0x44>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b44      	ldr	r3, [pc, #272]	@ (800d3a4 <__multiply+0x14c>)
 800d292:	4845      	ldr	r0, [pc, #276]	@ (800d3a8 <__multiply+0x150>)
 800d294:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d298:	f7fe ff20 	bl	800c0dc <__assert_func>
 800d29c:	f100 0514 	add.w	r5, r0, #20
 800d2a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2a4:	462b      	mov	r3, r5
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4543      	cmp	r3, r8
 800d2aa:	d321      	bcc.n	800d2f0 <__multiply+0x98>
 800d2ac:	f107 0114 	add.w	r1, r7, #20
 800d2b0:	f104 0214 	add.w	r2, r4, #20
 800d2b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d2b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d2bc:	9302      	str	r3, [sp, #8]
 800d2be:	1b13      	subs	r3, r2, r4
 800d2c0:	3b15      	subs	r3, #21
 800d2c2:	f023 0303 	bic.w	r3, r3, #3
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	f104 0715 	add.w	r7, r4, #21
 800d2cc:	42ba      	cmp	r2, r7
 800d2ce:	bf38      	it	cc
 800d2d0:	2304      	movcc	r3, #4
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	9103      	str	r1, [sp, #12]
 800d2d8:	428b      	cmp	r3, r1
 800d2da:	d80c      	bhi.n	800d2f6 <__multiply+0x9e>
 800d2dc:	2e00      	cmp	r6, #0
 800d2de:	dd03      	ble.n	800d2e8 <__multiply+0x90>
 800d2e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d05b      	beq.n	800d3a0 <__multiply+0x148>
 800d2e8:	6106      	str	r6, [r0, #16]
 800d2ea:	b005      	add	sp, #20
 800d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f0:	f843 2b04 	str.w	r2, [r3], #4
 800d2f4:	e7d8      	b.n	800d2a8 <__multiply+0x50>
 800d2f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2fa:	f1ba 0f00 	cmp.w	sl, #0
 800d2fe:	d024      	beq.n	800d34a <__multiply+0xf2>
 800d300:	f104 0e14 	add.w	lr, r4, #20
 800d304:	46a9      	mov	r9, r5
 800d306:	f04f 0c00 	mov.w	ip, #0
 800d30a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d30e:	f8d9 3000 	ldr.w	r3, [r9]
 800d312:	fa1f fb87 	uxth.w	fp, r7
 800d316:	b29b      	uxth	r3, r3
 800d318:	fb0a 330b 	mla	r3, sl, fp, r3
 800d31c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d320:	f8d9 7000 	ldr.w	r7, [r9]
 800d324:	4463      	add	r3, ip
 800d326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d32a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d32e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d332:	b29b      	uxth	r3, r3
 800d334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d338:	4572      	cmp	r2, lr
 800d33a:	f849 3b04 	str.w	r3, [r9], #4
 800d33e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d342:	d8e2      	bhi.n	800d30a <__multiply+0xb2>
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	f845 c003 	str.w	ip, [r5, r3]
 800d34a:	9b03      	ldr	r3, [sp, #12]
 800d34c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d350:	3104      	adds	r1, #4
 800d352:	f1b9 0f00 	cmp.w	r9, #0
 800d356:	d021      	beq.n	800d39c <__multiply+0x144>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	f104 0c14 	add.w	ip, r4, #20
 800d35e:	46ae      	mov	lr, r5
 800d360:	f04f 0a00 	mov.w	sl, #0
 800d364:	f8bc b000 	ldrh.w	fp, [ip]
 800d368:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d36c:	fb09 770b 	mla	r7, r9, fp, r7
 800d370:	4457      	add	r7, sl
 800d372:	b29b      	uxth	r3, r3
 800d374:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d378:	f84e 3b04 	str.w	r3, [lr], #4
 800d37c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d384:	f8be 3000 	ldrh.w	r3, [lr]
 800d388:	fb09 330a 	mla	r3, r9, sl, r3
 800d38c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d390:	4562      	cmp	r2, ip
 800d392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d396:	d8e5      	bhi.n	800d364 <__multiply+0x10c>
 800d398:	9f01      	ldr	r7, [sp, #4]
 800d39a:	51eb      	str	r3, [r5, r7]
 800d39c:	3504      	adds	r5, #4
 800d39e:	e799      	b.n	800d2d4 <__multiply+0x7c>
 800d3a0:	3e01      	subs	r6, #1
 800d3a2:	e79b      	b.n	800d2dc <__multiply+0x84>
 800d3a4:	080101dd 	.word	0x080101dd
 800d3a8:	080101ee 	.word	0x080101ee

0800d3ac <__pow5mult>:
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	4615      	mov	r5, r2
 800d3b2:	f012 0203 	ands.w	r2, r2, #3
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	460e      	mov	r6, r1
 800d3ba:	d007      	beq.n	800d3cc <__pow5mult+0x20>
 800d3bc:	4c25      	ldr	r4, [pc, #148]	@ (800d454 <__pow5mult+0xa8>)
 800d3be:	3a01      	subs	r2, #1
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3c6:	f7ff fe55 	bl	800d074 <__multadd>
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	10ad      	asrs	r5, r5, #2
 800d3ce:	d03d      	beq.n	800d44c <__pow5mult+0xa0>
 800d3d0:	69fc      	ldr	r4, [r7, #28]
 800d3d2:	b97c      	cbnz	r4, 800d3f4 <__pow5mult+0x48>
 800d3d4:	2010      	movs	r0, #16
 800d3d6:	f7ff fd35 	bl	800ce44 <malloc>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	61f8      	str	r0, [r7, #28]
 800d3de:	b928      	cbnz	r0, 800d3ec <__pow5mult+0x40>
 800d3e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d458 <__pow5mult+0xac>)
 800d3e2:	481e      	ldr	r0, [pc, #120]	@ (800d45c <__pow5mult+0xb0>)
 800d3e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3e8:	f7fe fe78 	bl	800c0dc <__assert_func>
 800d3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f0:	6004      	str	r4, [r0, #0]
 800d3f2:	60c4      	str	r4, [r0, #12]
 800d3f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3fc:	b94c      	cbnz	r4, 800d412 <__pow5mult+0x66>
 800d3fe:	f240 2171 	movw	r1, #625	@ 0x271
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff ff12 	bl	800d22c <__i2b>
 800d408:	2300      	movs	r3, #0
 800d40a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d40e:	4604      	mov	r4, r0
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	07eb      	lsls	r3, r5, #31
 800d418:	d50a      	bpl.n	800d430 <__pow5mult+0x84>
 800d41a:	4631      	mov	r1, r6
 800d41c:	4622      	mov	r2, r4
 800d41e:	4638      	mov	r0, r7
 800d420:	f7ff ff1a 	bl	800d258 <__multiply>
 800d424:	4631      	mov	r1, r6
 800d426:	4680      	mov	r8, r0
 800d428:	4638      	mov	r0, r7
 800d42a:	f7ff fe01 	bl	800d030 <_Bfree>
 800d42e:	4646      	mov	r6, r8
 800d430:	106d      	asrs	r5, r5, #1
 800d432:	d00b      	beq.n	800d44c <__pow5mult+0xa0>
 800d434:	6820      	ldr	r0, [r4, #0]
 800d436:	b938      	cbnz	r0, 800d448 <__pow5mult+0x9c>
 800d438:	4622      	mov	r2, r4
 800d43a:	4621      	mov	r1, r4
 800d43c:	4638      	mov	r0, r7
 800d43e:	f7ff ff0b 	bl	800d258 <__multiply>
 800d442:	6020      	str	r0, [r4, #0]
 800d444:	f8c0 9000 	str.w	r9, [r0]
 800d448:	4604      	mov	r4, r0
 800d44a:	e7e4      	b.n	800d416 <__pow5mult+0x6a>
 800d44c:	4630      	mov	r0, r6
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	bf00      	nop
 800d454:	08010248 	.word	0x08010248
 800d458:	0801016e 	.word	0x0801016e
 800d45c:	080101ee 	.word	0x080101ee

0800d460 <__lshift>:
 800d460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d464:	460c      	mov	r4, r1
 800d466:	6849      	ldr	r1, [r1, #4]
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	4607      	mov	r7, r0
 800d472:	4691      	mov	r9, r2
 800d474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d478:	f108 0601 	add.w	r6, r8, #1
 800d47c:	42b3      	cmp	r3, r6
 800d47e:	db0b      	blt.n	800d498 <__lshift+0x38>
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff fd95 	bl	800cfb0 <_Balloc>
 800d486:	4605      	mov	r5, r0
 800d488:	b948      	cbnz	r0, 800d49e <__lshift+0x3e>
 800d48a:	4602      	mov	r2, r0
 800d48c:	4b28      	ldr	r3, [pc, #160]	@ (800d530 <__lshift+0xd0>)
 800d48e:	4829      	ldr	r0, [pc, #164]	@ (800d534 <__lshift+0xd4>)
 800d490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d494:	f7fe fe22 	bl	800c0dc <__assert_func>
 800d498:	3101      	adds	r1, #1
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	e7ee      	b.n	800d47c <__lshift+0x1c>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f100 0114 	add.w	r1, r0, #20
 800d4a4:	f100 0210 	add.w	r2, r0, #16
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	4553      	cmp	r3, sl
 800d4ac:	db33      	blt.n	800d516 <__lshift+0xb6>
 800d4ae:	6920      	ldr	r0, [r4, #16]
 800d4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4b4:	f104 0314 	add.w	r3, r4, #20
 800d4b8:	f019 091f 	ands.w	r9, r9, #31
 800d4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4c4:	d02b      	beq.n	800d51e <__lshift+0xbe>
 800d4c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ca:	468a      	mov	sl, r1
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	fa00 f009 	lsl.w	r0, r0, r9
 800d4d4:	4310      	orrs	r0, r2
 800d4d6:	f84a 0b04 	str.w	r0, [sl], #4
 800d4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4de:	459c      	cmp	ip, r3
 800d4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4e4:	d8f3      	bhi.n	800d4ce <__lshift+0x6e>
 800d4e6:	ebac 0304 	sub.w	r3, ip, r4
 800d4ea:	3b15      	subs	r3, #21
 800d4ec:	f023 0303 	bic.w	r3, r3, #3
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	f104 0015 	add.w	r0, r4, #21
 800d4f6:	4584      	cmp	ip, r0
 800d4f8:	bf38      	it	cc
 800d4fa:	2304      	movcc	r3, #4
 800d4fc:	50ca      	str	r2, [r1, r3]
 800d4fe:	b10a      	cbz	r2, 800d504 <__lshift+0xa4>
 800d500:	f108 0602 	add.w	r6, r8, #2
 800d504:	3e01      	subs	r6, #1
 800d506:	4638      	mov	r0, r7
 800d508:	612e      	str	r6, [r5, #16]
 800d50a:	4621      	mov	r1, r4
 800d50c:	f7ff fd90 	bl	800d030 <_Bfree>
 800d510:	4628      	mov	r0, r5
 800d512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d516:	f842 0f04 	str.w	r0, [r2, #4]!
 800d51a:	3301      	adds	r3, #1
 800d51c:	e7c5      	b.n	800d4aa <__lshift+0x4a>
 800d51e:	3904      	subs	r1, #4
 800d520:	f853 2b04 	ldr.w	r2, [r3], #4
 800d524:	f841 2f04 	str.w	r2, [r1, #4]!
 800d528:	459c      	cmp	ip, r3
 800d52a:	d8f9      	bhi.n	800d520 <__lshift+0xc0>
 800d52c:	e7ea      	b.n	800d504 <__lshift+0xa4>
 800d52e:	bf00      	nop
 800d530:	080101dd 	.word	0x080101dd
 800d534:	080101ee 	.word	0x080101ee

0800d538 <__mcmp>:
 800d538:	690a      	ldr	r2, [r1, #16]
 800d53a:	4603      	mov	r3, r0
 800d53c:	6900      	ldr	r0, [r0, #16]
 800d53e:	1a80      	subs	r0, r0, r2
 800d540:	b530      	push	{r4, r5, lr}
 800d542:	d10e      	bne.n	800d562 <__mcmp+0x2a>
 800d544:	3314      	adds	r3, #20
 800d546:	3114      	adds	r1, #20
 800d548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d558:	4295      	cmp	r5, r2
 800d55a:	d003      	beq.n	800d564 <__mcmp+0x2c>
 800d55c:	d205      	bcs.n	800d56a <__mcmp+0x32>
 800d55e:	f04f 30ff 	mov.w	r0, #4294967295
 800d562:	bd30      	pop	{r4, r5, pc}
 800d564:	42a3      	cmp	r3, r4
 800d566:	d3f3      	bcc.n	800d550 <__mcmp+0x18>
 800d568:	e7fb      	b.n	800d562 <__mcmp+0x2a>
 800d56a:	2001      	movs	r0, #1
 800d56c:	e7f9      	b.n	800d562 <__mcmp+0x2a>
	...

0800d570 <__mdiff>:
 800d570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	4689      	mov	r9, r1
 800d576:	4606      	mov	r6, r0
 800d578:	4611      	mov	r1, r2
 800d57a:	4648      	mov	r0, r9
 800d57c:	4614      	mov	r4, r2
 800d57e:	f7ff ffdb 	bl	800d538 <__mcmp>
 800d582:	1e05      	subs	r5, r0, #0
 800d584:	d112      	bne.n	800d5ac <__mdiff+0x3c>
 800d586:	4629      	mov	r1, r5
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff fd11 	bl	800cfb0 <_Balloc>
 800d58e:	4602      	mov	r2, r0
 800d590:	b928      	cbnz	r0, 800d59e <__mdiff+0x2e>
 800d592:	4b3f      	ldr	r3, [pc, #252]	@ (800d690 <__mdiff+0x120>)
 800d594:	f240 2137 	movw	r1, #567	@ 0x237
 800d598:	483e      	ldr	r0, [pc, #248]	@ (800d694 <__mdiff+0x124>)
 800d59a:	f7fe fd9f 	bl	800c0dc <__assert_func>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	b003      	add	sp, #12
 800d5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	bfbc      	itt	lt
 800d5ae:	464b      	movlt	r3, r9
 800d5b0:	46a1      	movlt	r9, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d5b8:	bfba      	itte	lt
 800d5ba:	461c      	movlt	r4, r3
 800d5bc:	2501      	movlt	r5, #1
 800d5be:	2500      	movge	r5, #0
 800d5c0:	f7ff fcf6 	bl	800cfb0 <_Balloc>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	b918      	cbnz	r0, 800d5d0 <__mdiff+0x60>
 800d5c8:	4b31      	ldr	r3, [pc, #196]	@ (800d690 <__mdiff+0x120>)
 800d5ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d5ce:	e7e3      	b.n	800d598 <__mdiff+0x28>
 800d5d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5d4:	6926      	ldr	r6, [r4, #16]
 800d5d6:	60c5      	str	r5, [r0, #12]
 800d5d8:	f109 0310 	add.w	r3, r9, #16
 800d5dc:	f109 0514 	add.w	r5, r9, #20
 800d5e0:	f104 0e14 	add.w	lr, r4, #20
 800d5e4:	f100 0b14 	add.w	fp, r0, #20
 800d5e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	46d9      	mov	r9, fp
 800d5f4:	f04f 0c00 	mov.w	ip, #0
 800d5f8:	9b01      	ldr	r3, [sp, #4]
 800d5fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	fa1f f38a 	uxth.w	r3, sl
 800d608:	4619      	mov	r1, r3
 800d60a:	b283      	uxth	r3, r0
 800d60c:	1acb      	subs	r3, r1, r3
 800d60e:	0c00      	lsrs	r0, r0, #16
 800d610:	4463      	add	r3, ip
 800d612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d620:	4576      	cmp	r6, lr
 800d622:	f849 3b04 	str.w	r3, [r9], #4
 800d626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d62a:	d8e5      	bhi.n	800d5f8 <__mdiff+0x88>
 800d62c:	1b33      	subs	r3, r6, r4
 800d62e:	3b15      	subs	r3, #21
 800d630:	f023 0303 	bic.w	r3, r3, #3
 800d634:	3415      	adds	r4, #21
 800d636:	3304      	adds	r3, #4
 800d638:	42a6      	cmp	r6, r4
 800d63a:	bf38      	it	cc
 800d63c:	2304      	movcc	r3, #4
 800d63e:	441d      	add	r5, r3
 800d640:	445b      	add	r3, fp
 800d642:	461e      	mov	r6, r3
 800d644:	462c      	mov	r4, r5
 800d646:	4544      	cmp	r4, r8
 800d648:	d30e      	bcc.n	800d668 <__mdiff+0xf8>
 800d64a:	f108 0103 	add.w	r1, r8, #3
 800d64e:	1b49      	subs	r1, r1, r5
 800d650:	f021 0103 	bic.w	r1, r1, #3
 800d654:	3d03      	subs	r5, #3
 800d656:	45a8      	cmp	r8, r5
 800d658:	bf38      	it	cc
 800d65a:	2100      	movcc	r1, #0
 800d65c:	440b      	add	r3, r1
 800d65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d662:	b191      	cbz	r1, 800d68a <__mdiff+0x11a>
 800d664:	6117      	str	r7, [r2, #16]
 800d666:	e79d      	b.n	800d5a4 <__mdiff+0x34>
 800d668:	f854 1b04 	ldr.w	r1, [r4], #4
 800d66c:	46e6      	mov	lr, ip
 800d66e:	0c08      	lsrs	r0, r1, #16
 800d670:	fa1c fc81 	uxtah	ip, ip, r1
 800d674:	4471      	add	r1, lr
 800d676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d67a:	b289      	uxth	r1, r1
 800d67c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d680:	f846 1b04 	str.w	r1, [r6], #4
 800d684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d688:	e7dd      	b.n	800d646 <__mdiff+0xd6>
 800d68a:	3f01      	subs	r7, #1
 800d68c:	e7e7      	b.n	800d65e <__mdiff+0xee>
 800d68e:	bf00      	nop
 800d690:	080101dd 	.word	0x080101dd
 800d694:	080101ee 	.word	0x080101ee

0800d698 <__ulp>:
 800d698:	b082      	sub	sp, #8
 800d69a:	ed8d 0b00 	vstr	d0, [sp]
 800d69e:	9a01      	ldr	r2, [sp, #4]
 800d6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e0 <__ulp+0x48>)
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	dc08      	bgt.n	800d6be <__ulp+0x26>
 800d6ac:	425b      	negs	r3, r3
 800d6ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d6b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6b6:	da04      	bge.n	800d6c2 <__ulp+0x2a>
 800d6b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d6bc:	4113      	asrs	r3, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	e008      	b.n	800d6d4 <__ulp+0x3c>
 800d6c2:	f1a2 0314 	sub.w	r3, r2, #20
 800d6c6:	2b1e      	cmp	r3, #30
 800d6c8:	bfda      	itte	le
 800d6ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d6ce:	40da      	lsrle	r2, r3
 800d6d0:	2201      	movgt	r2, #1
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	ec41 0b10 	vmov	d0, r0, r1
 800d6dc:	b002      	add	sp, #8
 800d6de:	4770      	bx	lr
 800d6e0:	7ff00000 	.word	0x7ff00000

0800d6e4 <__b2d>:
 800d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e8:	6906      	ldr	r6, [r0, #16]
 800d6ea:	f100 0814 	add.w	r8, r0, #20
 800d6ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6f2:	1f37      	subs	r7, r6, #4
 800d6f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	f7ff fd4b 	bl	800d194 <__hi0bits>
 800d6fe:	f1c0 0320 	rsb	r3, r0, #32
 800d702:	280a      	cmp	r0, #10
 800d704:	600b      	str	r3, [r1, #0]
 800d706:	491b      	ldr	r1, [pc, #108]	@ (800d774 <__b2d+0x90>)
 800d708:	dc15      	bgt.n	800d736 <__b2d+0x52>
 800d70a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d70e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d712:	45b8      	cmp	r8, r7
 800d714:	ea43 0501 	orr.w	r5, r3, r1
 800d718:	bf34      	ite	cc
 800d71a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d71e:	2300      	movcs	r3, #0
 800d720:	3015      	adds	r0, #21
 800d722:	fa02 f000 	lsl.w	r0, r2, r0
 800d726:	fa23 f30c 	lsr.w	r3, r3, ip
 800d72a:	4303      	orrs	r3, r0
 800d72c:	461c      	mov	r4, r3
 800d72e:	ec45 4b10 	vmov	d0, r4, r5
 800d732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d736:	45b8      	cmp	r8, r7
 800d738:	bf3a      	itte	cc
 800d73a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d73e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d742:	2300      	movcs	r3, #0
 800d744:	380b      	subs	r0, #11
 800d746:	d012      	beq.n	800d76e <__b2d+0x8a>
 800d748:	f1c0 0120 	rsb	r1, r0, #32
 800d74c:	fa23 f401 	lsr.w	r4, r3, r1
 800d750:	4082      	lsls	r2, r0
 800d752:	4322      	orrs	r2, r4
 800d754:	4547      	cmp	r7, r8
 800d756:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d75a:	bf8c      	ite	hi
 800d75c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d760:	2200      	movls	r2, #0
 800d762:	4083      	lsls	r3, r0
 800d764:	40ca      	lsrs	r2, r1
 800d766:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d76a:	4313      	orrs	r3, r2
 800d76c:	e7de      	b.n	800d72c <__b2d+0x48>
 800d76e:	ea42 0501 	orr.w	r5, r2, r1
 800d772:	e7db      	b.n	800d72c <__b2d+0x48>
 800d774:	3ff00000 	.word	0x3ff00000

0800d778 <__d2b>:
 800d778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d77c:	460f      	mov	r7, r1
 800d77e:	2101      	movs	r1, #1
 800d780:	ec59 8b10 	vmov	r8, r9, d0
 800d784:	4616      	mov	r6, r2
 800d786:	f7ff fc13 	bl	800cfb0 <_Balloc>
 800d78a:	4604      	mov	r4, r0
 800d78c:	b930      	cbnz	r0, 800d79c <__d2b+0x24>
 800d78e:	4602      	mov	r2, r0
 800d790:	4b23      	ldr	r3, [pc, #140]	@ (800d820 <__d2b+0xa8>)
 800d792:	4824      	ldr	r0, [pc, #144]	@ (800d824 <__d2b+0xac>)
 800d794:	f240 310f 	movw	r1, #783	@ 0x30f
 800d798:	f7fe fca0 	bl	800c0dc <__assert_func>
 800d79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7a4:	b10d      	cbz	r5, 800d7aa <__d2b+0x32>
 800d7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d7b0:	d023      	beq.n	800d7fa <__d2b+0x82>
 800d7b2:	4668      	mov	r0, sp
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	f7ff fd0c 	bl	800d1d2 <__lo0bits>
 800d7ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7be:	b1d0      	cbz	r0, 800d7f6 <__d2b+0x7e>
 800d7c0:	f1c0 0320 	rsb	r3, r0, #32
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	40c2      	lsrs	r2, r0
 800d7cc:	6163      	str	r3, [r4, #20]
 800d7ce:	9201      	str	r2, [sp, #4]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	61a3      	str	r3, [r4, #24]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf0c      	ite	eq
 800d7d8:	2201      	moveq	r2, #1
 800d7da:	2202      	movne	r2, #2
 800d7dc:	6122      	str	r2, [r4, #16]
 800d7de:	b1a5      	cbz	r5, 800d80a <__d2b+0x92>
 800d7e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7e4:	4405      	add	r5, r0
 800d7e6:	603d      	str	r5, [r7, #0]
 800d7e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7ec:	6030      	str	r0, [r6, #0]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	b003      	add	sp, #12
 800d7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7f6:	6161      	str	r1, [r4, #20]
 800d7f8:	e7ea      	b.n	800d7d0 <__d2b+0x58>
 800d7fa:	a801      	add	r0, sp, #4
 800d7fc:	f7ff fce9 	bl	800d1d2 <__lo0bits>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	6163      	str	r3, [r4, #20]
 800d804:	3020      	adds	r0, #32
 800d806:	2201      	movs	r2, #1
 800d808:	e7e8      	b.n	800d7dc <__d2b+0x64>
 800d80a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d80e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d812:	6038      	str	r0, [r7, #0]
 800d814:	6918      	ldr	r0, [r3, #16]
 800d816:	f7ff fcbd 	bl	800d194 <__hi0bits>
 800d81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d81e:	e7e5      	b.n	800d7ec <__d2b+0x74>
 800d820:	080101dd 	.word	0x080101dd
 800d824:	080101ee 	.word	0x080101ee

0800d828 <__ratio>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	b085      	sub	sp, #20
 800d82e:	e9cd 1000 	strd	r1, r0, [sp]
 800d832:	a902      	add	r1, sp, #8
 800d834:	f7ff ff56 	bl	800d6e4 <__b2d>
 800d838:	9800      	ldr	r0, [sp, #0]
 800d83a:	a903      	add	r1, sp, #12
 800d83c:	ec55 4b10 	vmov	r4, r5, d0
 800d840:	f7ff ff50 	bl	800d6e4 <__b2d>
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	6919      	ldr	r1, [r3, #16]
 800d848:	9b00      	ldr	r3, [sp, #0]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	1ac9      	subs	r1, r1, r3
 800d84e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d852:	1a9b      	subs	r3, r3, r2
 800d854:	ec5b ab10 	vmov	sl, fp, d0
 800d858:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bfce      	itee	gt
 800d860:	462a      	movgt	r2, r5
 800d862:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d866:	465a      	movle	r2, fp
 800d868:	462f      	mov	r7, r5
 800d86a:	46d9      	mov	r9, fp
 800d86c:	bfcc      	ite	gt
 800d86e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d872:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d876:	464b      	mov	r3, r9
 800d878:	4652      	mov	r2, sl
 800d87a:	4620      	mov	r0, r4
 800d87c:	4639      	mov	r1, r7
 800d87e:	f7f3 f805 	bl	800088c <__aeabi_ddiv>
 800d882:	ec41 0b10 	vmov	d0, r0, r1
 800d886:	b005      	add	sp, #20
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d88c <__copybits>:
 800d88c:	3901      	subs	r1, #1
 800d88e:	b570      	push	{r4, r5, r6, lr}
 800d890:	1149      	asrs	r1, r1, #5
 800d892:	6914      	ldr	r4, [r2, #16]
 800d894:	3101      	adds	r1, #1
 800d896:	f102 0314 	add.w	r3, r2, #20
 800d89a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d89e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8a2:	1f05      	subs	r5, r0, #4
 800d8a4:	42a3      	cmp	r3, r4
 800d8a6:	d30c      	bcc.n	800d8c2 <__copybits+0x36>
 800d8a8:	1aa3      	subs	r3, r4, r2
 800d8aa:	3b11      	subs	r3, #17
 800d8ac:	f023 0303 	bic.w	r3, r3, #3
 800d8b0:	3211      	adds	r2, #17
 800d8b2:	42a2      	cmp	r2, r4
 800d8b4:	bf88      	it	hi
 800d8b6:	2300      	movhi	r3, #0
 800d8b8:	4418      	add	r0, r3
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	4288      	cmp	r0, r1
 800d8be:	d305      	bcc.n	800d8cc <__copybits+0x40>
 800d8c0:	bd70      	pop	{r4, r5, r6, pc}
 800d8c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8ca:	e7eb      	b.n	800d8a4 <__copybits+0x18>
 800d8cc:	f840 3b04 	str.w	r3, [r0], #4
 800d8d0:	e7f4      	b.n	800d8bc <__copybits+0x30>

0800d8d2 <__any_on>:
 800d8d2:	f100 0214 	add.w	r2, r0, #20
 800d8d6:	6900      	ldr	r0, [r0, #16]
 800d8d8:	114b      	asrs	r3, r1, #5
 800d8da:	4298      	cmp	r0, r3
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	db11      	blt.n	800d904 <__any_on+0x32>
 800d8e0:	dd0a      	ble.n	800d8f8 <__any_on+0x26>
 800d8e2:	f011 011f 	ands.w	r1, r1, #31
 800d8e6:	d007      	beq.n	800d8f8 <__any_on+0x26>
 800d8e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d8f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d8f4:	428c      	cmp	r4, r1
 800d8f6:	d10b      	bne.n	800d910 <__any_on+0x3e>
 800d8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d803      	bhi.n	800d908 <__any_on+0x36>
 800d900:	2000      	movs	r0, #0
 800d902:	bd10      	pop	{r4, pc}
 800d904:	4603      	mov	r3, r0
 800d906:	e7f7      	b.n	800d8f8 <__any_on+0x26>
 800d908:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d90c:	2900      	cmp	r1, #0
 800d90e:	d0f5      	beq.n	800d8fc <__any_on+0x2a>
 800d910:	2001      	movs	r0, #1
 800d912:	e7f6      	b.n	800d902 <__any_on+0x30>

0800d914 <sulp>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	4604      	mov	r4, r0
 800d918:	460d      	mov	r5, r1
 800d91a:	ec45 4b10 	vmov	d0, r4, r5
 800d91e:	4616      	mov	r6, r2
 800d920:	f7ff feba 	bl	800d698 <__ulp>
 800d924:	ec51 0b10 	vmov	r0, r1, d0
 800d928:	b17e      	cbz	r6, 800d94a <sulp+0x36>
 800d92a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d92e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d932:	2b00      	cmp	r3, #0
 800d934:	dd09      	ble.n	800d94a <sulp+0x36>
 800d936:	051b      	lsls	r3, r3, #20
 800d938:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d93c:	2400      	movs	r4, #0
 800d93e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d942:	4622      	mov	r2, r4
 800d944:	462b      	mov	r3, r5
 800d946:	f7f2 fe77 	bl	8000638 <__aeabi_dmul>
 800d94a:	ec41 0b10 	vmov	d0, r0, r1
 800d94e:	bd70      	pop	{r4, r5, r6, pc}

0800d950 <_strtod_l>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	b09f      	sub	sp, #124	@ 0x7c
 800d956:	460c      	mov	r4, r1
 800d958:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d95a:	2200      	movs	r2, #0
 800d95c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d95e:	9005      	str	r0, [sp, #20]
 800d960:	f04f 0a00 	mov.w	sl, #0
 800d964:	f04f 0b00 	mov.w	fp, #0
 800d968:	460a      	mov	r2, r1
 800d96a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d96c:	7811      	ldrb	r1, [r2, #0]
 800d96e:	292b      	cmp	r1, #43	@ 0x2b
 800d970:	d04a      	beq.n	800da08 <_strtod_l+0xb8>
 800d972:	d838      	bhi.n	800d9e6 <_strtod_l+0x96>
 800d974:	290d      	cmp	r1, #13
 800d976:	d832      	bhi.n	800d9de <_strtod_l+0x8e>
 800d978:	2908      	cmp	r1, #8
 800d97a:	d832      	bhi.n	800d9e2 <_strtod_l+0x92>
 800d97c:	2900      	cmp	r1, #0
 800d97e:	d03b      	beq.n	800d9f8 <_strtod_l+0xa8>
 800d980:	2200      	movs	r2, #0
 800d982:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d984:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d986:	782a      	ldrb	r2, [r5, #0]
 800d988:	2a30      	cmp	r2, #48	@ 0x30
 800d98a:	f040 80b3 	bne.w	800daf4 <_strtod_l+0x1a4>
 800d98e:	786a      	ldrb	r2, [r5, #1]
 800d990:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d994:	2a58      	cmp	r2, #88	@ 0x58
 800d996:	d16e      	bne.n	800da76 <_strtod_l+0x126>
 800d998:	9302      	str	r3, [sp, #8]
 800d99a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	4a8e      	ldr	r2, [pc, #568]	@ (800dbdc <_strtod_l+0x28c>)
 800d9a4:	9805      	ldr	r0, [sp, #20]
 800d9a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d9a8:	a919      	add	r1, sp, #100	@ 0x64
 800d9aa:	f001 f913 	bl	800ebd4 <__gethex>
 800d9ae:	f010 060f 	ands.w	r6, r0, #15
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	d005      	beq.n	800d9c2 <_strtod_l+0x72>
 800d9b6:	2e06      	cmp	r6, #6
 800d9b8:	d128      	bne.n	800da0c <_strtod_l+0xbc>
 800d9ba:	3501      	adds	r5, #1
 800d9bc:	2300      	movs	r3, #0
 800d9be:	9519      	str	r5, [sp, #100]	@ 0x64
 800d9c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f040 858e 	bne.w	800e4e6 <_strtod_l+0xb96>
 800d9ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9cc:	b1cb      	cbz	r3, 800da02 <_strtod_l+0xb2>
 800d9ce:	4652      	mov	r2, sl
 800d9d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d9d4:	ec43 2b10 	vmov	d0, r2, r3
 800d9d8:	b01f      	add	sp, #124	@ 0x7c
 800d9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9de:	2920      	cmp	r1, #32
 800d9e0:	d1ce      	bne.n	800d980 <_strtod_l+0x30>
 800d9e2:	3201      	adds	r2, #1
 800d9e4:	e7c1      	b.n	800d96a <_strtod_l+0x1a>
 800d9e6:	292d      	cmp	r1, #45	@ 0x2d
 800d9e8:	d1ca      	bne.n	800d980 <_strtod_l+0x30>
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d9ee:	1c51      	adds	r1, r2, #1
 800d9f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d9f2:	7852      	ldrb	r2, [r2, #1]
 800d9f4:	2a00      	cmp	r2, #0
 800d9f6:	d1c5      	bne.n	800d984 <_strtod_l+0x34>
 800d9f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d9fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 8570 	bne.w	800e4e2 <_strtod_l+0xb92>
 800da02:	4652      	mov	r2, sl
 800da04:	465b      	mov	r3, fp
 800da06:	e7e5      	b.n	800d9d4 <_strtod_l+0x84>
 800da08:	2100      	movs	r1, #0
 800da0a:	e7ef      	b.n	800d9ec <_strtod_l+0x9c>
 800da0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800da0e:	b13a      	cbz	r2, 800da20 <_strtod_l+0xd0>
 800da10:	2135      	movs	r1, #53	@ 0x35
 800da12:	a81c      	add	r0, sp, #112	@ 0x70
 800da14:	f7ff ff3a 	bl	800d88c <__copybits>
 800da18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da1a:	9805      	ldr	r0, [sp, #20]
 800da1c:	f7ff fb08 	bl	800d030 <_Bfree>
 800da20:	3e01      	subs	r6, #1
 800da22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800da24:	2e04      	cmp	r6, #4
 800da26:	d806      	bhi.n	800da36 <_strtod_l+0xe6>
 800da28:	e8df f006 	tbb	[pc, r6]
 800da2c:	201d0314 	.word	0x201d0314
 800da30:	14          	.byte	0x14
 800da31:	00          	.byte	0x00
 800da32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800da36:	05e1      	lsls	r1, r4, #23
 800da38:	bf48      	it	mi
 800da3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800da3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da42:	0d1b      	lsrs	r3, r3, #20
 800da44:	051b      	lsls	r3, r3, #20
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1bb      	bne.n	800d9c2 <_strtod_l+0x72>
 800da4a:	f7fe fb05 	bl	800c058 <__errno>
 800da4e:	2322      	movs	r3, #34	@ 0x22
 800da50:	6003      	str	r3, [r0, #0]
 800da52:	e7b6      	b.n	800d9c2 <_strtod_l+0x72>
 800da54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800da58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800da5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800da60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da64:	e7e7      	b.n	800da36 <_strtod_l+0xe6>
 800da66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dbe4 <_strtod_l+0x294>
 800da6a:	e7e4      	b.n	800da36 <_strtod_l+0xe6>
 800da6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800da70:	f04f 3aff 	mov.w	sl, #4294967295
 800da74:	e7df      	b.n	800da36 <_strtod_l+0xe6>
 800da76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da7c:	785b      	ldrb	r3, [r3, #1]
 800da7e:	2b30      	cmp	r3, #48	@ 0x30
 800da80:	d0f9      	beq.n	800da76 <_strtod_l+0x126>
 800da82:	2b00      	cmp	r3, #0
 800da84:	d09d      	beq.n	800d9c2 <_strtod_l+0x72>
 800da86:	2301      	movs	r3, #1
 800da88:	9309      	str	r3, [sp, #36]	@ 0x24
 800da8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800da8e:	2300      	movs	r3, #0
 800da90:	9308      	str	r3, [sp, #32]
 800da92:	930a      	str	r3, [sp, #40]	@ 0x28
 800da94:	461f      	mov	r7, r3
 800da96:	220a      	movs	r2, #10
 800da98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800da9a:	7805      	ldrb	r5, [r0, #0]
 800da9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800daa0:	b2d9      	uxtb	r1, r3
 800daa2:	2909      	cmp	r1, #9
 800daa4:	d928      	bls.n	800daf8 <_strtod_l+0x1a8>
 800daa6:	494e      	ldr	r1, [pc, #312]	@ (800dbe0 <_strtod_l+0x290>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	f000 ffe7 	bl	800ea7c <strncmp>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d032      	beq.n	800db18 <_strtod_l+0x1c8>
 800dab2:	2000      	movs	r0, #0
 800dab4:	462a      	mov	r2, r5
 800dab6:	4681      	mov	r9, r0
 800dab8:	463d      	mov	r5, r7
 800daba:	4603      	mov	r3, r0
 800dabc:	2a65      	cmp	r2, #101	@ 0x65
 800dabe:	d001      	beq.n	800dac4 <_strtod_l+0x174>
 800dac0:	2a45      	cmp	r2, #69	@ 0x45
 800dac2:	d114      	bne.n	800daee <_strtod_l+0x19e>
 800dac4:	b91d      	cbnz	r5, 800dace <_strtod_l+0x17e>
 800dac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dac8:	4302      	orrs	r2, r0
 800daca:	d095      	beq.n	800d9f8 <_strtod_l+0xa8>
 800dacc:	2500      	movs	r5, #0
 800dace:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dad0:	1c62      	adds	r2, r4, #1
 800dad2:	9219      	str	r2, [sp, #100]	@ 0x64
 800dad4:	7862      	ldrb	r2, [r4, #1]
 800dad6:	2a2b      	cmp	r2, #43	@ 0x2b
 800dad8:	d077      	beq.n	800dbca <_strtod_l+0x27a>
 800dada:	2a2d      	cmp	r2, #45	@ 0x2d
 800dadc:	d07b      	beq.n	800dbd6 <_strtod_l+0x286>
 800dade:	f04f 0c00 	mov.w	ip, #0
 800dae2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dae6:	2909      	cmp	r1, #9
 800dae8:	f240 8082 	bls.w	800dbf0 <_strtod_l+0x2a0>
 800daec:	9419      	str	r4, [sp, #100]	@ 0x64
 800daee:	f04f 0800 	mov.w	r8, #0
 800daf2:	e0a2      	b.n	800dc3a <_strtod_l+0x2ea>
 800daf4:	2300      	movs	r3, #0
 800daf6:	e7c7      	b.n	800da88 <_strtod_l+0x138>
 800daf8:	2f08      	cmp	r7, #8
 800dafa:	bfd5      	itete	le
 800dafc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dafe:	9908      	ldrgt	r1, [sp, #32]
 800db00:	fb02 3301 	mlale	r3, r2, r1, r3
 800db04:	fb02 3301 	mlagt	r3, r2, r1, r3
 800db08:	f100 0001 	add.w	r0, r0, #1
 800db0c:	bfd4      	ite	le
 800db0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800db10:	9308      	strgt	r3, [sp, #32]
 800db12:	3701      	adds	r7, #1
 800db14:	9019      	str	r0, [sp, #100]	@ 0x64
 800db16:	e7bf      	b.n	800da98 <_strtod_l+0x148>
 800db18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800db1e:	785a      	ldrb	r2, [r3, #1]
 800db20:	b37f      	cbz	r7, 800db82 <_strtod_l+0x232>
 800db22:	4681      	mov	r9, r0
 800db24:	463d      	mov	r5, r7
 800db26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800db2a:	2b09      	cmp	r3, #9
 800db2c:	d912      	bls.n	800db54 <_strtod_l+0x204>
 800db2e:	2301      	movs	r3, #1
 800db30:	e7c4      	b.n	800dabc <_strtod_l+0x16c>
 800db32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	9219      	str	r2, [sp, #100]	@ 0x64
 800db38:	785a      	ldrb	r2, [r3, #1]
 800db3a:	3001      	adds	r0, #1
 800db3c:	2a30      	cmp	r2, #48	@ 0x30
 800db3e:	d0f8      	beq.n	800db32 <_strtod_l+0x1e2>
 800db40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800db44:	2b08      	cmp	r3, #8
 800db46:	f200 84d3 	bhi.w	800e4f0 <_strtod_l+0xba0>
 800db4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800db4e:	4681      	mov	r9, r0
 800db50:	2000      	movs	r0, #0
 800db52:	4605      	mov	r5, r0
 800db54:	3a30      	subs	r2, #48	@ 0x30
 800db56:	f100 0301 	add.w	r3, r0, #1
 800db5a:	d02a      	beq.n	800dbb2 <_strtod_l+0x262>
 800db5c:	4499      	add	r9, r3
 800db5e:	eb00 0c05 	add.w	ip, r0, r5
 800db62:	462b      	mov	r3, r5
 800db64:	210a      	movs	r1, #10
 800db66:	4563      	cmp	r3, ip
 800db68:	d10d      	bne.n	800db86 <_strtod_l+0x236>
 800db6a:	1c69      	adds	r1, r5, #1
 800db6c:	4401      	add	r1, r0
 800db6e:	4428      	add	r0, r5
 800db70:	2808      	cmp	r0, #8
 800db72:	dc16      	bgt.n	800dba2 <_strtod_l+0x252>
 800db74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db76:	230a      	movs	r3, #10
 800db78:	fb03 2300 	mla	r3, r3, r0, r2
 800db7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800db7e:	2300      	movs	r3, #0
 800db80:	e018      	b.n	800dbb4 <_strtod_l+0x264>
 800db82:	4638      	mov	r0, r7
 800db84:	e7da      	b.n	800db3c <_strtod_l+0x1ec>
 800db86:	2b08      	cmp	r3, #8
 800db88:	f103 0301 	add.w	r3, r3, #1
 800db8c:	dc03      	bgt.n	800db96 <_strtod_l+0x246>
 800db8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800db90:	434e      	muls	r6, r1
 800db92:	960a      	str	r6, [sp, #40]	@ 0x28
 800db94:	e7e7      	b.n	800db66 <_strtod_l+0x216>
 800db96:	2b10      	cmp	r3, #16
 800db98:	bfde      	ittt	le
 800db9a:	9e08      	ldrle	r6, [sp, #32]
 800db9c:	434e      	mulle	r6, r1
 800db9e:	9608      	strle	r6, [sp, #32]
 800dba0:	e7e1      	b.n	800db66 <_strtod_l+0x216>
 800dba2:	280f      	cmp	r0, #15
 800dba4:	dceb      	bgt.n	800db7e <_strtod_l+0x22e>
 800dba6:	9808      	ldr	r0, [sp, #32]
 800dba8:	230a      	movs	r3, #10
 800dbaa:	fb03 2300 	mla	r3, r3, r0, r2
 800dbae:	9308      	str	r3, [sp, #32]
 800dbb0:	e7e5      	b.n	800db7e <_strtod_l+0x22e>
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dbb6:	1c50      	adds	r0, r2, #1
 800dbb8:	9019      	str	r0, [sp, #100]	@ 0x64
 800dbba:	7852      	ldrb	r2, [r2, #1]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	460d      	mov	r5, r1
 800dbc0:	e7b1      	b.n	800db26 <_strtod_l+0x1d6>
 800dbc2:	f04f 0900 	mov.w	r9, #0
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e77d      	b.n	800dac6 <_strtod_l+0x176>
 800dbca:	f04f 0c00 	mov.w	ip, #0
 800dbce:	1ca2      	adds	r2, r4, #2
 800dbd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbd2:	78a2      	ldrb	r2, [r4, #2]
 800dbd4:	e785      	b.n	800dae2 <_strtod_l+0x192>
 800dbd6:	f04f 0c01 	mov.w	ip, #1
 800dbda:	e7f8      	b.n	800dbce <_strtod_l+0x27e>
 800dbdc:	08010360 	.word	0x08010360
 800dbe0:	08010348 	.word	0x08010348
 800dbe4:	7ff00000 	.word	0x7ff00000
 800dbe8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dbea:	1c51      	adds	r1, r2, #1
 800dbec:	9119      	str	r1, [sp, #100]	@ 0x64
 800dbee:	7852      	ldrb	r2, [r2, #1]
 800dbf0:	2a30      	cmp	r2, #48	@ 0x30
 800dbf2:	d0f9      	beq.n	800dbe8 <_strtod_l+0x298>
 800dbf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dbf8:	2908      	cmp	r1, #8
 800dbfa:	f63f af78 	bhi.w	800daee <_strtod_l+0x19e>
 800dbfe:	3a30      	subs	r2, #48	@ 0x30
 800dc00:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dc06:	f04f 080a 	mov.w	r8, #10
 800dc0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc0c:	1c56      	adds	r6, r2, #1
 800dc0e:	9619      	str	r6, [sp, #100]	@ 0x64
 800dc10:	7852      	ldrb	r2, [r2, #1]
 800dc12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dc16:	f1be 0f09 	cmp.w	lr, #9
 800dc1a:	d939      	bls.n	800dc90 <_strtod_l+0x340>
 800dc1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dc1e:	1a76      	subs	r6, r6, r1
 800dc20:	2e08      	cmp	r6, #8
 800dc22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dc26:	dc03      	bgt.n	800dc30 <_strtod_l+0x2e0>
 800dc28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dc2a:	4588      	cmp	r8, r1
 800dc2c:	bfa8      	it	ge
 800dc2e:	4688      	movge	r8, r1
 800dc30:	f1bc 0f00 	cmp.w	ip, #0
 800dc34:	d001      	beq.n	800dc3a <_strtod_l+0x2ea>
 800dc36:	f1c8 0800 	rsb	r8, r8, #0
 800dc3a:	2d00      	cmp	r5, #0
 800dc3c:	d14e      	bne.n	800dcdc <_strtod_l+0x38c>
 800dc3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc40:	4308      	orrs	r0, r1
 800dc42:	f47f aebe 	bne.w	800d9c2 <_strtod_l+0x72>
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f47f aed6 	bne.w	800d9f8 <_strtod_l+0xa8>
 800dc4c:	2a69      	cmp	r2, #105	@ 0x69
 800dc4e:	d028      	beq.n	800dca2 <_strtod_l+0x352>
 800dc50:	dc25      	bgt.n	800dc9e <_strtod_l+0x34e>
 800dc52:	2a49      	cmp	r2, #73	@ 0x49
 800dc54:	d025      	beq.n	800dca2 <_strtod_l+0x352>
 800dc56:	2a4e      	cmp	r2, #78	@ 0x4e
 800dc58:	f47f aece 	bne.w	800d9f8 <_strtod_l+0xa8>
 800dc5c:	499b      	ldr	r1, [pc, #620]	@ (800decc <_strtod_l+0x57c>)
 800dc5e:	a819      	add	r0, sp, #100	@ 0x64
 800dc60:	f001 f9da 	bl	800f018 <__match>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	f43f aec7 	beq.w	800d9f8 <_strtod_l+0xa8>
 800dc6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	2b28      	cmp	r3, #40	@ 0x28
 800dc70:	d12e      	bne.n	800dcd0 <_strtod_l+0x380>
 800dc72:	4997      	ldr	r1, [pc, #604]	@ (800ded0 <_strtod_l+0x580>)
 800dc74:	aa1c      	add	r2, sp, #112	@ 0x70
 800dc76:	a819      	add	r0, sp, #100	@ 0x64
 800dc78:	f001 f9e2 	bl	800f040 <__hexnan>
 800dc7c:	2805      	cmp	r0, #5
 800dc7e:	d127      	bne.n	800dcd0 <_strtod_l+0x380>
 800dc80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dc86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dc8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dc8e:	e698      	b.n	800d9c2 <_strtod_l+0x72>
 800dc90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dc92:	fb08 2101 	mla	r1, r8, r1, r2
 800dc96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dc9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc9c:	e7b5      	b.n	800dc0a <_strtod_l+0x2ba>
 800dc9e:	2a6e      	cmp	r2, #110	@ 0x6e
 800dca0:	e7da      	b.n	800dc58 <_strtod_l+0x308>
 800dca2:	498c      	ldr	r1, [pc, #560]	@ (800ded4 <_strtod_l+0x584>)
 800dca4:	a819      	add	r0, sp, #100	@ 0x64
 800dca6:	f001 f9b7 	bl	800f018 <__match>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	f43f aea4 	beq.w	800d9f8 <_strtod_l+0xa8>
 800dcb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcb2:	4989      	ldr	r1, [pc, #548]	@ (800ded8 <_strtod_l+0x588>)
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	a819      	add	r0, sp, #100	@ 0x64
 800dcb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800dcba:	f001 f9ad 	bl	800f018 <__match>
 800dcbe:	b910      	cbnz	r0, 800dcc6 <_strtod_l+0x376>
 800dcc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dcc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dee8 <_strtod_l+0x598>
 800dcca:	f04f 0a00 	mov.w	sl, #0
 800dcce:	e678      	b.n	800d9c2 <_strtod_l+0x72>
 800dcd0:	4882      	ldr	r0, [pc, #520]	@ (800dedc <_strtod_l+0x58c>)
 800dcd2:	f000 fef5 	bl	800eac0 <nan>
 800dcd6:	ec5b ab10 	vmov	sl, fp, d0
 800dcda:	e672      	b.n	800d9c2 <_strtod_l+0x72>
 800dcdc:	eba8 0309 	sub.w	r3, r8, r9
 800dce0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce4:	2f00      	cmp	r7, #0
 800dce6:	bf08      	it	eq
 800dce8:	462f      	moveq	r7, r5
 800dcea:	2d10      	cmp	r5, #16
 800dcec:	462c      	mov	r4, r5
 800dcee:	bfa8      	it	ge
 800dcf0:	2410      	movge	r4, #16
 800dcf2:	f7f2 fc27 	bl	8000544 <__aeabi_ui2d>
 800dcf6:	2d09      	cmp	r5, #9
 800dcf8:	4682      	mov	sl, r0
 800dcfa:	468b      	mov	fp, r1
 800dcfc:	dc13      	bgt.n	800dd26 <_strtod_l+0x3d6>
 800dcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f43f ae5e 	beq.w	800d9c2 <_strtod_l+0x72>
 800dd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd08:	dd78      	ble.n	800ddfc <_strtod_l+0x4ac>
 800dd0a:	2b16      	cmp	r3, #22
 800dd0c:	dc5f      	bgt.n	800ddce <_strtod_l+0x47e>
 800dd0e:	4974      	ldr	r1, [pc, #464]	@ (800dee0 <_strtod_l+0x590>)
 800dd10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd18:	4652      	mov	r2, sl
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	f7f2 fc8c 	bl	8000638 <__aeabi_dmul>
 800dd20:	4682      	mov	sl, r0
 800dd22:	468b      	mov	fp, r1
 800dd24:	e64d      	b.n	800d9c2 <_strtod_l+0x72>
 800dd26:	4b6e      	ldr	r3, [pc, #440]	@ (800dee0 <_strtod_l+0x590>)
 800dd28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dd30:	f7f2 fc82 	bl	8000638 <__aeabi_dmul>
 800dd34:	4682      	mov	sl, r0
 800dd36:	9808      	ldr	r0, [sp, #32]
 800dd38:	468b      	mov	fp, r1
 800dd3a:	f7f2 fc03 	bl	8000544 <__aeabi_ui2d>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4650      	mov	r0, sl
 800dd44:	4659      	mov	r1, fp
 800dd46:	f7f2 fac1 	bl	80002cc <__adddf3>
 800dd4a:	2d0f      	cmp	r5, #15
 800dd4c:	4682      	mov	sl, r0
 800dd4e:	468b      	mov	fp, r1
 800dd50:	ddd5      	ble.n	800dcfe <_strtod_l+0x3ae>
 800dd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd54:	1b2c      	subs	r4, r5, r4
 800dd56:	441c      	add	r4, r3
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	f340 8096 	ble.w	800de8a <_strtod_l+0x53a>
 800dd5e:	f014 030f 	ands.w	r3, r4, #15
 800dd62:	d00a      	beq.n	800dd7a <_strtod_l+0x42a>
 800dd64:	495e      	ldr	r1, [pc, #376]	@ (800dee0 <_strtod_l+0x590>)
 800dd66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd72:	f7f2 fc61 	bl	8000638 <__aeabi_dmul>
 800dd76:	4682      	mov	sl, r0
 800dd78:	468b      	mov	fp, r1
 800dd7a:	f034 040f 	bics.w	r4, r4, #15
 800dd7e:	d073      	beq.n	800de68 <_strtod_l+0x518>
 800dd80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dd84:	dd48      	ble.n	800de18 <_strtod_l+0x4c8>
 800dd86:	2400      	movs	r4, #0
 800dd88:	46a0      	mov	r8, r4
 800dd8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd8c:	46a1      	mov	r9, r4
 800dd8e:	9a05      	ldr	r2, [sp, #20]
 800dd90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dee8 <_strtod_l+0x598>
 800dd94:	2322      	movs	r3, #34	@ 0x22
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	f04f 0a00 	mov.w	sl, #0
 800dd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f43f ae0f 	beq.w	800d9c2 <_strtod_l+0x72>
 800dda4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dda6:	9805      	ldr	r0, [sp, #20]
 800dda8:	f7ff f942 	bl	800d030 <_Bfree>
 800ddac:	9805      	ldr	r0, [sp, #20]
 800ddae:	4649      	mov	r1, r9
 800ddb0:	f7ff f93e 	bl	800d030 <_Bfree>
 800ddb4:	9805      	ldr	r0, [sp, #20]
 800ddb6:	4641      	mov	r1, r8
 800ddb8:	f7ff f93a 	bl	800d030 <_Bfree>
 800ddbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ddbe:	9805      	ldr	r0, [sp, #20]
 800ddc0:	f7ff f936 	bl	800d030 <_Bfree>
 800ddc4:	9805      	ldr	r0, [sp, #20]
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	f7ff f932 	bl	800d030 <_Bfree>
 800ddcc:	e5f9      	b.n	800d9c2 <_strtod_l+0x72>
 800ddce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	dbbc      	blt.n	800dd52 <_strtod_l+0x402>
 800ddd8:	4c41      	ldr	r4, [pc, #260]	@ (800dee0 <_strtod_l+0x590>)
 800ddda:	f1c5 050f 	rsb	r5, r5, #15
 800ddde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dde2:	4652      	mov	r2, sl
 800dde4:	465b      	mov	r3, fp
 800dde6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddea:	f7f2 fc25 	bl	8000638 <__aeabi_dmul>
 800ddee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf0:	1b5d      	subs	r5, r3, r5
 800ddf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ddf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ddfa:	e78f      	b.n	800dd1c <_strtod_l+0x3cc>
 800ddfc:	3316      	adds	r3, #22
 800ddfe:	dba8      	blt.n	800dd52 <_strtod_l+0x402>
 800de00:	4b37      	ldr	r3, [pc, #220]	@ (800dee0 <_strtod_l+0x590>)
 800de02:	eba9 0808 	sub.w	r8, r9, r8
 800de06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800de0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800de0e:	4650      	mov	r0, sl
 800de10:	4659      	mov	r1, fp
 800de12:	f7f2 fd3b 	bl	800088c <__aeabi_ddiv>
 800de16:	e783      	b.n	800dd20 <_strtod_l+0x3d0>
 800de18:	4b32      	ldr	r3, [pc, #200]	@ (800dee4 <_strtod_l+0x594>)
 800de1a:	9308      	str	r3, [sp, #32]
 800de1c:	2300      	movs	r3, #0
 800de1e:	1124      	asrs	r4, r4, #4
 800de20:	4650      	mov	r0, sl
 800de22:	4659      	mov	r1, fp
 800de24:	461e      	mov	r6, r3
 800de26:	2c01      	cmp	r4, #1
 800de28:	dc21      	bgt.n	800de6e <_strtod_l+0x51e>
 800de2a:	b10b      	cbz	r3, 800de30 <_strtod_l+0x4e0>
 800de2c:	4682      	mov	sl, r0
 800de2e:	468b      	mov	fp, r1
 800de30:	492c      	ldr	r1, [pc, #176]	@ (800dee4 <_strtod_l+0x594>)
 800de32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800de36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800de3a:	4652      	mov	r2, sl
 800de3c:	465b      	mov	r3, fp
 800de3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de42:	f7f2 fbf9 	bl	8000638 <__aeabi_dmul>
 800de46:	4b28      	ldr	r3, [pc, #160]	@ (800dee8 <_strtod_l+0x598>)
 800de48:	460a      	mov	r2, r1
 800de4a:	400b      	ands	r3, r1
 800de4c:	4927      	ldr	r1, [pc, #156]	@ (800deec <_strtod_l+0x59c>)
 800de4e:	428b      	cmp	r3, r1
 800de50:	4682      	mov	sl, r0
 800de52:	d898      	bhi.n	800dd86 <_strtod_l+0x436>
 800de54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf86      	itte	hi
 800de5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800def0 <_strtod_l+0x5a0>
 800de60:	f04f 3aff 	movhi.w	sl, #4294967295
 800de64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800de68:	2300      	movs	r3, #0
 800de6a:	9308      	str	r3, [sp, #32]
 800de6c:	e07a      	b.n	800df64 <_strtod_l+0x614>
 800de6e:	07e2      	lsls	r2, r4, #31
 800de70:	d505      	bpl.n	800de7e <_strtod_l+0x52e>
 800de72:	9b08      	ldr	r3, [sp, #32]
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f7f2 fbde 	bl	8000638 <__aeabi_dmul>
 800de7c:	2301      	movs	r3, #1
 800de7e:	9a08      	ldr	r2, [sp, #32]
 800de80:	3208      	adds	r2, #8
 800de82:	3601      	adds	r6, #1
 800de84:	1064      	asrs	r4, r4, #1
 800de86:	9208      	str	r2, [sp, #32]
 800de88:	e7cd      	b.n	800de26 <_strtod_l+0x4d6>
 800de8a:	d0ed      	beq.n	800de68 <_strtod_l+0x518>
 800de8c:	4264      	negs	r4, r4
 800de8e:	f014 020f 	ands.w	r2, r4, #15
 800de92:	d00a      	beq.n	800deaa <_strtod_l+0x55a>
 800de94:	4b12      	ldr	r3, [pc, #72]	@ (800dee0 <_strtod_l+0x590>)
 800de96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de9a:	4650      	mov	r0, sl
 800de9c:	4659      	mov	r1, fp
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	f7f2 fcf3 	bl	800088c <__aeabi_ddiv>
 800dea6:	4682      	mov	sl, r0
 800dea8:	468b      	mov	fp, r1
 800deaa:	1124      	asrs	r4, r4, #4
 800deac:	d0dc      	beq.n	800de68 <_strtod_l+0x518>
 800deae:	2c1f      	cmp	r4, #31
 800deb0:	dd20      	ble.n	800def4 <_strtod_l+0x5a4>
 800deb2:	2400      	movs	r4, #0
 800deb4:	46a0      	mov	r8, r4
 800deb6:	940a      	str	r4, [sp, #40]	@ 0x28
 800deb8:	46a1      	mov	r9, r4
 800deba:	9a05      	ldr	r2, [sp, #20]
 800debc:	2322      	movs	r3, #34	@ 0x22
 800debe:	f04f 0a00 	mov.w	sl, #0
 800dec2:	f04f 0b00 	mov.w	fp, #0
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	e768      	b.n	800dd9c <_strtod_l+0x44c>
 800deca:	bf00      	nop
 800decc:	080100f9 	.word	0x080100f9
 800ded0:	0801034c 	.word	0x0801034c
 800ded4:	080100f1 	.word	0x080100f1
 800ded8:	08010164 	.word	0x08010164
 800dedc:	08010160 	.word	0x08010160
 800dee0:	08010280 	.word	0x08010280
 800dee4:	08010258 	.word	0x08010258
 800dee8:	7ff00000 	.word	0x7ff00000
 800deec:	7ca00000 	.word	0x7ca00000
 800def0:	7fefffff 	.word	0x7fefffff
 800def4:	f014 0310 	ands.w	r3, r4, #16
 800def8:	bf18      	it	ne
 800defa:	236a      	movne	r3, #106	@ 0x6a
 800defc:	4ea9      	ldr	r6, [pc, #676]	@ (800e1a4 <_strtod_l+0x854>)
 800defe:	9308      	str	r3, [sp, #32]
 800df00:	4650      	mov	r0, sl
 800df02:	4659      	mov	r1, fp
 800df04:	2300      	movs	r3, #0
 800df06:	07e2      	lsls	r2, r4, #31
 800df08:	d504      	bpl.n	800df14 <_strtod_l+0x5c4>
 800df0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df0e:	f7f2 fb93 	bl	8000638 <__aeabi_dmul>
 800df12:	2301      	movs	r3, #1
 800df14:	1064      	asrs	r4, r4, #1
 800df16:	f106 0608 	add.w	r6, r6, #8
 800df1a:	d1f4      	bne.n	800df06 <_strtod_l+0x5b6>
 800df1c:	b10b      	cbz	r3, 800df22 <_strtod_l+0x5d2>
 800df1e:	4682      	mov	sl, r0
 800df20:	468b      	mov	fp, r1
 800df22:	9b08      	ldr	r3, [sp, #32]
 800df24:	b1b3      	cbz	r3, 800df54 <_strtod_l+0x604>
 800df26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800df2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800df2e:	2b00      	cmp	r3, #0
 800df30:	4659      	mov	r1, fp
 800df32:	dd0f      	ble.n	800df54 <_strtod_l+0x604>
 800df34:	2b1f      	cmp	r3, #31
 800df36:	dd55      	ble.n	800dfe4 <_strtod_l+0x694>
 800df38:	2b34      	cmp	r3, #52	@ 0x34
 800df3a:	bfde      	ittt	le
 800df3c:	f04f 33ff 	movle.w	r3, #4294967295
 800df40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800df44:	4093      	lslle	r3, r2
 800df46:	f04f 0a00 	mov.w	sl, #0
 800df4a:	bfcc      	ite	gt
 800df4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800df50:	ea03 0b01 	andle.w	fp, r3, r1
 800df54:	2200      	movs	r2, #0
 800df56:	2300      	movs	r3, #0
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 800df60:	2800      	cmp	r0, #0
 800df62:	d1a6      	bne.n	800deb2 <_strtod_l+0x562>
 800df64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df6a:	9805      	ldr	r0, [sp, #20]
 800df6c:	462b      	mov	r3, r5
 800df6e:	463a      	mov	r2, r7
 800df70:	f7ff f8c6 	bl	800d100 <__s2b>
 800df74:	900a      	str	r0, [sp, #40]	@ 0x28
 800df76:	2800      	cmp	r0, #0
 800df78:	f43f af05 	beq.w	800dd86 <_strtod_l+0x436>
 800df7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df7e:	2a00      	cmp	r2, #0
 800df80:	eba9 0308 	sub.w	r3, r9, r8
 800df84:	bfa8      	it	ge
 800df86:	2300      	movge	r3, #0
 800df88:	9312      	str	r3, [sp, #72]	@ 0x48
 800df8a:	2400      	movs	r4, #0
 800df8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df90:	9316      	str	r3, [sp, #88]	@ 0x58
 800df92:	46a0      	mov	r8, r4
 800df94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df96:	9805      	ldr	r0, [sp, #20]
 800df98:	6859      	ldr	r1, [r3, #4]
 800df9a:	f7ff f809 	bl	800cfb0 <_Balloc>
 800df9e:	4681      	mov	r9, r0
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	f43f aef4 	beq.w	800dd8e <_strtod_l+0x43e>
 800dfa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfa8:	691a      	ldr	r2, [r3, #16]
 800dfaa:	3202      	adds	r2, #2
 800dfac:	f103 010c 	add.w	r1, r3, #12
 800dfb0:	0092      	lsls	r2, r2, #2
 800dfb2:	300c      	adds	r0, #12
 800dfb4:	f7fe f87d 	bl	800c0b2 <memcpy>
 800dfb8:	ec4b ab10 	vmov	d0, sl, fp
 800dfbc:	9805      	ldr	r0, [sp, #20]
 800dfbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800dfc0:	a91b      	add	r1, sp, #108	@ 0x6c
 800dfc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dfc6:	f7ff fbd7 	bl	800d778 <__d2b>
 800dfca:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f43f aede 	beq.w	800dd8e <_strtod_l+0x43e>
 800dfd2:	9805      	ldr	r0, [sp, #20]
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	f7ff f929 	bl	800d22c <__i2b>
 800dfda:	4680      	mov	r8, r0
 800dfdc:	b948      	cbnz	r0, 800dff2 <_strtod_l+0x6a2>
 800dfde:	f04f 0800 	mov.w	r8, #0
 800dfe2:	e6d4      	b.n	800dd8e <_strtod_l+0x43e>
 800dfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfec:	ea03 0a0a 	and.w	sl, r3, sl
 800dff0:	e7b0      	b.n	800df54 <_strtod_l+0x604>
 800dff2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dff4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dff6:	2d00      	cmp	r5, #0
 800dff8:	bfab      	itete	ge
 800dffa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dffc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dffe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e000:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e002:	bfac      	ite	ge
 800e004:	18ef      	addge	r7, r5, r3
 800e006:	1b5e      	sublt	r6, r3, r5
 800e008:	9b08      	ldr	r3, [sp, #32]
 800e00a:	1aed      	subs	r5, r5, r3
 800e00c:	4415      	add	r5, r2
 800e00e:	4b66      	ldr	r3, [pc, #408]	@ (800e1a8 <_strtod_l+0x858>)
 800e010:	3d01      	subs	r5, #1
 800e012:	429d      	cmp	r5, r3
 800e014:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e018:	da50      	bge.n	800e0bc <_strtod_l+0x76c>
 800e01a:	1b5b      	subs	r3, r3, r5
 800e01c:	2b1f      	cmp	r3, #31
 800e01e:	eba2 0203 	sub.w	r2, r2, r3
 800e022:	f04f 0101 	mov.w	r1, #1
 800e026:	dc3d      	bgt.n	800e0a4 <_strtod_l+0x754>
 800e028:	fa01 f303 	lsl.w	r3, r1, r3
 800e02c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e02e:	2300      	movs	r3, #0
 800e030:	9310      	str	r3, [sp, #64]	@ 0x40
 800e032:	18bd      	adds	r5, r7, r2
 800e034:	9b08      	ldr	r3, [sp, #32]
 800e036:	42af      	cmp	r7, r5
 800e038:	4416      	add	r6, r2
 800e03a:	441e      	add	r6, r3
 800e03c:	463b      	mov	r3, r7
 800e03e:	bfa8      	it	ge
 800e040:	462b      	movge	r3, r5
 800e042:	42b3      	cmp	r3, r6
 800e044:	bfa8      	it	ge
 800e046:	4633      	movge	r3, r6
 800e048:	2b00      	cmp	r3, #0
 800e04a:	bfc2      	ittt	gt
 800e04c:	1aed      	subgt	r5, r5, r3
 800e04e:	1af6      	subgt	r6, r6, r3
 800e050:	1aff      	subgt	r7, r7, r3
 800e052:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e054:	2b00      	cmp	r3, #0
 800e056:	dd16      	ble.n	800e086 <_strtod_l+0x736>
 800e058:	4641      	mov	r1, r8
 800e05a:	9805      	ldr	r0, [sp, #20]
 800e05c:	461a      	mov	r2, r3
 800e05e:	f7ff f9a5 	bl	800d3ac <__pow5mult>
 800e062:	4680      	mov	r8, r0
 800e064:	2800      	cmp	r0, #0
 800e066:	d0ba      	beq.n	800dfde <_strtod_l+0x68e>
 800e068:	4601      	mov	r1, r0
 800e06a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e06c:	9805      	ldr	r0, [sp, #20]
 800e06e:	f7ff f8f3 	bl	800d258 <__multiply>
 800e072:	900e      	str	r0, [sp, #56]	@ 0x38
 800e074:	2800      	cmp	r0, #0
 800e076:	f43f ae8a 	beq.w	800dd8e <_strtod_l+0x43e>
 800e07a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e07c:	9805      	ldr	r0, [sp, #20]
 800e07e:	f7fe ffd7 	bl	800d030 <_Bfree>
 800e082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e084:	931a      	str	r3, [sp, #104]	@ 0x68
 800e086:	2d00      	cmp	r5, #0
 800e088:	dc1d      	bgt.n	800e0c6 <_strtod_l+0x776>
 800e08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	dd23      	ble.n	800e0d8 <_strtod_l+0x788>
 800e090:	4649      	mov	r1, r9
 800e092:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e094:	9805      	ldr	r0, [sp, #20]
 800e096:	f7ff f989 	bl	800d3ac <__pow5mult>
 800e09a:	4681      	mov	r9, r0
 800e09c:	b9e0      	cbnz	r0, 800e0d8 <_strtod_l+0x788>
 800e09e:	f04f 0900 	mov.w	r9, #0
 800e0a2:	e674      	b.n	800dd8e <_strtod_l+0x43e>
 800e0a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e0a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e0ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e0b0:	35e2      	adds	r5, #226	@ 0xe2
 800e0b2:	fa01 f305 	lsl.w	r3, r1, r5
 800e0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e0b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e0ba:	e7ba      	b.n	800e032 <_strtod_l+0x6e2>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9310      	str	r3, [sp, #64]	@ 0x40
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0c4:	e7b5      	b.n	800e032 <_strtod_l+0x6e2>
 800e0c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0c8:	9805      	ldr	r0, [sp, #20]
 800e0ca:	462a      	mov	r2, r5
 800e0cc:	f7ff f9c8 	bl	800d460 <__lshift>
 800e0d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d1d9      	bne.n	800e08a <_strtod_l+0x73a>
 800e0d6:	e65a      	b.n	800dd8e <_strtod_l+0x43e>
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	dd07      	ble.n	800e0ec <_strtod_l+0x79c>
 800e0dc:	4649      	mov	r1, r9
 800e0de:	9805      	ldr	r0, [sp, #20]
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	f7ff f9bd 	bl	800d460 <__lshift>
 800e0e6:	4681      	mov	r9, r0
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d0d8      	beq.n	800e09e <_strtod_l+0x74e>
 800e0ec:	2f00      	cmp	r7, #0
 800e0ee:	dd08      	ble.n	800e102 <_strtod_l+0x7b2>
 800e0f0:	4641      	mov	r1, r8
 800e0f2:	9805      	ldr	r0, [sp, #20]
 800e0f4:	463a      	mov	r2, r7
 800e0f6:	f7ff f9b3 	bl	800d460 <__lshift>
 800e0fa:	4680      	mov	r8, r0
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	f43f ae46 	beq.w	800dd8e <_strtod_l+0x43e>
 800e102:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e104:	9805      	ldr	r0, [sp, #20]
 800e106:	464a      	mov	r2, r9
 800e108:	f7ff fa32 	bl	800d570 <__mdiff>
 800e10c:	4604      	mov	r4, r0
 800e10e:	2800      	cmp	r0, #0
 800e110:	f43f ae3d 	beq.w	800dd8e <_strtod_l+0x43e>
 800e114:	68c3      	ldr	r3, [r0, #12]
 800e116:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e118:	2300      	movs	r3, #0
 800e11a:	60c3      	str	r3, [r0, #12]
 800e11c:	4641      	mov	r1, r8
 800e11e:	f7ff fa0b 	bl	800d538 <__mcmp>
 800e122:	2800      	cmp	r0, #0
 800e124:	da46      	bge.n	800e1b4 <_strtod_l+0x864>
 800e126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e128:	ea53 030a 	orrs.w	r3, r3, sl
 800e12c:	d16c      	bne.n	800e208 <_strtod_l+0x8b8>
 800e12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e132:	2b00      	cmp	r3, #0
 800e134:	d168      	bne.n	800e208 <_strtod_l+0x8b8>
 800e136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e13a:	0d1b      	lsrs	r3, r3, #20
 800e13c:	051b      	lsls	r3, r3, #20
 800e13e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e142:	d961      	bls.n	800e208 <_strtod_l+0x8b8>
 800e144:	6963      	ldr	r3, [r4, #20]
 800e146:	b913      	cbnz	r3, 800e14e <_strtod_l+0x7fe>
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	dd5c      	ble.n	800e208 <_strtod_l+0x8b8>
 800e14e:	4621      	mov	r1, r4
 800e150:	2201      	movs	r2, #1
 800e152:	9805      	ldr	r0, [sp, #20]
 800e154:	f7ff f984 	bl	800d460 <__lshift>
 800e158:	4641      	mov	r1, r8
 800e15a:	4604      	mov	r4, r0
 800e15c:	f7ff f9ec 	bl	800d538 <__mcmp>
 800e160:	2800      	cmp	r0, #0
 800e162:	dd51      	ble.n	800e208 <_strtod_l+0x8b8>
 800e164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e168:	9a08      	ldr	r2, [sp, #32]
 800e16a:	0d1b      	lsrs	r3, r3, #20
 800e16c:	051b      	lsls	r3, r3, #20
 800e16e:	2a00      	cmp	r2, #0
 800e170:	d06b      	beq.n	800e24a <_strtod_l+0x8fa>
 800e172:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e176:	d868      	bhi.n	800e24a <_strtod_l+0x8fa>
 800e178:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e17c:	f67f ae9d 	bls.w	800deba <_strtod_l+0x56a>
 800e180:	4b0a      	ldr	r3, [pc, #40]	@ (800e1ac <_strtod_l+0x85c>)
 800e182:	4650      	mov	r0, sl
 800e184:	4659      	mov	r1, fp
 800e186:	2200      	movs	r2, #0
 800e188:	f7f2 fa56 	bl	8000638 <__aeabi_dmul>
 800e18c:	4b08      	ldr	r3, [pc, #32]	@ (800e1b0 <_strtod_l+0x860>)
 800e18e:	400b      	ands	r3, r1
 800e190:	4682      	mov	sl, r0
 800e192:	468b      	mov	fp, r1
 800e194:	2b00      	cmp	r3, #0
 800e196:	f47f ae05 	bne.w	800dda4 <_strtod_l+0x454>
 800e19a:	9a05      	ldr	r2, [sp, #20]
 800e19c:	2322      	movs	r3, #34	@ 0x22
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	e600      	b.n	800dda4 <_strtod_l+0x454>
 800e1a2:	bf00      	nop
 800e1a4:	08010378 	.word	0x08010378
 800e1a8:	fffffc02 	.word	0xfffffc02
 800e1ac:	39500000 	.word	0x39500000
 800e1b0:	7ff00000 	.word	0x7ff00000
 800e1b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e1b8:	d165      	bne.n	800e286 <_strtod_l+0x936>
 800e1ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1c0:	b35a      	cbz	r2, 800e21a <_strtod_l+0x8ca>
 800e1c2:	4a9f      	ldr	r2, [pc, #636]	@ (800e440 <_strtod_l+0xaf0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d12b      	bne.n	800e220 <_strtod_l+0x8d0>
 800e1c8:	9b08      	ldr	r3, [sp, #32]
 800e1ca:	4651      	mov	r1, sl
 800e1cc:	b303      	cbz	r3, 800e210 <_strtod_l+0x8c0>
 800e1ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e444 <_strtod_l+0xaf4>)
 800e1d0:	465a      	mov	r2, fp
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1dc:	d81b      	bhi.n	800e216 <_strtod_l+0x8c6>
 800e1de:	0d1b      	lsrs	r3, r3, #20
 800e1e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e8:	4299      	cmp	r1, r3
 800e1ea:	d119      	bne.n	800e220 <_strtod_l+0x8d0>
 800e1ec:	4b96      	ldr	r3, [pc, #600]	@ (800e448 <_strtod_l+0xaf8>)
 800e1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d102      	bne.n	800e1fa <_strtod_l+0x8aa>
 800e1f4:	3101      	adds	r1, #1
 800e1f6:	f43f adca 	beq.w	800dd8e <_strtod_l+0x43e>
 800e1fa:	4b92      	ldr	r3, [pc, #584]	@ (800e444 <_strtod_l+0xaf4>)
 800e1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1fe:	401a      	ands	r2, r3
 800e200:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e204:	f04f 0a00 	mov.w	sl, #0
 800e208:	9b08      	ldr	r3, [sp, #32]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1b8      	bne.n	800e180 <_strtod_l+0x830>
 800e20e:	e5c9      	b.n	800dda4 <_strtod_l+0x454>
 800e210:	f04f 33ff 	mov.w	r3, #4294967295
 800e214:	e7e8      	b.n	800e1e8 <_strtod_l+0x898>
 800e216:	4613      	mov	r3, r2
 800e218:	e7e6      	b.n	800e1e8 <_strtod_l+0x898>
 800e21a:	ea53 030a 	orrs.w	r3, r3, sl
 800e21e:	d0a1      	beq.n	800e164 <_strtod_l+0x814>
 800e220:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e222:	b1db      	cbz	r3, 800e25c <_strtod_l+0x90c>
 800e224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e226:	4213      	tst	r3, r2
 800e228:	d0ee      	beq.n	800e208 <_strtod_l+0x8b8>
 800e22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e22c:	9a08      	ldr	r2, [sp, #32]
 800e22e:	4650      	mov	r0, sl
 800e230:	4659      	mov	r1, fp
 800e232:	b1bb      	cbz	r3, 800e264 <_strtod_l+0x914>
 800e234:	f7ff fb6e 	bl	800d914 <sulp>
 800e238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e23c:	ec53 2b10 	vmov	r2, r3, d0
 800e240:	f7f2 f844 	bl	80002cc <__adddf3>
 800e244:	4682      	mov	sl, r0
 800e246:	468b      	mov	fp, r1
 800e248:	e7de      	b.n	800e208 <_strtod_l+0x8b8>
 800e24a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e24e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e252:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e256:	f04f 3aff 	mov.w	sl, #4294967295
 800e25a:	e7d5      	b.n	800e208 <_strtod_l+0x8b8>
 800e25c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e25e:	ea13 0f0a 	tst.w	r3, sl
 800e262:	e7e1      	b.n	800e228 <_strtod_l+0x8d8>
 800e264:	f7ff fb56 	bl	800d914 <sulp>
 800e268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e26c:	ec53 2b10 	vmov	r2, r3, d0
 800e270:	f7f2 f82a 	bl	80002c8 <__aeabi_dsub>
 800e274:	2200      	movs	r2, #0
 800e276:	2300      	movs	r3, #0
 800e278:	4682      	mov	sl, r0
 800e27a:	468b      	mov	fp, r1
 800e27c:	f7f2 fc44 	bl	8000b08 <__aeabi_dcmpeq>
 800e280:	2800      	cmp	r0, #0
 800e282:	d0c1      	beq.n	800e208 <_strtod_l+0x8b8>
 800e284:	e619      	b.n	800deba <_strtod_l+0x56a>
 800e286:	4641      	mov	r1, r8
 800e288:	4620      	mov	r0, r4
 800e28a:	f7ff facd 	bl	800d828 <__ratio>
 800e28e:	ec57 6b10 	vmov	r6, r7, d0
 800e292:	2200      	movs	r2, #0
 800e294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 fc48 	bl	8000b30 <__aeabi_dcmple>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d06f      	beq.n	800e384 <_strtod_l+0xa34>
 800e2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d17a      	bne.n	800e3a0 <_strtod_l+0xa50>
 800e2aa:	f1ba 0f00 	cmp.w	sl, #0
 800e2ae:	d158      	bne.n	800e362 <_strtod_l+0xa12>
 800e2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d15a      	bne.n	800e370 <_strtod_l+0xa20>
 800e2ba:	4b64      	ldr	r3, [pc, #400]	@ (800e44c <_strtod_l+0xafc>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	4630      	mov	r0, r6
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	f7f2 fc2b 	bl	8000b1c <__aeabi_dcmplt>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d159      	bne.n	800e37e <_strtod_l+0xa2e>
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	4639      	mov	r1, r7
 800e2ce:	4b60      	ldr	r3, [pc, #384]	@ (800e450 <_strtod_l+0xb00>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f7f2 f9b1 	bl	8000638 <__aeabi_dmul>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	460f      	mov	r7, r1
 800e2da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e2de:	9606      	str	r6, [sp, #24]
 800e2e0:	9307      	str	r3, [sp, #28]
 800e2e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2e6:	4d57      	ldr	r5, [pc, #348]	@ (800e444 <_strtod_l+0xaf4>)
 800e2e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2ee:	401d      	ands	r5, r3
 800e2f0:	4b58      	ldr	r3, [pc, #352]	@ (800e454 <_strtod_l+0xb04>)
 800e2f2:	429d      	cmp	r5, r3
 800e2f4:	f040 80b2 	bne.w	800e45c <_strtod_l+0xb0c>
 800e2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e2fe:	ec4b ab10 	vmov	d0, sl, fp
 800e302:	f7ff f9c9 	bl	800d698 <__ulp>
 800e306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e30a:	ec51 0b10 	vmov	r0, r1, d0
 800e30e:	f7f2 f993 	bl	8000638 <__aeabi_dmul>
 800e312:	4652      	mov	r2, sl
 800e314:	465b      	mov	r3, fp
 800e316:	f7f1 ffd9 	bl	80002cc <__adddf3>
 800e31a:	460b      	mov	r3, r1
 800e31c:	4949      	ldr	r1, [pc, #292]	@ (800e444 <_strtod_l+0xaf4>)
 800e31e:	4a4e      	ldr	r2, [pc, #312]	@ (800e458 <_strtod_l+0xb08>)
 800e320:	4019      	ands	r1, r3
 800e322:	4291      	cmp	r1, r2
 800e324:	4682      	mov	sl, r0
 800e326:	d942      	bls.n	800e3ae <_strtod_l+0xa5e>
 800e328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e32a:	4b47      	ldr	r3, [pc, #284]	@ (800e448 <_strtod_l+0xaf8>)
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d103      	bne.n	800e338 <_strtod_l+0x9e8>
 800e330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e332:	3301      	adds	r3, #1
 800e334:	f43f ad2b 	beq.w	800dd8e <_strtod_l+0x43e>
 800e338:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e448 <_strtod_l+0xaf8>
 800e33c:	f04f 3aff 	mov.w	sl, #4294967295
 800e340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e342:	9805      	ldr	r0, [sp, #20]
 800e344:	f7fe fe74 	bl	800d030 <_Bfree>
 800e348:	9805      	ldr	r0, [sp, #20]
 800e34a:	4649      	mov	r1, r9
 800e34c:	f7fe fe70 	bl	800d030 <_Bfree>
 800e350:	9805      	ldr	r0, [sp, #20]
 800e352:	4641      	mov	r1, r8
 800e354:	f7fe fe6c 	bl	800d030 <_Bfree>
 800e358:	9805      	ldr	r0, [sp, #20]
 800e35a:	4621      	mov	r1, r4
 800e35c:	f7fe fe68 	bl	800d030 <_Bfree>
 800e360:	e618      	b.n	800df94 <_strtod_l+0x644>
 800e362:	f1ba 0f01 	cmp.w	sl, #1
 800e366:	d103      	bne.n	800e370 <_strtod_l+0xa20>
 800e368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f43f ada5 	beq.w	800deba <_strtod_l+0x56a>
 800e370:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e420 <_strtod_l+0xad0>
 800e374:	4f35      	ldr	r7, [pc, #212]	@ (800e44c <_strtod_l+0xafc>)
 800e376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e37a:	2600      	movs	r6, #0
 800e37c:	e7b1      	b.n	800e2e2 <_strtod_l+0x992>
 800e37e:	4f34      	ldr	r7, [pc, #208]	@ (800e450 <_strtod_l+0xb00>)
 800e380:	2600      	movs	r6, #0
 800e382:	e7aa      	b.n	800e2da <_strtod_l+0x98a>
 800e384:	4b32      	ldr	r3, [pc, #200]	@ (800e450 <_strtod_l+0xb00>)
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	2200      	movs	r2, #0
 800e38c:	f7f2 f954 	bl	8000638 <__aeabi_dmul>
 800e390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e392:	4606      	mov	r6, r0
 800e394:	460f      	mov	r7, r1
 800e396:	2b00      	cmp	r3, #0
 800e398:	d09f      	beq.n	800e2da <_strtod_l+0x98a>
 800e39a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e39e:	e7a0      	b.n	800e2e2 <_strtod_l+0x992>
 800e3a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e428 <_strtod_l+0xad8>
 800e3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3a8:	ec57 6b17 	vmov	r6, r7, d7
 800e3ac:	e799      	b.n	800e2e2 <_strtod_l+0x992>
 800e3ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e3b2:	9b08      	ldr	r3, [sp, #32]
 800e3b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d1c1      	bne.n	800e340 <_strtod_l+0x9f0>
 800e3bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3c0:	0d1b      	lsrs	r3, r3, #20
 800e3c2:	051b      	lsls	r3, r3, #20
 800e3c4:	429d      	cmp	r5, r3
 800e3c6:	d1bb      	bne.n	800e340 <_strtod_l+0x9f0>
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	4639      	mov	r1, r7
 800e3cc:	f7f2 fc94 	bl	8000cf8 <__aeabi_d2lz>
 800e3d0:	f7f2 f904 	bl	80005dc <__aeabi_l2d>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	4630      	mov	r0, r6
 800e3da:	4639      	mov	r1, r7
 800e3dc:	f7f1 ff74 	bl	80002c8 <__aeabi_dsub>
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e3e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3ee:	ea46 060a 	orr.w	r6, r6, sl
 800e3f2:	431e      	orrs	r6, r3
 800e3f4:	d06f      	beq.n	800e4d6 <_strtod_l+0xb86>
 800e3f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e430 <_strtod_l+0xae0>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	f7f2 fb8e 	bl	8000b1c <__aeabi_dcmplt>
 800e400:	2800      	cmp	r0, #0
 800e402:	f47f accf 	bne.w	800dda4 <_strtod_l+0x454>
 800e406:	a30c      	add	r3, pc, #48	@ (adr r3, 800e438 <_strtod_l+0xae8>)
 800e408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e410:	f7f2 fba2 	bl	8000b58 <__aeabi_dcmpgt>
 800e414:	2800      	cmp	r0, #0
 800e416:	d093      	beq.n	800e340 <_strtod_l+0x9f0>
 800e418:	e4c4      	b.n	800dda4 <_strtod_l+0x454>
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w
 800e420:	00000000 	.word	0x00000000
 800e424:	bff00000 	.word	0xbff00000
 800e428:	00000000 	.word	0x00000000
 800e42c:	3ff00000 	.word	0x3ff00000
 800e430:	94a03595 	.word	0x94a03595
 800e434:	3fdfffff 	.word	0x3fdfffff
 800e438:	35afe535 	.word	0x35afe535
 800e43c:	3fe00000 	.word	0x3fe00000
 800e440:	000fffff 	.word	0x000fffff
 800e444:	7ff00000 	.word	0x7ff00000
 800e448:	7fefffff 	.word	0x7fefffff
 800e44c:	3ff00000 	.word	0x3ff00000
 800e450:	3fe00000 	.word	0x3fe00000
 800e454:	7fe00000 	.word	0x7fe00000
 800e458:	7c9fffff 	.word	0x7c9fffff
 800e45c:	9b08      	ldr	r3, [sp, #32]
 800e45e:	b323      	cbz	r3, 800e4aa <_strtod_l+0xb5a>
 800e460:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e464:	d821      	bhi.n	800e4aa <_strtod_l+0xb5a>
 800e466:	a328      	add	r3, pc, #160	@ (adr r3, 800e508 <_strtod_l+0xbb8>)
 800e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46c:	4630      	mov	r0, r6
 800e46e:	4639      	mov	r1, r7
 800e470:	f7f2 fb5e 	bl	8000b30 <__aeabi_dcmple>
 800e474:	b1a0      	cbz	r0, 800e4a0 <_strtod_l+0xb50>
 800e476:	4639      	mov	r1, r7
 800e478:	4630      	mov	r0, r6
 800e47a:	f7f2 fbb5 	bl	8000be8 <__aeabi_d2uiz>
 800e47e:	2801      	cmp	r0, #1
 800e480:	bf38      	it	cc
 800e482:	2001      	movcc	r0, #1
 800e484:	f7f2 f85e 	bl	8000544 <__aeabi_ui2d>
 800e488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e48a:	4606      	mov	r6, r0
 800e48c:	460f      	mov	r7, r1
 800e48e:	b9fb      	cbnz	r3, 800e4d0 <_strtod_l+0xb80>
 800e490:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e494:	9014      	str	r0, [sp, #80]	@ 0x50
 800e496:	9315      	str	r3, [sp, #84]	@ 0x54
 800e498:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e49c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e4a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e4a6:	1b5b      	subs	r3, r3, r5
 800e4a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e4aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e4ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e4b2:	f7ff f8f1 	bl	800d698 <__ulp>
 800e4b6:	4650      	mov	r0, sl
 800e4b8:	ec53 2b10 	vmov	r2, r3, d0
 800e4bc:	4659      	mov	r1, fp
 800e4be:	f7f2 f8bb 	bl	8000638 <__aeabi_dmul>
 800e4c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e4c6:	f7f1 ff01 	bl	80002cc <__adddf3>
 800e4ca:	4682      	mov	sl, r0
 800e4cc:	468b      	mov	fp, r1
 800e4ce:	e770      	b.n	800e3b2 <_strtod_l+0xa62>
 800e4d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e4d4:	e7e0      	b.n	800e498 <_strtod_l+0xb48>
 800e4d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e510 <_strtod_l+0xbc0>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f2 fb1e 	bl	8000b1c <__aeabi_dcmplt>
 800e4e0:	e798      	b.n	800e414 <_strtod_l+0xac4>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e4e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4ea:	6013      	str	r3, [r2, #0]
 800e4ec:	f7ff ba6d 	b.w	800d9ca <_strtod_l+0x7a>
 800e4f0:	2a65      	cmp	r2, #101	@ 0x65
 800e4f2:	f43f ab66 	beq.w	800dbc2 <_strtod_l+0x272>
 800e4f6:	2a45      	cmp	r2, #69	@ 0x45
 800e4f8:	f43f ab63 	beq.w	800dbc2 <_strtod_l+0x272>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f7ff bb9e 	b.w	800dc3e <_strtod_l+0x2ee>
 800e502:	bf00      	nop
 800e504:	f3af 8000 	nop.w
 800e508:	ffc00000 	.word	0xffc00000
 800e50c:	41dfffff 	.word	0x41dfffff
 800e510:	94a03595 	.word	0x94a03595
 800e514:	3fcfffff 	.word	0x3fcfffff

0800e518 <_strtod_r>:
 800e518:	4b01      	ldr	r3, [pc, #4]	@ (800e520 <_strtod_r+0x8>)
 800e51a:	f7ff ba19 	b.w	800d950 <_strtod_l>
 800e51e:	bf00      	nop
 800e520:	20000110 	.word	0x20000110

0800e524 <_strtol_l.constprop.0>:
 800e524:	2b24      	cmp	r3, #36	@ 0x24
 800e526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e52a:	4686      	mov	lr, r0
 800e52c:	4690      	mov	r8, r2
 800e52e:	d801      	bhi.n	800e534 <_strtol_l.constprop.0+0x10>
 800e530:	2b01      	cmp	r3, #1
 800e532:	d106      	bne.n	800e542 <_strtol_l.constprop.0+0x1e>
 800e534:	f7fd fd90 	bl	800c058 <__errno>
 800e538:	2316      	movs	r3, #22
 800e53a:	6003      	str	r3, [r0, #0]
 800e53c:	2000      	movs	r0, #0
 800e53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e542:	4834      	ldr	r0, [pc, #208]	@ (800e614 <_strtol_l.constprop.0+0xf0>)
 800e544:	460d      	mov	r5, r1
 800e546:	462a      	mov	r2, r5
 800e548:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e54c:	5d06      	ldrb	r6, [r0, r4]
 800e54e:	f016 0608 	ands.w	r6, r6, #8
 800e552:	d1f8      	bne.n	800e546 <_strtol_l.constprop.0+0x22>
 800e554:	2c2d      	cmp	r4, #45	@ 0x2d
 800e556:	d12d      	bne.n	800e5b4 <_strtol_l.constprop.0+0x90>
 800e558:	782c      	ldrb	r4, [r5, #0]
 800e55a:	2601      	movs	r6, #1
 800e55c:	1c95      	adds	r5, r2, #2
 800e55e:	f033 0210 	bics.w	r2, r3, #16
 800e562:	d109      	bne.n	800e578 <_strtol_l.constprop.0+0x54>
 800e564:	2c30      	cmp	r4, #48	@ 0x30
 800e566:	d12a      	bne.n	800e5be <_strtol_l.constprop.0+0x9a>
 800e568:	782a      	ldrb	r2, [r5, #0]
 800e56a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e56e:	2a58      	cmp	r2, #88	@ 0x58
 800e570:	d125      	bne.n	800e5be <_strtol_l.constprop.0+0x9a>
 800e572:	786c      	ldrb	r4, [r5, #1]
 800e574:	2310      	movs	r3, #16
 800e576:	3502      	adds	r5, #2
 800e578:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e57c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e580:	2200      	movs	r2, #0
 800e582:	fbbc f9f3 	udiv	r9, ip, r3
 800e586:	4610      	mov	r0, r2
 800e588:	fb03 ca19 	mls	sl, r3, r9, ip
 800e58c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e590:	2f09      	cmp	r7, #9
 800e592:	d81b      	bhi.n	800e5cc <_strtol_l.constprop.0+0xa8>
 800e594:	463c      	mov	r4, r7
 800e596:	42a3      	cmp	r3, r4
 800e598:	dd27      	ble.n	800e5ea <_strtol_l.constprop.0+0xc6>
 800e59a:	1c57      	adds	r7, r2, #1
 800e59c:	d007      	beq.n	800e5ae <_strtol_l.constprop.0+0x8a>
 800e59e:	4581      	cmp	r9, r0
 800e5a0:	d320      	bcc.n	800e5e4 <_strtol_l.constprop.0+0xc0>
 800e5a2:	d101      	bne.n	800e5a8 <_strtol_l.constprop.0+0x84>
 800e5a4:	45a2      	cmp	sl, r4
 800e5a6:	db1d      	blt.n	800e5e4 <_strtol_l.constprop.0+0xc0>
 800e5a8:	fb00 4003 	mla	r0, r0, r3, r4
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5b2:	e7eb      	b.n	800e58c <_strtol_l.constprop.0+0x68>
 800e5b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e5b6:	bf04      	itt	eq
 800e5b8:	782c      	ldrbeq	r4, [r5, #0]
 800e5ba:	1c95      	addeq	r5, r2, #2
 800e5bc:	e7cf      	b.n	800e55e <_strtol_l.constprop.0+0x3a>
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1da      	bne.n	800e578 <_strtol_l.constprop.0+0x54>
 800e5c2:	2c30      	cmp	r4, #48	@ 0x30
 800e5c4:	bf0c      	ite	eq
 800e5c6:	2308      	moveq	r3, #8
 800e5c8:	230a      	movne	r3, #10
 800e5ca:	e7d5      	b.n	800e578 <_strtol_l.constprop.0+0x54>
 800e5cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e5d0:	2f19      	cmp	r7, #25
 800e5d2:	d801      	bhi.n	800e5d8 <_strtol_l.constprop.0+0xb4>
 800e5d4:	3c37      	subs	r4, #55	@ 0x37
 800e5d6:	e7de      	b.n	800e596 <_strtol_l.constprop.0+0x72>
 800e5d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e5dc:	2f19      	cmp	r7, #25
 800e5de:	d804      	bhi.n	800e5ea <_strtol_l.constprop.0+0xc6>
 800e5e0:	3c57      	subs	r4, #87	@ 0x57
 800e5e2:	e7d8      	b.n	800e596 <_strtol_l.constprop.0+0x72>
 800e5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e8:	e7e1      	b.n	800e5ae <_strtol_l.constprop.0+0x8a>
 800e5ea:	1c53      	adds	r3, r2, #1
 800e5ec:	d108      	bne.n	800e600 <_strtol_l.constprop.0+0xdc>
 800e5ee:	2322      	movs	r3, #34	@ 0x22
 800e5f0:	f8ce 3000 	str.w	r3, [lr]
 800e5f4:	4660      	mov	r0, ip
 800e5f6:	f1b8 0f00 	cmp.w	r8, #0
 800e5fa:	d0a0      	beq.n	800e53e <_strtol_l.constprop.0+0x1a>
 800e5fc:	1e69      	subs	r1, r5, #1
 800e5fe:	e006      	b.n	800e60e <_strtol_l.constprop.0+0xea>
 800e600:	b106      	cbz	r6, 800e604 <_strtol_l.constprop.0+0xe0>
 800e602:	4240      	negs	r0, r0
 800e604:	f1b8 0f00 	cmp.w	r8, #0
 800e608:	d099      	beq.n	800e53e <_strtol_l.constprop.0+0x1a>
 800e60a:	2a00      	cmp	r2, #0
 800e60c:	d1f6      	bne.n	800e5fc <_strtol_l.constprop.0+0xd8>
 800e60e:	f8c8 1000 	str.w	r1, [r8]
 800e612:	e794      	b.n	800e53e <_strtol_l.constprop.0+0x1a>
 800e614:	080103a1 	.word	0x080103a1

0800e618 <_strtol_r>:
 800e618:	f7ff bf84 	b.w	800e524 <_strtol_l.constprop.0>

0800e61c <__ssputs_r>:
 800e61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e620:	688e      	ldr	r6, [r1, #8]
 800e622:	461f      	mov	r7, r3
 800e624:	42be      	cmp	r6, r7
 800e626:	680b      	ldr	r3, [r1, #0]
 800e628:	4682      	mov	sl, r0
 800e62a:	460c      	mov	r4, r1
 800e62c:	4690      	mov	r8, r2
 800e62e:	d82d      	bhi.n	800e68c <__ssputs_r+0x70>
 800e630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e638:	d026      	beq.n	800e688 <__ssputs_r+0x6c>
 800e63a:	6965      	ldr	r5, [r4, #20]
 800e63c:	6909      	ldr	r1, [r1, #16]
 800e63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e642:	eba3 0901 	sub.w	r9, r3, r1
 800e646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e64a:	1c7b      	adds	r3, r7, #1
 800e64c:	444b      	add	r3, r9
 800e64e:	106d      	asrs	r5, r5, #1
 800e650:	429d      	cmp	r5, r3
 800e652:	bf38      	it	cc
 800e654:	461d      	movcc	r5, r3
 800e656:	0553      	lsls	r3, r2, #21
 800e658:	d527      	bpl.n	800e6aa <__ssputs_r+0x8e>
 800e65a:	4629      	mov	r1, r5
 800e65c:	f7fe fc1c 	bl	800ce98 <_malloc_r>
 800e660:	4606      	mov	r6, r0
 800e662:	b360      	cbz	r0, 800e6be <__ssputs_r+0xa2>
 800e664:	6921      	ldr	r1, [r4, #16]
 800e666:	464a      	mov	r2, r9
 800e668:	f7fd fd23 	bl	800c0b2 <memcpy>
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e676:	81a3      	strh	r3, [r4, #12]
 800e678:	6126      	str	r6, [r4, #16]
 800e67a:	6165      	str	r5, [r4, #20]
 800e67c:	444e      	add	r6, r9
 800e67e:	eba5 0509 	sub.w	r5, r5, r9
 800e682:	6026      	str	r6, [r4, #0]
 800e684:	60a5      	str	r5, [r4, #8]
 800e686:	463e      	mov	r6, r7
 800e688:	42be      	cmp	r6, r7
 800e68a:	d900      	bls.n	800e68e <__ssputs_r+0x72>
 800e68c:	463e      	mov	r6, r7
 800e68e:	6820      	ldr	r0, [r4, #0]
 800e690:	4632      	mov	r2, r6
 800e692:	4641      	mov	r1, r8
 800e694:	f000 f9d8 	bl	800ea48 <memmove>
 800e698:	68a3      	ldr	r3, [r4, #8]
 800e69a:	1b9b      	subs	r3, r3, r6
 800e69c:	60a3      	str	r3, [r4, #8]
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	4433      	add	r3, r6
 800e6a2:	6023      	str	r3, [r4, #0]
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	f000 fd75 	bl	800f19a <_realloc_r>
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d1e0      	bne.n	800e678 <__ssputs_r+0x5c>
 800e6b6:	6921      	ldr	r1, [r4, #16]
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	f7fe fb79 	bl	800cdb0 <_free_r>
 800e6be:	230c      	movs	r3, #12
 800e6c0:	f8ca 3000 	str.w	r3, [sl]
 800e6c4:	89a3      	ldrh	r3, [r4, #12]
 800e6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ca:	81a3      	strh	r3, [r4, #12]
 800e6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d0:	e7e9      	b.n	800e6a6 <__ssputs_r+0x8a>
	...

0800e6d4 <_svfiprintf_r>:
 800e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d8:	4698      	mov	r8, r3
 800e6da:	898b      	ldrh	r3, [r1, #12]
 800e6dc:	061b      	lsls	r3, r3, #24
 800e6de:	b09d      	sub	sp, #116	@ 0x74
 800e6e0:	4607      	mov	r7, r0
 800e6e2:	460d      	mov	r5, r1
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	d510      	bpl.n	800e70a <_svfiprintf_r+0x36>
 800e6e8:	690b      	ldr	r3, [r1, #16]
 800e6ea:	b973      	cbnz	r3, 800e70a <_svfiprintf_r+0x36>
 800e6ec:	2140      	movs	r1, #64	@ 0x40
 800e6ee:	f7fe fbd3 	bl	800ce98 <_malloc_r>
 800e6f2:	6028      	str	r0, [r5, #0]
 800e6f4:	6128      	str	r0, [r5, #16]
 800e6f6:	b930      	cbnz	r0, 800e706 <_svfiprintf_r+0x32>
 800e6f8:	230c      	movs	r3, #12
 800e6fa:	603b      	str	r3, [r7, #0]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	b01d      	add	sp, #116	@ 0x74
 800e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e706:	2340      	movs	r3, #64	@ 0x40
 800e708:	616b      	str	r3, [r5, #20]
 800e70a:	2300      	movs	r3, #0
 800e70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e70e:	2320      	movs	r3, #32
 800e710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e714:	f8cd 800c 	str.w	r8, [sp, #12]
 800e718:	2330      	movs	r3, #48	@ 0x30
 800e71a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8b8 <_svfiprintf_r+0x1e4>
 800e71e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e722:	f04f 0901 	mov.w	r9, #1
 800e726:	4623      	mov	r3, r4
 800e728:	469a      	mov	sl, r3
 800e72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e72e:	b10a      	cbz	r2, 800e734 <_svfiprintf_r+0x60>
 800e730:	2a25      	cmp	r2, #37	@ 0x25
 800e732:	d1f9      	bne.n	800e728 <_svfiprintf_r+0x54>
 800e734:	ebba 0b04 	subs.w	fp, sl, r4
 800e738:	d00b      	beq.n	800e752 <_svfiprintf_r+0x7e>
 800e73a:	465b      	mov	r3, fp
 800e73c:	4622      	mov	r2, r4
 800e73e:	4629      	mov	r1, r5
 800e740:	4638      	mov	r0, r7
 800e742:	f7ff ff6b 	bl	800e61c <__ssputs_r>
 800e746:	3001      	adds	r0, #1
 800e748:	f000 80a7 	beq.w	800e89a <_svfiprintf_r+0x1c6>
 800e74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e74e:	445a      	add	r2, fp
 800e750:	9209      	str	r2, [sp, #36]	@ 0x24
 800e752:	f89a 3000 	ldrb.w	r3, [sl]
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 809f 	beq.w	800e89a <_svfiprintf_r+0x1c6>
 800e75c:	2300      	movs	r3, #0
 800e75e:	f04f 32ff 	mov.w	r2, #4294967295
 800e762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e766:	f10a 0a01 	add.w	sl, sl, #1
 800e76a:	9304      	str	r3, [sp, #16]
 800e76c:	9307      	str	r3, [sp, #28]
 800e76e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e772:	931a      	str	r3, [sp, #104]	@ 0x68
 800e774:	4654      	mov	r4, sl
 800e776:	2205      	movs	r2, #5
 800e778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e77c:	484e      	ldr	r0, [pc, #312]	@ (800e8b8 <_svfiprintf_r+0x1e4>)
 800e77e:	f7f1 fd47 	bl	8000210 <memchr>
 800e782:	9a04      	ldr	r2, [sp, #16]
 800e784:	b9d8      	cbnz	r0, 800e7be <_svfiprintf_r+0xea>
 800e786:	06d0      	lsls	r0, r2, #27
 800e788:	bf44      	itt	mi
 800e78a:	2320      	movmi	r3, #32
 800e78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e790:	0711      	lsls	r1, r2, #28
 800e792:	bf44      	itt	mi
 800e794:	232b      	movmi	r3, #43	@ 0x2b
 800e796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e79a:	f89a 3000 	ldrb.w	r3, [sl]
 800e79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7a0:	d015      	beq.n	800e7ce <_svfiprintf_r+0xfa>
 800e7a2:	9a07      	ldr	r2, [sp, #28]
 800e7a4:	4654      	mov	r4, sl
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	f04f 0c0a 	mov.w	ip, #10
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7b2:	3b30      	subs	r3, #48	@ 0x30
 800e7b4:	2b09      	cmp	r3, #9
 800e7b6:	d94b      	bls.n	800e850 <_svfiprintf_r+0x17c>
 800e7b8:	b1b0      	cbz	r0, 800e7e8 <_svfiprintf_r+0x114>
 800e7ba:	9207      	str	r2, [sp, #28]
 800e7bc:	e014      	b.n	800e7e8 <_svfiprintf_r+0x114>
 800e7be:	eba0 0308 	sub.w	r3, r0, r8
 800e7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	9304      	str	r3, [sp, #16]
 800e7ca:	46a2      	mov	sl, r4
 800e7cc:	e7d2      	b.n	800e774 <_svfiprintf_r+0xa0>
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	1d19      	adds	r1, r3, #4
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	9103      	str	r1, [sp, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bfbb      	ittet	lt
 800e7da:	425b      	neglt	r3, r3
 800e7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e7e0:	9307      	strge	r3, [sp, #28]
 800e7e2:	9307      	strlt	r3, [sp, #28]
 800e7e4:	bfb8      	it	lt
 800e7e6:	9204      	strlt	r2, [sp, #16]
 800e7e8:	7823      	ldrb	r3, [r4, #0]
 800e7ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ec:	d10a      	bne.n	800e804 <_svfiprintf_r+0x130>
 800e7ee:	7863      	ldrb	r3, [r4, #1]
 800e7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7f2:	d132      	bne.n	800e85a <_svfiprintf_r+0x186>
 800e7f4:	9b03      	ldr	r3, [sp, #12]
 800e7f6:	1d1a      	adds	r2, r3, #4
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	9203      	str	r2, [sp, #12]
 800e7fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e800:	3402      	adds	r4, #2
 800e802:	9305      	str	r3, [sp, #20]
 800e804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8c8 <_svfiprintf_r+0x1f4>
 800e808:	7821      	ldrb	r1, [r4, #0]
 800e80a:	2203      	movs	r2, #3
 800e80c:	4650      	mov	r0, sl
 800e80e:	f7f1 fcff 	bl	8000210 <memchr>
 800e812:	b138      	cbz	r0, 800e824 <_svfiprintf_r+0x150>
 800e814:	9b04      	ldr	r3, [sp, #16]
 800e816:	eba0 000a 	sub.w	r0, r0, sl
 800e81a:	2240      	movs	r2, #64	@ 0x40
 800e81c:	4082      	lsls	r2, r0
 800e81e:	4313      	orrs	r3, r2
 800e820:	3401      	adds	r4, #1
 800e822:	9304      	str	r3, [sp, #16]
 800e824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e828:	4824      	ldr	r0, [pc, #144]	@ (800e8bc <_svfiprintf_r+0x1e8>)
 800e82a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e82e:	2206      	movs	r2, #6
 800e830:	f7f1 fcee 	bl	8000210 <memchr>
 800e834:	2800      	cmp	r0, #0
 800e836:	d036      	beq.n	800e8a6 <_svfiprintf_r+0x1d2>
 800e838:	4b21      	ldr	r3, [pc, #132]	@ (800e8c0 <_svfiprintf_r+0x1ec>)
 800e83a:	bb1b      	cbnz	r3, 800e884 <_svfiprintf_r+0x1b0>
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	3307      	adds	r3, #7
 800e840:	f023 0307 	bic.w	r3, r3, #7
 800e844:	3308      	adds	r3, #8
 800e846:	9303      	str	r3, [sp, #12]
 800e848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84a:	4433      	add	r3, r6
 800e84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e84e:	e76a      	b.n	800e726 <_svfiprintf_r+0x52>
 800e850:	fb0c 3202 	mla	r2, ip, r2, r3
 800e854:	460c      	mov	r4, r1
 800e856:	2001      	movs	r0, #1
 800e858:	e7a8      	b.n	800e7ac <_svfiprintf_r+0xd8>
 800e85a:	2300      	movs	r3, #0
 800e85c:	3401      	adds	r4, #1
 800e85e:	9305      	str	r3, [sp, #20]
 800e860:	4619      	mov	r1, r3
 800e862:	f04f 0c0a 	mov.w	ip, #10
 800e866:	4620      	mov	r0, r4
 800e868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e86c:	3a30      	subs	r2, #48	@ 0x30
 800e86e:	2a09      	cmp	r2, #9
 800e870:	d903      	bls.n	800e87a <_svfiprintf_r+0x1a6>
 800e872:	2b00      	cmp	r3, #0
 800e874:	d0c6      	beq.n	800e804 <_svfiprintf_r+0x130>
 800e876:	9105      	str	r1, [sp, #20]
 800e878:	e7c4      	b.n	800e804 <_svfiprintf_r+0x130>
 800e87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e87e:	4604      	mov	r4, r0
 800e880:	2301      	movs	r3, #1
 800e882:	e7f0      	b.n	800e866 <_svfiprintf_r+0x192>
 800e884:	ab03      	add	r3, sp, #12
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	462a      	mov	r2, r5
 800e88a:	4b0e      	ldr	r3, [pc, #56]	@ (800e8c4 <_svfiprintf_r+0x1f0>)
 800e88c:	a904      	add	r1, sp, #16
 800e88e:	4638      	mov	r0, r7
 800e890:	f7fc fc92 	bl	800b1b8 <_printf_float>
 800e894:	1c42      	adds	r2, r0, #1
 800e896:	4606      	mov	r6, r0
 800e898:	d1d6      	bne.n	800e848 <_svfiprintf_r+0x174>
 800e89a:	89ab      	ldrh	r3, [r5, #12]
 800e89c:	065b      	lsls	r3, r3, #25
 800e89e:	f53f af2d 	bmi.w	800e6fc <_svfiprintf_r+0x28>
 800e8a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8a4:	e72c      	b.n	800e700 <_svfiprintf_r+0x2c>
 800e8a6:	ab03      	add	r3, sp, #12
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	462a      	mov	r2, r5
 800e8ac:	4b05      	ldr	r3, [pc, #20]	@ (800e8c4 <_svfiprintf_r+0x1f0>)
 800e8ae:	a904      	add	r1, sp, #16
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	f7fc ff19 	bl	800b6e8 <_printf_i>
 800e8b6:	e7ed      	b.n	800e894 <_svfiprintf_r+0x1c0>
 800e8b8:	080104a1 	.word	0x080104a1
 800e8bc:	080104ab 	.word	0x080104ab
 800e8c0:	0800b1b9 	.word	0x0800b1b9
 800e8c4:	0800e61d 	.word	0x0800e61d
 800e8c8:	080104a7 	.word	0x080104a7

0800e8cc <__sflush_r>:
 800e8cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	0716      	lsls	r6, r2, #28
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	460c      	mov	r4, r1
 800e8da:	d454      	bmi.n	800e986 <__sflush_r+0xba>
 800e8dc:	684b      	ldr	r3, [r1, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	dc02      	bgt.n	800e8e8 <__sflush_r+0x1c>
 800e8e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd48      	ble.n	800e97a <__sflush_r+0xae>
 800e8e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e8ea:	2e00      	cmp	r6, #0
 800e8ec:	d045      	beq.n	800e97a <__sflush_r+0xae>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e8f4:	682f      	ldr	r7, [r5, #0]
 800e8f6:	6a21      	ldr	r1, [r4, #32]
 800e8f8:	602b      	str	r3, [r5, #0]
 800e8fa:	d030      	beq.n	800e95e <__sflush_r+0x92>
 800e8fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e8fe:	89a3      	ldrh	r3, [r4, #12]
 800e900:	0759      	lsls	r1, r3, #29
 800e902:	d505      	bpl.n	800e910 <__sflush_r+0x44>
 800e904:	6863      	ldr	r3, [r4, #4]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e90a:	b10b      	cbz	r3, 800e910 <__sflush_r+0x44>
 800e90c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e90e:	1ad2      	subs	r2, r2, r3
 800e910:	2300      	movs	r3, #0
 800e912:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e914:	6a21      	ldr	r1, [r4, #32]
 800e916:	4628      	mov	r0, r5
 800e918:	47b0      	blx	r6
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	d106      	bne.n	800e92e <__sflush_r+0x62>
 800e920:	6829      	ldr	r1, [r5, #0]
 800e922:	291d      	cmp	r1, #29
 800e924:	d82b      	bhi.n	800e97e <__sflush_r+0xb2>
 800e926:	4a2a      	ldr	r2, [pc, #168]	@ (800e9d0 <__sflush_r+0x104>)
 800e928:	410a      	asrs	r2, r1
 800e92a:	07d6      	lsls	r6, r2, #31
 800e92c:	d427      	bmi.n	800e97e <__sflush_r+0xb2>
 800e92e:	2200      	movs	r2, #0
 800e930:	6062      	str	r2, [r4, #4]
 800e932:	04d9      	lsls	r1, r3, #19
 800e934:	6922      	ldr	r2, [r4, #16]
 800e936:	6022      	str	r2, [r4, #0]
 800e938:	d504      	bpl.n	800e944 <__sflush_r+0x78>
 800e93a:	1c42      	adds	r2, r0, #1
 800e93c:	d101      	bne.n	800e942 <__sflush_r+0x76>
 800e93e:	682b      	ldr	r3, [r5, #0]
 800e940:	b903      	cbnz	r3, 800e944 <__sflush_r+0x78>
 800e942:	6560      	str	r0, [r4, #84]	@ 0x54
 800e944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e946:	602f      	str	r7, [r5, #0]
 800e948:	b1b9      	cbz	r1, 800e97a <__sflush_r+0xae>
 800e94a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e94e:	4299      	cmp	r1, r3
 800e950:	d002      	beq.n	800e958 <__sflush_r+0x8c>
 800e952:	4628      	mov	r0, r5
 800e954:	f7fe fa2c 	bl	800cdb0 <_free_r>
 800e958:	2300      	movs	r3, #0
 800e95a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e95c:	e00d      	b.n	800e97a <__sflush_r+0xae>
 800e95e:	2301      	movs	r3, #1
 800e960:	4628      	mov	r0, r5
 800e962:	47b0      	blx	r6
 800e964:	4602      	mov	r2, r0
 800e966:	1c50      	adds	r0, r2, #1
 800e968:	d1c9      	bne.n	800e8fe <__sflush_r+0x32>
 800e96a:	682b      	ldr	r3, [r5, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0c6      	beq.n	800e8fe <__sflush_r+0x32>
 800e970:	2b1d      	cmp	r3, #29
 800e972:	d001      	beq.n	800e978 <__sflush_r+0xac>
 800e974:	2b16      	cmp	r3, #22
 800e976:	d11e      	bne.n	800e9b6 <__sflush_r+0xea>
 800e978:	602f      	str	r7, [r5, #0]
 800e97a:	2000      	movs	r0, #0
 800e97c:	e022      	b.n	800e9c4 <__sflush_r+0xf8>
 800e97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e982:	b21b      	sxth	r3, r3
 800e984:	e01b      	b.n	800e9be <__sflush_r+0xf2>
 800e986:	690f      	ldr	r7, [r1, #16]
 800e988:	2f00      	cmp	r7, #0
 800e98a:	d0f6      	beq.n	800e97a <__sflush_r+0xae>
 800e98c:	0793      	lsls	r3, r2, #30
 800e98e:	680e      	ldr	r6, [r1, #0]
 800e990:	bf08      	it	eq
 800e992:	694b      	ldreq	r3, [r1, #20]
 800e994:	600f      	str	r7, [r1, #0]
 800e996:	bf18      	it	ne
 800e998:	2300      	movne	r3, #0
 800e99a:	eba6 0807 	sub.w	r8, r6, r7
 800e99e:	608b      	str	r3, [r1, #8]
 800e9a0:	f1b8 0f00 	cmp.w	r8, #0
 800e9a4:	dde9      	ble.n	800e97a <__sflush_r+0xae>
 800e9a6:	6a21      	ldr	r1, [r4, #32]
 800e9a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9aa:	4643      	mov	r3, r8
 800e9ac:	463a      	mov	r2, r7
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	47b0      	blx	r6
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	dc08      	bgt.n	800e9c8 <__sflush_r+0xfc>
 800e9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9be:	81a3      	strh	r3, [r4, #12]
 800e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c8:	4407      	add	r7, r0
 800e9ca:	eba8 0800 	sub.w	r8, r8, r0
 800e9ce:	e7e7      	b.n	800e9a0 <__sflush_r+0xd4>
 800e9d0:	dfbffffe 	.word	0xdfbffffe

0800e9d4 <_fflush_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	690b      	ldr	r3, [r1, #16]
 800e9d8:	4605      	mov	r5, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	b913      	cbnz	r3, 800e9e4 <_fflush_r+0x10>
 800e9de:	2500      	movs	r5, #0
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	b118      	cbz	r0, 800e9ee <_fflush_r+0x1a>
 800e9e6:	6a03      	ldr	r3, [r0, #32]
 800e9e8:	b90b      	cbnz	r3, 800e9ee <_fflush_r+0x1a>
 800e9ea:	f7fd fa3d 	bl	800be68 <__sinit>
 800e9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d0f3      	beq.n	800e9de <_fflush_r+0xa>
 800e9f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e9f8:	07d0      	lsls	r0, r2, #31
 800e9fa:	d404      	bmi.n	800ea06 <_fflush_r+0x32>
 800e9fc:	0599      	lsls	r1, r3, #22
 800e9fe:	d402      	bmi.n	800ea06 <_fflush_r+0x32>
 800ea00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea02:	f7fd fb54 	bl	800c0ae <__retarget_lock_acquire_recursive>
 800ea06:	4628      	mov	r0, r5
 800ea08:	4621      	mov	r1, r4
 800ea0a:	f7ff ff5f 	bl	800e8cc <__sflush_r>
 800ea0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea10:	07da      	lsls	r2, r3, #31
 800ea12:	4605      	mov	r5, r0
 800ea14:	d4e4      	bmi.n	800e9e0 <_fflush_r+0xc>
 800ea16:	89a3      	ldrh	r3, [r4, #12]
 800ea18:	059b      	lsls	r3, r3, #22
 800ea1a:	d4e1      	bmi.n	800e9e0 <_fflush_r+0xc>
 800ea1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea1e:	f7fd fb47 	bl	800c0b0 <__retarget_lock_release_recursive>
 800ea22:	e7dd      	b.n	800e9e0 <_fflush_r+0xc>

0800ea24 <fiprintf>:
 800ea24:	b40e      	push	{r1, r2, r3}
 800ea26:	b503      	push	{r0, r1, lr}
 800ea28:	4601      	mov	r1, r0
 800ea2a:	ab03      	add	r3, sp, #12
 800ea2c:	4805      	ldr	r0, [pc, #20]	@ (800ea44 <fiprintf+0x20>)
 800ea2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea32:	6800      	ldr	r0, [r0, #0]
 800ea34:	9301      	str	r3, [sp, #4]
 800ea36:	f000 fc15 	bl	800f264 <_vfiprintf_r>
 800ea3a:	b002      	add	sp, #8
 800ea3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea40:	b003      	add	sp, #12
 800ea42:	4770      	bx	lr
 800ea44:	200000c0 	.word	0x200000c0

0800ea48 <memmove>:
 800ea48:	4288      	cmp	r0, r1
 800ea4a:	b510      	push	{r4, lr}
 800ea4c:	eb01 0402 	add.w	r4, r1, r2
 800ea50:	d902      	bls.n	800ea58 <memmove+0x10>
 800ea52:	4284      	cmp	r4, r0
 800ea54:	4623      	mov	r3, r4
 800ea56:	d807      	bhi.n	800ea68 <memmove+0x20>
 800ea58:	1e43      	subs	r3, r0, #1
 800ea5a:	42a1      	cmp	r1, r4
 800ea5c:	d008      	beq.n	800ea70 <memmove+0x28>
 800ea5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea66:	e7f8      	b.n	800ea5a <memmove+0x12>
 800ea68:	4402      	add	r2, r0
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	428a      	cmp	r2, r1
 800ea6e:	d100      	bne.n	800ea72 <memmove+0x2a>
 800ea70:	bd10      	pop	{r4, pc}
 800ea72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea7a:	e7f7      	b.n	800ea6c <memmove+0x24>

0800ea7c <strncmp>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	b16a      	cbz	r2, 800ea9c <strncmp+0x20>
 800ea80:	3901      	subs	r1, #1
 800ea82:	1884      	adds	r4, r0, r2
 800ea84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d103      	bne.n	800ea98 <strncmp+0x1c>
 800ea90:	42a0      	cmp	r0, r4
 800ea92:	d001      	beq.n	800ea98 <strncmp+0x1c>
 800ea94:	2a00      	cmp	r2, #0
 800ea96:	d1f5      	bne.n	800ea84 <strncmp+0x8>
 800ea98:	1ad0      	subs	r0, r2, r3
 800ea9a:	bd10      	pop	{r4, pc}
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	e7fc      	b.n	800ea9a <strncmp+0x1e>

0800eaa0 <_sbrk_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d06      	ldr	r5, [pc, #24]	@ (800eabc <_sbrk_r+0x1c>)
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	602b      	str	r3, [r5, #0]
 800eaac:	f7f3 fcc2 	bl	8002434 <_sbrk>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d102      	bne.n	800eaba <_sbrk_r+0x1a>
 800eab4:	682b      	ldr	r3, [r5, #0]
 800eab6:	b103      	cbz	r3, 800eaba <_sbrk_r+0x1a>
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	bd38      	pop	{r3, r4, r5, pc}
 800eabc:	20005264 	.word	0x20005264

0800eac0 <nan>:
 800eac0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eac8 <nan+0x8>
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	00000000 	.word	0x00000000
 800eacc:	7ff80000 	.word	0x7ff80000

0800ead0 <abort>:
 800ead0:	b508      	push	{r3, lr}
 800ead2:	2006      	movs	r0, #6
 800ead4:	f000 fd9a 	bl	800f60c <raise>
 800ead8:	2001      	movs	r0, #1
 800eada:	f7f3 fc33 	bl	8002344 <_exit>

0800eade <_calloc_r>:
 800eade:	b570      	push	{r4, r5, r6, lr}
 800eae0:	fba1 5402 	umull	r5, r4, r1, r2
 800eae4:	b93c      	cbnz	r4, 800eaf6 <_calloc_r+0x18>
 800eae6:	4629      	mov	r1, r5
 800eae8:	f7fe f9d6 	bl	800ce98 <_malloc_r>
 800eaec:	4606      	mov	r6, r0
 800eaee:	b928      	cbnz	r0, 800eafc <_calloc_r+0x1e>
 800eaf0:	2600      	movs	r6, #0
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	bd70      	pop	{r4, r5, r6, pc}
 800eaf6:	220c      	movs	r2, #12
 800eaf8:	6002      	str	r2, [r0, #0]
 800eafa:	e7f9      	b.n	800eaf0 <_calloc_r+0x12>
 800eafc:	462a      	mov	r2, r5
 800eafe:	4621      	mov	r1, r4
 800eb00:	f7fd fa4b 	bl	800bf9a <memset>
 800eb04:	e7f5      	b.n	800eaf2 <_calloc_r+0x14>

0800eb06 <rshift>:
 800eb06:	6903      	ldr	r3, [r0, #16]
 800eb08:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb10:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb14:	f100 0414 	add.w	r4, r0, #20
 800eb18:	dd45      	ble.n	800eba6 <rshift+0xa0>
 800eb1a:	f011 011f 	ands.w	r1, r1, #31
 800eb1e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb22:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb26:	d10c      	bne.n	800eb42 <rshift+0x3c>
 800eb28:	f100 0710 	add.w	r7, r0, #16
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	42b1      	cmp	r1, r6
 800eb30:	d334      	bcc.n	800eb9c <rshift+0x96>
 800eb32:	1a9b      	subs	r3, r3, r2
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	1eea      	subs	r2, r5, #3
 800eb38:	4296      	cmp	r6, r2
 800eb3a:	bf38      	it	cc
 800eb3c:	2300      	movcc	r3, #0
 800eb3e:	4423      	add	r3, r4
 800eb40:	e015      	b.n	800eb6e <rshift+0x68>
 800eb42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb46:	f1c1 0820 	rsb	r8, r1, #32
 800eb4a:	40cf      	lsrs	r7, r1
 800eb4c:	f105 0e04 	add.w	lr, r5, #4
 800eb50:	46a1      	mov	r9, r4
 800eb52:	4576      	cmp	r6, lr
 800eb54:	46f4      	mov	ip, lr
 800eb56:	d815      	bhi.n	800eb84 <rshift+0x7e>
 800eb58:	1a9a      	subs	r2, r3, r2
 800eb5a:	0092      	lsls	r2, r2, #2
 800eb5c:	3a04      	subs	r2, #4
 800eb5e:	3501      	adds	r5, #1
 800eb60:	42ae      	cmp	r6, r5
 800eb62:	bf38      	it	cc
 800eb64:	2200      	movcc	r2, #0
 800eb66:	18a3      	adds	r3, r4, r2
 800eb68:	50a7      	str	r7, [r4, r2]
 800eb6a:	b107      	cbz	r7, 800eb6e <rshift+0x68>
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	1b1a      	subs	r2, r3, r4
 800eb70:	42a3      	cmp	r3, r4
 800eb72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb76:	bf08      	it	eq
 800eb78:	2300      	moveq	r3, #0
 800eb7a:	6102      	str	r2, [r0, #16]
 800eb7c:	bf08      	it	eq
 800eb7e:	6143      	streq	r3, [r0, #20]
 800eb80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb84:	f8dc c000 	ldr.w	ip, [ip]
 800eb88:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb8c:	ea4c 0707 	orr.w	r7, ip, r7
 800eb90:	f849 7b04 	str.w	r7, [r9], #4
 800eb94:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb98:	40cf      	lsrs	r7, r1
 800eb9a:	e7da      	b.n	800eb52 <rshift+0x4c>
 800eb9c:	f851 cb04 	ldr.w	ip, [r1], #4
 800eba0:	f847 cf04 	str.w	ip, [r7, #4]!
 800eba4:	e7c3      	b.n	800eb2e <rshift+0x28>
 800eba6:	4623      	mov	r3, r4
 800eba8:	e7e1      	b.n	800eb6e <rshift+0x68>

0800ebaa <__hexdig_fun>:
 800ebaa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ebae:	2b09      	cmp	r3, #9
 800ebb0:	d802      	bhi.n	800ebb8 <__hexdig_fun+0xe>
 800ebb2:	3820      	subs	r0, #32
 800ebb4:	b2c0      	uxtb	r0, r0
 800ebb6:	4770      	bx	lr
 800ebb8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ebbc:	2b05      	cmp	r3, #5
 800ebbe:	d801      	bhi.n	800ebc4 <__hexdig_fun+0x1a>
 800ebc0:	3847      	subs	r0, #71	@ 0x47
 800ebc2:	e7f7      	b.n	800ebb4 <__hexdig_fun+0xa>
 800ebc4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ebc8:	2b05      	cmp	r3, #5
 800ebca:	d801      	bhi.n	800ebd0 <__hexdig_fun+0x26>
 800ebcc:	3827      	subs	r0, #39	@ 0x27
 800ebce:	e7f1      	b.n	800ebb4 <__hexdig_fun+0xa>
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	4770      	bx	lr

0800ebd4 <__gethex>:
 800ebd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	468a      	mov	sl, r1
 800ebdc:	9302      	str	r3, [sp, #8]
 800ebde:	680b      	ldr	r3, [r1, #0]
 800ebe0:	9001      	str	r0, [sp, #4]
 800ebe2:	4690      	mov	r8, r2
 800ebe4:	1c9c      	adds	r4, r3, #2
 800ebe6:	46a1      	mov	r9, r4
 800ebe8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ebec:	2830      	cmp	r0, #48	@ 0x30
 800ebee:	d0fa      	beq.n	800ebe6 <__gethex+0x12>
 800ebf0:	eba9 0303 	sub.w	r3, r9, r3
 800ebf4:	f1a3 0b02 	sub.w	fp, r3, #2
 800ebf8:	f7ff ffd7 	bl	800ebaa <__hexdig_fun>
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d168      	bne.n	800ecd4 <__gethex+0x100>
 800ec02:	49a0      	ldr	r1, [pc, #640]	@ (800ee84 <__gethex+0x2b0>)
 800ec04:	2201      	movs	r2, #1
 800ec06:	4648      	mov	r0, r9
 800ec08:	f7ff ff38 	bl	800ea7c <strncmp>
 800ec0c:	4607      	mov	r7, r0
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d167      	bne.n	800ece2 <__gethex+0x10e>
 800ec12:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ec16:	4626      	mov	r6, r4
 800ec18:	f7ff ffc7 	bl	800ebaa <__hexdig_fun>
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d062      	beq.n	800ece6 <__gethex+0x112>
 800ec20:	4623      	mov	r3, r4
 800ec22:	7818      	ldrb	r0, [r3, #0]
 800ec24:	2830      	cmp	r0, #48	@ 0x30
 800ec26:	4699      	mov	r9, r3
 800ec28:	f103 0301 	add.w	r3, r3, #1
 800ec2c:	d0f9      	beq.n	800ec22 <__gethex+0x4e>
 800ec2e:	f7ff ffbc 	bl	800ebaa <__hexdig_fun>
 800ec32:	fab0 f580 	clz	r5, r0
 800ec36:	096d      	lsrs	r5, r5, #5
 800ec38:	f04f 0b01 	mov.w	fp, #1
 800ec3c:	464a      	mov	r2, r9
 800ec3e:	4616      	mov	r6, r2
 800ec40:	3201      	adds	r2, #1
 800ec42:	7830      	ldrb	r0, [r6, #0]
 800ec44:	f7ff ffb1 	bl	800ebaa <__hexdig_fun>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d1f8      	bne.n	800ec3e <__gethex+0x6a>
 800ec4c:	498d      	ldr	r1, [pc, #564]	@ (800ee84 <__gethex+0x2b0>)
 800ec4e:	2201      	movs	r2, #1
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff ff13 	bl	800ea7c <strncmp>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d13f      	bne.n	800ecda <__gethex+0x106>
 800ec5a:	b944      	cbnz	r4, 800ec6e <__gethex+0x9a>
 800ec5c:	1c74      	adds	r4, r6, #1
 800ec5e:	4622      	mov	r2, r4
 800ec60:	4616      	mov	r6, r2
 800ec62:	3201      	adds	r2, #1
 800ec64:	7830      	ldrb	r0, [r6, #0]
 800ec66:	f7ff ffa0 	bl	800ebaa <__hexdig_fun>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d1f8      	bne.n	800ec60 <__gethex+0x8c>
 800ec6e:	1ba4      	subs	r4, r4, r6
 800ec70:	00a7      	lsls	r7, r4, #2
 800ec72:	7833      	ldrb	r3, [r6, #0]
 800ec74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ec78:	2b50      	cmp	r3, #80	@ 0x50
 800ec7a:	d13e      	bne.n	800ecfa <__gethex+0x126>
 800ec7c:	7873      	ldrb	r3, [r6, #1]
 800ec7e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec80:	d033      	beq.n	800ecea <__gethex+0x116>
 800ec82:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec84:	d034      	beq.n	800ecf0 <__gethex+0x11c>
 800ec86:	1c71      	adds	r1, r6, #1
 800ec88:	2400      	movs	r4, #0
 800ec8a:	7808      	ldrb	r0, [r1, #0]
 800ec8c:	f7ff ff8d 	bl	800ebaa <__hexdig_fun>
 800ec90:	1e43      	subs	r3, r0, #1
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b18      	cmp	r3, #24
 800ec96:	d830      	bhi.n	800ecfa <__gethex+0x126>
 800ec98:	f1a0 0210 	sub.w	r2, r0, #16
 800ec9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eca0:	f7ff ff83 	bl	800ebaa <__hexdig_fun>
 800eca4:	f100 3cff 	add.w	ip, r0, #4294967295
 800eca8:	fa5f fc8c 	uxtb.w	ip, ip
 800ecac:	f1bc 0f18 	cmp.w	ip, #24
 800ecb0:	f04f 030a 	mov.w	r3, #10
 800ecb4:	d91e      	bls.n	800ecf4 <__gethex+0x120>
 800ecb6:	b104      	cbz	r4, 800ecba <__gethex+0xe6>
 800ecb8:	4252      	negs	r2, r2
 800ecba:	4417      	add	r7, r2
 800ecbc:	f8ca 1000 	str.w	r1, [sl]
 800ecc0:	b1ed      	cbz	r5, 800ecfe <__gethex+0x12a>
 800ecc2:	f1bb 0f00 	cmp.w	fp, #0
 800ecc6:	bf0c      	ite	eq
 800ecc8:	2506      	moveq	r5, #6
 800ecca:	2500      	movne	r5, #0
 800eccc:	4628      	mov	r0, r5
 800ecce:	b005      	add	sp, #20
 800ecd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd4:	2500      	movs	r5, #0
 800ecd6:	462c      	mov	r4, r5
 800ecd8:	e7b0      	b.n	800ec3c <__gethex+0x68>
 800ecda:	2c00      	cmp	r4, #0
 800ecdc:	d1c7      	bne.n	800ec6e <__gethex+0x9a>
 800ecde:	4627      	mov	r7, r4
 800ece0:	e7c7      	b.n	800ec72 <__gethex+0x9e>
 800ece2:	464e      	mov	r6, r9
 800ece4:	462f      	mov	r7, r5
 800ece6:	2501      	movs	r5, #1
 800ece8:	e7c3      	b.n	800ec72 <__gethex+0x9e>
 800ecea:	2400      	movs	r4, #0
 800ecec:	1cb1      	adds	r1, r6, #2
 800ecee:	e7cc      	b.n	800ec8a <__gethex+0xb6>
 800ecf0:	2401      	movs	r4, #1
 800ecf2:	e7fb      	b.n	800ecec <__gethex+0x118>
 800ecf4:	fb03 0002 	mla	r0, r3, r2, r0
 800ecf8:	e7ce      	b.n	800ec98 <__gethex+0xc4>
 800ecfa:	4631      	mov	r1, r6
 800ecfc:	e7de      	b.n	800ecbc <__gethex+0xe8>
 800ecfe:	eba6 0309 	sub.w	r3, r6, r9
 800ed02:	3b01      	subs	r3, #1
 800ed04:	4629      	mov	r1, r5
 800ed06:	2b07      	cmp	r3, #7
 800ed08:	dc0a      	bgt.n	800ed20 <__gethex+0x14c>
 800ed0a:	9801      	ldr	r0, [sp, #4]
 800ed0c:	f7fe f950 	bl	800cfb0 <_Balloc>
 800ed10:	4604      	mov	r4, r0
 800ed12:	b940      	cbnz	r0, 800ed26 <__gethex+0x152>
 800ed14:	4b5c      	ldr	r3, [pc, #368]	@ (800ee88 <__gethex+0x2b4>)
 800ed16:	4602      	mov	r2, r0
 800ed18:	21e4      	movs	r1, #228	@ 0xe4
 800ed1a:	485c      	ldr	r0, [pc, #368]	@ (800ee8c <__gethex+0x2b8>)
 800ed1c:	f7fd f9de 	bl	800c0dc <__assert_func>
 800ed20:	3101      	adds	r1, #1
 800ed22:	105b      	asrs	r3, r3, #1
 800ed24:	e7ef      	b.n	800ed06 <__gethex+0x132>
 800ed26:	f100 0a14 	add.w	sl, r0, #20
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	4655      	mov	r5, sl
 800ed2e:	469b      	mov	fp, r3
 800ed30:	45b1      	cmp	r9, r6
 800ed32:	d337      	bcc.n	800eda4 <__gethex+0x1d0>
 800ed34:	f845 bb04 	str.w	fp, [r5], #4
 800ed38:	eba5 050a 	sub.w	r5, r5, sl
 800ed3c:	10ad      	asrs	r5, r5, #2
 800ed3e:	6125      	str	r5, [r4, #16]
 800ed40:	4658      	mov	r0, fp
 800ed42:	f7fe fa27 	bl	800d194 <__hi0bits>
 800ed46:	016d      	lsls	r5, r5, #5
 800ed48:	f8d8 6000 	ldr.w	r6, [r8]
 800ed4c:	1a2d      	subs	r5, r5, r0
 800ed4e:	42b5      	cmp	r5, r6
 800ed50:	dd54      	ble.n	800edfc <__gethex+0x228>
 800ed52:	1bad      	subs	r5, r5, r6
 800ed54:	4629      	mov	r1, r5
 800ed56:	4620      	mov	r0, r4
 800ed58:	f7fe fdbb 	bl	800d8d2 <__any_on>
 800ed5c:	4681      	mov	r9, r0
 800ed5e:	b178      	cbz	r0, 800ed80 <__gethex+0x1ac>
 800ed60:	1e6b      	subs	r3, r5, #1
 800ed62:	1159      	asrs	r1, r3, #5
 800ed64:	f003 021f 	and.w	r2, r3, #31
 800ed68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ed6c:	f04f 0901 	mov.w	r9, #1
 800ed70:	fa09 f202 	lsl.w	r2, r9, r2
 800ed74:	420a      	tst	r2, r1
 800ed76:	d003      	beq.n	800ed80 <__gethex+0x1ac>
 800ed78:	454b      	cmp	r3, r9
 800ed7a:	dc36      	bgt.n	800edea <__gethex+0x216>
 800ed7c:	f04f 0902 	mov.w	r9, #2
 800ed80:	4629      	mov	r1, r5
 800ed82:	4620      	mov	r0, r4
 800ed84:	f7ff febf 	bl	800eb06 <rshift>
 800ed88:	442f      	add	r7, r5
 800ed8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed8e:	42bb      	cmp	r3, r7
 800ed90:	da42      	bge.n	800ee18 <__gethex+0x244>
 800ed92:	9801      	ldr	r0, [sp, #4]
 800ed94:	4621      	mov	r1, r4
 800ed96:	f7fe f94b 	bl	800d030 <_Bfree>
 800ed9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	6013      	str	r3, [r2, #0]
 800eda0:	25a3      	movs	r5, #163	@ 0xa3
 800eda2:	e793      	b.n	800eccc <__gethex+0xf8>
 800eda4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eda8:	2a2e      	cmp	r2, #46	@ 0x2e
 800edaa:	d012      	beq.n	800edd2 <__gethex+0x1fe>
 800edac:	2b20      	cmp	r3, #32
 800edae:	d104      	bne.n	800edba <__gethex+0x1e6>
 800edb0:	f845 bb04 	str.w	fp, [r5], #4
 800edb4:	f04f 0b00 	mov.w	fp, #0
 800edb8:	465b      	mov	r3, fp
 800edba:	7830      	ldrb	r0, [r6, #0]
 800edbc:	9303      	str	r3, [sp, #12]
 800edbe:	f7ff fef4 	bl	800ebaa <__hexdig_fun>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	f000 000f 	and.w	r0, r0, #15
 800edc8:	4098      	lsls	r0, r3
 800edca:	ea4b 0b00 	orr.w	fp, fp, r0
 800edce:	3304      	adds	r3, #4
 800edd0:	e7ae      	b.n	800ed30 <__gethex+0x15c>
 800edd2:	45b1      	cmp	r9, r6
 800edd4:	d8ea      	bhi.n	800edac <__gethex+0x1d8>
 800edd6:	492b      	ldr	r1, [pc, #172]	@ (800ee84 <__gethex+0x2b0>)
 800edd8:	9303      	str	r3, [sp, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	4630      	mov	r0, r6
 800edde:	f7ff fe4d 	bl	800ea7c <strncmp>
 800ede2:	9b03      	ldr	r3, [sp, #12]
 800ede4:	2800      	cmp	r0, #0
 800ede6:	d1e1      	bne.n	800edac <__gethex+0x1d8>
 800ede8:	e7a2      	b.n	800ed30 <__gethex+0x15c>
 800edea:	1ea9      	subs	r1, r5, #2
 800edec:	4620      	mov	r0, r4
 800edee:	f7fe fd70 	bl	800d8d2 <__any_on>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d0c2      	beq.n	800ed7c <__gethex+0x1a8>
 800edf6:	f04f 0903 	mov.w	r9, #3
 800edfa:	e7c1      	b.n	800ed80 <__gethex+0x1ac>
 800edfc:	da09      	bge.n	800ee12 <__gethex+0x23e>
 800edfe:	1b75      	subs	r5, r6, r5
 800ee00:	4621      	mov	r1, r4
 800ee02:	9801      	ldr	r0, [sp, #4]
 800ee04:	462a      	mov	r2, r5
 800ee06:	f7fe fb2b 	bl	800d460 <__lshift>
 800ee0a:	1b7f      	subs	r7, r7, r5
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	f100 0a14 	add.w	sl, r0, #20
 800ee12:	f04f 0900 	mov.w	r9, #0
 800ee16:	e7b8      	b.n	800ed8a <__gethex+0x1b6>
 800ee18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee1c:	42bd      	cmp	r5, r7
 800ee1e:	dd6f      	ble.n	800ef00 <__gethex+0x32c>
 800ee20:	1bed      	subs	r5, r5, r7
 800ee22:	42ae      	cmp	r6, r5
 800ee24:	dc34      	bgt.n	800ee90 <__gethex+0x2bc>
 800ee26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d022      	beq.n	800ee74 <__gethex+0x2a0>
 800ee2e:	2b03      	cmp	r3, #3
 800ee30:	d024      	beq.n	800ee7c <__gethex+0x2a8>
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d115      	bne.n	800ee62 <__gethex+0x28e>
 800ee36:	42ae      	cmp	r6, r5
 800ee38:	d113      	bne.n	800ee62 <__gethex+0x28e>
 800ee3a:	2e01      	cmp	r6, #1
 800ee3c:	d10b      	bne.n	800ee56 <__gethex+0x282>
 800ee3e:	9a02      	ldr	r2, [sp, #8]
 800ee40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	2301      	movs	r3, #1
 800ee48:	6123      	str	r3, [r4, #16]
 800ee4a:	f8ca 3000 	str.w	r3, [sl]
 800ee4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee50:	2562      	movs	r5, #98	@ 0x62
 800ee52:	601c      	str	r4, [r3, #0]
 800ee54:	e73a      	b.n	800eccc <__gethex+0xf8>
 800ee56:	1e71      	subs	r1, r6, #1
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f7fe fd3a 	bl	800d8d2 <__any_on>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d1ed      	bne.n	800ee3e <__gethex+0x26a>
 800ee62:	9801      	ldr	r0, [sp, #4]
 800ee64:	4621      	mov	r1, r4
 800ee66:	f7fe f8e3 	bl	800d030 <_Bfree>
 800ee6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	6013      	str	r3, [r2, #0]
 800ee70:	2550      	movs	r5, #80	@ 0x50
 800ee72:	e72b      	b.n	800eccc <__gethex+0xf8>
 800ee74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1f3      	bne.n	800ee62 <__gethex+0x28e>
 800ee7a:	e7e0      	b.n	800ee3e <__gethex+0x26a>
 800ee7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1dd      	bne.n	800ee3e <__gethex+0x26a>
 800ee82:	e7ee      	b.n	800ee62 <__gethex+0x28e>
 800ee84:	08010348 	.word	0x08010348
 800ee88:	080101dd 	.word	0x080101dd
 800ee8c:	080104ba 	.word	0x080104ba
 800ee90:	1e6f      	subs	r7, r5, #1
 800ee92:	f1b9 0f00 	cmp.w	r9, #0
 800ee96:	d130      	bne.n	800eefa <__gethex+0x326>
 800ee98:	b127      	cbz	r7, 800eea4 <__gethex+0x2d0>
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f7fe fd18 	bl	800d8d2 <__any_on>
 800eea2:	4681      	mov	r9, r0
 800eea4:	117a      	asrs	r2, r7, #5
 800eea6:	2301      	movs	r3, #1
 800eea8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eeac:	f007 071f 	and.w	r7, r7, #31
 800eeb0:	40bb      	lsls	r3, r7
 800eeb2:	4213      	tst	r3, r2
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	bf18      	it	ne
 800eeba:	f049 0902 	orrne.w	r9, r9, #2
 800eebe:	f7ff fe22 	bl	800eb06 <rshift>
 800eec2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eec6:	1b76      	subs	r6, r6, r5
 800eec8:	2502      	movs	r5, #2
 800eeca:	f1b9 0f00 	cmp.w	r9, #0
 800eece:	d047      	beq.n	800ef60 <__gethex+0x38c>
 800eed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d015      	beq.n	800ef04 <__gethex+0x330>
 800eed8:	2b03      	cmp	r3, #3
 800eeda:	d017      	beq.n	800ef0c <__gethex+0x338>
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d109      	bne.n	800eef4 <__gethex+0x320>
 800eee0:	f019 0f02 	tst.w	r9, #2
 800eee4:	d006      	beq.n	800eef4 <__gethex+0x320>
 800eee6:	f8da 3000 	ldr.w	r3, [sl]
 800eeea:	ea49 0903 	orr.w	r9, r9, r3
 800eeee:	f019 0f01 	tst.w	r9, #1
 800eef2:	d10e      	bne.n	800ef12 <__gethex+0x33e>
 800eef4:	f045 0510 	orr.w	r5, r5, #16
 800eef8:	e032      	b.n	800ef60 <__gethex+0x38c>
 800eefa:	f04f 0901 	mov.w	r9, #1
 800eefe:	e7d1      	b.n	800eea4 <__gethex+0x2d0>
 800ef00:	2501      	movs	r5, #1
 800ef02:	e7e2      	b.n	800eeca <__gethex+0x2f6>
 800ef04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef06:	f1c3 0301 	rsb	r3, r3, #1
 800ef0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0f0      	beq.n	800eef4 <__gethex+0x320>
 800ef12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ef16:	f104 0314 	add.w	r3, r4, #20
 800ef1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ef1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef22:	f04f 0c00 	mov.w	ip, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef30:	d01b      	beq.n	800ef6a <__gethex+0x396>
 800ef32:	3201      	adds	r2, #1
 800ef34:	6002      	str	r2, [r0, #0]
 800ef36:	2d02      	cmp	r5, #2
 800ef38:	f104 0314 	add.w	r3, r4, #20
 800ef3c:	d13c      	bne.n	800efb8 <__gethex+0x3e4>
 800ef3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef42:	3a01      	subs	r2, #1
 800ef44:	42b2      	cmp	r2, r6
 800ef46:	d109      	bne.n	800ef5c <__gethex+0x388>
 800ef48:	1171      	asrs	r1, r6, #5
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef50:	f006 061f 	and.w	r6, r6, #31
 800ef54:	fa02 f606 	lsl.w	r6, r2, r6
 800ef58:	421e      	tst	r6, r3
 800ef5a:	d13a      	bne.n	800efd2 <__gethex+0x3fe>
 800ef5c:	f045 0520 	orr.w	r5, r5, #32
 800ef60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef62:	601c      	str	r4, [r3, #0]
 800ef64:	9b02      	ldr	r3, [sp, #8]
 800ef66:	601f      	str	r7, [r3, #0]
 800ef68:	e6b0      	b.n	800eccc <__gethex+0xf8>
 800ef6a:	4299      	cmp	r1, r3
 800ef6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef70:	d8d9      	bhi.n	800ef26 <__gethex+0x352>
 800ef72:	68a3      	ldr	r3, [r4, #8]
 800ef74:	459b      	cmp	fp, r3
 800ef76:	db17      	blt.n	800efa8 <__gethex+0x3d4>
 800ef78:	6861      	ldr	r1, [r4, #4]
 800ef7a:	9801      	ldr	r0, [sp, #4]
 800ef7c:	3101      	adds	r1, #1
 800ef7e:	f7fe f817 	bl	800cfb0 <_Balloc>
 800ef82:	4681      	mov	r9, r0
 800ef84:	b918      	cbnz	r0, 800ef8e <__gethex+0x3ba>
 800ef86:	4b1a      	ldr	r3, [pc, #104]	@ (800eff0 <__gethex+0x41c>)
 800ef88:	4602      	mov	r2, r0
 800ef8a:	2184      	movs	r1, #132	@ 0x84
 800ef8c:	e6c5      	b.n	800ed1a <__gethex+0x146>
 800ef8e:	6922      	ldr	r2, [r4, #16]
 800ef90:	3202      	adds	r2, #2
 800ef92:	f104 010c 	add.w	r1, r4, #12
 800ef96:	0092      	lsls	r2, r2, #2
 800ef98:	300c      	adds	r0, #12
 800ef9a:	f7fd f88a 	bl	800c0b2 <memcpy>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	9801      	ldr	r0, [sp, #4]
 800efa2:	f7fe f845 	bl	800d030 <_Bfree>
 800efa6:	464c      	mov	r4, r9
 800efa8:	6923      	ldr	r3, [r4, #16]
 800efaa:	1c5a      	adds	r2, r3, #1
 800efac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800efb0:	6122      	str	r2, [r4, #16]
 800efb2:	2201      	movs	r2, #1
 800efb4:	615a      	str	r2, [r3, #20]
 800efb6:	e7be      	b.n	800ef36 <__gethex+0x362>
 800efb8:	6922      	ldr	r2, [r4, #16]
 800efba:	455a      	cmp	r2, fp
 800efbc:	dd0b      	ble.n	800efd6 <__gethex+0x402>
 800efbe:	2101      	movs	r1, #1
 800efc0:	4620      	mov	r0, r4
 800efc2:	f7ff fda0 	bl	800eb06 <rshift>
 800efc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efca:	3701      	adds	r7, #1
 800efcc:	42bb      	cmp	r3, r7
 800efce:	f6ff aee0 	blt.w	800ed92 <__gethex+0x1be>
 800efd2:	2501      	movs	r5, #1
 800efd4:	e7c2      	b.n	800ef5c <__gethex+0x388>
 800efd6:	f016 061f 	ands.w	r6, r6, #31
 800efda:	d0fa      	beq.n	800efd2 <__gethex+0x3fe>
 800efdc:	4453      	add	r3, sl
 800efde:	f1c6 0620 	rsb	r6, r6, #32
 800efe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800efe6:	f7fe f8d5 	bl	800d194 <__hi0bits>
 800efea:	42b0      	cmp	r0, r6
 800efec:	dbe7      	blt.n	800efbe <__gethex+0x3ea>
 800efee:	e7f0      	b.n	800efd2 <__gethex+0x3fe>
 800eff0:	080101dd 	.word	0x080101dd

0800eff4 <L_shift>:
 800eff4:	f1c2 0208 	rsb	r2, r2, #8
 800eff8:	0092      	lsls	r2, r2, #2
 800effa:	b570      	push	{r4, r5, r6, lr}
 800effc:	f1c2 0620 	rsb	r6, r2, #32
 800f000:	6843      	ldr	r3, [r0, #4]
 800f002:	6804      	ldr	r4, [r0, #0]
 800f004:	fa03 f506 	lsl.w	r5, r3, r6
 800f008:	432c      	orrs	r4, r5
 800f00a:	40d3      	lsrs	r3, r2
 800f00c:	6004      	str	r4, [r0, #0]
 800f00e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f012:	4288      	cmp	r0, r1
 800f014:	d3f4      	bcc.n	800f000 <L_shift+0xc>
 800f016:	bd70      	pop	{r4, r5, r6, pc}

0800f018 <__match>:
 800f018:	b530      	push	{r4, r5, lr}
 800f01a:	6803      	ldr	r3, [r0, #0]
 800f01c:	3301      	adds	r3, #1
 800f01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f022:	b914      	cbnz	r4, 800f02a <__match+0x12>
 800f024:	6003      	str	r3, [r0, #0]
 800f026:	2001      	movs	r0, #1
 800f028:	bd30      	pop	{r4, r5, pc}
 800f02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f02e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f032:	2d19      	cmp	r5, #25
 800f034:	bf98      	it	ls
 800f036:	3220      	addls	r2, #32
 800f038:	42a2      	cmp	r2, r4
 800f03a:	d0f0      	beq.n	800f01e <__match+0x6>
 800f03c:	2000      	movs	r0, #0
 800f03e:	e7f3      	b.n	800f028 <__match+0x10>

0800f040 <__hexnan>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	680b      	ldr	r3, [r1, #0]
 800f046:	6801      	ldr	r1, [r0, #0]
 800f048:	115e      	asrs	r6, r3, #5
 800f04a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f04e:	f013 031f 	ands.w	r3, r3, #31
 800f052:	b087      	sub	sp, #28
 800f054:	bf18      	it	ne
 800f056:	3604      	addne	r6, #4
 800f058:	2500      	movs	r5, #0
 800f05a:	1f37      	subs	r7, r6, #4
 800f05c:	4682      	mov	sl, r0
 800f05e:	4690      	mov	r8, r2
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	f846 5c04 	str.w	r5, [r6, #-4]
 800f066:	46b9      	mov	r9, r7
 800f068:	463c      	mov	r4, r7
 800f06a:	9502      	str	r5, [sp, #8]
 800f06c:	46ab      	mov	fp, r5
 800f06e:	784a      	ldrb	r2, [r1, #1]
 800f070:	1c4b      	adds	r3, r1, #1
 800f072:	9303      	str	r3, [sp, #12]
 800f074:	b342      	cbz	r2, 800f0c8 <__hexnan+0x88>
 800f076:	4610      	mov	r0, r2
 800f078:	9105      	str	r1, [sp, #20]
 800f07a:	9204      	str	r2, [sp, #16]
 800f07c:	f7ff fd95 	bl	800ebaa <__hexdig_fun>
 800f080:	2800      	cmp	r0, #0
 800f082:	d151      	bne.n	800f128 <__hexnan+0xe8>
 800f084:	9a04      	ldr	r2, [sp, #16]
 800f086:	9905      	ldr	r1, [sp, #20]
 800f088:	2a20      	cmp	r2, #32
 800f08a:	d818      	bhi.n	800f0be <__hexnan+0x7e>
 800f08c:	9b02      	ldr	r3, [sp, #8]
 800f08e:	459b      	cmp	fp, r3
 800f090:	dd13      	ble.n	800f0ba <__hexnan+0x7a>
 800f092:	454c      	cmp	r4, r9
 800f094:	d206      	bcs.n	800f0a4 <__hexnan+0x64>
 800f096:	2d07      	cmp	r5, #7
 800f098:	dc04      	bgt.n	800f0a4 <__hexnan+0x64>
 800f09a:	462a      	mov	r2, r5
 800f09c:	4649      	mov	r1, r9
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f7ff ffa8 	bl	800eff4 <L_shift>
 800f0a4:	4544      	cmp	r4, r8
 800f0a6:	d952      	bls.n	800f14e <__hexnan+0x10e>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f1a4 0904 	sub.w	r9, r4, #4
 800f0ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0b2:	f8cd b008 	str.w	fp, [sp, #8]
 800f0b6:	464c      	mov	r4, r9
 800f0b8:	461d      	mov	r5, r3
 800f0ba:	9903      	ldr	r1, [sp, #12]
 800f0bc:	e7d7      	b.n	800f06e <__hexnan+0x2e>
 800f0be:	2a29      	cmp	r2, #41	@ 0x29
 800f0c0:	d157      	bne.n	800f172 <__hexnan+0x132>
 800f0c2:	3102      	adds	r1, #2
 800f0c4:	f8ca 1000 	str.w	r1, [sl]
 800f0c8:	f1bb 0f00 	cmp.w	fp, #0
 800f0cc:	d051      	beq.n	800f172 <__hexnan+0x132>
 800f0ce:	454c      	cmp	r4, r9
 800f0d0:	d206      	bcs.n	800f0e0 <__hexnan+0xa0>
 800f0d2:	2d07      	cmp	r5, #7
 800f0d4:	dc04      	bgt.n	800f0e0 <__hexnan+0xa0>
 800f0d6:	462a      	mov	r2, r5
 800f0d8:	4649      	mov	r1, r9
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7ff ff8a 	bl	800eff4 <L_shift>
 800f0e0:	4544      	cmp	r4, r8
 800f0e2:	d936      	bls.n	800f152 <__hexnan+0x112>
 800f0e4:	f1a8 0204 	sub.w	r2, r8, #4
 800f0e8:	4623      	mov	r3, r4
 800f0ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0f2:	429f      	cmp	r7, r3
 800f0f4:	d2f9      	bcs.n	800f0ea <__hexnan+0xaa>
 800f0f6:	1b3b      	subs	r3, r7, r4
 800f0f8:	f023 0303 	bic.w	r3, r3, #3
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	3401      	adds	r4, #1
 800f100:	3e03      	subs	r6, #3
 800f102:	42b4      	cmp	r4, r6
 800f104:	bf88      	it	hi
 800f106:	2304      	movhi	r3, #4
 800f108:	4443      	add	r3, r8
 800f10a:	2200      	movs	r2, #0
 800f10c:	f843 2b04 	str.w	r2, [r3], #4
 800f110:	429f      	cmp	r7, r3
 800f112:	d2fb      	bcs.n	800f10c <__hexnan+0xcc>
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	b91b      	cbnz	r3, 800f120 <__hexnan+0xe0>
 800f118:	4547      	cmp	r7, r8
 800f11a:	d128      	bne.n	800f16e <__hexnan+0x12e>
 800f11c:	2301      	movs	r3, #1
 800f11e:	603b      	str	r3, [r7, #0]
 800f120:	2005      	movs	r0, #5
 800f122:	b007      	add	sp, #28
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	3501      	adds	r5, #1
 800f12a:	2d08      	cmp	r5, #8
 800f12c:	f10b 0b01 	add.w	fp, fp, #1
 800f130:	dd06      	ble.n	800f140 <__hexnan+0x100>
 800f132:	4544      	cmp	r4, r8
 800f134:	d9c1      	bls.n	800f0ba <__hexnan+0x7a>
 800f136:	2300      	movs	r3, #0
 800f138:	f844 3c04 	str.w	r3, [r4, #-4]
 800f13c:	2501      	movs	r5, #1
 800f13e:	3c04      	subs	r4, #4
 800f140:	6822      	ldr	r2, [r4, #0]
 800f142:	f000 000f 	and.w	r0, r0, #15
 800f146:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f14a:	6020      	str	r0, [r4, #0]
 800f14c:	e7b5      	b.n	800f0ba <__hexnan+0x7a>
 800f14e:	2508      	movs	r5, #8
 800f150:	e7b3      	b.n	800f0ba <__hexnan+0x7a>
 800f152:	9b01      	ldr	r3, [sp, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0dd      	beq.n	800f114 <__hexnan+0xd4>
 800f158:	f1c3 0320 	rsb	r3, r3, #32
 800f15c:	f04f 32ff 	mov.w	r2, #4294967295
 800f160:	40da      	lsrs	r2, r3
 800f162:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f166:	4013      	ands	r3, r2
 800f168:	f846 3c04 	str.w	r3, [r6, #-4]
 800f16c:	e7d2      	b.n	800f114 <__hexnan+0xd4>
 800f16e:	3f04      	subs	r7, #4
 800f170:	e7d0      	b.n	800f114 <__hexnan+0xd4>
 800f172:	2004      	movs	r0, #4
 800f174:	e7d5      	b.n	800f122 <__hexnan+0xe2>

0800f176 <__ascii_mbtowc>:
 800f176:	b082      	sub	sp, #8
 800f178:	b901      	cbnz	r1, 800f17c <__ascii_mbtowc+0x6>
 800f17a:	a901      	add	r1, sp, #4
 800f17c:	b142      	cbz	r2, 800f190 <__ascii_mbtowc+0x1a>
 800f17e:	b14b      	cbz	r3, 800f194 <__ascii_mbtowc+0x1e>
 800f180:	7813      	ldrb	r3, [r2, #0]
 800f182:	600b      	str	r3, [r1, #0]
 800f184:	7812      	ldrb	r2, [r2, #0]
 800f186:	1e10      	subs	r0, r2, #0
 800f188:	bf18      	it	ne
 800f18a:	2001      	movne	r0, #1
 800f18c:	b002      	add	sp, #8
 800f18e:	4770      	bx	lr
 800f190:	4610      	mov	r0, r2
 800f192:	e7fb      	b.n	800f18c <__ascii_mbtowc+0x16>
 800f194:	f06f 0001 	mvn.w	r0, #1
 800f198:	e7f8      	b.n	800f18c <__ascii_mbtowc+0x16>

0800f19a <_realloc_r>:
 800f19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19e:	4680      	mov	r8, r0
 800f1a0:	4615      	mov	r5, r2
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	b921      	cbnz	r1, 800f1b0 <_realloc_r+0x16>
 800f1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	f7fd be74 	b.w	800ce98 <_malloc_r>
 800f1b0:	b92a      	cbnz	r2, 800f1be <_realloc_r+0x24>
 800f1b2:	f7fd fdfd 	bl	800cdb0 <_free_r>
 800f1b6:	2400      	movs	r4, #0
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1be:	f000 fa41 	bl	800f644 <_malloc_usable_size_r>
 800f1c2:	4285      	cmp	r5, r0
 800f1c4:	4606      	mov	r6, r0
 800f1c6:	d802      	bhi.n	800f1ce <_realloc_r+0x34>
 800f1c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f1cc:	d8f4      	bhi.n	800f1b8 <_realloc_r+0x1e>
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	f7fd fe61 	bl	800ce98 <_malloc_r>
 800f1d6:	4607      	mov	r7, r0
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0ec      	beq.n	800f1b6 <_realloc_r+0x1c>
 800f1dc:	42b5      	cmp	r5, r6
 800f1de:	462a      	mov	r2, r5
 800f1e0:	4621      	mov	r1, r4
 800f1e2:	bf28      	it	cs
 800f1e4:	4632      	movcs	r2, r6
 800f1e6:	f7fc ff64 	bl	800c0b2 <memcpy>
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	f7fd fddf 	bl	800cdb0 <_free_r>
 800f1f2:	463c      	mov	r4, r7
 800f1f4:	e7e0      	b.n	800f1b8 <_realloc_r+0x1e>

0800f1f6 <__ascii_wctomb>:
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	b141      	cbz	r1, 800f20e <__ascii_wctomb+0x18>
 800f1fc:	2aff      	cmp	r2, #255	@ 0xff
 800f1fe:	d904      	bls.n	800f20a <__ascii_wctomb+0x14>
 800f200:	228a      	movs	r2, #138	@ 0x8a
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	f04f 30ff 	mov.w	r0, #4294967295
 800f208:	4770      	bx	lr
 800f20a:	700a      	strb	r2, [r1, #0]
 800f20c:	2001      	movs	r0, #1
 800f20e:	4770      	bx	lr

0800f210 <__sfputc_r>:
 800f210:	6893      	ldr	r3, [r2, #8]
 800f212:	3b01      	subs	r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	b410      	push	{r4}
 800f218:	6093      	str	r3, [r2, #8]
 800f21a:	da08      	bge.n	800f22e <__sfputc_r+0x1e>
 800f21c:	6994      	ldr	r4, [r2, #24]
 800f21e:	42a3      	cmp	r3, r4
 800f220:	db01      	blt.n	800f226 <__sfputc_r+0x16>
 800f222:	290a      	cmp	r1, #10
 800f224:	d103      	bne.n	800f22e <__sfputc_r+0x1e>
 800f226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f22a:	f000 b933 	b.w	800f494 <__swbuf_r>
 800f22e:	6813      	ldr	r3, [r2, #0]
 800f230:	1c58      	adds	r0, r3, #1
 800f232:	6010      	str	r0, [r2, #0]
 800f234:	7019      	strb	r1, [r3, #0]
 800f236:	4608      	mov	r0, r1
 800f238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <__sfputs_r>:
 800f23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f240:	4606      	mov	r6, r0
 800f242:	460f      	mov	r7, r1
 800f244:	4614      	mov	r4, r2
 800f246:	18d5      	adds	r5, r2, r3
 800f248:	42ac      	cmp	r4, r5
 800f24a:	d101      	bne.n	800f250 <__sfputs_r+0x12>
 800f24c:	2000      	movs	r0, #0
 800f24e:	e007      	b.n	800f260 <__sfputs_r+0x22>
 800f250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f254:	463a      	mov	r2, r7
 800f256:	4630      	mov	r0, r6
 800f258:	f7ff ffda 	bl	800f210 <__sfputc_r>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	d1f3      	bne.n	800f248 <__sfputs_r+0xa>
 800f260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f264 <_vfiprintf_r>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	460d      	mov	r5, r1
 800f26a:	b09d      	sub	sp, #116	@ 0x74
 800f26c:	4614      	mov	r4, r2
 800f26e:	4698      	mov	r8, r3
 800f270:	4606      	mov	r6, r0
 800f272:	b118      	cbz	r0, 800f27c <_vfiprintf_r+0x18>
 800f274:	6a03      	ldr	r3, [r0, #32]
 800f276:	b90b      	cbnz	r3, 800f27c <_vfiprintf_r+0x18>
 800f278:	f7fc fdf6 	bl	800be68 <__sinit>
 800f27c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f27e:	07d9      	lsls	r1, r3, #31
 800f280:	d405      	bmi.n	800f28e <_vfiprintf_r+0x2a>
 800f282:	89ab      	ldrh	r3, [r5, #12]
 800f284:	059a      	lsls	r2, r3, #22
 800f286:	d402      	bmi.n	800f28e <_vfiprintf_r+0x2a>
 800f288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f28a:	f7fc ff10 	bl	800c0ae <__retarget_lock_acquire_recursive>
 800f28e:	89ab      	ldrh	r3, [r5, #12]
 800f290:	071b      	lsls	r3, r3, #28
 800f292:	d501      	bpl.n	800f298 <_vfiprintf_r+0x34>
 800f294:	692b      	ldr	r3, [r5, #16]
 800f296:	b99b      	cbnz	r3, 800f2c0 <_vfiprintf_r+0x5c>
 800f298:	4629      	mov	r1, r5
 800f29a:	4630      	mov	r0, r6
 800f29c:	f000 f938 	bl	800f510 <__swsetup_r>
 800f2a0:	b170      	cbz	r0, 800f2c0 <_vfiprintf_r+0x5c>
 800f2a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2a4:	07dc      	lsls	r4, r3, #31
 800f2a6:	d504      	bpl.n	800f2b2 <_vfiprintf_r+0x4e>
 800f2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ac:	b01d      	add	sp, #116	@ 0x74
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	89ab      	ldrh	r3, [r5, #12]
 800f2b4:	0598      	lsls	r0, r3, #22
 800f2b6:	d4f7      	bmi.n	800f2a8 <_vfiprintf_r+0x44>
 800f2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2ba:	f7fc fef9 	bl	800c0b0 <__retarget_lock_release_recursive>
 800f2be:	e7f3      	b.n	800f2a8 <_vfiprintf_r+0x44>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2c4:	2320      	movs	r3, #32
 800f2c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2ce:	2330      	movs	r3, #48	@ 0x30
 800f2d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f480 <_vfiprintf_r+0x21c>
 800f2d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2d8:	f04f 0901 	mov.w	r9, #1
 800f2dc:	4623      	mov	r3, r4
 800f2de:	469a      	mov	sl, r3
 800f2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2e4:	b10a      	cbz	r2, 800f2ea <_vfiprintf_r+0x86>
 800f2e6:	2a25      	cmp	r2, #37	@ 0x25
 800f2e8:	d1f9      	bne.n	800f2de <_vfiprintf_r+0x7a>
 800f2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f2ee:	d00b      	beq.n	800f308 <_vfiprintf_r+0xa4>
 800f2f0:	465b      	mov	r3, fp
 800f2f2:	4622      	mov	r2, r4
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7ff ffa1 	bl	800f23e <__sfputs_r>
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	f000 80a7 	beq.w	800f450 <_vfiprintf_r+0x1ec>
 800f302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f304:	445a      	add	r2, fp
 800f306:	9209      	str	r2, [sp, #36]	@ 0x24
 800f308:	f89a 3000 	ldrb.w	r3, [sl]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 809f 	beq.w	800f450 <_vfiprintf_r+0x1ec>
 800f312:	2300      	movs	r3, #0
 800f314:	f04f 32ff 	mov.w	r2, #4294967295
 800f318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f31c:	f10a 0a01 	add.w	sl, sl, #1
 800f320:	9304      	str	r3, [sp, #16]
 800f322:	9307      	str	r3, [sp, #28]
 800f324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f328:	931a      	str	r3, [sp, #104]	@ 0x68
 800f32a:	4654      	mov	r4, sl
 800f32c:	2205      	movs	r2, #5
 800f32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f332:	4853      	ldr	r0, [pc, #332]	@ (800f480 <_vfiprintf_r+0x21c>)
 800f334:	f7f0 ff6c 	bl	8000210 <memchr>
 800f338:	9a04      	ldr	r2, [sp, #16]
 800f33a:	b9d8      	cbnz	r0, 800f374 <_vfiprintf_r+0x110>
 800f33c:	06d1      	lsls	r1, r2, #27
 800f33e:	bf44      	itt	mi
 800f340:	2320      	movmi	r3, #32
 800f342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f346:	0713      	lsls	r3, r2, #28
 800f348:	bf44      	itt	mi
 800f34a:	232b      	movmi	r3, #43	@ 0x2b
 800f34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f350:	f89a 3000 	ldrb.w	r3, [sl]
 800f354:	2b2a      	cmp	r3, #42	@ 0x2a
 800f356:	d015      	beq.n	800f384 <_vfiprintf_r+0x120>
 800f358:	9a07      	ldr	r2, [sp, #28]
 800f35a:	4654      	mov	r4, sl
 800f35c:	2000      	movs	r0, #0
 800f35e:	f04f 0c0a 	mov.w	ip, #10
 800f362:	4621      	mov	r1, r4
 800f364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f368:	3b30      	subs	r3, #48	@ 0x30
 800f36a:	2b09      	cmp	r3, #9
 800f36c:	d94b      	bls.n	800f406 <_vfiprintf_r+0x1a2>
 800f36e:	b1b0      	cbz	r0, 800f39e <_vfiprintf_r+0x13a>
 800f370:	9207      	str	r2, [sp, #28]
 800f372:	e014      	b.n	800f39e <_vfiprintf_r+0x13a>
 800f374:	eba0 0308 	sub.w	r3, r0, r8
 800f378:	fa09 f303 	lsl.w	r3, r9, r3
 800f37c:	4313      	orrs	r3, r2
 800f37e:	9304      	str	r3, [sp, #16]
 800f380:	46a2      	mov	sl, r4
 800f382:	e7d2      	b.n	800f32a <_vfiprintf_r+0xc6>
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	1d19      	adds	r1, r3, #4
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	9103      	str	r1, [sp, #12]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	bfbb      	ittet	lt
 800f390:	425b      	neglt	r3, r3
 800f392:	f042 0202 	orrlt.w	r2, r2, #2
 800f396:	9307      	strge	r3, [sp, #28]
 800f398:	9307      	strlt	r3, [sp, #28]
 800f39a:	bfb8      	it	lt
 800f39c:	9204      	strlt	r2, [sp, #16]
 800f39e:	7823      	ldrb	r3, [r4, #0]
 800f3a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3a2:	d10a      	bne.n	800f3ba <_vfiprintf_r+0x156>
 800f3a4:	7863      	ldrb	r3, [r4, #1]
 800f3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3a8:	d132      	bne.n	800f410 <_vfiprintf_r+0x1ac>
 800f3aa:	9b03      	ldr	r3, [sp, #12]
 800f3ac:	1d1a      	adds	r2, r3, #4
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	9203      	str	r2, [sp, #12]
 800f3b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3b6:	3402      	adds	r4, #2
 800f3b8:	9305      	str	r3, [sp, #20]
 800f3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f490 <_vfiprintf_r+0x22c>
 800f3be:	7821      	ldrb	r1, [r4, #0]
 800f3c0:	2203      	movs	r2, #3
 800f3c2:	4650      	mov	r0, sl
 800f3c4:	f7f0 ff24 	bl	8000210 <memchr>
 800f3c8:	b138      	cbz	r0, 800f3da <_vfiprintf_r+0x176>
 800f3ca:	9b04      	ldr	r3, [sp, #16]
 800f3cc:	eba0 000a 	sub.w	r0, r0, sl
 800f3d0:	2240      	movs	r2, #64	@ 0x40
 800f3d2:	4082      	lsls	r2, r0
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	3401      	adds	r4, #1
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3de:	4829      	ldr	r0, [pc, #164]	@ (800f484 <_vfiprintf_r+0x220>)
 800f3e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3e4:	2206      	movs	r2, #6
 800f3e6:	f7f0 ff13 	bl	8000210 <memchr>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	d03f      	beq.n	800f46e <_vfiprintf_r+0x20a>
 800f3ee:	4b26      	ldr	r3, [pc, #152]	@ (800f488 <_vfiprintf_r+0x224>)
 800f3f0:	bb1b      	cbnz	r3, 800f43a <_vfiprintf_r+0x1d6>
 800f3f2:	9b03      	ldr	r3, [sp, #12]
 800f3f4:	3307      	adds	r3, #7
 800f3f6:	f023 0307 	bic.w	r3, r3, #7
 800f3fa:	3308      	adds	r3, #8
 800f3fc:	9303      	str	r3, [sp, #12]
 800f3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f400:	443b      	add	r3, r7
 800f402:	9309      	str	r3, [sp, #36]	@ 0x24
 800f404:	e76a      	b.n	800f2dc <_vfiprintf_r+0x78>
 800f406:	fb0c 3202 	mla	r2, ip, r2, r3
 800f40a:	460c      	mov	r4, r1
 800f40c:	2001      	movs	r0, #1
 800f40e:	e7a8      	b.n	800f362 <_vfiprintf_r+0xfe>
 800f410:	2300      	movs	r3, #0
 800f412:	3401      	adds	r4, #1
 800f414:	9305      	str	r3, [sp, #20]
 800f416:	4619      	mov	r1, r3
 800f418:	f04f 0c0a 	mov.w	ip, #10
 800f41c:	4620      	mov	r0, r4
 800f41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f422:	3a30      	subs	r2, #48	@ 0x30
 800f424:	2a09      	cmp	r2, #9
 800f426:	d903      	bls.n	800f430 <_vfiprintf_r+0x1cc>
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d0c6      	beq.n	800f3ba <_vfiprintf_r+0x156>
 800f42c:	9105      	str	r1, [sp, #20]
 800f42e:	e7c4      	b.n	800f3ba <_vfiprintf_r+0x156>
 800f430:	fb0c 2101 	mla	r1, ip, r1, r2
 800f434:	4604      	mov	r4, r0
 800f436:	2301      	movs	r3, #1
 800f438:	e7f0      	b.n	800f41c <_vfiprintf_r+0x1b8>
 800f43a:	ab03      	add	r3, sp, #12
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	462a      	mov	r2, r5
 800f440:	4b12      	ldr	r3, [pc, #72]	@ (800f48c <_vfiprintf_r+0x228>)
 800f442:	a904      	add	r1, sp, #16
 800f444:	4630      	mov	r0, r6
 800f446:	f7fb feb7 	bl	800b1b8 <_printf_float>
 800f44a:	4607      	mov	r7, r0
 800f44c:	1c78      	adds	r0, r7, #1
 800f44e:	d1d6      	bne.n	800f3fe <_vfiprintf_r+0x19a>
 800f450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f452:	07d9      	lsls	r1, r3, #31
 800f454:	d405      	bmi.n	800f462 <_vfiprintf_r+0x1fe>
 800f456:	89ab      	ldrh	r3, [r5, #12]
 800f458:	059a      	lsls	r2, r3, #22
 800f45a:	d402      	bmi.n	800f462 <_vfiprintf_r+0x1fe>
 800f45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f45e:	f7fc fe27 	bl	800c0b0 <__retarget_lock_release_recursive>
 800f462:	89ab      	ldrh	r3, [r5, #12]
 800f464:	065b      	lsls	r3, r3, #25
 800f466:	f53f af1f 	bmi.w	800f2a8 <_vfiprintf_r+0x44>
 800f46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f46c:	e71e      	b.n	800f2ac <_vfiprintf_r+0x48>
 800f46e:	ab03      	add	r3, sp, #12
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	462a      	mov	r2, r5
 800f474:	4b05      	ldr	r3, [pc, #20]	@ (800f48c <_vfiprintf_r+0x228>)
 800f476:	a904      	add	r1, sp, #16
 800f478:	4630      	mov	r0, r6
 800f47a:	f7fc f935 	bl	800b6e8 <_printf_i>
 800f47e:	e7e4      	b.n	800f44a <_vfiprintf_r+0x1e6>
 800f480:	080104a1 	.word	0x080104a1
 800f484:	080104ab 	.word	0x080104ab
 800f488:	0800b1b9 	.word	0x0800b1b9
 800f48c:	0800f23f 	.word	0x0800f23f
 800f490:	080104a7 	.word	0x080104a7

0800f494 <__swbuf_r>:
 800f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f496:	460e      	mov	r6, r1
 800f498:	4614      	mov	r4, r2
 800f49a:	4605      	mov	r5, r0
 800f49c:	b118      	cbz	r0, 800f4a6 <__swbuf_r+0x12>
 800f49e:	6a03      	ldr	r3, [r0, #32]
 800f4a0:	b90b      	cbnz	r3, 800f4a6 <__swbuf_r+0x12>
 800f4a2:	f7fc fce1 	bl	800be68 <__sinit>
 800f4a6:	69a3      	ldr	r3, [r4, #24]
 800f4a8:	60a3      	str	r3, [r4, #8]
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	071a      	lsls	r2, r3, #28
 800f4ae:	d501      	bpl.n	800f4b4 <__swbuf_r+0x20>
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	b943      	cbnz	r3, 800f4c6 <__swbuf_r+0x32>
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 f82a 	bl	800f510 <__swsetup_r>
 800f4bc:	b118      	cbz	r0, 800f4c6 <__swbuf_r+0x32>
 800f4be:	f04f 37ff 	mov.w	r7, #4294967295
 800f4c2:	4638      	mov	r0, r7
 800f4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	6922      	ldr	r2, [r4, #16]
 800f4ca:	1a98      	subs	r0, r3, r2
 800f4cc:	6963      	ldr	r3, [r4, #20]
 800f4ce:	b2f6      	uxtb	r6, r6
 800f4d0:	4283      	cmp	r3, r0
 800f4d2:	4637      	mov	r7, r6
 800f4d4:	dc05      	bgt.n	800f4e2 <__swbuf_r+0x4e>
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f7ff fa7b 	bl	800e9d4 <_fflush_r>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d1ed      	bne.n	800f4be <__swbuf_r+0x2a>
 800f4e2:	68a3      	ldr	r3, [r4, #8]
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	60a3      	str	r3, [r4, #8]
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	6022      	str	r2, [r4, #0]
 800f4ee:	701e      	strb	r6, [r3, #0]
 800f4f0:	6962      	ldr	r2, [r4, #20]
 800f4f2:	1c43      	adds	r3, r0, #1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d004      	beq.n	800f502 <__swbuf_r+0x6e>
 800f4f8:	89a3      	ldrh	r3, [r4, #12]
 800f4fa:	07db      	lsls	r3, r3, #31
 800f4fc:	d5e1      	bpl.n	800f4c2 <__swbuf_r+0x2e>
 800f4fe:	2e0a      	cmp	r6, #10
 800f500:	d1df      	bne.n	800f4c2 <__swbuf_r+0x2e>
 800f502:	4621      	mov	r1, r4
 800f504:	4628      	mov	r0, r5
 800f506:	f7ff fa65 	bl	800e9d4 <_fflush_r>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d0d9      	beq.n	800f4c2 <__swbuf_r+0x2e>
 800f50e:	e7d6      	b.n	800f4be <__swbuf_r+0x2a>

0800f510 <__swsetup_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4b29      	ldr	r3, [pc, #164]	@ (800f5b8 <__swsetup_r+0xa8>)
 800f514:	4605      	mov	r5, r0
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	460c      	mov	r4, r1
 800f51a:	b118      	cbz	r0, 800f524 <__swsetup_r+0x14>
 800f51c:	6a03      	ldr	r3, [r0, #32]
 800f51e:	b90b      	cbnz	r3, 800f524 <__swsetup_r+0x14>
 800f520:	f7fc fca2 	bl	800be68 <__sinit>
 800f524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f528:	0719      	lsls	r1, r3, #28
 800f52a:	d422      	bmi.n	800f572 <__swsetup_r+0x62>
 800f52c:	06da      	lsls	r2, r3, #27
 800f52e:	d407      	bmi.n	800f540 <__swsetup_r+0x30>
 800f530:	2209      	movs	r2, #9
 800f532:	602a      	str	r2, [r5, #0]
 800f534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f538:	81a3      	strh	r3, [r4, #12]
 800f53a:	f04f 30ff 	mov.w	r0, #4294967295
 800f53e:	e033      	b.n	800f5a8 <__swsetup_r+0x98>
 800f540:	0758      	lsls	r0, r3, #29
 800f542:	d512      	bpl.n	800f56a <__swsetup_r+0x5a>
 800f544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f546:	b141      	cbz	r1, 800f55a <__swsetup_r+0x4a>
 800f548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f54c:	4299      	cmp	r1, r3
 800f54e:	d002      	beq.n	800f556 <__swsetup_r+0x46>
 800f550:	4628      	mov	r0, r5
 800f552:	f7fd fc2d 	bl	800cdb0 <_free_r>
 800f556:	2300      	movs	r3, #0
 800f558:	6363      	str	r3, [r4, #52]	@ 0x34
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f560:	81a3      	strh	r3, [r4, #12]
 800f562:	2300      	movs	r3, #0
 800f564:	6063      	str	r3, [r4, #4]
 800f566:	6923      	ldr	r3, [r4, #16]
 800f568:	6023      	str	r3, [r4, #0]
 800f56a:	89a3      	ldrh	r3, [r4, #12]
 800f56c:	f043 0308 	orr.w	r3, r3, #8
 800f570:	81a3      	strh	r3, [r4, #12]
 800f572:	6923      	ldr	r3, [r4, #16]
 800f574:	b94b      	cbnz	r3, 800f58a <__swsetup_r+0x7a>
 800f576:	89a3      	ldrh	r3, [r4, #12]
 800f578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f580:	d003      	beq.n	800f58a <__swsetup_r+0x7a>
 800f582:	4621      	mov	r1, r4
 800f584:	4628      	mov	r0, r5
 800f586:	f000 f88b 	bl	800f6a0 <__smakebuf_r>
 800f58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58e:	f013 0201 	ands.w	r2, r3, #1
 800f592:	d00a      	beq.n	800f5aa <__swsetup_r+0x9a>
 800f594:	2200      	movs	r2, #0
 800f596:	60a2      	str	r2, [r4, #8]
 800f598:	6962      	ldr	r2, [r4, #20]
 800f59a:	4252      	negs	r2, r2
 800f59c:	61a2      	str	r2, [r4, #24]
 800f59e:	6922      	ldr	r2, [r4, #16]
 800f5a0:	b942      	cbnz	r2, 800f5b4 <__swsetup_r+0xa4>
 800f5a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f5a6:	d1c5      	bne.n	800f534 <__swsetup_r+0x24>
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	0799      	lsls	r1, r3, #30
 800f5ac:	bf58      	it	pl
 800f5ae:	6962      	ldrpl	r2, [r4, #20]
 800f5b0:	60a2      	str	r2, [r4, #8]
 800f5b2:	e7f4      	b.n	800f59e <__swsetup_r+0x8e>
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	e7f7      	b.n	800f5a8 <__swsetup_r+0x98>
 800f5b8:	200000c0 	.word	0x200000c0

0800f5bc <_raise_r>:
 800f5bc:	291f      	cmp	r1, #31
 800f5be:	b538      	push	{r3, r4, r5, lr}
 800f5c0:	4605      	mov	r5, r0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	d904      	bls.n	800f5d0 <_raise_r+0x14>
 800f5c6:	2316      	movs	r3, #22
 800f5c8:	6003      	str	r3, [r0, #0]
 800f5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f5d2:	b112      	cbz	r2, 800f5da <_raise_r+0x1e>
 800f5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5d8:	b94b      	cbnz	r3, 800f5ee <_raise_r+0x32>
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 f830 	bl	800f640 <_getpid_r>
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	4601      	mov	r1, r0
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5ea:	f000 b817 	b.w	800f61c <_kill_r>
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d00a      	beq.n	800f608 <_raise_r+0x4c>
 800f5f2:	1c59      	adds	r1, r3, #1
 800f5f4:	d103      	bne.n	800f5fe <_raise_r+0x42>
 800f5f6:	2316      	movs	r3, #22
 800f5f8:	6003      	str	r3, [r0, #0]
 800f5fa:	2001      	movs	r0, #1
 800f5fc:	e7e7      	b.n	800f5ce <_raise_r+0x12>
 800f5fe:	2100      	movs	r1, #0
 800f600:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f604:	4620      	mov	r0, r4
 800f606:	4798      	blx	r3
 800f608:	2000      	movs	r0, #0
 800f60a:	e7e0      	b.n	800f5ce <_raise_r+0x12>

0800f60c <raise>:
 800f60c:	4b02      	ldr	r3, [pc, #8]	@ (800f618 <raise+0xc>)
 800f60e:	4601      	mov	r1, r0
 800f610:	6818      	ldr	r0, [r3, #0]
 800f612:	f7ff bfd3 	b.w	800f5bc <_raise_r>
 800f616:	bf00      	nop
 800f618:	200000c0 	.word	0x200000c0

0800f61c <_kill_r>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4d07      	ldr	r5, [pc, #28]	@ (800f63c <_kill_r+0x20>)
 800f620:	2300      	movs	r3, #0
 800f622:	4604      	mov	r4, r0
 800f624:	4608      	mov	r0, r1
 800f626:	4611      	mov	r1, r2
 800f628:	602b      	str	r3, [r5, #0]
 800f62a:	f7f2 fe7b 	bl	8002324 <_kill>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	d102      	bne.n	800f638 <_kill_r+0x1c>
 800f632:	682b      	ldr	r3, [r5, #0]
 800f634:	b103      	cbz	r3, 800f638 <_kill_r+0x1c>
 800f636:	6023      	str	r3, [r4, #0]
 800f638:	bd38      	pop	{r3, r4, r5, pc}
 800f63a:	bf00      	nop
 800f63c:	20005264 	.word	0x20005264

0800f640 <_getpid_r>:
 800f640:	f7f2 be68 	b.w	8002314 <_getpid>

0800f644 <_malloc_usable_size_r>:
 800f644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f648:	1f18      	subs	r0, r3, #4
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bfbc      	itt	lt
 800f64e:	580b      	ldrlt	r3, [r1, r0]
 800f650:	18c0      	addlt	r0, r0, r3
 800f652:	4770      	bx	lr

0800f654 <__swhatbuf_r>:
 800f654:	b570      	push	{r4, r5, r6, lr}
 800f656:	460c      	mov	r4, r1
 800f658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f65c:	2900      	cmp	r1, #0
 800f65e:	b096      	sub	sp, #88	@ 0x58
 800f660:	4615      	mov	r5, r2
 800f662:	461e      	mov	r6, r3
 800f664:	da0d      	bge.n	800f682 <__swhatbuf_r+0x2e>
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f66c:	f04f 0100 	mov.w	r1, #0
 800f670:	bf14      	ite	ne
 800f672:	2340      	movne	r3, #64	@ 0x40
 800f674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f678:	2000      	movs	r0, #0
 800f67a:	6031      	str	r1, [r6, #0]
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	b016      	add	sp, #88	@ 0x58
 800f680:	bd70      	pop	{r4, r5, r6, pc}
 800f682:	466a      	mov	r2, sp
 800f684:	f000 f848 	bl	800f718 <_fstat_r>
 800f688:	2800      	cmp	r0, #0
 800f68a:	dbec      	blt.n	800f666 <__swhatbuf_r+0x12>
 800f68c:	9901      	ldr	r1, [sp, #4]
 800f68e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f696:	4259      	negs	r1, r3
 800f698:	4159      	adcs	r1, r3
 800f69a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f69e:	e7eb      	b.n	800f678 <__swhatbuf_r+0x24>

0800f6a0 <__smakebuf_r>:
 800f6a0:	898b      	ldrh	r3, [r1, #12]
 800f6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6a4:	079d      	lsls	r5, r3, #30
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	d507      	bpl.n	800f6bc <__smakebuf_r+0x1c>
 800f6ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	6123      	str	r3, [r4, #16]
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	6163      	str	r3, [r4, #20]
 800f6b8:	b003      	add	sp, #12
 800f6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6bc:	ab01      	add	r3, sp, #4
 800f6be:	466a      	mov	r2, sp
 800f6c0:	f7ff ffc8 	bl	800f654 <__swhatbuf_r>
 800f6c4:	9f00      	ldr	r7, [sp, #0]
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f7fd fbe4 	bl	800ce98 <_malloc_r>
 800f6d0:	b948      	cbnz	r0, 800f6e6 <__smakebuf_r+0x46>
 800f6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d6:	059a      	lsls	r2, r3, #22
 800f6d8:	d4ee      	bmi.n	800f6b8 <__smakebuf_r+0x18>
 800f6da:	f023 0303 	bic.w	r3, r3, #3
 800f6de:	f043 0302 	orr.w	r3, r3, #2
 800f6e2:	81a3      	strh	r3, [r4, #12]
 800f6e4:	e7e2      	b.n	800f6ac <__smakebuf_r+0xc>
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	6020      	str	r0, [r4, #0]
 800f6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6ee:	81a3      	strh	r3, [r4, #12]
 800f6f0:	9b01      	ldr	r3, [sp, #4]
 800f6f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6f6:	b15b      	cbz	r3, 800f710 <__smakebuf_r+0x70>
 800f6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f000 f81d 	bl	800f73c <_isatty_r>
 800f702:	b128      	cbz	r0, 800f710 <__smakebuf_r+0x70>
 800f704:	89a3      	ldrh	r3, [r4, #12]
 800f706:	f023 0303 	bic.w	r3, r3, #3
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	81a3      	strh	r3, [r4, #12]
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	431d      	orrs	r5, r3
 800f714:	81a5      	strh	r5, [r4, #12]
 800f716:	e7cf      	b.n	800f6b8 <__smakebuf_r+0x18>

0800f718 <_fstat_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d07      	ldr	r5, [pc, #28]	@ (800f738 <_fstat_r+0x20>)
 800f71c:	2300      	movs	r3, #0
 800f71e:	4604      	mov	r4, r0
 800f720:	4608      	mov	r0, r1
 800f722:	4611      	mov	r1, r2
 800f724:	602b      	str	r3, [r5, #0]
 800f726:	f7f2 fe5d 	bl	80023e4 <_fstat>
 800f72a:	1c43      	adds	r3, r0, #1
 800f72c:	d102      	bne.n	800f734 <_fstat_r+0x1c>
 800f72e:	682b      	ldr	r3, [r5, #0]
 800f730:	b103      	cbz	r3, 800f734 <_fstat_r+0x1c>
 800f732:	6023      	str	r3, [r4, #0]
 800f734:	bd38      	pop	{r3, r4, r5, pc}
 800f736:	bf00      	nop
 800f738:	20005264 	.word	0x20005264

0800f73c <_isatty_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	4d06      	ldr	r5, [pc, #24]	@ (800f758 <_isatty_r+0x1c>)
 800f740:	2300      	movs	r3, #0
 800f742:	4604      	mov	r4, r0
 800f744:	4608      	mov	r0, r1
 800f746:	602b      	str	r3, [r5, #0]
 800f748:	f7f2 fe5c 	bl	8002404 <_isatty>
 800f74c:	1c43      	adds	r3, r0, #1
 800f74e:	d102      	bne.n	800f756 <_isatty_r+0x1a>
 800f750:	682b      	ldr	r3, [r5, #0]
 800f752:	b103      	cbz	r3, 800f756 <_isatty_r+0x1a>
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	20005264 	.word	0x20005264

0800f75c <atan2>:
 800f75c:	f000 baa8 	b.w	800fcb0 <__ieee754_atan2>

0800f760 <sqrt>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	ed2d 8b02 	vpush	{d8}
 800f766:	ec55 4b10 	vmov	r4, r5, d0
 800f76a:	f000 f9c5 	bl	800faf8 <__ieee754_sqrt>
 800f76e:	4622      	mov	r2, r4
 800f770:	462b      	mov	r3, r5
 800f772:	4620      	mov	r0, r4
 800f774:	4629      	mov	r1, r5
 800f776:	eeb0 8a40 	vmov.f32	s16, s0
 800f77a:	eef0 8a60 	vmov.f32	s17, s1
 800f77e:	f7f1 f9f5 	bl	8000b6c <__aeabi_dcmpun>
 800f782:	b990      	cbnz	r0, 800f7aa <sqrt+0x4a>
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	4620      	mov	r0, r4
 800f78a:	4629      	mov	r1, r5
 800f78c:	f7f1 f9c6 	bl	8000b1c <__aeabi_dcmplt>
 800f790:	b158      	cbz	r0, 800f7aa <sqrt+0x4a>
 800f792:	f7fc fc61 	bl	800c058 <__errno>
 800f796:	2321      	movs	r3, #33	@ 0x21
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	2200      	movs	r2, #0
 800f79c:	2300      	movs	r3, #0
 800f79e:	4610      	mov	r0, r2
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	f7f1 f873 	bl	800088c <__aeabi_ddiv>
 800f7a6:	ec41 0b18 	vmov	d8, r0, r1
 800f7aa:	eeb0 0a48 	vmov.f32	s0, s16
 800f7ae:	eef0 0a68 	vmov.f32	s1, s17
 800f7b2:	ecbd 8b02 	vpop	{d8}
 800f7b6:	bd38      	pop	{r3, r4, r5, pc}

0800f7b8 <atan>:
 800f7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	ec55 4b10 	vmov	r4, r5, d0
 800f7c0:	4bbf      	ldr	r3, [pc, #764]	@ (800fac0 <atan+0x308>)
 800f7c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f7c6:	429e      	cmp	r6, r3
 800f7c8:	46ab      	mov	fp, r5
 800f7ca:	d918      	bls.n	800f7fe <atan+0x46>
 800f7cc:	4bbd      	ldr	r3, [pc, #756]	@ (800fac4 <atan+0x30c>)
 800f7ce:	429e      	cmp	r6, r3
 800f7d0:	d801      	bhi.n	800f7d6 <atan+0x1e>
 800f7d2:	d109      	bne.n	800f7e8 <atan+0x30>
 800f7d4:	b144      	cbz	r4, 800f7e8 <atan+0x30>
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	462b      	mov	r3, r5
 800f7da:	4620      	mov	r0, r4
 800f7dc:	4629      	mov	r1, r5
 800f7de:	f7f0 fd75 	bl	80002cc <__adddf3>
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	e006      	b.n	800f7f6 <atan+0x3e>
 800f7e8:	f1bb 0f00 	cmp.w	fp, #0
 800f7ec:	f340 812b 	ble.w	800fa46 <atan+0x28e>
 800f7f0:	a597      	add	r5, pc, #604	@ (adr r5, 800fa50 <atan+0x298>)
 800f7f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7f6:	ec45 4b10 	vmov	d0, r4, r5
 800f7fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fe:	4bb2      	ldr	r3, [pc, #712]	@ (800fac8 <atan+0x310>)
 800f800:	429e      	cmp	r6, r3
 800f802:	d813      	bhi.n	800f82c <atan+0x74>
 800f804:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f808:	429e      	cmp	r6, r3
 800f80a:	d80c      	bhi.n	800f826 <atan+0x6e>
 800f80c:	a392      	add	r3, pc, #584	@ (adr r3, 800fa58 <atan+0x2a0>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	4620      	mov	r0, r4
 800f814:	4629      	mov	r1, r5
 800f816:	f7f0 fd59 	bl	80002cc <__adddf3>
 800f81a:	4bac      	ldr	r3, [pc, #688]	@ (800facc <atan+0x314>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	f7f1 f99b 	bl	8000b58 <__aeabi_dcmpgt>
 800f822:	2800      	cmp	r0, #0
 800f824:	d1e7      	bne.n	800f7f6 <atan+0x3e>
 800f826:	f04f 3aff 	mov.w	sl, #4294967295
 800f82a:	e029      	b.n	800f880 <atan+0xc8>
 800f82c:	f000 f95c 	bl	800fae8 <fabs>
 800f830:	4ba7      	ldr	r3, [pc, #668]	@ (800fad0 <atan+0x318>)
 800f832:	429e      	cmp	r6, r3
 800f834:	ec55 4b10 	vmov	r4, r5, d0
 800f838:	f200 80bc 	bhi.w	800f9b4 <atan+0x1fc>
 800f83c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f840:	429e      	cmp	r6, r3
 800f842:	f200 809e 	bhi.w	800f982 <atan+0x1ca>
 800f846:	4622      	mov	r2, r4
 800f848:	462b      	mov	r3, r5
 800f84a:	4620      	mov	r0, r4
 800f84c:	4629      	mov	r1, r5
 800f84e:	f7f0 fd3d 	bl	80002cc <__adddf3>
 800f852:	4b9e      	ldr	r3, [pc, #632]	@ (800facc <atan+0x314>)
 800f854:	2200      	movs	r2, #0
 800f856:	f7f0 fd37 	bl	80002c8 <__aeabi_dsub>
 800f85a:	2200      	movs	r2, #0
 800f85c:	4606      	mov	r6, r0
 800f85e:	460f      	mov	r7, r1
 800f860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	f7f0 fd30 	bl	80002cc <__adddf3>
 800f86c:	4602      	mov	r2, r0
 800f86e:	460b      	mov	r3, r1
 800f870:	4630      	mov	r0, r6
 800f872:	4639      	mov	r1, r7
 800f874:	f7f1 f80a 	bl	800088c <__aeabi_ddiv>
 800f878:	f04f 0a00 	mov.w	sl, #0
 800f87c:	4604      	mov	r4, r0
 800f87e:	460d      	mov	r5, r1
 800f880:	4622      	mov	r2, r4
 800f882:	462b      	mov	r3, r5
 800f884:	4620      	mov	r0, r4
 800f886:	4629      	mov	r1, r5
 800f888:	f7f0 fed6 	bl	8000638 <__aeabi_dmul>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4680      	mov	r8, r0
 800f892:	4689      	mov	r9, r1
 800f894:	f7f0 fed0 	bl	8000638 <__aeabi_dmul>
 800f898:	a371      	add	r3, pc, #452	@ (adr r3, 800fa60 <atan+0x2a8>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	4606      	mov	r6, r0
 800f8a0:	460f      	mov	r7, r1
 800f8a2:	f7f0 fec9 	bl	8000638 <__aeabi_dmul>
 800f8a6:	a370      	add	r3, pc, #448	@ (adr r3, 800fa68 <atan+0x2b0>)
 800f8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ac:	f7f0 fd0e 	bl	80002cc <__adddf3>
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	463b      	mov	r3, r7
 800f8b4:	f7f0 fec0 	bl	8000638 <__aeabi_dmul>
 800f8b8:	a36d      	add	r3, pc, #436	@ (adr r3, 800fa70 <atan+0x2b8>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f0 fd05 	bl	80002cc <__adddf3>
 800f8c2:	4632      	mov	r2, r6
 800f8c4:	463b      	mov	r3, r7
 800f8c6:	f7f0 feb7 	bl	8000638 <__aeabi_dmul>
 800f8ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800fa78 <atan+0x2c0>)
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	f7f0 fcfc 	bl	80002cc <__adddf3>
 800f8d4:	4632      	mov	r2, r6
 800f8d6:	463b      	mov	r3, r7
 800f8d8:	f7f0 feae 	bl	8000638 <__aeabi_dmul>
 800f8dc:	a368      	add	r3, pc, #416	@ (adr r3, 800fa80 <atan+0x2c8>)
 800f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e2:	f7f0 fcf3 	bl	80002cc <__adddf3>
 800f8e6:	4632      	mov	r2, r6
 800f8e8:	463b      	mov	r3, r7
 800f8ea:	f7f0 fea5 	bl	8000638 <__aeabi_dmul>
 800f8ee:	a366      	add	r3, pc, #408	@ (adr r3, 800fa88 <atan+0x2d0>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f7f0 fcea 	bl	80002cc <__adddf3>
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	464b      	mov	r3, r9
 800f8fc:	f7f0 fe9c 	bl	8000638 <__aeabi_dmul>
 800f900:	a363      	add	r3, pc, #396	@ (adr r3, 800fa90 <atan+0x2d8>)
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	4680      	mov	r8, r0
 800f908:	4689      	mov	r9, r1
 800f90a:	4630      	mov	r0, r6
 800f90c:	4639      	mov	r1, r7
 800f90e:	f7f0 fe93 	bl	8000638 <__aeabi_dmul>
 800f912:	a361      	add	r3, pc, #388	@ (adr r3, 800fa98 <atan+0x2e0>)
 800f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f918:	f7f0 fcd6 	bl	80002c8 <__aeabi_dsub>
 800f91c:	4632      	mov	r2, r6
 800f91e:	463b      	mov	r3, r7
 800f920:	f7f0 fe8a 	bl	8000638 <__aeabi_dmul>
 800f924:	a35e      	add	r3, pc, #376	@ (adr r3, 800faa0 <atan+0x2e8>)
 800f926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92a:	f7f0 fccd 	bl	80002c8 <__aeabi_dsub>
 800f92e:	4632      	mov	r2, r6
 800f930:	463b      	mov	r3, r7
 800f932:	f7f0 fe81 	bl	8000638 <__aeabi_dmul>
 800f936:	a35c      	add	r3, pc, #368	@ (adr r3, 800faa8 <atan+0x2f0>)
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f7f0 fcc4 	bl	80002c8 <__aeabi_dsub>
 800f940:	4632      	mov	r2, r6
 800f942:	463b      	mov	r3, r7
 800f944:	f7f0 fe78 	bl	8000638 <__aeabi_dmul>
 800f948:	a359      	add	r3, pc, #356	@ (adr r3, 800fab0 <atan+0x2f8>)
 800f94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94e:	f7f0 fcbb 	bl	80002c8 <__aeabi_dsub>
 800f952:	4632      	mov	r2, r6
 800f954:	463b      	mov	r3, r7
 800f956:	f7f0 fe6f 	bl	8000638 <__aeabi_dmul>
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4640      	mov	r0, r8
 800f960:	4649      	mov	r1, r9
 800f962:	f7f0 fcb3 	bl	80002cc <__adddf3>
 800f966:	4622      	mov	r2, r4
 800f968:	462b      	mov	r3, r5
 800f96a:	f7f0 fe65 	bl	8000638 <__aeabi_dmul>
 800f96e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	d148      	bne.n	800fa0a <atan+0x252>
 800f978:	4620      	mov	r0, r4
 800f97a:	4629      	mov	r1, r5
 800f97c:	f7f0 fca4 	bl	80002c8 <__aeabi_dsub>
 800f980:	e72f      	b.n	800f7e2 <atan+0x2a>
 800f982:	4b52      	ldr	r3, [pc, #328]	@ (800facc <atan+0x314>)
 800f984:	2200      	movs	r2, #0
 800f986:	4620      	mov	r0, r4
 800f988:	4629      	mov	r1, r5
 800f98a:	f7f0 fc9d 	bl	80002c8 <__aeabi_dsub>
 800f98e:	4b4f      	ldr	r3, [pc, #316]	@ (800facc <atan+0x314>)
 800f990:	4606      	mov	r6, r0
 800f992:	460f      	mov	r7, r1
 800f994:	2200      	movs	r2, #0
 800f996:	4620      	mov	r0, r4
 800f998:	4629      	mov	r1, r5
 800f99a:	f7f0 fc97 	bl	80002cc <__adddf3>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	f7f0 ff71 	bl	800088c <__aeabi_ddiv>
 800f9aa:	f04f 0a01 	mov.w	sl, #1
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	460d      	mov	r5, r1
 800f9b2:	e765      	b.n	800f880 <atan+0xc8>
 800f9b4:	4b47      	ldr	r3, [pc, #284]	@ (800fad4 <atan+0x31c>)
 800f9b6:	429e      	cmp	r6, r3
 800f9b8:	d21c      	bcs.n	800f9f4 <atan+0x23c>
 800f9ba:	4b47      	ldr	r3, [pc, #284]	@ (800fad8 <atan+0x320>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	4620      	mov	r0, r4
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	f7f0 fc81 	bl	80002c8 <__aeabi_dsub>
 800f9c6:	4b44      	ldr	r3, [pc, #272]	@ (800fad8 <atan+0x320>)
 800f9c8:	4606      	mov	r6, r0
 800f9ca:	460f      	mov	r7, r1
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	f7f0 fe31 	bl	8000638 <__aeabi_dmul>
 800f9d6:	4b3d      	ldr	r3, [pc, #244]	@ (800facc <atan+0x314>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f7f0 fc77 	bl	80002cc <__adddf3>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f0 ff51 	bl	800088c <__aeabi_ddiv>
 800f9ea:	f04f 0a02 	mov.w	sl, #2
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	e745      	b.n	800f880 <atan+0xc8>
 800f9f4:	4622      	mov	r2, r4
 800f9f6:	462b      	mov	r3, r5
 800f9f8:	4938      	ldr	r1, [pc, #224]	@ (800fadc <atan+0x324>)
 800f9fa:	2000      	movs	r0, #0
 800f9fc:	f7f0 ff46 	bl	800088c <__aeabi_ddiv>
 800fa00:	f04f 0a03 	mov.w	sl, #3
 800fa04:	4604      	mov	r4, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	e73a      	b.n	800f880 <atan+0xc8>
 800fa0a:	4b35      	ldr	r3, [pc, #212]	@ (800fae0 <atan+0x328>)
 800fa0c:	4e35      	ldr	r6, [pc, #212]	@ (800fae4 <atan+0x32c>)
 800fa0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa16:	f7f0 fc57 	bl	80002c8 <__aeabi_dsub>
 800fa1a:	4622      	mov	r2, r4
 800fa1c:	462b      	mov	r3, r5
 800fa1e:	f7f0 fc53 	bl	80002c8 <__aeabi_dsub>
 800fa22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fa26:	4602      	mov	r2, r0
 800fa28:	460b      	mov	r3, r1
 800fa2a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fa2e:	f7f0 fc4b 	bl	80002c8 <__aeabi_dsub>
 800fa32:	f1bb 0f00 	cmp.w	fp, #0
 800fa36:	4604      	mov	r4, r0
 800fa38:	460d      	mov	r5, r1
 800fa3a:	f6bf aedc 	bge.w	800f7f6 <atan+0x3e>
 800fa3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa42:	461d      	mov	r5, r3
 800fa44:	e6d7      	b.n	800f7f6 <atan+0x3e>
 800fa46:	a51c      	add	r5, pc, #112	@ (adr r5, 800fab8 <atan+0x300>)
 800fa48:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa4c:	e6d3      	b.n	800f7f6 <atan+0x3e>
 800fa4e:	bf00      	nop
 800fa50:	54442d18 	.word	0x54442d18
 800fa54:	3ff921fb 	.word	0x3ff921fb
 800fa58:	8800759c 	.word	0x8800759c
 800fa5c:	7e37e43c 	.word	0x7e37e43c
 800fa60:	e322da11 	.word	0xe322da11
 800fa64:	3f90ad3a 	.word	0x3f90ad3a
 800fa68:	24760deb 	.word	0x24760deb
 800fa6c:	3fa97b4b 	.word	0x3fa97b4b
 800fa70:	a0d03d51 	.word	0xa0d03d51
 800fa74:	3fb10d66 	.word	0x3fb10d66
 800fa78:	c54c206e 	.word	0xc54c206e
 800fa7c:	3fb745cd 	.word	0x3fb745cd
 800fa80:	920083ff 	.word	0x920083ff
 800fa84:	3fc24924 	.word	0x3fc24924
 800fa88:	5555550d 	.word	0x5555550d
 800fa8c:	3fd55555 	.word	0x3fd55555
 800fa90:	2c6a6c2f 	.word	0x2c6a6c2f
 800fa94:	bfa2b444 	.word	0xbfa2b444
 800fa98:	52defd9a 	.word	0x52defd9a
 800fa9c:	3fadde2d 	.word	0x3fadde2d
 800faa0:	af749a6d 	.word	0xaf749a6d
 800faa4:	3fb3b0f2 	.word	0x3fb3b0f2
 800faa8:	fe231671 	.word	0xfe231671
 800faac:	3fbc71c6 	.word	0x3fbc71c6
 800fab0:	9998ebc4 	.word	0x9998ebc4
 800fab4:	3fc99999 	.word	0x3fc99999
 800fab8:	54442d18 	.word	0x54442d18
 800fabc:	bff921fb 	.word	0xbff921fb
 800fac0:	440fffff 	.word	0x440fffff
 800fac4:	7ff00000 	.word	0x7ff00000
 800fac8:	3fdbffff 	.word	0x3fdbffff
 800facc:	3ff00000 	.word	0x3ff00000
 800fad0:	3ff2ffff 	.word	0x3ff2ffff
 800fad4:	40038000 	.word	0x40038000
 800fad8:	3ff80000 	.word	0x3ff80000
 800fadc:	bff00000 	.word	0xbff00000
 800fae0:	08010520 	.word	0x08010520
 800fae4:	08010540 	.word	0x08010540

0800fae8 <fabs>:
 800fae8:	ec51 0b10 	vmov	r0, r1, d0
 800faec:	4602      	mov	r2, r0
 800faee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800faf2:	ec43 2b10 	vmov	d0, r2, r3
 800faf6:	4770      	bx	lr

0800faf8 <__ieee754_sqrt>:
 800faf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	4a68      	ldr	r2, [pc, #416]	@ (800fca0 <__ieee754_sqrt+0x1a8>)
 800fafe:	ec55 4b10 	vmov	r4, r5, d0
 800fb02:	43aa      	bics	r2, r5
 800fb04:	462b      	mov	r3, r5
 800fb06:	4621      	mov	r1, r4
 800fb08:	d110      	bne.n	800fb2c <__ieee754_sqrt+0x34>
 800fb0a:	4622      	mov	r2, r4
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	4629      	mov	r1, r5
 800fb10:	f7f0 fd92 	bl	8000638 <__aeabi_dmul>
 800fb14:	4602      	mov	r2, r0
 800fb16:	460b      	mov	r3, r1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fbd6 	bl	80002cc <__adddf3>
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	ec45 4b10 	vmov	d0, r4, r5
 800fb28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2c:	2d00      	cmp	r5, #0
 800fb2e:	dc0e      	bgt.n	800fb4e <__ieee754_sqrt+0x56>
 800fb30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fb34:	4322      	orrs	r2, r4
 800fb36:	d0f5      	beq.n	800fb24 <__ieee754_sqrt+0x2c>
 800fb38:	b19d      	cbz	r5, 800fb62 <__ieee754_sqrt+0x6a>
 800fb3a:	4622      	mov	r2, r4
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fbc2 	bl	80002c8 <__aeabi_dsub>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	f7f0 fea0 	bl	800088c <__aeabi_ddiv>
 800fb4c:	e7e8      	b.n	800fb20 <__ieee754_sqrt+0x28>
 800fb4e:	152a      	asrs	r2, r5, #20
 800fb50:	d115      	bne.n	800fb7e <__ieee754_sqrt+0x86>
 800fb52:	2000      	movs	r0, #0
 800fb54:	e009      	b.n	800fb6a <__ieee754_sqrt+0x72>
 800fb56:	0acb      	lsrs	r3, r1, #11
 800fb58:	3a15      	subs	r2, #21
 800fb5a:	0549      	lsls	r1, r1, #21
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d0fa      	beq.n	800fb56 <__ieee754_sqrt+0x5e>
 800fb60:	e7f7      	b.n	800fb52 <__ieee754_sqrt+0x5a>
 800fb62:	462a      	mov	r2, r5
 800fb64:	e7fa      	b.n	800fb5c <__ieee754_sqrt+0x64>
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	3001      	adds	r0, #1
 800fb6a:	02dc      	lsls	r4, r3, #11
 800fb6c:	d5fb      	bpl.n	800fb66 <__ieee754_sqrt+0x6e>
 800fb6e:	1e44      	subs	r4, r0, #1
 800fb70:	1b12      	subs	r2, r2, r4
 800fb72:	f1c0 0420 	rsb	r4, r0, #32
 800fb76:	fa21 f404 	lsr.w	r4, r1, r4
 800fb7a:	4323      	orrs	r3, r4
 800fb7c:	4081      	lsls	r1, r0
 800fb7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fb86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb8a:	07d2      	lsls	r2, r2, #31
 800fb8c:	bf5c      	itt	pl
 800fb8e:	005b      	lslpl	r3, r3, #1
 800fb90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fb94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb98:	bf58      	it	pl
 800fb9a:	0049      	lslpl	r1, r1, #1
 800fb9c:	2600      	movs	r6, #0
 800fb9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fba2:	106d      	asrs	r5, r5, #1
 800fba4:	0049      	lsls	r1, r1, #1
 800fba6:	2016      	movs	r0, #22
 800fba8:	4632      	mov	r2, r6
 800fbaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fbae:	1917      	adds	r7, r2, r4
 800fbb0:	429f      	cmp	r7, r3
 800fbb2:	bfde      	ittt	le
 800fbb4:	193a      	addle	r2, r7, r4
 800fbb6:	1bdb      	suble	r3, r3, r7
 800fbb8:	1936      	addle	r6, r6, r4
 800fbba:	0fcf      	lsrs	r7, r1, #31
 800fbbc:	3801      	subs	r0, #1
 800fbbe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fbc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fbc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fbca:	d1f0      	bne.n	800fbae <__ieee754_sqrt+0xb6>
 800fbcc:	4604      	mov	r4, r0
 800fbce:	2720      	movs	r7, #32
 800fbd0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	eb00 0e0c 	add.w	lr, r0, ip
 800fbda:	db02      	blt.n	800fbe2 <__ieee754_sqrt+0xea>
 800fbdc:	d113      	bne.n	800fc06 <__ieee754_sqrt+0x10e>
 800fbde:	458e      	cmp	lr, r1
 800fbe0:	d811      	bhi.n	800fc06 <__ieee754_sqrt+0x10e>
 800fbe2:	f1be 0f00 	cmp.w	lr, #0
 800fbe6:	eb0e 000c 	add.w	r0, lr, ip
 800fbea:	da42      	bge.n	800fc72 <__ieee754_sqrt+0x17a>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	db40      	blt.n	800fc72 <__ieee754_sqrt+0x17a>
 800fbf0:	f102 0801 	add.w	r8, r2, #1
 800fbf4:	1a9b      	subs	r3, r3, r2
 800fbf6:	458e      	cmp	lr, r1
 800fbf8:	bf88      	it	hi
 800fbfa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fbfe:	eba1 010e 	sub.w	r1, r1, lr
 800fc02:	4464      	add	r4, ip
 800fc04:	4642      	mov	r2, r8
 800fc06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fc0a:	3f01      	subs	r7, #1
 800fc0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fc10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fc14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fc18:	d1dc      	bne.n	800fbd4 <__ieee754_sqrt+0xdc>
 800fc1a:	4319      	orrs	r1, r3
 800fc1c:	d01b      	beq.n	800fc56 <__ieee754_sqrt+0x15e>
 800fc1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fca4 <__ieee754_sqrt+0x1ac>
 800fc22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fca8 <__ieee754_sqrt+0x1b0>
 800fc26:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc2a:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc2e:	f7f0 fb4b 	bl	80002c8 <__aeabi_dsub>
 800fc32:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc36:	4602      	mov	r2, r0
 800fc38:	460b      	mov	r3, r1
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	f7f0 ff77 	bl	8000b30 <__aeabi_dcmple>
 800fc42:	b140      	cbz	r0, 800fc56 <__ieee754_sqrt+0x15e>
 800fc44:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fc48:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc4c:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc50:	d111      	bne.n	800fc76 <__ieee754_sqrt+0x17e>
 800fc52:	3601      	adds	r6, #1
 800fc54:	463c      	mov	r4, r7
 800fc56:	1072      	asrs	r2, r6, #1
 800fc58:	0863      	lsrs	r3, r4, #1
 800fc5a:	07f1      	lsls	r1, r6, #31
 800fc5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fc60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fc64:	bf48      	it	mi
 800fc66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fc6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fc6e:	4618      	mov	r0, r3
 800fc70:	e756      	b.n	800fb20 <__ieee754_sqrt+0x28>
 800fc72:	4690      	mov	r8, r2
 800fc74:	e7be      	b.n	800fbf4 <__ieee754_sqrt+0xfc>
 800fc76:	f7f0 fb29 	bl	80002cc <__adddf3>
 800fc7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc7e:	4602      	mov	r2, r0
 800fc80:	460b      	mov	r3, r1
 800fc82:	4640      	mov	r0, r8
 800fc84:	4649      	mov	r1, r9
 800fc86:	f7f0 ff49 	bl	8000b1c <__aeabi_dcmplt>
 800fc8a:	b120      	cbz	r0, 800fc96 <__ieee754_sqrt+0x19e>
 800fc8c:	1ca0      	adds	r0, r4, #2
 800fc8e:	bf08      	it	eq
 800fc90:	3601      	addeq	r6, #1
 800fc92:	3402      	adds	r4, #2
 800fc94:	e7df      	b.n	800fc56 <__ieee754_sqrt+0x15e>
 800fc96:	1c63      	adds	r3, r4, #1
 800fc98:	f023 0401 	bic.w	r4, r3, #1
 800fc9c:	e7db      	b.n	800fc56 <__ieee754_sqrt+0x15e>
 800fc9e:	bf00      	nop
 800fca0:	7ff00000 	.word	0x7ff00000
 800fca4:	20000288 	.word	0x20000288
 800fca8:	20000280 	.word	0x20000280
 800fcac:	00000000 	.word	0x00000000

0800fcb0 <__ieee754_atan2>:
 800fcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb4:	ec57 6b11 	vmov	r6, r7, d1
 800fcb8:	4273      	negs	r3, r6
 800fcba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fe38 <__ieee754_atan2+0x188>
 800fcbe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fcc2:	4333      	orrs	r3, r6
 800fcc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fcc8:	4543      	cmp	r3, r8
 800fcca:	ec51 0b10 	vmov	r0, r1, d0
 800fcce:	4635      	mov	r5, r6
 800fcd0:	d809      	bhi.n	800fce6 <__ieee754_atan2+0x36>
 800fcd2:	4244      	negs	r4, r0
 800fcd4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcd8:	4304      	orrs	r4, r0
 800fcda:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fcde:	4544      	cmp	r4, r8
 800fce0:	468e      	mov	lr, r1
 800fce2:	4681      	mov	r9, r0
 800fce4:	d907      	bls.n	800fcf6 <__ieee754_atan2+0x46>
 800fce6:	4632      	mov	r2, r6
 800fce8:	463b      	mov	r3, r7
 800fcea:	f7f0 faef 	bl	80002cc <__adddf3>
 800fcee:	ec41 0b10 	vmov	d0, r0, r1
 800fcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fcfa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fcfe:	4334      	orrs	r4, r6
 800fd00:	d103      	bne.n	800fd0a <__ieee754_atan2+0x5a>
 800fd02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd06:	f7ff bd57 	b.w	800f7b8 <atan>
 800fd0a:	17bc      	asrs	r4, r7, #30
 800fd0c:	f004 0402 	and.w	r4, r4, #2
 800fd10:	ea53 0909 	orrs.w	r9, r3, r9
 800fd14:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fd18:	d107      	bne.n	800fd2a <__ieee754_atan2+0x7a>
 800fd1a:	2c02      	cmp	r4, #2
 800fd1c:	d05f      	beq.n	800fdde <__ieee754_atan2+0x12e>
 800fd1e:	2c03      	cmp	r4, #3
 800fd20:	d1e5      	bne.n	800fcee <__ieee754_atan2+0x3e>
 800fd22:	a141      	add	r1, pc, #260	@ (adr r1, 800fe28 <__ieee754_atan2+0x178>)
 800fd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd28:	e7e1      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd2a:	4315      	orrs	r5, r2
 800fd2c:	d106      	bne.n	800fd3c <__ieee754_atan2+0x8c>
 800fd2e:	f1be 0f00 	cmp.w	lr, #0
 800fd32:	da5f      	bge.n	800fdf4 <__ieee754_atan2+0x144>
 800fd34:	a13e      	add	r1, pc, #248	@ (adr r1, 800fe30 <__ieee754_atan2+0x180>)
 800fd36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd3a:	e7d8      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd3c:	4542      	cmp	r2, r8
 800fd3e:	d10f      	bne.n	800fd60 <__ieee754_atan2+0xb0>
 800fd40:	4293      	cmp	r3, r2
 800fd42:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd46:	d107      	bne.n	800fd58 <__ieee754_atan2+0xa8>
 800fd48:	2c02      	cmp	r4, #2
 800fd4a:	d84c      	bhi.n	800fde6 <__ieee754_atan2+0x136>
 800fd4c:	4b34      	ldr	r3, [pc, #208]	@ (800fe20 <__ieee754_atan2+0x170>)
 800fd4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd56:	e7ca      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd58:	2c02      	cmp	r4, #2
 800fd5a:	d848      	bhi.n	800fdee <__ieee754_atan2+0x13e>
 800fd5c:	4b31      	ldr	r3, [pc, #196]	@ (800fe24 <__ieee754_atan2+0x174>)
 800fd5e:	e7f6      	b.n	800fd4e <__ieee754_atan2+0x9e>
 800fd60:	4543      	cmp	r3, r8
 800fd62:	d0e4      	beq.n	800fd2e <__ieee754_atan2+0x7e>
 800fd64:	1a9b      	subs	r3, r3, r2
 800fd66:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fd6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd6e:	da1e      	bge.n	800fdae <__ieee754_atan2+0xfe>
 800fd70:	2f00      	cmp	r7, #0
 800fd72:	da01      	bge.n	800fd78 <__ieee754_atan2+0xc8>
 800fd74:	323c      	adds	r2, #60	@ 0x3c
 800fd76:	db1e      	blt.n	800fdb6 <__ieee754_atan2+0x106>
 800fd78:	4632      	mov	r2, r6
 800fd7a:	463b      	mov	r3, r7
 800fd7c:	f7f0 fd86 	bl	800088c <__aeabi_ddiv>
 800fd80:	ec41 0b10 	vmov	d0, r0, r1
 800fd84:	f7ff feb0 	bl	800fae8 <fabs>
 800fd88:	f7ff fd16 	bl	800f7b8 <atan>
 800fd8c:	ec51 0b10 	vmov	r0, r1, d0
 800fd90:	2c01      	cmp	r4, #1
 800fd92:	d013      	beq.n	800fdbc <__ieee754_atan2+0x10c>
 800fd94:	2c02      	cmp	r4, #2
 800fd96:	d015      	beq.n	800fdc4 <__ieee754_atan2+0x114>
 800fd98:	2c00      	cmp	r4, #0
 800fd9a:	d0a8      	beq.n	800fcee <__ieee754_atan2+0x3e>
 800fd9c:	a318      	add	r3, pc, #96	@ (adr r3, 800fe00 <__ieee754_atan2+0x150>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	f7f0 fa91 	bl	80002c8 <__aeabi_dsub>
 800fda6:	a318      	add	r3, pc, #96	@ (adr r3, 800fe08 <__ieee754_atan2+0x158>)
 800fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdac:	e014      	b.n	800fdd8 <__ieee754_atan2+0x128>
 800fdae:	a118      	add	r1, pc, #96	@ (adr r1, 800fe10 <__ieee754_atan2+0x160>)
 800fdb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdb4:	e7ec      	b.n	800fd90 <__ieee754_atan2+0xe0>
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	2100      	movs	r1, #0
 800fdba:	e7e9      	b.n	800fd90 <__ieee754_atan2+0xe0>
 800fdbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	e794      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdc4:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe00 <__ieee754_atan2+0x150>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fa7d 	bl	80002c8 <__aeabi_dsub>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	a10d      	add	r1, pc, #52	@ (adr r1, 800fe08 <__ieee754_atan2+0x158>)
 800fdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd8:	f7f0 fa76 	bl	80002c8 <__aeabi_dsub>
 800fddc:	e787      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdde:	a10a      	add	r1, pc, #40	@ (adr r1, 800fe08 <__ieee754_atan2+0x158>)
 800fde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde4:	e783      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fde6:	a10c      	add	r1, pc, #48	@ (adr r1, 800fe18 <__ieee754_atan2+0x168>)
 800fde8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdec:	e77f      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdee:	2000      	movs	r0, #0
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	e77c      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdf4:	a106      	add	r1, pc, #24	@ (adr r1, 800fe10 <__ieee754_atan2+0x160>)
 800fdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdfa:	e778      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdfc:	f3af 8000 	nop.w
 800fe00:	33145c07 	.word	0x33145c07
 800fe04:	3ca1a626 	.word	0x3ca1a626
 800fe08:	54442d18 	.word	0x54442d18
 800fe0c:	400921fb 	.word	0x400921fb
 800fe10:	54442d18 	.word	0x54442d18
 800fe14:	3ff921fb 	.word	0x3ff921fb
 800fe18:	54442d18 	.word	0x54442d18
 800fe1c:	3fe921fb 	.word	0x3fe921fb
 800fe20:	08010578 	.word	0x08010578
 800fe24:	08010560 	.word	0x08010560
 800fe28:	54442d18 	.word	0x54442d18
 800fe2c:	c00921fb 	.word	0xc00921fb
 800fe30:	54442d18 	.word	0x54442d18
 800fe34:	bff921fb 	.word	0xbff921fb
 800fe38:	7ff00000 	.word	0x7ff00000

0800fe3c <_init>:
 800fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3e:	bf00      	nop
 800fe40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe42:	bc08      	pop	{r3}
 800fe44:	469e      	mov	lr, r3
 800fe46:	4770      	bx	lr

0800fe48 <_fini>:
 800fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4a:	bf00      	nop
 800fe4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4e:	bc08      	pop	{r3}
 800fe50:	469e      	mov	lr, r3
 800fe52:	4770      	bx	lr
