
ADC_Interruptx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009518  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080096a8  080096a8  000196a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b84  08009b84  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b8c  08009b8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e0  08009d74  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08009d74  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b52  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002626  00000000  00000000  00031d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00035240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002912d  00000000  00000000  00036000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011032  00000000  00000000  0005f12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff460  00000000  00000000  0007015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f5bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec8  00000000  00000000  0016f610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009690 	.word	0x08009690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009690 	.word	0x08009690

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <NEXTION_SendString>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

// NEXTION Display FUnction
void NEXTION_SendString (char *ID, char *string)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
	memset(charbuffer,'\0',50);
 8000f56:	2232      	movs	r2, #50	; 0x32
 8000f58:	2100      	movs	r1, #0
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <NEXTION_SendString+0x4c>)
 8000f5c:	f005 fcac 	bl	80068b8 <memset>
    sprintf (charbuffer, "%s.txt=\"%s\"", ID, string);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	490d      	ldr	r1, [pc, #52]	; (8000f9c <NEXTION_SendString+0x50>)
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <NEXTION_SendString+0x4c>)
 8000f68:	f006 f918 	bl	800719c <siprintf>
	HAL_UART_Transmit (&huart1,(uint8_t *) charbuffer, strlen(charbuffer), HAL_MAX_DELAY);
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <NEXTION_SendString+0x4c>)
 8000f6e:	f7ff f92f 	bl	80001d0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	4907      	ldr	r1, [pc, #28]	; (8000f98 <NEXTION_SendString+0x4c>)
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <NEXTION_SendString+0x54>)
 8000f7e:	f004 f945 	bl	800520c <HAL_UART_Transmit>
	HAL_UART_Transmit (&huart1, Cmd_End, 3, HAL_MAX_DELAY);
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2203      	movs	r2, #3
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <NEXTION_SendString+0x58>)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <NEXTION_SendString+0x54>)
 8000f8c:	f004 f93e 	bl	800520c <HAL_UART_Transmit>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000398 	.word	0x20000398
 8000f9c:	080096a8 	.word	0x080096a8
 8000fa0:	20000270 	.word	0x20000270
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <ADC_ReadVoltage>:


// Function to read ADC value and return voltage
float ADC_ReadVoltage(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <ADC_ReadVoltage+0x78>)
 8000fb0:	f001 f9b6 	bl	8002320 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <ADC_ReadVoltage+0x78>)
 8000fba:	f001 fa9f 	bl	80024fc <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000fbe:	4818      	ldr	r0, [pc, #96]	; (8001020 <ADC_ReadVoltage+0x78>)
 8000fc0:	f001 fb74 	bl	80026ac <HAL_ADC_GetValue>
 8000fc4:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 8000fc6:	4816      	ldr	r0, [pc, #88]	; (8001020 <ADC_ReadVoltage+0x78>)
 8000fc8:	f001 fa64 	bl	8002494 <HAL_ADC_Stop>

    // Convert ADC value to voltage (3.3V reference, 12-bit resolution)
    float voltage = (adcValue / 4095.0) * 3.3;
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fa99 	bl	8000504 <__aeabi_ui2d>
 8000fd2:	a30f      	add	r3, pc, #60	; (adr r3, 8001010 <ADC_ReadVoltage+0x68>)
 8000fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd8:	f7ff fc38 	bl	800084c <__aeabi_ddiv>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	a30c      	add	r3, pc, #48	; (adr r3, 8001018 <ADC_ReadVoltage+0x70>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff fb05 	bl	80005f8 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fdd7 	bl	8000ba8 <__aeabi_d2f>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	603b      	str	r3, [r7, #0]
    return voltage;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	ee07 3a90 	vmov	s15, r3
}
 8001004:	eeb0 0a67 	vmov.f32	s0, s15
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	00000000 	.word	0x00000000
 8001014:	40affe00 	.word	0x40affe00
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	200001fc 	.word	0x200001fc

08001024 <BatteryVoltage_Status>:

// Function to send voltage value over UART
void BatteryVoltage_Status(float voltage)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0
 800102a:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[50];

    // Check if the voltage is below or above 1.5V and send appropriate message
    if (voltage < 1.5)
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d513      	bpl.n	8001068 <BatteryVoltage_Status+0x44>
    {
        sprintf(buffer, "Voltage: %.2fV - Battery low, Buzzer ON\r\n", voltage);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fa81 	bl	8000548 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	f107 000c 	add.w	r0, r7, #12
 800104e:	4919      	ldr	r1, [pc, #100]	; (80010b4 <BatteryVoltage_Status+0x90>)
 8001050:	f006 f8a4 	bl	800719c <siprintf>
        NEXTION_SendString("t4", "Battery Low");
 8001054:	4918      	ldr	r1, [pc, #96]	; (80010b8 <BatteryVoltage_Status+0x94>)
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <BatteryVoltage_Status+0x98>)
 8001058:	f7ff ff78 	bl	8000f4c <NEXTION_SendString>
        // Start beeping the buzzer at a 500ms interval
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f002 fceb 	bl	8003a3c <HAL_GPIO_TogglePin>
 8001066:	e013      	b.n	8001090 <BatteryVoltage_Status+0x6c>
        // 500ms delay for beep interval

    }
    else
    {
        sprintf(buffer, "Voltage: %.2fV - Battery charged, Buzzer OFF\r\n", voltage);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	f107 000c 	add.w	r0, r7, #12
 8001076:	4912      	ldr	r1, [pc, #72]	; (80010c0 <BatteryVoltage_Status+0x9c>)
 8001078:	f006 f890 	bl	800719c <siprintf>
        NEXTION_SendString("t4", "Battery Charged");
 800107c:	4911      	ldr	r1, [pc, #68]	; (80010c4 <BatteryVoltage_Status+0xa0>)
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <BatteryVoltage_Status+0x98>)
 8001080:	f7ff ff64 	bl	8000f4c <NEXTION_SendString>
        // Ensure buzzer is OFF if voltage is above 1.5V
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f002 fcbe 	bl	8003a0c <HAL_GPIO_WritePin>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f89b 	bl	80001d0 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <BatteryVoltage_Status+0xa4>)
 80010a8:	f004 f8b0 	bl	800520c <HAL_UART_Transmit>
}
 80010ac:	bf00      	nop
 80010ae:	3740      	adds	r7, #64	; 0x40
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	080096b4 	.word	0x080096b4
 80010b8:	080096e0 	.word	0x080096e0
 80010bc:	080096ec 	.word	0x080096ec
 80010c0:	080096f0 	.word	0x080096f0
 80010c4:	08009720 	.word	0x08009720
 80010c8:	200002f4 	.word	0x200002f4

080010cc <Fan_Control>:

void Fan_Control(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

    // If '1' is received, turn the fan ON
    if (RxData[0] == '1')
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <Fan_Control+0x3c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b31      	cmp	r3, #49	; 0x31
 80010d8:	d10a      	bne.n	80010f0 <Fan_Control+0x24>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f002 fc93 	bl	8003a0c <HAL_GPIO_WritePin>
        NEXTION_SendString("t1", "Fan ON");
 80010e6:	4909      	ldr	r1, [pc, #36]	; (800110c <Fan_Control+0x40>)
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <Fan_Control+0x44>)
 80010ea:	f7ff ff2f 	bl	8000f4c <NEXTION_SendString>
    else
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
        NEXTION_SendString("t1", "Fan OFF");
    }
}
 80010ee:	e009      	b.n	8001104 <Fan_Control+0x38>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f002 fc88 	bl	8003a0c <HAL_GPIO_WritePin>
        NEXTION_SendString("t1", "Fan OFF");
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <Fan_Control+0x48>)
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <Fan_Control+0x44>)
 8001100:	f7ff ff24 	bl	8000f4c <NEXTION_SendString>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000384 	.word	0x20000384
 800110c:	08009730 	.word	0x08009730
 8001110:	08009738 	.word	0x08009738
 8001114:	0800973c 	.word	0x0800973c

08001118 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, RxData, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	4904      	ldr	r1, [pc, #16]	; (8001134 <HAL_UART_RxCpltCallback+0x1c>)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <HAL_UART_RxCpltCallback+0x20>)
 8001126:	f004 f905 	bl	8005334 <HAL_UART_Receive_IT>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000384 	.word	0x20000384
 8001138:	200002f4 	.word	0x200002f4

0800113c <Scheduler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Scheduler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
    if(counter % 100 == 0)
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <Scheduler+0xcc>)
 8001142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001146:	f04f 0264 	mov.w	r2, #100	; 0x64
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f7ff fd7b 	bl	8000c48 <__aeabi_uldivmod>
 8001152:	4313      	orrs	r3, r2
 8001154:	d106      	bne.n	8001164 <Scheduler+0x28>
	{
		// Read voltage from ADC
		voltage = ADC_ReadVoltage();
 8001156:	f7ff ff27 	bl	8000fa8 <ADC_ReadVoltage>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <Scheduler+0xd0>)
 8001160:	edc3 7a00 	vstr	s15, [r3]
	}
	if(counter % 200 == 0)
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <Scheduler+0xcc>)
 8001166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116a:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	f7ff fd69 	bl	8000c48 <__aeabi_uldivmod>
 8001176:	4313      	orrs	r3, r2
 8001178:	d101      	bne.n	800117e <Scheduler+0x42>
	{
		// Check for fan commands from hTerm
		Fan_Control();
 800117a:	f7ff ffa7 	bl	80010cc <Fan_Control>

	}
	if(counter % 500 == 0)
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <Scheduler+0xcc>)
 8001180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001184:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f7ff fd5c 	bl	8000c48 <__aeabi_uldivmod>
 8001190:	4313      	orrs	r3, r2
 8001192:	d125      	bne.n	80011e0 <Scheduler+0xa4>
	{
		// Toggle the heartbeat LED

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001194:	2120      	movs	r1, #32
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f002 fc4f 	bl	8003a3c <HAL_GPIO_TogglePin>

		BatteryVoltage_Status(voltage);
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <Scheduler+0xd0>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f7ff ff3c 	bl	8001024 <BatteryVoltage_Status>

		switch(switchcounter)
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <Scheduler+0xd4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d002      	beq.n	80011ba <Scheduler+0x7e>
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d005      	beq.n	80011c4 <Scheduler+0x88>
 80011b8:	e009      	b.n	80011ce <Scheduler+0x92>
		{
		   case 1:
			 NEXTION_SendString("t0", "12:00");
 80011ba:	4916      	ldr	r1, [pc, #88]	; (8001214 <Scheduler+0xd8>)
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <Scheduler+0xdc>)
 80011be:	f7ff fec5 	bl	8000f4c <NEXTION_SendString>
			 break;
 80011c2:	e008      	b.n	80011d6 <Scheduler+0x9a>
		   case 2:
			 NEXTION_SendString("t2", "AMR@123");
 80011c4:	4915      	ldr	r1, [pc, #84]	; (800121c <Scheduler+0xe0>)
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <Scheduler+0xe4>)
 80011c8:	f7ff fec0 	bl	8000f4c <NEXTION_SendString>
			 break;
 80011cc:	e003      	b.n	80011d6 <Scheduler+0x9a>
		   default:
			 switchcounter = 0;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <Scheduler+0xd4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
			 break;
 80011d4:	bf00      	nop
		}
		switchcounter++;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <Scheduler+0xd4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <Scheduler+0xd4>)
 80011de:	6013      	str	r3, [r2, #0]

	}
	if(counter % 1000 == 0)
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <Scheduler+0xcc>)
 80011e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	f7ff fd2b 	bl	8000c48 <__aeabi_uldivmod>
 80011f2:	4313      	orrs	r3, r2
 80011f4:	d106      	bne.n	8001204 <Scheduler+0xc8>
	{
		//Reset counter
		counter = 0;
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <Scheduler+0xcc>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c1 2300 	strd	r2, r3, [r1]
	}

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000378 	.word	0x20000378
 800120c:	20000380 	.word	0x20000380
 8001210:	200003cc 	.word	0x200003cc
 8001214:	08009744 	.word	0x08009744
 8001218:	0800974c 	.word	0x0800974c
 800121c:	08009750 	.word	0x08009750
 8001220:	08009758 	.word	0x08009758

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fc76 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f832 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f98c 	bl	800154c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001234:	f000 f95a 	bl	80014ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001238:	f000 f894 	bl	8001364 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800123c:	f000 f926 	bl	800148c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8001240:	f000 f906 	bl	8001450 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001244:	f000 f879 	bl	800133a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit (&huart1, (uint8_t*)"rest", 4, HAL_MAX_DELAY);
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	2204      	movs	r2, #4
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <main+0x58>)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <main+0x5c>)
 8001252:	f003 ffdb 	bl	800520c <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart1, Cmd_End, 3, HAL_MAX_DELAY);
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	2203      	movs	r2, #3
 800125c:	4909      	ldr	r1, [pc, #36]	; (8001284 <main+0x60>)
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <main+0x5c>)
 8001260:	f003 ffd4 	bl	800520c <HAL_UART_Transmit>

//  i2c_init();

  HAL_UART_Receive_IT(&huart2, RxData, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <main+0x64>)
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <main+0x68>)
 800126a:	f004 f863 	bl	8005334 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Scheduler();
 800126e:	f7ff ff65 	bl	800113c <Scheduler>

    HAL_IWDG_Refresh(&hiwdg);
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <main+0x6c>)
 8001274:	f002 fc4b 	bl	8003b0e <HAL_IWDG_Refresh>
    Scheduler();
 8001278:	e7f9      	b.n	800126e <main+0x4a>
 800127a:	bf00      	nop
 800127c:	0800975c 	.word	0x0800975c
 8001280:	20000270 	.word	0x20000270
 8001284:	20000000 	.word	0x20000000
 8001288:	20000384 	.word	0x20000384
 800128c:	200002f4 	.word	0x200002f4
 8001290:	20000260 	.word	0x20000260

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b096      	sub	sp, #88	; 0x58
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 fb08 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ba:	f002 fc47 	bl	8003b4c <HAL_PWREx_ControlVoltageScaling>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012c4:	f000 f9a8 	bl	8001618 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80012c8:	230a      	movs	r3, #10
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d2:	2310      	movs	r3, #16
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012d6:	2301      	movs	r3, #1
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012da:	2302      	movs	r3, #2
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012de:	2302      	movs	r3, #2
 80012e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012e6:	230a      	movs	r3, #10
 80012e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ea:	2307      	movs	r3, #7
 80012ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fc7c 	bl	8003bf8 <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001306:	f000 f987 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	2303      	movs	r3, #3
 8001310:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f844 	bl	80043b0 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132e:	f000 f973 	bl	8001618 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3758      	adds	r7, #88	; 0x58
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2026      	movs	r0, #38	; 0x26
 8001344:	f002 f903 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001348:	2026      	movs	r0, #38	; 0x26
 800134a:	f002 f91c 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f002 f8fb 	bl	800354e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001358:	2025      	movs	r0, #37	; 0x25
 800135a:	f002 f914 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <MX_ADC1_Init+0xe0>)
 8001388:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <MX_ADC1_Init+0xe4>)
 800138a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_ADC1_Init+0xe0>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <MX_ADC1_Init+0xe0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_ADC1_Init+0xe0>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b29      	ldr	r3, [pc, #164]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e6:	4817      	ldr	r0, [pc, #92]	; (8001444 <MX_ADC1_Init+0xe0>)
 80013e8:	f000 fe44 	bl	8002074 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013f2:	f000 f911 	bl	8001618 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_ADC1_Init+0xe0>)
 8001402:	f001 ff19 	bl	8003238 <HAL_ADCEx_MultiModeConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800140c:	f000 f904 	bl	8001618 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_ADC1_Init+0xe8>)
 8001412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2306      	movs	r3, #6
 8001416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141c:	237f      	movs	r3, #127	; 0x7f
 800141e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001420:	2304      	movs	r3, #4
 8001422:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_ADC1_Init+0xe0>)
 800142e:	f001 f94b 	bl	80026c8 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001438:	f000 f8ee 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001fc 	.word	0x200001fc
 8001448:	50040000 	.word	0x50040000
 800144c:	19200040 	.word	0x19200040

08001450 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_IWDG_Init+0x34>)
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <MX_IWDG_Init+0x38>)
 8001458:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_IWDG_Init+0x34>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_IWDG_Init+0x34>)
 8001462:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001466:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_IWDG_Init+0x34>)
 800146a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800146e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_IWDG_Init+0x34>)
 8001472:	f002 fafd 	bl	8003a70 <HAL_IWDG_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800147c:	f000 f8cc 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000260 	.word	0x20000260
 8001488:	40003000 	.word	0x40003000

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_USART1_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 8001498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART1_UART_Init+0x58>)
 80014d0:	f003 fe4e 	bl	8005170 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f89d 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000270 	.word	0x20000270
 80014e8:	40013800 	.word	0x40013800

080014ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART2_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART2_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART2_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART2_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART2_UART_Init+0x58>)
 8001530:	f003 fe1e 	bl	8005170 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 f86d 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002f4 	.word	0x200002f4
 8001548:	40004400 	.word	0x40004400

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_GPIO_Init+0xc4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a24      	ldr	r2, [pc, #144]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <MX_GPIO_Init+0xc4>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_GPIO_Init+0xc4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_GPIO_Init+0xc4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a18      	ldr	r2, [pc, #96]	; (8001610 <MX_GPIO_Init+0xc4>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_GPIO_Init+0xc4>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Pin|Fan_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	21e0      	movs	r1, #224	; 0xe0
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f002 fa1f 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_GPIO_Init+0xc8>)
 80015e6:	f002 f867 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Pin Fan_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Pin|Fan_Pin;
 80015ea:	23e0      	movs	r3, #224	; 0xe0
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001604:	f002 f858 	bl	80036b8 <HAL_GPIO_Init>

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	48000800 	.word	0x48000800

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x44>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_MspInit+0x44>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6613      	str	r3, [r2, #96]	; 0x60
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_MspInit+0x44>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x44>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	6593      	str	r3, [r2, #88]	; 0x58
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ac      	sub	sp, #176	; 0xb0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2288      	movs	r2, #136	; 0x88
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f005 f913 	bl	80068b8 <memset>
  if(hadc->Instance==ADC1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_ADC_MspInit+0xc8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d147      	bne.n	800172c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800169c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016b2:	2308      	movs	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f893 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016d8:	f7ff ff9e 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_ADC_MspInit+0xcc>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001712:	230b      	movs	r3, #11
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(Battery_Voltage_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001728:	f001 ffc6 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	37b0      	adds	r7, #176	; 0xb0
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	50040000 	.word	0x50040000
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0ae      	sub	sp, #184	; 0xb8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2288      	movs	r2, #136	; 0x88
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f005 f8ab 	bl	80068b8 <memset>
  if(huart->Instance==USART1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a43      	ldr	r2, [pc, #268]	; (8001874 <HAL_UART_MspInit+0x138>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d13d      	bne.n	80017e8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800176c:	2301      	movs	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001770:	2300      	movs	r3, #0
 8001772:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4618      	mov	r0, r3
 800177a:	f003 f83d 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001784:	f7ff ff48 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001788:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_UART_MspInit+0x13c>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178c:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_UART_MspInit+0x13c>)
 800178e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001792:	6613      	str	r3, [r2, #96]	; 0x60
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_UART_MspInit+0x13c>)
 8001796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <HAL_UART_MspInit+0x13c>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_UART_MspInit+0x13c>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_UART_MspInit+0x13c>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d2:	2307      	movs	r3, #7
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f001 ff69 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e6:	e040      	b.n	800186a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a23      	ldr	r2, [pc, #140]	; (800187c <HAL_UART_MspInit+0x140>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d13b      	bne.n	800186a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fffa 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800180a:	f7ff ff05 	bl	8001618 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_UART_MspInit+0x13c>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a19      	ldr	r2, [pc, #100]	; (8001878 <HAL_UART_MspInit+0x13c>)
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_UART_MspInit+0x13c>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_UART_MspInit+0x13c>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_UART_MspInit+0x13c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_UART_MspInit+0x13c>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800183e:	230c      	movs	r3, #12
 8001840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001856:	2307      	movs	r3, #7
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001866:	f001 ff27 	bl	80036b8 <HAL_GPIO_Init>
}
 800186a:	bf00      	nop
 800186c:	37b8      	adds	r7, #184	; 0xb8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40013800 	.word	0x40013800
 8001878:	40021000 	.word	0x40021000
 800187c:	40004400 	.word	0x40004400

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  counter++;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SysTick_Handler+0x20>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	1c50      	adds	r0, r2, #1
 80018d4:	f143 0100 	adc.w	r1, r3, #0
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <SysTick_Handler+0x20>)
 80018da:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f977 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000378 	.word	0x20000378

080018ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <USART1_IRQHandler+0x10>)
 80018f2:	f003 fd75 	bl	80053e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000270 	.word	0x20000270

08001900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART2_IRQHandler+0x10>)
 8001906:	f003 fd6b 	bl	80053e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002f4 	.word	0x200002f4

08001914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_kill>:

int _kill(int pid, int sig)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192e:	f004 ff99 	bl	8006864 <__errno>
 8001932:	4603      	mov	r3, r0
 8001934:	2216      	movs	r2, #22
 8001936:	601a      	str	r2, [r3, #0]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_exit>:

void _exit (int status)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ffe7 	bl	8001924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001956:	e7fe      	b.n	8001956 <_exit+0x12>

08001958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e00a      	b.n	8001980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196a:	f3af 8000 	nop.w
 800196e:	4601      	mov	r1, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf0      	blt.n	800196a <_read+0x12>
	}

return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e009      	b.n	80019b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf1      	blt.n	80019a4 <_write+0x12>
	}
	return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_close>:

int _close(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	605a      	str	r2, [r3, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_isatty>:

int _isatty(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f004 fefe 	bl	8006864 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20018000 	.word	0x20018000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	200003d0 	.word	0x200003d0
 8001a9c:	200003e8 	.word	0x200003e8

08001aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopForever+0x2>
 8001ac8:	f7ff ffea 	bl	8001aa0 <SystemInit>
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <LoopForever+0x6>)
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <LoopForever+0xa>)
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <LoopForever+0xe>)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:
 8001ad6:	58d4      	ldr	r4, [r2, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:
 8001adc:	18c4      	adds	r4, r0, r3
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <LoopForever+0x12>)
 8001ae4:	4c0a      	ldr	r4, [pc, #40]	; (8001b10 <LoopForever+0x16>)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:
 8001aee:	42a2      	cmp	r2, r4
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>
 8001af2:	f004 febd 	bl	8006870 <__libc_init_array>
 8001af6:	f7ff fb95 	bl	8001224 <main>

08001afa <LoopForever>:
 8001afa:	e7fe      	b.n	8001afa <LoopForever>
 8001afc:	20018000 	.word	0x20018000
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200001e0 	.word	0x200001e0
 8001b08:	08009b94 	.word	0x08009b94
 8001b0c:	200001e0 	.word	0x200001e0
 8001b10:	200003e8 	.word	0x200003e8

08001b14 <ADC1_2_IRQHandler>:
 8001b14:	e7fe      	b.n	8001b14 <ADC1_2_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_Init+0x3c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_Init+0x3c>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f001 fd02 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f000 f80f 	bl	8001b58 <HAL_InitTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	e001      	b.n	8001b4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b46:	f7ff fd6d 	bl	8001624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_InitTick+0x6c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_InitTick+0x70>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_InitTick+0x6c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fd0d 	bl	80035a2 <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10f      	bne.n	8001bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d809      	bhi.n	8001ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f001 fcd7 	bl	800354e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_InitTick+0x74>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e007      	b.n	8001bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e004      	b.n	8001bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e001      	b.n	8001bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	200003d4 	.word	0x200003d4

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200003d4 	.word	0x200003d4

08001c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3360      	adds	r3, #96	; 0x60
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <LL_ADC_SetOffset+0x44>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	03fff000 	.word	0x03fff000

08001cc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	461a      	mov	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	211f      	movs	r1, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	f003 011f 	and.w	r1, r3, #31
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3314      	adds	r3, #20
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0e5b      	lsrs	r3, r3, #25
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	0d1b      	lsrs	r3, r3, #20
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2107      	movs	r1, #7
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0d1b      	lsrs	r3, r3, #20
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	431a      	orrs	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0318 	and.w	r3, r3, #24
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	400b      	ands	r3, r1
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	431a      	orrs	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	0007ffff 	.word	0x0007ffff

08001e40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6093      	str	r3, [r2, #8]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb0:	d101      	bne.n	8001eb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f50:	f043 0202 	orr.w	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d101      	bne.n	8001fa2 <LL_ADC_IsDisableOngoing+0x18>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <LL_ADC_IsDisableOngoing+0x1a>
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fec:	f043 0210 	orr.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d101      	bne.n	8002018 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002036:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d101      	bne.n	8002066 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e136      	b.n	80022fc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fae5 	bl	800166c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fef1 	bl	8001e9c <LL_ADC_IsDeepPowerDownEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fed7 	bl	8001e78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff0c 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fef0 	bl	8001ec4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e4:	4b87      	ldr	r3, [pc, #540]	; (8002304 <HAL_ADC_Init+0x290>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_ADC_Init+0x294>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	3301      	adds	r3, #1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff feee 	bl	8001eec <LL_ADC_IsInternalRegulatorEnabled>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff62 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 800213c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80cf 	bne.w	80022ea <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80cb 	bne.w	80022ea <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fefb 	bl	8001f64 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d115      	bne.n	80021a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002174:	4865      	ldr	r0, [pc, #404]	; (800230c <HAL_ADC_Init+0x298>)
 8002176:	f7ff fef5 	bl	8001f64 <LL_ADC_IsEnabled>
 800217a:	4604      	mov	r4, r0
 800217c:	4864      	ldr	r0, [pc, #400]	; (8002310 <HAL_ADC_Init+0x29c>)
 800217e:	f7ff fef1 	bl	8001f64 <LL_ADC_IsEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	431c      	orrs	r4, r3
 8002186:	4863      	ldr	r0, [pc, #396]	; (8002314 <HAL_ADC_Init+0x2a0>)
 8002188:	f7ff feec 	bl	8001f64 <LL_ADC_IsEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	4323      	orrs	r3, r4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	485f      	ldr	r0, [pc, #380]	; (8002318 <HAL_ADC_Init+0x2a4>)
 800219c:	f7ff fd38 	bl	8001c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e5b      	ldrb	r3, [r3, #25]
 80021a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	045b      	lsls	r3, r3, #17
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_ADC_Init+0x2a8>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fef5 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002216:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff16 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8002222:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d13d      	bne.n	80022a6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13a      	bne.n	80022a6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002234:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800223c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	430b      	orrs	r3, r1
 8002258:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d118      	bne.n	8002296 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002286:	430a      	orrs	r2, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10c      	bne.n	80022c8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f023 010f 	bic.w	r1, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020f 	bic.w	r2, r2, #15
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
 80022e8:	e007      	b.n	80022fa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	20000004 	.word	0x20000004
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	50040000 	.word	0x50040000
 8002310:	50040100 	.word	0x50040100
 8002314:	50040200 	.word	0x50040200
 8002318:	50040300 	.word	0x50040300
 800231c:	fff0c007 	.word	0xfff0c007

08002320 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002328:	4857      	ldr	r0, [pc, #348]	; (8002488 <HAL_ADC_Start+0x168>)
 800232a:	f7ff fd89 	bl	8001e40 <LL_ADC_GetMultimode>
 800232e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fe63 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 809c 	bne.w	800247a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_ADC_Start+0x30>
 800234c:	2302      	movs	r3, #2
 800234e:	e097      	b.n	8002480 <HAL_ADC_Start+0x160>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fe61 	bl	8003020 <ADC_Enable>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8083 	bne.w	8002470 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_ADC_Start+0x16c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d002      	beq.n	800238e <HAL_ADC_Start+0x6e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e000      	b.n	8002390 <HAL_ADC_Start+0x70>
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_ADC_Start+0x170>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f023 0206 	bic.w	r2, r3, #6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	221c      	movs	r2, #28
 80023d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_ADC_Start+0x16c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d002      	beq.n	80023ec <HAL_ADC_Start+0xcc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Start+0xce>
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_ADC_Start+0x170>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d114      	bne.n	8002432 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fdc0 	bl	8001fb0 <LL_ADC_REG_StartConversion>
 8002430:	e025      	b.n	800247e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_ADC_Start+0x16c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start+0x12e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_ADC_Start+0x130>
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_ADC_Start+0x170>)
 8002450:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
 800246e:	e006      	b.n	800247e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002478:	e001      	b.n	800247e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800247e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	50040300 	.word	0x50040300
 800248c:	50040100 	.word	0x50040100
 8002490:	50040000 	.word	0x50040000

08002494 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Stop+0x16>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e023      	b.n	80024f2 <HAL_ADC_Stop+0x5e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80024b2:	2103      	movs	r1, #3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fcf7 	bl	8002ea8 <ADC_ConversionStop>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d111      	bne.n	80024e8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fe31 	bl	800312c <ADC_Disable>
 80024ca:	4603      	mov	r3, r0
 80024cc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002506:	4866      	ldr	r0, [pc, #408]	; (80026a0 <HAL_ADC_PollForConversion+0x1a4>)
 8002508:	f7ff fc9a 	bl	8001e40 <LL_ADC_GetMultimode>
 800250c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d102      	bne.n	800251c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002516:	2308      	movs	r3, #8
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e02a      	b.n	8002572 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d002      	beq.n	800252e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b09      	cmp	r3, #9
 800252c:	d111      	bne.n	8002552 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0a4      	b.n	8002696 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800254c:	2304      	movs	r3, #4
 800254e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002550:	e00f      	b.n	8002572 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002552:	4853      	ldr	r0, [pc, #332]	; (80026a0 <HAL_ADC_PollForConversion+0x1a4>)
 8002554:	f7ff fc82 	bl	8001e5c <LL_ADC_GetMultiDMATransfer>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e093      	b.n	8002696 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800256e:	2304      	movs	r3, #4
 8002570:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002572:	f7ff fb41 	bl	8001bf8 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002578:	e021      	b.n	80025be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d01d      	beq.n	80025be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002582:	f7ff fb39 	bl	8001bf8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <HAL_ADC_PollForConversion+0x9c>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d112      	bne.n	80025be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e06b      	b.n	8002696 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0d6      	beq.n	800257a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fba0 	bl	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7e5b      	ldrb	r3, [r3, #25]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d118      	bne.n	8002622 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d111      	bne.n	8002622 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_ADC_PollForConversion+0x1a8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d002      	beq.n	8002632 <HAL_ADC_PollForConversion+0x136>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e000      	b.n	8002634 <HAL_ADC_PollForConversion+0x138>
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_ADC_PollForConversion+0x1ac>)
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	4293      	cmp	r3, r2
 800263a:	d008      	beq.n	800264e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d002      	beq.n	800264e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b09      	cmp	r3, #9
 800264c:	d104      	bne.n	8002658 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e00c      	b.n	8002672 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_PollForConversion+0x1a8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d002      	beq.n	8002668 <HAL_ADC_PollForConversion+0x16c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e000      	b.n	800266a <HAL_ADC_PollForConversion+0x16e>
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_ADC_PollForConversion+0x1ac>)
 800266a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d104      	bne.n	8002682 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e008      	b.n	8002694 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	220c      	movs	r2, #12
 8002692:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	50040300 	.word	0x50040300
 80026a4:	50040100 	.word	0x50040100
 80026a8:	50040000 	.word	0x50040000

080026ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0b6      	sub	sp, #216	; 0xd8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x22>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e3c7      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x7b2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fc82 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 83a8 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d824      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	3b02      	subs	r3, #2
 8002712:	2b03      	cmp	r3, #3
 8002714:	d81b      	bhi.n	800274e <HAL_ADC_ConfigChannel+0x86>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_ADC_ConfigChannel+0x54>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	0800272d 	.word	0x0800272d
 8002720:	08002735 	.word	0x08002735
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002745 	.word	0x08002745
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	220c      	movs	r2, #12
 8002730:	605a      	str	r2, [r3, #4]
          break;
 8002732:	e011      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2212      	movs	r2, #18
 8002738:	605a      	str	r2, [r3, #4]
          break;
 800273a:	e00d      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2218      	movs	r2, #24
 8002740:	605a      	str	r2, [r3, #4]
          break;
 8002742:	e009      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800274a:	605a      	str	r2, [r3, #4]
          break;
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2206      	movs	r2, #6
 8002752:	605a      	str	r2, [r3, #4]
          break;
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002756:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	f7ff faef 	bl	8001d48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fc46 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002774:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc66 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8002782:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002786:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 81a6 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 81a1 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f7ff fafa 	bl	8001da0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d00a      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6919      	ldr	r1, [r3, #16]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027de:	f7ff fa4b 	bl	8001c78 <LL_ADC_SetOffset>
 80027e2:	e17b      	b.n	8002adc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa68 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x148>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fa5d 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	f003 021f 	and.w	r2, r3, #31
 800280e:	e01e      	b.n	800284e <HAL_ADC_ConfigChannel+0x186>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa52 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800282e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e004      	b.n	800284c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x19e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0e9b      	lsrs	r3, r3, #26
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	e018      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d0>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800287a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800287e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002882:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e004      	b.n	8002898 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800288e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002898:	429a      	cmp	r2, r3
 800289a:	d106      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fa21 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fa05 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f9fa 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	e01e      	b.n	8002914 <HAL_ADC_ConfigChannel+0x24c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f9ef 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e004      	b.n	8002912 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_ConfigChannel+0x264>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	e018      	b.n	800295e <HAL_ADC_ConfigChannel+0x296>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e004      	b.n	800295e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800295e:	429a      	cmp	r2, r3
 8002960:	d106      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f9be 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f9a2 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_ADC_ConfigChannel+0x2d4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2102      	movs	r1, #2
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f997 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	e01e      	b.n	80029da <HAL_ADC_ConfigChannel+0x312>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f98c 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80029ca:	2320      	movs	r3, #32
 80029cc:	e004      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x32a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	e016      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x358>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e004      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f95d 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2103      	movs	r1, #3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f941 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x396>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f936 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	0e9b      	lsrs	r3, r3, #26
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	e017      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x3c6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f92b 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x3de>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	e011      	b.n	8002aca <HAL_ADC_ConfigChannel+0x402>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f908 	bl	8001cec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fa3f 	bl	8001f64 <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 813f 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f7ff f97c 	bl	8001df8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a8e      	ldr	r2, [pc, #568]	; (8002d40 <HAL_ADC_ConfigChannel+0x678>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 8130 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x46c>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e019      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x4a0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	bf94      	ite	ls
 8002b62:	2301      	movls	r3, #1
 8002b64:	2300      	movhi	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d079      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x4c0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b86:	e015      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x4ec>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x50c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e017      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x53c>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x562>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	e018      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x594>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	e080      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x5b4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	e015      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x5e0>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x600>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x630>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x65c>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1e      	subs	r3, #30
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d22:	e01d      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x698>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	613b      	str	r3, [r7, #16]
  return result;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e005      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x684>
 8002d40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	051b      	lsls	r3, r3, #20
 8002d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d60:	430b      	orrs	r3, r1
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7ff f81a 	bl	8001da0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d07a      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d78:	4843      	ldr	r0, [pc, #268]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7a:	f7fe ff6f 	bl	8001c5c <LL_ADC_GetCommonPathInternalCh>
 8002d7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a41      	ldr	r2, [pc, #260]	; (8002e8c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d12c      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d126      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a3c      	ldr	r2, [pc, #240]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x6e4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d15d      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002db4:	4619      	mov	r1, r3
 8002db6:	4834      	ldr	r0, [pc, #208]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db8:	f7fe ff3d 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_ADC_ConfigChannel+0x7d4>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dd6:	e002      	b.n	8002dde <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f9      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de4:	e040      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d118      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x75a>
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d112      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_ConfigChannel+0x748>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d12d      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481b      	ldr	r0, [pc, #108]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e1c:	f7fe ff0b 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e024      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d120      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d115      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480e      	ldr	r0, [pc, #56]	; (8002e88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e4e:	f7fe fef2 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e00c      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e66:	e002      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e68:	bf00      	nop
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	37d8      	adds	r7, #216	; 0xd8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	80080000 	.word	0x80080000
 8002e88:	50040300 	.word	0x50040300
 8002e8c:	c7520000 	.word	0xc7520000
 8002e90:	50040000 	.word	0x50040000
 8002e94:	50040200 	.word	0x50040200
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	053e2d63 	.word	0x053e2d63
 8002ea0:	cb840000 	.word	0xcb840000
 8002ea4:	80000001 	.word	0x80000001

08002ea8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff f89e 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002ec4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f8bf 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8002ed0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8098 	beq.w	8003010 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02a      	beq.n	8002f44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7e5b      	ldrb	r3, [r3, #25]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d126      	bne.n	8002f44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e1b      	ldrb	r3, [r3, #24]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d122      	bne.n	8002f44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f02:	e014      	b.n	8002f2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4a45      	ldr	r2, [pc, #276]	; (800301c <ADC_ConversionStop+0x174>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d90d      	bls.n	8002f28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e074      	b.n	8003012 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d1e3      	bne.n	8002f04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d014      	beq.n	8002f74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f856 	bl	8002000 <LL_ADC_REG_IsConversionOngoing>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f813 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d104      	bne.n	8002f74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f832 	bl	8001fd8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d014      	beq.n	8002fa4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f865 	bl	800204e <LL_ADC_INJ_IsConversionOngoing>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fffb 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f841 	bl	8002026 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d005      	beq.n	8002fb6 <ADC_ConversionStop+0x10e>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d105      	bne.n	8002fbc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fb0:	230c      	movs	r3, #12
 8002fb2:	617b      	str	r3, [r7, #20]
        break;
 8002fb4:	e005      	b.n	8002fc2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	617b      	str	r3, [r7, #20]
        break;
 8002fba:	e002      	b.n	8002fc2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]
        break;
 8002fc0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fe19 	bl	8001bf8 <HAL_GetTick>
 8002fc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fc8:	e01b      	b.n	8003002 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fca:	f7fe fe15 	bl	8001bf8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d914      	bls.n	8003002 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1dc      	bne.n	8002fca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	a33fffff 	.word	0xa33fffff

08003020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ff97 	bl	8001f64 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d169      	bne.n	8003110 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b36      	ldr	r3, [pc, #216]	; (800311c <ADC_Enable+0xfc>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e055      	b.n	8003112 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff52 	bl	8001f14 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003070:	482b      	ldr	r0, [pc, #172]	; (8003120 <ADC_Enable+0x100>)
 8003072:	f7fe fdf3 	bl	8001c5c <LL_ADC_GetCommonPathInternalCh>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <ADC_Enable+0x104>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <ADC_Enable+0x108>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fda6 	bl	8001bf8 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ae:	e028      	b.n	8003102 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe ff55 	bl	8001f64 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe ff25 	bl	8001f14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7fe fd95 	bl	8001bf8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d914      	bls.n	8003102 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00d      	beq.n	8003102 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d1cf      	bne.n	80030b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	8000003f 	.word	0x8000003f
 8003120:	50040300 	.word	0x50040300
 8003124:	20000004 	.word	0x20000004
 8003128:	053e2d63 	.word	0x053e2d63

0800312c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff26 	bl	8001f8a <LL_ADC_IsDisableOngoing>
 800313e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff0d 	bl	8001f64 <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d047      	beq.n	80031e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d144      	bne.n	80031e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030d 	and.w	r3, r3, #13
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10c      	bne.n	800317e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fee7 	bl	8001f3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2203      	movs	r2, #3
 8003174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003176:	f7fe fd3f 	bl	8001bf8 <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800317c:	e029      	b.n	80031d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e023      	b.n	80031e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800319a:	f7fe fd2d 	bl	8001bf8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d914      	bls.n	80031d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1dc      	bne.n	800319a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <LL_ADC_IsEnabled>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <LL_ADC_IsEnabled+0x18>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_IsEnabled+0x1a>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_REG_IsConversionOngoing>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d101      	bne.n	8003228 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b09f      	sub	sp, #124	; 0x7c
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003252:	2302      	movs	r3, #2
 8003254:	e093      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800325e:	2300      	movs	r3, #0
 8003260:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003262:	2300      	movs	r3, #0
 8003264:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d102      	bne.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	e001      	b.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e072      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ffb8 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffb2 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d154      	bne.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d151      	bne.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80032ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02c      	beq.n	800331e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d6:	035b      	lsls	r3, r3, #13
 80032d8:	430b      	orrs	r3, r1
 80032da:	431a      	orrs	r2, r3
 80032dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e0:	4829      	ldr	r0, [pc, #164]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032e2:	f7ff ff82 	bl	80031ea <LL_ADC_IsEnabled>
 80032e6:	4604      	mov	r4, r0
 80032e8:	4828      	ldr	r0, [pc, #160]	; (800338c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032ea:	f7ff ff7e 	bl	80031ea <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	431c      	orrs	r4, r3
 80032f2:	4828      	ldr	r0, [pc, #160]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032f4:	f7ff ff79 	bl	80031ea <LL_ADC_IsEnabled>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4323      	orrs	r3, r4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d137      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	6811      	ldr	r1, [r2, #0]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	6892      	ldr	r2, [r2, #8]
 8003314:	430a      	orrs	r2, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800331c:	e028      	b.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800331e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800332a:	4817      	ldr	r0, [pc, #92]	; (8003388 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800332c:	f7ff ff5d 	bl	80031ea <LL_ADC_IsEnabled>
 8003330:	4604      	mov	r4, r0
 8003332:	4816      	ldr	r0, [pc, #88]	; (800338c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003334:	f7ff ff59 	bl	80031ea <LL_ADC_IsEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	431c      	orrs	r4, r3
 800333c:	4815      	ldr	r0, [pc, #84]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800333e:	f7ff ff54 	bl	80031ea <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	4323      	orrs	r3, r4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d112      	bne.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003358:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800335a:	e009      	b.n	8003370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800336e:	e000      	b.n	8003372 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003370:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800337a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800337e:	4618      	mov	r0, r3
 8003380:	377c      	adds	r7, #124	; 0x7c
 8003382:	46bd      	mov	sp, r7
 8003384:	bd90      	pop	{r4, r7, pc}
 8003386:	bf00      	nop
 8003388:	50040000 	.word	0x50040000
 800338c:	50040100 	.word	0x50040100
 8003390:	50040300 	.word	0x50040300
 8003394:	50040200 	.word	0x50040200

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	; (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
         );
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003504:	d301      	bcc.n	800350a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <SysTick_Config+0x40>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003512:	210f      	movs	r1, #15
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f7ff ff8e 	bl	8003438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SysTick_Config+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <SysTick_Config+0x40>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000e010 	.word	0xe000e010

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff29 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff3e 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff8e 	bl	800348c <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff5d 	bl	8003438 <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff31 	bl	80033fc <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffa2 	bl	80034f4 <SysTick_Config>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d008      	beq.n	80035e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2204      	movs	r2, #4
 80035d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e022      	b.n	800362a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 020e 	bic.w	r2, r2, #14
 80035f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 021c 	and.w	r2, r3, #28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d005      	beq.n	800365a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e029      	b.n	80036ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 020e 	bic.w	r2, r2, #14
 8003668:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f003 021c 	and.w	r2, r3, #28
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
    }
  }
  return status;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e17f      	b.n	80039c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8171 	beq.w	80039c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d005      	beq.n	80036f8 <HAL_GPIO_Init+0x40>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d130      	bne.n	800375a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800372e:	2201      	movs	r2, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 0201 	and.w	r2, r3, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b03      	cmp	r3, #3
 8003764:	d118      	bne.n	8003798 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	6939      	ldr	r1, [r7, #16]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80ac 	beq.w	80039c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6613      	str	r3, [r2, #96]	; 0x60
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003882:	4a5a      	ldr	r2, [pc, #360]	; (80039ec <HAL_GPIO_Init+0x334>)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x242>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4f      	ldr	r2, [pc, #316]	; (80039f0 <HAL_GPIO_Init+0x338>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x23e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_GPIO_Init+0x33c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x23a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_GPIO_Init+0x340>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x236>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_GPIO_Init+0x344>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x232>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4b      	ldr	r2, [pc, #300]	; (8003a00 <HAL_GPIO_Init+0x348>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x22e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <HAL_GPIO_Init+0x34c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x22a>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00c      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00a      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x244>
 80038fa:	2300      	movs	r3, #0
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800390c:	4937      	ldr	r1, [pc, #220]	; (80039ec <HAL_GPIO_Init+0x334>)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_GPIO_Init+0x350>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800393e:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_GPIO_Init+0x350>)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_GPIO_Init+0x350>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <HAL_GPIO_Init+0x350>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_GPIO_Init+0x350>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_GPIO_Init+0x350>)
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_GPIO_Init+0x350>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <HAL_GPIO_Init+0x350>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa22 f303 	lsr.w	r3, r2, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f47f ae78 	bne.w	80036c8 <HAL_GPIO_Init+0x10>
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000
 80039f0:	48000400 	.word	0x48000400
 80039f4:	48000800 	.word	0x48000800
 80039f8:	48000c00 	.word	0x48000c00
 80039fc:	48001000 	.word	0x48001000
 8003a00:	48001400 	.word	0x48001400
 8003a04:	48001800 	.word	0x48001800
 8003a08:	40010400 	.word	0x40010400

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43d9      	mvns	r1, r3
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e041      	b.n	8003b06 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a94:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6852      	ldr	r2, [r2, #4]
 8003a9e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003aaa:	f7fe f8a5 	bl	8001bf8 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ab0:	e00f      	b.n	8003ad2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003ab2:	f7fe f8a1 	bl	8001bf8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b31      	cmp	r3, #49	; 0x31
 8003abe:	d908      	bls.n	8003ad2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e019      	b.n	8003b06 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e8      	bne.n	8003ab2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d005      	beq.n	8003afa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68d2      	ldr	r2, [r2, #12]
 8003af6:	611a      	str	r2, [r3, #16]
 8003af8:	e004      	b.n	8003b04 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40007000 	.word	0x40007000

08003b4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5a:	d130      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5c:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d038      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2232      	movs	r2, #50	; 0x32
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9b      	lsrs	r3, r3, #18
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b90:	e002      	b.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d102      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f2      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	d110      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d007      	beq.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bcc:	4b07      	ldr	r3, [pc, #28]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	431bde83 	.word	0x431bde83

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e3ca      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0a:	4b97      	ldr	r3, [pc, #604]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c14:	4b94      	ldr	r3, [pc, #592]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80e4 	beq.w	8003df4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4a>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	f040 808b 	bne.w	8003d50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 8087 	bne.w	8003d50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c42:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_RCC_OscConfig+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e3a2      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	4b82      	ldr	r3, [pc, #520]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_RCC_OscConfig+0x7c>
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_OscConfig+0x88>
 8003c74:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d223      	bcs.n	8003ccc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fd55 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e383      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c98:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	496d      	ldr	r1, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4968      	ldr	r1, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
 8003cca:	e025      	b.n	8003d18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	f043 0308 	orr.w	r3, r3, #8
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cea:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	495b      	ldr	r1, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fd15 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e343      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d18:	f000 fc4a 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b52      	ldr	r3, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d38:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd ff0b 	bl	8001b58 <HAL_InitTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d052      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	e327      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d032      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d58:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d64:	f7fd ff48 	bl	8001bf8 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6c:	f7fd ff44 	bl	8001bf8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e310      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8a:	4b37      	ldr	r3, [pc, #220]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a36      	ldr	r2, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4931      	ldr	r1, [pc, #196]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da8:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	492c      	ldr	r1, [pc, #176]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
 8003dbc:	e01a      	b.n	8003df4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dca:	f7fd ff15 	bl	8001bf8 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd2:	f7fd ff11 	bl	8001bf8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e2dd      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1da>
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d074      	beq.n	8003eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x21a>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d10b      	bne.n	8003e2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d064      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d160      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e2ba      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e32:	d106      	bne.n	8003e42 <HAL_RCC_OscConfig+0x24a>
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e026      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4a:	d115      	bne.n	8003e78 <HAL_RCC_OscConfig+0x280>
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a02      	ldr	r2, [pc, #8]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e014      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08009764 	.word	0x08009764
 8003e70:	20000004 	.word	0x20000004
 8003e74:	20000008 	.word	0x20000008
 8003e78:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a9c      	ldr	r2, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fd feae 	bl	8001bf8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd feaa 	bl	8001bf8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e276      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2a8>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fe9a 	bl	8001bf8 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fe96 	bl	8001bf8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e262      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d060      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x310>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x328>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e23f      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4973      	ldr	r1, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e040      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fe55 	bl	8001bf8 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fd fe51 	bl	8001bf8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e21d      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	495f      	ldr	r1, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fd fe31 	bl	8001bf8 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fd fe2d 	bl	8001bf8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1f9      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fe0c 	bl	8001bf8 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd fe08 	bl	8001bf8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1d4      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
 8004004:	e01b      	b.n	800403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fd fdef 	bl	8001bf8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7fd fdeb 	bl	8001bf8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1b7      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004090:	f7fd fdb2 	bl	8001bf8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fd fdae 	bl	8001bf8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e17a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_OscConfig+0x50c>
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a9b      	ldr	r2, [pc, #620]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b98      	ldr	r3, [pc, #608]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a97      	ldr	r2, [pc, #604]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd fd64 	bl	8001bf8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd fd60 	bl	8001bf8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e12a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b8b      	ldr	r3, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x53c>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fd fd4d 	bl	8001bf8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd fd49 	bl	8001bf8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e113      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80fe 	beq.w	800439e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	f040 80d0 	bne.w	800434c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041ac:	4b72      	ldr	r3, [pc, #456]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d130      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	3b01      	subs	r3, #1
 80041cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d127      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11f      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ec:	2a07      	cmp	r2, #7
 80041ee:	bf14      	ite	ne
 80041f0:	2201      	movne	r2, #1
 80041f2:	2200      	moveq	r2, #0
 80041f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d113      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d109      	bne.n	8004222 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d06e      	beq.n	8004300 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b0c      	cmp	r3, #12
 8004226:	d069      	beq.n	80042fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004228:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004234:	4b50      	ldr	r3, [pc, #320]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ad      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004244:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800424a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004250:	f7fd fcd2 	bl	8001bf8 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd fcce 	bl	8001bf8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e09a      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004276:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004286:	3a01      	subs	r2, #1
 8004288:	0112      	lsls	r2, r2, #4
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004290:	0212      	lsls	r2, r2, #8
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004298:	0852      	lsrs	r2, r2, #1
 800429a:	3a01      	subs	r2, #1
 800429c:	0552      	lsls	r2, r2, #21
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0652      	lsls	r2, r2, #25
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b0:	0912      	lsrs	r2, r2, #4
 80042b2:	0452      	lsls	r2, r2, #17
 80042b4:	430a      	orrs	r2, r1
 80042b6:	4930      	ldr	r1, [pc, #192]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042bc:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d4:	f7fd fc90 	bl	8001bf8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd fc8c 	bl	8001bf8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e058      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fa:	e050      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e04f      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d148      	bne.n	800439e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004324:	f7fd fc68 	bl	8001bf8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fd fc64 	bl	8001bf8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e030      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x734>
 800434a:	e028      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d023      	beq.n	800439a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_RCC_OscConfig+0x780>)
 8004358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fd fc4b 	bl	8001bf8 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	e00c      	b.n	8004380 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd fc47 	bl	8001bf8 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d905      	bls.n	8004380 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e013      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
 8004378:	40021000 	.word	0x40021000
 800437c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ec      	bne.n	8004366 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4905      	ldr	r1, [pc, #20]	; (80043a8 <HAL_RCC_OscConfig+0x7b0>)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x7b4>)
 8004394:	4013      	ands	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
 8004398:	e001      	b.n	800439e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	feeefffc 	.word	0xfeeefffc

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0e7      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b72      	ldr	r3, [pc, #456]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4970      	ldr	r1, [pc, #448]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b6e      	ldr	r3, [pc, #440]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cf      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	429a      	cmp	r2, r3
 800440e:	d908      	bls.n	8004422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4960      	ldr	r1, [pc, #384]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04c      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b5a      	ldr	r3, [pc, #360]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d121      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0a6      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e09a      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004466:	4b4e      	ldr	r3, [pc, #312]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e08e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e086      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4943      	ldr	r1, [pc, #268]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd fbae 	bl	8001bf8 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd fbaa 	bl	8001bf8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d208      	bcs.n	80044f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	492b      	ldr	r1, [pc, #172]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d210      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	4923      	ldr	r1, [pc, #140]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e036      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4918      	ldr	r1, [pc, #96]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004550:	4b13      	ldr	r3, [pc, #76]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4910      	ldr	r1, [pc, #64]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004564:	f000 f824 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	490b      	ldr	r1, [pc, #44]	; (80045a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1fc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fae5 	bl	8001b58 <HAL_InitTick>
 800458e:	4603      	mov	r3, r0
 8004590:	72fb      	strb	r3, [r7, #11]

  return status;
 8004592:	7afb      	ldrb	r3, [r7, #11]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08009764 	.word	0x08009764
 80045a8:	20000004 	.word	0x20000004
 80045ac:	20000008 	.word	0x20000008

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c8:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d11e      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e005      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e004      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d101      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d134      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463e:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0xa6>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d003      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0xac>
 8004654:	e005      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004658:	617b      	str	r3, [r7, #20]
      break;
 800465a:	e005      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800465e:	617b      	str	r3, [r7, #20]
      break;
 8004660:	e002      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	617b      	str	r3, [r7, #20]
      break;
 8004666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	3301      	adds	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	fb03 f202 	mul.w	r2, r3, r2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	0e5b      	lsrs	r3, r3, #25
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	3301      	adds	r3, #1
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046a8:	69bb      	ldr	r3, [r7, #24]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	0800977c 	.word	0x0800977c
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000004 	.word	0x20000004

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	08009774 	.word	0x08009774

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	08009774 	.word	0x08009774

08004738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004750:	f7ff f9ee 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 8004754:	6178      	str	r0, [r7, #20]
 8004756:	e014      	b.n	8004782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	4a24      	ldr	r2, [pc, #144]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	; 0x58
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004770:	f7ff f9de 	bl	8003b30 <HAL_PWREx_GetVoltageRange>
 8004774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004776:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d10b      	bne.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d919      	bls.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2ba0      	cmp	r3, #160	; 0xa0
 8004794:	d902      	bls.n	800479c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004796:	2302      	movs	r3, #2
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e013      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800479c:	2301      	movs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e010      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d902      	bls.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047a8:	2303      	movs	r3, #3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e00a      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	d102      	bne.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b4:	2302      	movs	r3, #2
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e004      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b70      	cmp	r3, #112	; 0x70
 80047be:	d101      	bne.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c0:	2301      	movs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 0207 	bic.w	r2, r3, #7
 80047cc:	4909      	ldr	r1, [pc, #36]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d4:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40022000 	.word	0x40022000

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	2300      	movs	r3, #0
 8004802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	2300      	movs	r3, #0
 8004806:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	2b00      	cmp	r3, #0
 8004812:	d041      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004818:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800481c:	d02a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800481e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004822:	d824      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800482a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800482e:	d81e      	bhi.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004838:	d010      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800483a:	e018      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800483c:	4b86      	ldr	r3, [pc, #536]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a85      	ldr	r2, [pc, #532]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004848:	e015      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fabb 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800485a:	e00c      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3320      	adds	r3, #32
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fba6 	bl	8004fb4 <RCCEx_PLLSAI2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	74fb      	strb	r3, [r7, #19]
      break;
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487c:	4b76      	ldr	r3, [pc, #472]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800488a:	4973      	ldr	r1, [pc, #460]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d041      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048ac:	d02a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048b2:	d824      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b8:	d008      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048be:	d81e      	bhi.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c8:	d010      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ca:	e018      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048cc:	4b62      	ldr	r3, [pc, #392]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a61      	ldr	r2, [pc, #388]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d8:	e015      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3304      	adds	r3, #4
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fa73 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ea:	e00c      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3320      	adds	r3, #32
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fb5e 	bl	8004fb4 <RCCEx_PLLSAI2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048fc:	e003      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	74fb      	strb	r3, [r7, #19]
      break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800490c:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491a:	494f      	ldr	r1, [pc, #316]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a0 	beq.w	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004950:	4b41      	ldr	r3, [pc, #260]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	4a40      	ldr	r2, [pc, #256]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	6593      	str	r3, [r2, #88]	; 0x58
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004968:	2301      	movs	r3, #1
 800496a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3a      	ldr	r2, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004978:	f7fd f93e 	bl	8001bf8 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800497e:	e009      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fd f93a 	bl	8001bf8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d902      	bls.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	74fb      	strb	r3, [r7, #19]
        break;
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ef      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d15c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01f      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d019      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a1c      	ldr	r2, [pc, #112]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd f8f9 	bl	8001bf8 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a08:	e00b      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd f8f5 	bl	8001bf8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d902      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ec      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a4e:	e009      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	74bb      	strb	r3, [r7, #18]
 8004a54:	e006      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7c7b      	ldrb	r3, [r7, #17]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b9e      	ldr	r3, [pc, #632]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4a9d      	ldr	r2, [pc, #628]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a82:	4b98      	ldr	r3, [pc, #608]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	4994      	ldr	r1, [pc, #592]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa4:	4b8f      	ldr	r3, [pc, #572]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 020c 	bic.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	498c      	ldr	r1, [pc, #560]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac6:	4b87      	ldr	r3, [pc, #540]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4983      	ldr	r1, [pc, #524]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ae8:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	497b      	ldr	r1, [pc, #492]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b0a:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	4972      	ldr	r1, [pc, #456]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b2c:	4b6d      	ldr	r3, [pc, #436]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	496a      	ldr	r1, [pc, #424]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b4e:	4b65      	ldr	r3, [pc, #404]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	4961      	ldr	r1, [pc, #388]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	4959      	ldr	r1, [pc, #356]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b92:	4b54      	ldr	r3, [pc, #336]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	4950      	ldr	r1, [pc, #320]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb4:	4b4b      	ldr	r3, [pc, #300]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	4948      	ldr	r1, [pc, #288]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bd6:	4b43      	ldr	r3, [pc, #268]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	493f      	ldr	r1, [pc, #252]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf8:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	4937      	ldr	r1, [pc, #220]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2101      	movs	r1, #1
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f8c8 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c56:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	491f      	ldr	r1, [pc, #124]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c80:	60d3      	str	r3, [r2, #12]
 8004c82:	e011      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f899 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd2:	d109      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a02      	ldr	r2, [pc, #8]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cde:	60d3      	str	r3, [r2, #12]
 8004ce0:	e014      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f867 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02f      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d26:	4928      	ldr	r1, [pc, #160]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d36:	d10d      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f844 	bl	8004dcc <RCCEx_PLLSAI1_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d014      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3320      	adds	r3, #32
 8004d62:	2102      	movs	r1, #2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f925 	bl	8004fb4 <RCCEx_PLLSAI2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d6e:	7cfb      	ldrb	r3, [r7, #19]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d92:	490d      	ldr	r1, [pc, #52]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	4904      	ldr	r1, [pc, #16]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000

08004dcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dda:	4b75      	ldr	r3, [pc, #468]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004de6:	4b72      	ldr	r3, [pc, #456]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d10d      	bne.n	8004e12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dfe:	4b6c      	ldr	r3, [pc, #432]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d047      	beq.n	8004ea2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e044      	b.n	8004ea2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d018      	beq.n	8004e52 <RCCEx_PLLSAI1_Config+0x86>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d825      	bhi.n	8004e70 <RCCEx_PLLSAI1_Config+0xa4>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d002      	beq.n	8004e2e <RCCEx_PLLSAI1_Config+0x62>
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d009      	beq.n	8004e40 <RCCEx_PLLSAI1_Config+0x74>
 8004e2c:	e020      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2e:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11d      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3e:	e01a      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b5b      	ldr	r3, [pc, #364]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e50:	e013      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e52:	4b57      	ldr	r3, [pc, #348]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5e:	4b54      	ldr	r3, [pc, #336]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e004      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e86:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	4944      	ldr	r1, [pc, #272]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d17d      	bne.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ea8:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a40      	ldr	r2, [pc, #256]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fc fea0 	bl	8001bf8 <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eba:	e009      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ebc:	f7fc fe9c 	bl	8001bf8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d902      	bls.n	8004ed0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ece:	e005      	b.n	8004edc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ed0:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ef      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d160      	bne.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d111      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	0912      	lsrs	r2, r2, #4
 8004f00:	0452      	lsls	r2, r2, #17
 8004f02:	430a      	orrs	r2, r1
 8004f04:	492a      	ldr	r1, [pc, #168]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	610b      	str	r3, [r1, #16]
 8004f0a:	e027      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d112      	bne.n	8004f38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f12:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	0211      	lsls	r1, r2, #8
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6912      	ldr	r2, [r2, #16]
 8004f28:	0852      	lsrs	r2, r2, #1
 8004f2a:	3a01      	subs	r2, #1
 8004f2c:	0552      	lsls	r2, r2, #21
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	491f      	ldr	r1, [pc, #124]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]
 8004f36:	e011      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	0211      	lsls	r1, r2, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6952      	ldr	r2, [r2, #20]
 8004f4e:	0852      	lsrs	r2, r2, #1
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0652      	lsls	r2, r2, #25
 8004f54:	430a      	orrs	r2, r1
 8004f56:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fc fe46 	bl	8001bf8 <HAL_GetTick>
 8004f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f6e:	e009      	b.n	8004f84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f70:	f7fc fe42 	bl	8001bf8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d902      	bls.n	8004f84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	73fb      	strb	r3, [r7, #15]
          break;
 8004f82:	e005      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ef      	beq.n	8004f70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fc2:	4b6a      	ldr	r3, [pc, #424]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d018      	beq.n	8005000 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fce:	4b67      	ldr	r3, [pc, #412]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0203 	and.w	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10d      	bne.n	8004ffa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fe6:	4b61      	ldr	r3, [pc, #388]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d047      	beq.n	800508a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	e044      	b.n	800508a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d018      	beq.n	800503a <RCCEx_PLLSAI2_Config+0x86>
 8005008:	2b03      	cmp	r3, #3
 800500a:	d825      	bhi.n	8005058 <RCCEx_PLLSAI2_Config+0xa4>
 800500c:	2b01      	cmp	r3, #1
 800500e:	d002      	beq.n	8005016 <RCCEx_PLLSAI2_Config+0x62>
 8005010:	2b02      	cmp	r3, #2
 8005012:	d009      	beq.n	8005028 <RCCEx_PLLSAI2_Config+0x74>
 8005014:	e020      	b.n	8005058 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005016:	4b55      	ldr	r3, [pc, #340]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11d      	bne.n	800505e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005026:	e01a      	b.n	800505e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005028:	4b50      	ldr	r3, [pc, #320]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005030:	2b00      	cmp	r3, #0
 8005032:	d116      	bne.n	8005062 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005038:	e013      	b.n	8005062 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800503a:	4b4c      	ldr	r3, [pc, #304]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005046:	4b49      	ldr	r3, [pc, #292]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d109      	bne.n	8005066 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005056:	e006      	b.n	8005066 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
      break;
 800505c:	e004      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005066:	bf00      	nop
    }

    if(status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800506e:	4b3f      	ldr	r3, [pc, #252]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	430b      	orrs	r3, r1
 8005084:	4939      	ldr	r1, [pc, #228]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d167      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005090:	4b36      	ldr	r3, [pc, #216]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a35      	ldr	r2, [pc, #212]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fc fdac 	bl	8001bf8 <HAL_GetTick>
 80050a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a2:	e009      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a4:	f7fc fda8 	bl	8001bf8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d902      	bls.n	80050b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	73fb      	strb	r3, [r7, #15]
        break;
 80050b6:	e005      	b.n	80050c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050b8:	4b2c      	ldr	r3, [pc, #176]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ef      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d14a      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d111      	bne.n	80050f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	0211      	lsls	r1, r2, #8
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68d2      	ldr	r2, [r2, #12]
 80050e6:	0912      	lsrs	r2, r2, #4
 80050e8:	0452      	lsls	r2, r2, #17
 80050ea:	430a      	orrs	r2, r1
 80050ec:	491f      	ldr	r1, [pc, #124]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	614b      	str	r3, [r1, #20]
 80050f2:	e011      	b.n	8005118 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6892      	ldr	r2, [r2, #8]
 8005104:	0211      	lsls	r1, r2, #8
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6912      	ldr	r2, [r2, #16]
 800510a:	0852      	lsrs	r2, r2, #1
 800510c:	3a01      	subs	r2, #1
 800510e:	0652      	lsls	r2, r2, #25
 8005110:	430a      	orrs	r2, r1
 8005112:	4916      	ldr	r1, [pc, #88]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005114:	4313      	orrs	r3, r2
 8005116:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc fd68 	bl	8001bf8 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800512a:	e009      	b.n	8005140 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800512c:	f7fc fd64 	bl	8001bf8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d902      	bls.n	8005140 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	73fb      	strb	r3, [r7, #15]
          break;
 800513e:	e005      	b.n	800514c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4904      	ldr	r1, [pc, #16]	; (800516c <RCCEx_PLLSAI2_Config+0x1b8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000

08005170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e040      	b.n	8005204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fad2 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fc18 	bl	80059e4 <UART_SetConfig>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e022      	b.n	8005204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fec4 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 ff4b 	bl	8006098 <UART_CheckIdleState>
 8005202:	4603      	mov	r3, r0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005220:	2b20      	cmp	r3, #32
 8005222:	f040 8082 	bne.w	800532a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_UART_Transmit+0x26>
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e07a      	b.n	800532c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_UART_Transmit+0x38>
 8005240:	2302      	movs	r3, #2
 8005242:	e073      	b.n	800532c <HAL_UART_Transmit+0x120>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	; 0x21
 8005258:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fc fccd 	bl	8001bf8 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d108      	bne.n	800528c <HAL_UART_Transmit+0x80>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e003      	b.n	8005294 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800529c:	e02d      	b.n	80052fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 ff3e 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e039      	b.n	800532c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10b      	bne.n	80052d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ca:	b292      	uxth	r2, r2
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	3302      	adds	r3, #2
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e008      	b.n	80052e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	b292      	uxth	r2, r2
 80052e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1cb      	bne.n	800529e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2140      	movs	r1, #64	; 0x40
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 ff0a 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e005      	b.n	800532c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e000      	b.n	800532c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005346:	2b20      	cmp	r3, #32
 8005348:	d142      	bne.n	80053d0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Receive_IT+0x22>
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e03b      	b.n	80053d2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_UART_Receive_IT+0x34>
 8005364:	2302      	movs	r3, #2
 8005366:	e034      	b.n	80053d2 <HAL_UART_Receive_IT+0x9e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_UART_Receive_IT+0xa8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01f      	beq.n	80053c0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d018      	beq.n	80053c0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff74 	bl	80062b4 <UART_Start_Receive_IT>
 80053cc:	4603      	mov	r3, r0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3728      	adds	r7, #40	; 0x28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40008000 	.word	0x40008000

080053e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b0ba      	sub	sp, #232	; 0xe8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005406:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800540a:	f640 030f 	movw	r3, #2063	; 0x80f
 800540e:	4013      	ands	r3, r2
 8005410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d115      	bne.n	8005448 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00f      	beq.n	8005448 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 82a6 	beq.w	800598a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4798      	blx	r3
      }
      return;
 8005446:	e2a0      	b.n	800598a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8117 	beq.w	8005680 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800545e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005462:	4b85      	ldr	r3, [pc, #532]	; (8005678 <HAL_UART_IRQHandler+0x298>)
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 810a 	beq.w	8005680 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d011      	beq.n	800549c <HAL_UART_IRQHandler+0xbc>
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00b      	beq.n	800549c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2201      	movs	r2, #1
 800548a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	f043 0201 	orr.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800549c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d011      	beq.n	80054cc <HAL_UART_IRQHandler+0xec>
 80054a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2202      	movs	r2, #2
 80054ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d011      	beq.n	80054fc <HAL_UART_IRQHandler+0x11c>
 80054d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2204      	movs	r2, #4
 80054ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d017      	beq.n	8005538 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005518:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2208      	movs	r2, #8
 8005526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552e:	f043 0208 	orr.w	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_UART_IRQHandler+0x18a>
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 820c 	beq.w	800598e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d04f      	beq.n	8005662 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ff40 	bl	8006448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d141      	bne.n	800565a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800560e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800561a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1d9      	bne.n	80055d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	2b00      	cmp	r3, #0
 8005628:	d013      	beq.n	8005652 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <HAL_UART_IRQHandler+0x29c>)
 8005630:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd fffd 	bl	8003636 <HAL_DMA_Abort_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e00f      	b.n	8005672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9b0 	bl	80059b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e00b      	b.n	8005672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9ac 	bl	80059b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	e007      	b.n	8005672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9a8 	bl	80059b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005670:	e18d      	b.n	800598e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005672:	bf00      	nop
    return;
 8005674:	e18b      	b.n	800598e <HAL_UART_IRQHandler+0x5ae>
 8005676:	bf00      	nop
 8005678:	04000120 	.word	0x04000120
 800567c:	0800650f 	.word	0x0800650f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 8146 	bne.w	8005916 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 813f 	beq.w	8005916 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8138 	beq.w	8005916 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2210      	movs	r2, #16
 80056ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	f040 80b4 	bne.w	8005826 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 815f 	beq.w	8005992 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056de:	429a      	cmp	r2, r3
 80056e0:	f080 8157 	bcs.w	8005992 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 8085 	bne.w	800580a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800572a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800572e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1da      	bne.n	8005700 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800576e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e1      	bne.n	800574a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	f023 0310 	bic.w	r3, r3, #16
 80057de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e4      	bne.n	80057ca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4618      	mov	r0, r3
 8005806:	f7fd fed8 	bl	80035ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005816:	b29b      	uxth	r3, r3
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	b29b      	uxth	r3, r3
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8d4 	bl	80059cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005824:	e0b5      	b.n	8005992 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005832:	b29b      	uxth	r3, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80a7 	beq.w	8005996 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80a2 	beq.w	8005996 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005874:	647b      	str	r3, [r7, #68]	; 0x44
 8005876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e4      	bne.n	8005852 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	623b      	str	r3, [r7, #32]
   return(result);
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ac:	633a      	str	r2, [r7, #48]	; 0x30
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e3      	bne.n	8005888 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	617b      	str	r3, [r7, #20]
   return(result);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e4      	bne.n	80058d2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f85c 	bl	80059cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005914:	e03f      	b.n	8005996 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <HAL_UART_IRQHandler+0x560>
 8005922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 ff88 	bl	800684e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800593e:	e02d      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01c      	beq.n	800599a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
    }
    return;
 8005968:	e017      	b.n	800599a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <HAL_UART_IRQHandler+0x5bc>
 8005976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fdd9 	bl	800653a <UART_EndTransmit_IT>
    return;
 8005988:	e008      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
      return;
 800598a:	bf00      	nop
 800598c:	e006      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
    return;
 800598e:	bf00      	nop
 8005990:	e004      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <HAL_UART_IRQHandler+0x5bc>
    return;
 800599a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800599c:	37e8      	adds	r7, #232	; 0xe8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop

080059a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e8:	b08a      	sub	sp, #40	; 0x28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4ba4      	ldr	r3, [pc, #656]	; (8005ca4 <UART_SetConfig+0x2c0>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a99      	ldr	r2, [pc, #612]	; (8005ca8 <UART_SetConfig+0x2c4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a90      	ldr	r2, [pc, #576]	; (8005cac <UART_SetConfig+0x2c8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d126      	bne.n	8005abc <UART_SetConfig+0xd8>
 8005a6e:	4b90      	ldr	r3, [pc, #576]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d81b      	bhi.n	8005ab4 <UART_SetConfig+0xd0>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0xa0>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005a95 	.word	0x08005a95
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a9a:	e116      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa2:	e112      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aaa:	e10e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab2:	e10a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aba:	e106      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7c      	ldr	r2, [pc, #496]	; (8005cb4 <UART_SetConfig+0x2d0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d138      	bne.n	8005b38 <UART_SetConfig+0x154>
 8005ac6:	4b7a      	ldr	r3, [pc, #488]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d82d      	bhi.n	8005b30 <UART_SetConfig+0x14c>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0xf8>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b31 	.word	0x08005b31
 8005ae4:	08005b31 	.word	0x08005b31
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b31 	.word	0x08005b31
 8005af8:	08005b31 	.word	0x08005b31
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e0d8      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e0d4      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e0d0      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2e:	e0cc      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b36:	e0c8      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d125      	bne.n	8005b8e <UART_SetConfig+0x1aa>
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d016      	beq.n	8005b7e <UART_SetConfig+0x19a>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d818      	bhi.n	8005b86 <UART_SetConfig+0x1a2>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d00a      	beq.n	8005b6e <UART_SetConfig+0x18a>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d814      	bhi.n	8005b86 <UART_SetConfig+0x1a2>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <UART_SetConfig+0x182>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d008      	beq.n	8005b76 <UART_SetConfig+0x192>
 8005b64:	e00f      	b.n	8005b86 <UART_SetConfig+0x1a2>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6c:	e0ad      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b74:	e0a9      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b76:	2304      	movs	r3, #4
 8005b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7c:	e0a5      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b84:	e0a1      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b86:	2310      	movs	r3, #16
 8005b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8c:	e09d      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <UART_SetConfig+0x2d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d125      	bne.n	8005be4 <UART_SetConfig+0x200>
 8005b98:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba4:	d016      	beq.n	8005bd4 <UART_SetConfig+0x1f0>
 8005ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba8:	d818      	bhi.n	8005bdc <UART_SetConfig+0x1f8>
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d00a      	beq.n	8005bc4 <UART_SetConfig+0x1e0>
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d814      	bhi.n	8005bdc <UART_SetConfig+0x1f8>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <UART_SetConfig+0x1d8>
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d008      	beq.n	8005bcc <UART_SetConfig+0x1e8>
 8005bba:	e00f      	b.n	8005bdc <UART_SetConfig+0x1f8>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc2:	e082      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bca:	e07e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	e07a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e076      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e072      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a35      	ldr	r2, [pc, #212]	; (8005cc0 <UART_SetConfig+0x2dc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d12a      	bne.n	8005c44 <UART_SetConfig+0x260>
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bfc:	d01a      	beq.n	8005c34 <UART_SetConfig+0x250>
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c02:	d81b      	bhi.n	8005c3c <UART_SetConfig+0x258>
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c08:	d00c      	beq.n	8005c24 <UART_SetConfig+0x240>
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0e:	d815      	bhi.n	8005c3c <UART_SetConfig+0x258>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x238>
 8005c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x248>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x258>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c22:	e052      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2a:	e04e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c32:	e04a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3a:	e046      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c42:	e042      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <UART_SetConfig+0x2c4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d13a      	bne.n	8005cc4 <UART_SetConfig+0x2e0>
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x2b0>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x2b8>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x2a0>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x2b8>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x298>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x2a8>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x2b8>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e022      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8a:	e01e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c92:	e01a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9a:	e016      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca2:	e012      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005ca4:	efff69f3 	.word	0xefff69f3
 8005ca8:	40008000 	.word	0x40008000
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40004400 	.word	0x40004400
 8005cb8:	40004800 	.word	0x40004800
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a9f      	ldr	r2, [pc, #636]	; (8005f4c <UART_SetConfig+0x568>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d17a      	bne.n	8005dca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d824      	bhi.n	8005d26 <UART_SetConfig+0x342>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <UART_SetConfig+0x300>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d17 	.word	0x08005d17
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08005d27 	.word	0x08005d27
 8005d04:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d08:	f7fe fcea 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	61f8      	str	r0, [r7, #28]
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b8f      	ldr	r3, [pc, #572]	; (8005f50 <UART_SetConfig+0x56c>)
 8005d12:	61fb      	str	r3, [r7, #28]
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fc4b 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005d1a:	61f8      	str	r0, [r7, #28]
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	61fb      	str	r3, [r7, #28]
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80fb 	beq.w	8005f30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d305      	bcc.n	8005d56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d5c:	e0e8      	b.n	8005f30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2200      	movs	r2, #0
 8005d62:	461c      	mov	r4, r3
 8005d64:	4615      	mov	r5, r2
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	022b      	lsls	r3, r5, #8
 8005d70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d74:	0222      	lsls	r2, r4, #8
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	6849      	ldr	r1, [r1, #4]
 8005d7a:	0849      	lsrs	r1, r1, #1
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	4688      	mov	r8, r1
 8005d80:	4681      	mov	r9, r0
 8005d82:	eb12 0a08 	adds.w	sl, r2, r8
 8005d86:	eb43 0b09 	adc.w	fp, r3, r9
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa ff54 	bl	8000c48 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4613      	mov	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dae:	d308      	bcc.n	8005dc2 <UART_SetConfig+0x3de>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db6:	d204      	bcs.n	8005dc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e0b6      	b.n	8005f30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dc8:	e0b2      	b.n	8005f30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd2:	d15e      	bne.n	8005e92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d828      	bhi.n	8005e2e <UART_SetConfig+0x44a>
 8005ddc:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0x400>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e2f 	.word	0x08005e2f
 8005df4:	08005e1f 	.word	0x08005e1f
 8005df8:	08005e2f 	.word	0x08005e2f
 8005dfc:	08005e2f 	.word	0x08005e2f
 8005e00:	08005e2f 	.word	0x08005e2f
 8005e04:	08005e27 	.word	0x08005e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e08:	f7fe fc6a 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005e0c:	61f8      	str	r0, [r7, #28]
        break;
 8005e0e:	e014      	b.n	8005e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e10:	f7fe fc7c 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005e14:	61f8      	str	r0, [r7, #28]
        break;
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e18:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <UART_SetConfig+0x56c>)
 8005e1a:	61fb      	str	r3, [r7, #28]
        break;
 8005e1c:	e00d      	b.n	8005e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe fbc7 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005e22:	61f8      	str	r0, [r7, #28]
        break;
 8005e24:	e009      	b.n	8005e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e2a:	61fb      	str	r3, [r7, #28]
        break;
 8005e2c:	e005      	b.n	8005e3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d077      	beq.n	8005f30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005a      	lsls	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d916      	bls.n	8005e8a <UART_SetConfig+0x4a6>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e62:	d212      	bcs.n	8005e8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f023 030f 	bic.w	r3, r3, #15
 8005e6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	8afb      	ldrh	r3, [r7, #22]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	8afa      	ldrh	r2, [r7, #22]
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e052      	b.n	8005f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e90:	e04e      	b.n	8005f30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d827      	bhi.n	8005eea <UART_SetConfig+0x506>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <UART_SetConfig+0x4bc>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec4:	f7fe fc0c 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	61f8      	str	r0, [r7, #28]
        break;
 8005eca:	e014      	b.n	8005ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fe fc1e 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8005ed0:	61f8      	str	r0, [r7, #28]
        break;
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <UART_SetConfig+0x56c>)
 8005ed6:	61fb      	str	r3, [r7, #28]
        break;
 8005ed8:	e00d      	b.n	8005ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fe fb69 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8005ede:	61f8      	str	r0, [r7, #28]
        break;
 8005ee0:	e009      	b.n	8005ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	61fb      	str	r3, [r7, #28]
        break;
 8005ee8:	e005      	b.n	8005ef6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d019      	beq.n	8005f30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	085a      	lsrs	r2, r3, #1
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d909      	bls.n	8005f2a <UART_SetConfig+0x546>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1c:	d205      	bcs.n	8005f2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	e002      	b.n	8005f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40008000 	.word	0x40008000
 8005f50:	00f42400 	.word	0x00f42400

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fb fda6 	bl	8001bf8 <HAL_GetTick>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10e      	bne.n	80060da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f82d 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e023      	b.n	8006122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d10e      	bne.n	8006106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f817 	bl	800612a <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e00d      	b.n	8006122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b09c      	sub	sp, #112	; 0x70
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613a:	e0a5      	b.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006142:	f000 80a1 	beq.w	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fb fd57 	bl	8001bf8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <UART_WaitOnFlagUntilTimeout+0x32>
 8006156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006158:	2b00      	cmp	r3, #0
 800615a:	d13e      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800617c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e6      	bne.n	800615c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	663b      	str	r3, [r7, #96]	; 0x60
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e067      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d04f      	beq.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f6:	d147      	bne.n	8006288 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006200:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	613b      	str	r3, [r7, #16]
   return(result);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	66bb      	str	r3, [r7, #104]	; 0x68
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3308      	adds	r3, #8
 8006252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006254:	623a      	str	r2, [r7, #32]
 8006256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69f9      	ldr	r1, [r7, #28]
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	61bb      	str	r3, [r7, #24]
   return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e010      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	f43f af4a 	beq.w	800613c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3770      	adds	r7, #112	; 0x70
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b097      	sub	sp, #92	; 0x5c
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	d10e      	bne.n	8006306 <UART_Start_Receive_IT+0x52>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <UART_Start_Receive_IT+0x48>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062fa:	e02d      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	22ff      	movs	r2, #255	; 0xff
 8006300:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006304:	e028      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <UART_Start_Receive_IT+0x76>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <UART_Start_Receive_IT+0x6c>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	22ff      	movs	r2, #255	; 0xff
 800631a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800631e:	e01b      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	227f      	movs	r2, #127	; 0x7f
 8006324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006328:	e016      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006332:	d10d      	bne.n	8006350 <UART_Start_Receive_IT+0x9c>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <UART_Start_Receive_IT+0x92>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	227f      	movs	r2, #127	; 0x7f
 8006340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006344:	e008      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	223f      	movs	r2, #63	; 0x3f
 800634a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800634e:	e003      	b.n	8006358 <UART_Start_Receive_IT+0xa4>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2222      	movs	r2, #34	; 0x22
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	657b      	str	r3, [r7, #84]	; 0x54
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3308      	adds	r3, #8
 8006384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006386:	64ba      	str	r2, [r7, #72]	; 0x48
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800638c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	d107      	bne.n	80063b4 <UART_Start_Receive_IT+0x100>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4a24      	ldr	r2, [pc, #144]	; (8006440 <UART_Start_Receive_IT+0x18c>)
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
 80063b2:	e002      	b.n	80063ba <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a23      	ldr	r2, [pc, #140]	; (8006444 <UART_Start_Receive_IT+0x190>)
 80063b8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80063de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_Start_Receive_IT+0x116>
 80063fc:	e018      	b.n	8006430 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	613b      	str	r3, [r7, #16]
   return(result);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f043 0320 	orr.w	r3, r3, #32
 8006412:	653b      	str	r3, [r7, #80]	; 0x50
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	61bb      	str	r3, [r7, #24]
   return(result);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	375c      	adds	r7, #92	; 0x5c
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	080066ef 	.word	0x080066ef
 8006444:	0800658f 	.word	0x0800658f

08006448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b095      	sub	sp, #84	; 0x54
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800646e:	643b      	str	r3, [r7, #64]	; 0x40
 8006470:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e6      	bne.n	8006450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	61fb      	str	r3, [r7, #28]
   return(result);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	64bb      	str	r3, [r7, #72]	; 0x48
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d118      	bne.n	80064f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f023 0310 	bic.w	r3, r3, #16
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6979      	ldr	r1, [r7, #20]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006502:	bf00      	nop
 8006504:	3754      	adds	r7, #84	; 0x54
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff fa43 	bl	80059b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b088      	sub	sp, #32
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	613b      	str	r3, [r7, #16]
   return(result);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fa0f 	bl	80059a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006586:	bf00      	nop
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b096      	sub	sp, #88	; 0x58
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800659c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a4:	2b22      	cmp	r3, #34	; 0x22
 80065a6:	f040 8094 	bne.w	80066d2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065b8:	b2d9      	uxtb	r1, r3
 80065ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	400a      	ands	r2, r1
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d179      	bne.n	80066e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006606:	653b      	str	r3, [r7, #80]	; 0x50
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e6      	bne.n	80065f2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	623b      	str	r3, [r7, #32]
   return(result);
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006644:	633a      	str	r2, [r7, #48]	; 0x30
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	2b01      	cmp	r3, #1
 800666a:	d12e      	bne.n	80066ca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0310 	bic.w	r3, r3, #16
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69b9      	ldr	r1, [r7, #24]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	617b      	str	r3, [r7, #20]
   return(result);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	2b10      	cmp	r3, #16
 80066b0:	d103      	bne.n	80066ba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2210      	movs	r2, #16
 80066b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff f982 	bl	80059cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066c8:	e00d      	b.n	80066e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fd24 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 80066d0:	e009      	b.n	80066e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	8b1b      	ldrh	r3, [r3, #24]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	b292      	uxth	r2, r2
 80066e4:	831a      	strh	r2, [r3, #24]
}
 80066e6:	bf00      	nop
 80066e8:	3758      	adds	r7, #88	; 0x58
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b096      	sub	sp, #88	; 0x58
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006704:	2b22      	cmp	r3, #34	; 0x22
 8006706:	f040 8094 	bne.w	8006832 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006710:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006718:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800671a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800671e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006722:	4013      	ands	r3, r2
 8006724:	b29a      	uxth	r2, r3
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	1c9a      	adds	r2, r3, #2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d179      	bne.n	8006846 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
 8006772:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3308      	adds	r3, #8
 800678a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	61fb      	str	r3, [r7, #28]
   return(result);
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f023 0301 	bic.w	r3, r3, #1
 800679a:	64bb      	str	r3, [r7, #72]	; 0x48
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3308      	adds	r3, #8
 80067a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d12e      	bne.n	800682a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0310 	bic.w	r3, r3, #16
 80067e6:	647b      	str	r3, [r7, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6979      	ldr	r1, [r7, #20]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	613b      	str	r3, [r7, #16]
   return(result);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d103      	bne.n	800681a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff f8d2 	bl	80059cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006828:	e00d      	b.n	8006846 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fc74 	bl	8001118 <HAL_UART_RxCpltCallback>
}
 8006830:	e009      	b.n	8006846 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	8b1b      	ldrh	r3, [r3, #24]
 8006838:	b29a      	uxth	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0208 	orr.w	r2, r2, #8
 8006842:	b292      	uxth	r2, r2
 8006844:	831a      	strh	r2, [r3, #24]
}
 8006846:	bf00      	nop
 8006848:	3758      	adds	r7, #88	; 0x58
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000010 	.word	0x20000010

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4d0d      	ldr	r5, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1b64      	subs	r4, r4, r5
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2600      	movs	r6, #0
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4d0b      	ldr	r5, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f002 ff04 	bl	8009690 <_init>
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2600      	movs	r6, #0
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	08009b8c 	.word	0x08009b8c
 80068ac:	08009b8c 	.word	0x08009b8c
 80068b0:	08009b8c 	.word	0x08009b8c
 80068b4:	08009b90 	.word	0x08009b90

080068b8 <memset>:
 80068b8:	4402      	add	r2, r0
 80068ba:	4603      	mov	r3, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <__cvt>:
 80068c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	ec55 4b10 	vmov	r4, r5, d0
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	460e      	mov	r6, r1
 80068d4:	4619      	mov	r1, r3
 80068d6:	462b      	mov	r3, r5
 80068d8:	bfbb      	ittet	lt
 80068da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068de:	461d      	movlt	r5, r3
 80068e0:	2300      	movge	r3, #0
 80068e2:	232d      	movlt	r3, #45	; 0x2d
 80068e4:	700b      	strb	r3, [r1, #0]
 80068e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068ec:	4691      	mov	r9, r2
 80068ee:	f023 0820 	bic.w	r8, r3, #32
 80068f2:	bfbc      	itt	lt
 80068f4:	4622      	movlt	r2, r4
 80068f6:	4614      	movlt	r4, r2
 80068f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068fc:	d005      	beq.n	800690a <__cvt+0x42>
 80068fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006902:	d100      	bne.n	8006906 <__cvt+0x3e>
 8006904:	3601      	adds	r6, #1
 8006906:	2102      	movs	r1, #2
 8006908:	e000      	b.n	800690c <__cvt+0x44>
 800690a:	2103      	movs	r1, #3
 800690c:	ab03      	add	r3, sp, #12
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	ab02      	add	r3, sp, #8
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	ec45 4b10 	vmov	d0, r4, r5
 8006918:	4653      	mov	r3, sl
 800691a:	4632      	mov	r2, r6
 800691c:	f000 fcec 	bl	80072f8 <_dtoa_r>
 8006920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006924:	4607      	mov	r7, r0
 8006926:	d102      	bne.n	800692e <__cvt+0x66>
 8006928:	f019 0f01 	tst.w	r9, #1
 800692c:	d022      	beq.n	8006974 <__cvt+0xac>
 800692e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006932:	eb07 0906 	add.w	r9, r7, r6
 8006936:	d110      	bne.n	800695a <__cvt+0x92>
 8006938:	783b      	ldrb	r3, [r7, #0]
 800693a:	2b30      	cmp	r3, #48	; 0x30
 800693c:	d10a      	bne.n	8006954 <__cvt+0x8c>
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7fa f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800694a:	b918      	cbnz	r0, 8006954 <__cvt+0x8c>
 800694c:	f1c6 0601 	rsb	r6, r6, #1
 8006950:	f8ca 6000 	str.w	r6, [sl]
 8006954:	f8da 3000 	ldr.w	r3, [sl]
 8006958:	4499      	add	r9, r3
 800695a:	2200      	movs	r2, #0
 800695c:	2300      	movs	r3, #0
 800695e:	4620      	mov	r0, r4
 8006960:	4629      	mov	r1, r5
 8006962:	f7fa f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006966:	b108      	cbz	r0, 800696c <__cvt+0xa4>
 8006968:	f8cd 900c 	str.w	r9, [sp, #12]
 800696c:	2230      	movs	r2, #48	; 0x30
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	454b      	cmp	r3, r9
 8006972:	d307      	bcc.n	8006984 <__cvt+0xbc>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006978:	1bdb      	subs	r3, r3, r7
 800697a:	4638      	mov	r0, r7
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	b004      	add	sp, #16
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	9103      	str	r1, [sp, #12]
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e7f0      	b.n	800696e <__cvt+0xa6>

0800698c <__exponent>:
 800698c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800698e:	4603      	mov	r3, r0
 8006990:	2900      	cmp	r1, #0
 8006992:	bfb8      	it	lt
 8006994:	4249      	neglt	r1, r1
 8006996:	f803 2b02 	strb.w	r2, [r3], #2
 800699a:	bfb4      	ite	lt
 800699c:	222d      	movlt	r2, #45	; 0x2d
 800699e:	222b      	movge	r2, #43	; 0x2b
 80069a0:	2909      	cmp	r1, #9
 80069a2:	7042      	strb	r2, [r0, #1]
 80069a4:	dd2a      	ble.n	80069fc <__exponent+0x70>
 80069a6:	f10d 0407 	add.w	r4, sp, #7
 80069aa:	46a4      	mov	ip, r4
 80069ac:	270a      	movs	r7, #10
 80069ae:	46a6      	mov	lr, r4
 80069b0:	460a      	mov	r2, r1
 80069b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80069b6:	fb07 1516 	mls	r5, r7, r6, r1
 80069ba:	3530      	adds	r5, #48	; 0x30
 80069bc:	2a63      	cmp	r2, #99	; 0x63
 80069be:	f104 34ff 	add.w	r4, r4, #4294967295
 80069c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069c6:	4631      	mov	r1, r6
 80069c8:	dcf1      	bgt.n	80069ae <__exponent+0x22>
 80069ca:	3130      	adds	r1, #48	; 0x30
 80069cc:	f1ae 0502 	sub.w	r5, lr, #2
 80069d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069d4:	1c44      	adds	r4, r0, #1
 80069d6:	4629      	mov	r1, r5
 80069d8:	4561      	cmp	r1, ip
 80069da:	d30a      	bcc.n	80069f2 <__exponent+0x66>
 80069dc:	f10d 0209 	add.w	r2, sp, #9
 80069e0:	eba2 020e 	sub.w	r2, r2, lr
 80069e4:	4565      	cmp	r5, ip
 80069e6:	bf88      	it	hi
 80069e8:	2200      	movhi	r2, #0
 80069ea:	4413      	add	r3, r2
 80069ec:	1a18      	subs	r0, r3, r0
 80069ee:	b003      	add	sp, #12
 80069f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069fa:	e7ed      	b.n	80069d8 <__exponent+0x4c>
 80069fc:	2330      	movs	r3, #48	; 0x30
 80069fe:	3130      	adds	r1, #48	; 0x30
 8006a00:	7083      	strb	r3, [r0, #2]
 8006a02:	70c1      	strb	r1, [r0, #3]
 8006a04:	1d03      	adds	r3, r0, #4
 8006a06:	e7f1      	b.n	80069ec <__exponent+0x60>

08006a08 <_printf_float>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	ed2d 8b02 	vpush	{d8}
 8006a10:	b08d      	sub	sp, #52	; 0x34
 8006a12:	460c      	mov	r4, r1
 8006a14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a18:	4616      	mov	r6, r2
 8006a1a:	461f      	mov	r7, r3
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	f001 fa59 	bl	8007ed4 <_localeconv_r>
 8006a22:	f8d0 a000 	ldr.w	sl, [r0]
 8006a26:	4650      	mov	r0, sl
 8006a28:	f7f9 fbd2 	bl	80001d0 <strlen>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	9305      	str	r3, [sp, #20]
 8006a34:	f8d8 3000 	ldr.w	r3, [r8]
 8006a38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a3c:	3307      	adds	r3, #7
 8006a3e:	f023 0307 	bic.w	r3, r3, #7
 8006a42:	f103 0208 	add.w	r2, r3, #8
 8006a46:	f8c8 2000 	str.w	r2, [r8]
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006a56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a5a:	9307      	str	r3, [sp, #28]
 8006a5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a60:	ee08 0a10 	vmov	s16, r0
 8006a64:	4b9f      	ldr	r3, [pc, #636]	; (8006ce4 <_printf_float+0x2dc>)
 8006a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	f7fa f85d 	bl	8000b2c <__aeabi_dcmpun>
 8006a72:	bb88      	cbnz	r0, 8006ad8 <_printf_float+0xd0>
 8006a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a78:	4b9a      	ldr	r3, [pc, #616]	; (8006ce4 <_printf_float+0x2dc>)
 8006a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7e:	f7fa f837 	bl	8000af0 <__aeabi_dcmple>
 8006a82:	bb48      	cbnz	r0, 8006ad8 <_printf_float+0xd0>
 8006a84:	2200      	movs	r2, #0
 8006a86:	2300      	movs	r3, #0
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7fa f826 	bl	8000adc <__aeabi_dcmplt>
 8006a90:	b110      	cbz	r0, 8006a98 <_printf_float+0x90>
 8006a92:	232d      	movs	r3, #45	; 0x2d
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a98:	4b93      	ldr	r3, [pc, #588]	; (8006ce8 <_printf_float+0x2e0>)
 8006a9a:	4894      	ldr	r0, [pc, #592]	; (8006cec <_printf_float+0x2e4>)
 8006a9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006aa0:	bf94      	ite	ls
 8006aa2:	4698      	movls	r8, r3
 8006aa4:	4680      	movhi	r8, r0
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	f023 0204 	bic.w	r2, r3, #4
 8006ab0:	6022      	str	r2, [r4, #0]
 8006ab2:	f04f 0900 	mov.w	r9, #0
 8006ab6:	9700      	str	r7, [sp, #0]
 8006ab8:	4633      	mov	r3, r6
 8006aba:	aa0b      	add	r2, sp, #44	; 0x2c
 8006abc:	4621      	mov	r1, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 f9d8 	bl	8006e74 <_printf_common>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f040 8090 	bne.w	8006bea <_printf_float+0x1e2>
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	b00d      	add	sp, #52	; 0x34
 8006ad0:	ecbd 8b02 	vpop	{d8}
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7fa f824 	bl	8000b2c <__aeabi_dcmpun>
 8006ae4:	b140      	cbz	r0, 8006af8 <_printf_float+0xf0>
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bfbc      	itt	lt
 8006aec:	232d      	movlt	r3, #45	; 0x2d
 8006aee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006af2:	487f      	ldr	r0, [pc, #508]	; (8006cf0 <_printf_float+0x2e8>)
 8006af4:	4b7f      	ldr	r3, [pc, #508]	; (8006cf4 <_printf_float+0x2ec>)
 8006af6:	e7d1      	b.n	8006a9c <_printf_float+0x94>
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006afe:	9206      	str	r2, [sp, #24]
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	d13f      	bne.n	8006b84 <_printf_float+0x17c>
 8006b04:	2306      	movs	r3, #6
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	9b05      	ldr	r3, [sp, #20]
 8006b0a:	6861      	ldr	r1, [r4, #4]
 8006b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b10:	2300      	movs	r3, #0
 8006b12:	9303      	str	r3, [sp, #12]
 8006b14:	ab0a      	add	r3, sp, #40	; 0x28
 8006b16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b1a:	ab09      	add	r3, sp, #36	; 0x24
 8006b1c:	ec49 8b10 	vmov	d0, r8, r9
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	6022      	str	r2, [r4, #0]
 8006b24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f7ff fecd 	bl	80068c8 <__cvt>
 8006b2e:	9b06      	ldr	r3, [sp, #24]
 8006b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b32:	2b47      	cmp	r3, #71	; 0x47
 8006b34:	4680      	mov	r8, r0
 8006b36:	d108      	bne.n	8006b4a <_printf_float+0x142>
 8006b38:	1cc8      	adds	r0, r1, #3
 8006b3a:	db02      	blt.n	8006b42 <_printf_float+0x13a>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	4299      	cmp	r1, r3
 8006b40:	dd41      	ble.n	8006bc6 <_printf_float+0x1be>
 8006b42:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b46:	fa5f fb8b 	uxtb.w	fp, fp
 8006b4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b4e:	d820      	bhi.n	8006b92 <_printf_float+0x18a>
 8006b50:	3901      	subs	r1, #1
 8006b52:	465a      	mov	r2, fp
 8006b54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b58:	9109      	str	r1, [sp, #36]	; 0x24
 8006b5a:	f7ff ff17 	bl	800698c <__exponent>
 8006b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b60:	1813      	adds	r3, r2, r0
 8006b62:	2a01      	cmp	r2, #1
 8006b64:	4681      	mov	r9, r0
 8006b66:	6123      	str	r3, [r4, #16]
 8006b68:	dc02      	bgt.n	8006b70 <_printf_float+0x168>
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	07d2      	lsls	r2, r2, #31
 8006b6e:	d501      	bpl.n	8006b74 <_printf_float+0x16c>
 8006b70:	3301      	adds	r3, #1
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d09c      	beq.n	8006ab6 <_printf_float+0xae>
 8006b7c:	232d      	movs	r3, #45	; 0x2d
 8006b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b82:	e798      	b.n	8006ab6 <_printf_float+0xae>
 8006b84:	9a06      	ldr	r2, [sp, #24]
 8006b86:	2a47      	cmp	r2, #71	; 0x47
 8006b88:	d1be      	bne.n	8006b08 <_printf_float+0x100>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1bc      	bne.n	8006b08 <_printf_float+0x100>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7b9      	b.n	8006b06 <_printf_float+0xfe>
 8006b92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b96:	d118      	bne.n	8006bca <_printf_float+0x1c2>
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	dd0b      	ble.n	8006bb6 <_printf_float+0x1ae>
 8006b9e:	6121      	str	r1, [r4, #16]
 8006ba0:	b913      	cbnz	r3, 8006ba8 <_printf_float+0x1a0>
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	07d0      	lsls	r0, r2, #31
 8006ba6:	d502      	bpl.n	8006bae <_printf_float+0x1a6>
 8006ba8:	3301      	adds	r3, #1
 8006baa:	440b      	add	r3, r1
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bb0:	f04f 0900 	mov.w	r9, #0
 8006bb4:	e7de      	b.n	8006b74 <_printf_float+0x16c>
 8006bb6:	b913      	cbnz	r3, 8006bbe <_printf_float+0x1b6>
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	07d2      	lsls	r2, r2, #31
 8006bbc:	d501      	bpl.n	8006bc2 <_printf_float+0x1ba>
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	e7f4      	b.n	8006bac <_printf_float+0x1a4>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e7f2      	b.n	8006bac <_printf_float+0x1a4>
 8006bc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	db05      	blt.n	8006bdc <_printf_float+0x1d4>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	6121      	str	r1, [r4, #16]
 8006bd4:	07d8      	lsls	r0, r3, #31
 8006bd6:	d5ea      	bpl.n	8006bae <_printf_float+0x1a6>
 8006bd8:	1c4b      	adds	r3, r1, #1
 8006bda:	e7e7      	b.n	8006bac <_printf_float+0x1a4>
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	bfd4      	ite	le
 8006be0:	f1c1 0202 	rsble	r2, r1, #2
 8006be4:	2201      	movgt	r2, #1
 8006be6:	4413      	add	r3, r2
 8006be8:	e7e0      	b.n	8006bac <_printf_float+0x1a4>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	055a      	lsls	r2, r3, #21
 8006bee:	d407      	bmi.n	8006c00 <_printf_float+0x1f8>
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d12c      	bne.n	8006c58 <_printf_float+0x250>
 8006bfe:	e764      	b.n	8006aca <_printf_float+0xc2>
 8006c00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c04:	f240 80e0 	bls.w	8006dc8 <_printf_float+0x3c0>
 8006c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f7f9 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d034      	beq.n	8006c82 <_printf_float+0x27a>
 8006c18:	4a37      	ldr	r2, [pc, #220]	; (8006cf8 <_printf_float+0x2f0>)
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	f43f af51 	beq.w	8006aca <_printf_float+0xc2>
 8006c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	db02      	blt.n	8006c36 <_printf_float+0x22e>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	07d8      	lsls	r0, r3, #31
 8006c34:	d510      	bpl.n	8006c58 <_printf_float+0x250>
 8006c36:	ee18 3a10 	vmov	r3, s16
 8006c3a:	4652      	mov	r2, sl
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	f43f af41 	beq.w	8006aca <_printf_float+0xc2>
 8006c48:	f04f 0800 	mov.w	r8, #0
 8006c4c:	f104 091a 	add.w	r9, r4, #26
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	3b01      	subs	r3, #1
 8006c54:	4543      	cmp	r3, r8
 8006c56:	dc09      	bgt.n	8006c6c <_printf_float+0x264>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	079b      	lsls	r3, r3, #30
 8006c5c:	f100 8105 	bmi.w	8006e6a <_printf_float+0x462>
 8006c60:	68e0      	ldr	r0, [r4, #12]
 8006c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c64:	4298      	cmp	r0, r3
 8006c66:	bfb8      	it	lt
 8006c68:	4618      	movlt	r0, r3
 8006c6a:	e730      	b.n	8006ace <_printf_float+0xc6>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	464a      	mov	r2, r9
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f af27 	beq.w	8006aca <_printf_float+0xc2>
 8006c7c:	f108 0801 	add.w	r8, r8, #1
 8006c80:	e7e6      	b.n	8006c50 <_printf_float+0x248>
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc39      	bgt.n	8006cfc <_printf_float+0x2f4>
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <_printf_float+0x2f0>)
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af19 	beq.w	8006aca <_printf_float+0xc2>
 8006c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d102      	bne.n	8006ca6 <_printf_float+0x29e>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07d9      	lsls	r1, r3, #31
 8006ca4:	d5d8      	bpl.n	8006c58 <_printf_float+0x250>
 8006ca6:	ee18 3a10 	vmov	r3, s16
 8006caa:	4652      	mov	r2, sl
 8006cac:	4631      	mov	r1, r6
 8006cae:	4628      	mov	r0, r5
 8006cb0:	47b8      	blx	r7
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f43f af09 	beq.w	8006aca <_printf_float+0xc2>
 8006cb8:	f04f 0900 	mov.w	r9, #0
 8006cbc:	f104 0a1a 	add.w	sl, r4, #26
 8006cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc2:	425b      	negs	r3, r3
 8006cc4:	454b      	cmp	r3, r9
 8006cc6:	dc01      	bgt.n	8006ccc <_printf_float+0x2c4>
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cca:	e792      	b.n	8006bf2 <_printf_float+0x1ea>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4652      	mov	r2, sl
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f aef7 	beq.w	8006aca <_printf_float+0xc2>
 8006cdc:	f109 0901 	add.w	r9, r9, #1
 8006ce0:	e7ee      	b.n	8006cc0 <_printf_float+0x2b8>
 8006ce2:	bf00      	nop
 8006ce4:	7fefffff 	.word	0x7fefffff
 8006ce8:	080097b0 	.word	0x080097b0
 8006cec:	080097b4 	.word	0x080097b4
 8006cf0:	080097bc 	.word	0x080097bc
 8006cf4:	080097b8 	.word	0x080097b8
 8006cf8:	080097c0 	.word	0x080097c0
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bfa8      	it	ge
 8006d04:	461a      	movge	r2, r3
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	4691      	mov	r9, r2
 8006d0a:	dc37      	bgt.n	8006d7c <_printf_float+0x374>
 8006d0c:	f04f 0b00 	mov.w	fp, #0
 8006d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d14:	f104 021a 	add.w	r2, r4, #26
 8006d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	eba3 0309 	sub.w	r3, r3, r9
 8006d20:	455b      	cmp	r3, fp
 8006d22:	dc33      	bgt.n	8006d8c <_printf_float+0x384>
 8006d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	db3b      	blt.n	8006da4 <_printf_float+0x39c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07da      	lsls	r2, r3, #31
 8006d30:	d438      	bmi.n	8006da4 <_printf_float+0x39c>
 8006d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d34:	9a05      	ldr	r2, [sp, #20]
 8006d36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d38:	1a9a      	subs	r2, r3, r2
 8006d3a:	eba3 0901 	sub.w	r9, r3, r1
 8006d3e:	4591      	cmp	r9, r2
 8006d40:	bfa8      	it	ge
 8006d42:	4691      	movge	r9, r2
 8006d44:	f1b9 0f00 	cmp.w	r9, #0
 8006d48:	dc35      	bgt.n	8006db6 <_printf_float+0x3ae>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d52:	f104 0a1a 	add.w	sl, r4, #26
 8006d56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	eba3 0309 	sub.w	r3, r3, r9
 8006d60:	4543      	cmp	r3, r8
 8006d62:	f77f af79 	ble.w	8006c58 <_printf_float+0x250>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f aeaa 	beq.w	8006aca <_printf_float+0xc2>
 8006d76:	f108 0801 	add.w	r8, r8, #1
 8006d7a:	e7ec      	b.n	8006d56 <_printf_float+0x34e>
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4642      	mov	r2, r8
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	d1c0      	bne.n	8006d0c <_printf_float+0x304>
 8006d8a:	e69e      	b.n	8006aca <_printf_float+0xc2>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	9205      	str	r2, [sp, #20]
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f ae97 	beq.w	8006aca <_printf_float+0xc2>
 8006d9c:	9a05      	ldr	r2, [sp, #20]
 8006d9e:	f10b 0b01 	add.w	fp, fp, #1
 8006da2:	e7b9      	b.n	8006d18 <_printf_float+0x310>
 8006da4:	ee18 3a10 	vmov	r3, s16
 8006da8:	4652      	mov	r2, sl
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	d1be      	bne.n	8006d32 <_printf_float+0x32a>
 8006db4:	e689      	b.n	8006aca <_printf_float+0xc2>
 8006db6:	9a05      	ldr	r2, [sp, #20]
 8006db8:	464b      	mov	r3, r9
 8006dba:	4442      	add	r2, r8
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d1c1      	bne.n	8006d4a <_printf_float+0x342>
 8006dc6:	e680      	b.n	8006aca <_printf_float+0xc2>
 8006dc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dca:	2a01      	cmp	r2, #1
 8006dcc:	dc01      	bgt.n	8006dd2 <_printf_float+0x3ca>
 8006dce:	07db      	lsls	r3, r3, #31
 8006dd0:	d538      	bpl.n	8006e44 <_printf_float+0x43c>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f43f ae74 	beq.w	8006aca <_printf_float+0xc2>
 8006de2:	ee18 3a10 	vmov	r3, s16
 8006de6:	4652      	mov	r2, sl
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	f43f ae6b 	beq.w	8006aca <_printf_float+0xc2>
 8006df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f7f9 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e00:	b9d8      	cbnz	r0, 8006e3a <_printf_float+0x432>
 8006e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e04:	f108 0201 	add.w	r2, r8, #1
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	d10e      	bne.n	8006e32 <_printf_float+0x42a>
 8006e14:	e659      	b.n	8006aca <_printf_float+0xc2>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4652      	mov	r2, sl
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae52 	beq.w	8006aca <_printf_float+0xc2>
 8006e26:	f108 0801 	add.w	r8, r8, #1
 8006e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4543      	cmp	r3, r8
 8006e30:	dcf1      	bgt.n	8006e16 <_printf_float+0x40e>
 8006e32:	464b      	mov	r3, r9
 8006e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e38:	e6dc      	b.n	8006bf4 <_printf_float+0x1ec>
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	f104 0a1a 	add.w	sl, r4, #26
 8006e42:	e7f2      	b.n	8006e2a <_printf_float+0x422>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4642      	mov	r2, r8
 8006e48:	e7df      	b.n	8006e0a <_printf_float+0x402>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	464a      	mov	r2, r9
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f ae38 	beq.w	8006aca <_printf_float+0xc2>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	68e3      	ldr	r3, [r4, #12]
 8006e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e62:	1a5b      	subs	r3, r3, r1
 8006e64:	4543      	cmp	r3, r8
 8006e66:	dcf0      	bgt.n	8006e4a <_printf_float+0x442>
 8006e68:	e6fa      	b.n	8006c60 <_printf_float+0x258>
 8006e6a:	f04f 0800 	mov.w	r8, #0
 8006e6e:	f104 0919 	add.w	r9, r4, #25
 8006e72:	e7f4      	b.n	8006e5e <_printf_float+0x456>

08006e74 <_printf_common>:
 8006e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e78:	4616      	mov	r6, r2
 8006e7a:	4699      	mov	r9, r3
 8006e7c:	688a      	ldr	r2, [r1, #8]
 8006e7e:	690b      	ldr	r3, [r1, #16]
 8006e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	bfb8      	it	lt
 8006e88:	4613      	movlt	r3, r2
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e90:	4607      	mov	r7, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	b10a      	cbz	r2, 8006e9a <_printf_common+0x26>
 8006e96:	3301      	adds	r3, #1
 8006e98:	6033      	str	r3, [r6, #0]
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	0699      	lsls	r1, r3, #26
 8006e9e:	bf42      	ittt	mi
 8006ea0:	6833      	ldrmi	r3, [r6, #0]
 8006ea2:	3302      	addmi	r3, #2
 8006ea4:	6033      	strmi	r3, [r6, #0]
 8006ea6:	6825      	ldr	r5, [r4, #0]
 8006ea8:	f015 0506 	ands.w	r5, r5, #6
 8006eac:	d106      	bne.n	8006ebc <_printf_common+0x48>
 8006eae:	f104 0a19 	add.w	sl, r4, #25
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	6832      	ldr	r2, [r6, #0]
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	dc26      	bgt.n	8006f0a <_printf_common+0x96>
 8006ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ec0:	1e13      	subs	r3, r2, #0
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	bf18      	it	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	0692      	lsls	r2, r2, #26
 8006eca:	d42b      	bmi.n	8006f24 <_printf_common+0xb0>
 8006ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c0      	blx	r8
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d01e      	beq.n	8006f18 <_printf_common+0xa4>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	68e5      	ldr	r5, [r4, #12]
 8006ede:	6832      	ldr	r2, [r6, #0]
 8006ee0:	f003 0306 	and.w	r3, r3, #6
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	bf08      	it	eq
 8006ee8:	1aad      	subeq	r5, r5, r2
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	6922      	ldr	r2, [r4, #16]
 8006eee:	bf0c      	ite	eq
 8006ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ef4:	2500      	movne	r5, #0
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	bfc4      	itt	gt
 8006efa:	1a9b      	subgt	r3, r3, r2
 8006efc:	18ed      	addgt	r5, r5, r3
 8006efe:	2600      	movs	r6, #0
 8006f00:	341a      	adds	r4, #26
 8006f02:	42b5      	cmp	r5, r6
 8006f04:	d11a      	bne.n	8006f3c <_printf_common+0xc8>
 8006f06:	2000      	movs	r0, #0
 8006f08:	e008      	b.n	8006f1c <_printf_common+0xa8>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4638      	mov	r0, r7
 8006f12:	47c0      	blx	r8
 8006f14:	3001      	adds	r0, #1
 8006f16:	d103      	bne.n	8006f20 <_printf_common+0xac>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f20:	3501      	adds	r5, #1
 8006f22:	e7c6      	b.n	8006eb2 <_printf_common+0x3e>
 8006f24:	18e1      	adds	r1, r4, r3
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	2030      	movs	r0, #48	; 0x30
 8006f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f2e:	4422      	add	r2, r4
 8006f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f38:	3302      	adds	r3, #2
 8006f3a:	e7c7      	b.n	8006ecc <_printf_common+0x58>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4622      	mov	r2, r4
 8006f40:	4649      	mov	r1, r9
 8006f42:	4638      	mov	r0, r7
 8006f44:	47c0      	blx	r8
 8006f46:	3001      	adds	r0, #1
 8006f48:	d0e6      	beq.n	8006f18 <_printf_common+0xa4>
 8006f4a:	3601      	adds	r6, #1
 8006f4c:	e7d9      	b.n	8006f02 <_printf_common+0x8e>
	...

08006f50 <_printf_i>:
 8006f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	7e0f      	ldrb	r7, [r1, #24]
 8006f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f58:	2f78      	cmp	r7, #120	; 0x78
 8006f5a:	4691      	mov	r9, r2
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	469a      	mov	sl, r3
 8006f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f66:	d807      	bhi.n	8006f78 <_printf_i+0x28>
 8006f68:	2f62      	cmp	r7, #98	; 0x62
 8006f6a:	d80a      	bhi.n	8006f82 <_printf_i+0x32>
 8006f6c:	2f00      	cmp	r7, #0
 8006f6e:	f000 80d8 	beq.w	8007122 <_printf_i+0x1d2>
 8006f72:	2f58      	cmp	r7, #88	; 0x58
 8006f74:	f000 80a3 	beq.w	80070be <_printf_i+0x16e>
 8006f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f80:	e03a      	b.n	8006ff8 <_printf_i+0xa8>
 8006f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f86:	2b15      	cmp	r3, #21
 8006f88:	d8f6      	bhi.n	8006f78 <_printf_i+0x28>
 8006f8a:	a101      	add	r1, pc, #4	; (adr r1, 8006f90 <_printf_i+0x40>)
 8006f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f90:	08006fe9 	.word	0x08006fe9
 8006f94:	08006ffd 	.word	0x08006ffd
 8006f98:	08006f79 	.word	0x08006f79
 8006f9c:	08006f79 	.word	0x08006f79
 8006fa0:	08006f79 	.word	0x08006f79
 8006fa4:	08006f79 	.word	0x08006f79
 8006fa8:	08006ffd 	.word	0x08006ffd
 8006fac:	08006f79 	.word	0x08006f79
 8006fb0:	08006f79 	.word	0x08006f79
 8006fb4:	08006f79 	.word	0x08006f79
 8006fb8:	08006f79 	.word	0x08006f79
 8006fbc:	08007109 	.word	0x08007109
 8006fc0:	0800702d 	.word	0x0800702d
 8006fc4:	080070eb 	.word	0x080070eb
 8006fc8:	08006f79 	.word	0x08006f79
 8006fcc:	08006f79 	.word	0x08006f79
 8006fd0:	0800712b 	.word	0x0800712b
 8006fd4:	08006f79 	.word	0x08006f79
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	08006f79 	.word	0x08006f79
 8006fe0:	08006f79 	.word	0x08006f79
 8006fe4:	080070f3 	.word	0x080070f3
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	1d1a      	adds	r2, r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0a3      	b.n	8007144 <_printf_i+0x1f4>
 8006ffc:	6820      	ldr	r0, [r4, #0]
 8006ffe:	6829      	ldr	r1, [r5, #0]
 8007000:	0606      	lsls	r6, r0, #24
 8007002:	f101 0304 	add.w	r3, r1, #4
 8007006:	d50a      	bpl.n	800701e <_printf_i+0xce>
 8007008:	680e      	ldr	r6, [r1, #0]
 800700a:	602b      	str	r3, [r5, #0]
 800700c:	2e00      	cmp	r6, #0
 800700e:	da03      	bge.n	8007018 <_printf_i+0xc8>
 8007010:	232d      	movs	r3, #45	; 0x2d
 8007012:	4276      	negs	r6, r6
 8007014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007018:	485e      	ldr	r0, [pc, #376]	; (8007194 <_printf_i+0x244>)
 800701a:	230a      	movs	r3, #10
 800701c:	e019      	b.n	8007052 <_printf_i+0x102>
 800701e:	680e      	ldr	r6, [r1, #0]
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007026:	bf18      	it	ne
 8007028:	b236      	sxthne	r6, r6
 800702a:	e7ef      	b.n	800700c <_printf_i+0xbc>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	1d19      	adds	r1, r3, #4
 8007032:	6029      	str	r1, [r5, #0]
 8007034:	0601      	lsls	r1, r0, #24
 8007036:	d501      	bpl.n	800703c <_printf_i+0xec>
 8007038:	681e      	ldr	r6, [r3, #0]
 800703a:	e002      	b.n	8007042 <_printf_i+0xf2>
 800703c:	0646      	lsls	r6, r0, #25
 800703e:	d5fb      	bpl.n	8007038 <_printf_i+0xe8>
 8007040:	881e      	ldrh	r6, [r3, #0]
 8007042:	4854      	ldr	r0, [pc, #336]	; (8007194 <_printf_i+0x244>)
 8007044:	2f6f      	cmp	r7, #111	; 0x6f
 8007046:	bf0c      	ite	eq
 8007048:	2308      	moveq	r3, #8
 800704a:	230a      	movne	r3, #10
 800704c:	2100      	movs	r1, #0
 800704e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007052:	6865      	ldr	r5, [r4, #4]
 8007054:	60a5      	str	r5, [r4, #8]
 8007056:	2d00      	cmp	r5, #0
 8007058:	bfa2      	ittt	ge
 800705a:	6821      	ldrge	r1, [r4, #0]
 800705c:	f021 0104 	bicge.w	r1, r1, #4
 8007060:	6021      	strge	r1, [r4, #0]
 8007062:	b90e      	cbnz	r6, 8007068 <_printf_i+0x118>
 8007064:	2d00      	cmp	r5, #0
 8007066:	d04d      	beq.n	8007104 <_printf_i+0x1b4>
 8007068:	4615      	mov	r5, r2
 800706a:	fbb6 f1f3 	udiv	r1, r6, r3
 800706e:	fb03 6711 	mls	r7, r3, r1, r6
 8007072:	5dc7      	ldrb	r7, [r0, r7]
 8007074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007078:	4637      	mov	r7, r6
 800707a:	42bb      	cmp	r3, r7
 800707c:	460e      	mov	r6, r1
 800707e:	d9f4      	bls.n	800706a <_printf_i+0x11a>
 8007080:	2b08      	cmp	r3, #8
 8007082:	d10b      	bne.n	800709c <_printf_i+0x14c>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	07de      	lsls	r6, r3, #31
 8007088:	d508      	bpl.n	800709c <_printf_i+0x14c>
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	6861      	ldr	r1, [r4, #4]
 800708e:	4299      	cmp	r1, r3
 8007090:	bfde      	ittt	le
 8007092:	2330      	movle	r3, #48	; 0x30
 8007094:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007098:	f105 35ff 	addle.w	r5, r5, #4294967295
 800709c:	1b52      	subs	r2, r2, r5
 800709e:	6122      	str	r2, [r4, #16]
 80070a0:	f8cd a000 	str.w	sl, [sp]
 80070a4:	464b      	mov	r3, r9
 80070a6:	aa03      	add	r2, sp, #12
 80070a8:	4621      	mov	r1, r4
 80070aa:	4640      	mov	r0, r8
 80070ac:	f7ff fee2 	bl	8006e74 <_printf_common>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d14c      	bne.n	800714e <_printf_i+0x1fe>
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	b004      	add	sp, #16
 80070ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070be:	4835      	ldr	r0, [pc, #212]	; (8007194 <_printf_i+0x244>)
 80070c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070c4:	6829      	ldr	r1, [r5, #0]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80070cc:	6029      	str	r1, [r5, #0]
 80070ce:	061d      	lsls	r5, r3, #24
 80070d0:	d514      	bpl.n	80070fc <_printf_i+0x1ac>
 80070d2:	07df      	lsls	r7, r3, #31
 80070d4:	bf44      	itt	mi
 80070d6:	f043 0320 	orrmi.w	r3, r3, #32
 80070da:	6023      	strmi	r3, [r4, #0]
 80070dc:	b91e      	cbnz	r6, 80070e6 <_printf_i+0x196>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f023 0320 	bic.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	2310      	movs	r3, #16
 80070e8:	e7b0      	b.n	800704c <_printf_i+0xfc>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	f043 0320 	orr.w	r3, r3, #32
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	2378      	movs	r3, #120	; 0x78
 80070f4:	4828      	ldr	r0, [pc, #160]	; (8007198 <_printf_i+0x248>)
 80070f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070fa:	e7e3      	b.n	80070c4 <_printf_i+0x174>
 80070fc:	0659      	lsls	r1, r3, #25
 80070fe:	bf48      	it	mi
 8007100:	b2b6      	uxthmi	r6, r6
 8007102:	e7e6      	b.n	80070d2 <_printf_i+0x182>
 8007104:	4615      	mov	r5, r2
 8007106:	e7bb      	b.n	8007080 <_printf_i+0x130>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	6826      	ldr	r6, [r4, #0]
 800710c:	6961      	ldr	r1, [r4, #20]
 800710e:	1d18      	adds	r0, r3, #4
 8007110:	6028      	str	r0, [r5, #0]
 8007112:	0635      	lsls	r5, r6, #24
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	d501      	bpl.n	800711c <_printf_i+0x1cc>
 8007118:	6019      	str	r1, [r3, #0]
 800711a:	e002      	b.n	8007122 <_printf_i+0x1d2>
 800711c:	0670      	lsls	r0, r6, #25
 800711e:	d5fb      	bpl.n	8007118 <_printf_i+0x1c8>
 8007120:	8019      	strh	r1, [r3, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	4615      	mov	r5, r2
 8007128:	e7ba      	b.n	80070a0 <_printf_i+0x150>
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	1d1a      	adds	r2, r3, #4
 800712e:	602a      	str	r2, [r5, #0]
 8007130:	681d      	ldr	r5, [r3, #0]
 8007132:	6862      	ldr	r2, [r4, #4]
 8007134:	2100      	movs	r1, #0
 8007136:	4628      	mov	r0, r5
 8007138:	f7f9 f852 	bl	80001e0 <memchr>
 800713c:	b108      	cbz	r0, 8007142 <_printf_i+0x1f2>
 800713e:	1b40      	subs	r0, r0, r5
 8007140:	6060      	str	r0, [r4, #4]
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	2300      	movs	r3, #0
 8007148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714c:	e7a8      	b.n	80070a0 <_printf_i+0x150>
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	462a      	mov	r2, r5
 8007152:	4649      	mov	r1, r9
 8007154:	4640      	mov	r0, r8
 8007156:	47d0      	blx	sl
 8007158:	3001      	adds	r0, #1
 800715a:	d0ab      	beq.n	80070b4 <_printf_i+0x164>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	079b      	lsls	r3, r3, #30
 8007160:	d413      	bmi.n	800718a <_printf_i+0x23a>
 8007162:	68e0      	ldr	r0, [r4, #12]
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	4298      	cmp	r0, r3
 8007168:	bfb8      	it	lt
 800716a:	4618      	movlt	r0, r3
 800716c:	e7a4      	b.n	80070b8 <_printf_i+0x168>
 800716e:	2301      	movs	r3, #1
 8007170:	4632      	mov	r2, r6
 8007172:	4649      	mov	r1, r9
 8007174:	4640      	mov	r0, r8
 8007176:	47d0      	blx	sl
 8007178:	3001      	adds	r0, #1
 800717a:	d09b      	beq.n	80070b4 <_printf_i+0x164>
 800717c:	3501      	adds	r5, #1
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	9903      	ldr	r1, [sp, #12]
 8007182:	1a5b      	subs	r3, r3, r1
 8007184:	42ab      	cmp	r3, r5
 8007186:	dcf2      	bgt.n	800716e <_printf_i+0x21e>
 8007188:	e7eb      	b.n	8007162 <_printf_i+0x212>
 800718a:	2500      	movs	r5, #0
 800718c:	f104 0619 	add.w	r6, r4, #25
 8007190:	e7f5      	b.n	800717e <_printf_i+0x22e>
 8007192:	bf00      	nop
 8007194:	080097c2 	.word	0x080097c2
 8007198:	080097d3 	.word	0x080097d3

0800719c <siprintf>:
 800719c:	b40e      	push	{r1, r2, r3}
 800719e:	b500      	push	{lr}
 80071a0:	b09c      	sub	sp, #112	; 0x70
 80071a2:	ab1d      	add	r3, sp, #116	; 0x74
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	9006      	str	r0, [sp, #24]
 80071a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071ac:	4809      	ldr	r0, [pc, #36]	; (80071d4 <siprintf+0x38>)
 80071ae:	9107      	str	r1, [sp, #28]
 80071b0:	9104      	str	r1, [sp, #16]
 80071b2:	4909      	ldr	r1, [pc, #36]	; (80071d8 <siprintf+0x3c>)
 80071b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b8:	9105      	str	r1, [sp, #20]
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	a902      	add	r1, sp, #8
 80071c0:	f001 fb78 	bl	80088b4 <_svfiprintf_r>
 80071c4:	9b02      	ldr	r3, [sp, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	b01c      	add	sp, #112	; 0x70
 80071cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d0:	b003      	add	sp, #12
 80071d2:	4770      	bx	lr
 80071d4:	20000010 	.word	0x20000010
 80071d8:	ffff0208 	.word	0xffff0208

080071dc <quorem>:
 80071dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e0:	6903      	ldr	r3, [r0, #16]
 80071e2:	690c      	ldr	r4, [r1, #16]
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	4607      	mov	r7, r0
 80071e8:	f2c0 8081 	blt.w	80072ee <quorem+0x112>
 80071ec:	3c01      	subs	r4, #1
 80071ee:	f101 0814 	add.w	r8, r1, #20
 80071f2:	f100 0514 	add.w	r5, r0, #20
 80071f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007204:	3301      	adds	r3, #1
 8007206:	429a      	cmp	r2, r3
 8007208:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800720c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007210:	fbb2 f6f3 	udiv	r6, r2, r3
 8007214:	d331      	bcc.n	800727a <quorem+0x9e>
 8007216:	f04f 0e00 	mov.w	lr, #0
 800721a:	4640      	mov	r0, r8
 800721c:	46ac      	mov	ip, r5
 800721e:	46f2      	mov	sl, lr
 8007220:	f850 2b04 	ldr.w	r2, [r0], #4
 8007224:	b293      	uxth	r3, r2
 8007226:	fb06 e303 	mla	r3, r6, r3, lr
 800722a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800722e:	b29b      	uxth	r3, r3
 8007230:	ebaa 0303 	sub.w	r3, sl, r3
 8007234:	f8dc a000 	ldr.w	sl, [ip]
 8007238:	0c12      	lsrs	r2, r2, #16
 800723a:	fa13 f38a 	uxtah	r3, r3, sl
 800723e:	fb06 e202 	mla	r2, r6, r2, lr
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800724a:	b292      	uxth	r2, r2
 800724c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007254:	f8bd 3000 	ldrh.w	r3, [sp]
 8007258:	4581      	cmp	r9, r0
 800725a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800725e:	f84c 3b04 	str.w	r3, [ip], #4
 8007262:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007266:	d2db      	bcs.n	8007220 <quorem+0x44>
 8007268:	f855 300b 	ldr.w	r3, [r5, fp]
 800726c:	b92b      	cbnz	r3, 800727a <quorem+0x9e>
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	3b04      	subs	r3, #4
 8007272:	429d      	cmp	r5, r3
 8007274:	461a      	mov	r2, r3
 8007276:	d32e      	bcc.n	80072d6 <quorem+0xfa>
 8007278:	613c      	str	r4, [r7, #16]
 800727a:	4638      	mov	r0, r7
 800727c:	f001 f8c6 	bl	800840c <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	db24      	blt.n	80072ce <quorem+0xf2>
 8007284:	3601      	adds	r6, #1
 8007286:	4628      	mov	r0, r5
 8007288:	f04f 0c00 	mov.w	ip, #0
 800728c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007290:	f8d0 e000 	ldr.w	lr, [r0]
 8007294:	b293      	uxth	r3, r2
 8007296:	ebac 0303 	sub.w	r3, ip, r3
 800729a:	0c12      	lsrs	r2, r2, #16
 800729c:	fa13 f38e 	uxtah	r3, r3, lr
 80072a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ae:	45c1      	cmp	r9, r8
 80072b0:	f840 3b04 	str.w	r3, [r0], #4
 80072b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072b8:	d2e8      	bcs.n	800728c <quorem+0xb0>
 80072ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c2:	b922      	cbnz	r2, 80072ce <quorem+0xf2>
 80072c4:	3b04      	subs	r3, #4
 80072c6:	429d      	cmp	r5, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	d30a      	bcc.n	80072e2 <quorem+0x106>
 80072cc:	613c      	str	r4, [r7, #16]
 80072ce:	4630      	mov	r0, r6
 80072d0:	b003      	add	sp, #12
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	3b04      	subs	r3, #4
 80072da:	2a00      	cmp	r2, #0
 80072dc:	d1cc      	bne.n	8007278 <quorem+0x9c>
 80072de:	3c01      	subs	r4, #1
 80072e0:	e7c7      	b.n	8007272 <quorem+0x96>
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d1f0      	bne.n	80072cc <quorem+0xf0>
 80072ea:	3c01      	subs	r4, #1
 80072ec:	e7eb      	b.n	80072c6 <quorem+0xea>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e7ee      	b.n	80072d0 <quorem+0xf4>
 80072f2:	0000      	movs	r0, r0
 80072f4:	0000      	movs	r0, r0
	...

080072f8 <_dtoa_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	ed2d 8b04 	vpush	{d8-d9}
 8007300:	ec57 6b10 	vmov	r6, r7, d0
 8007304:	b093      	sub	sp, #76	; 0x4c
 8007306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800730c:	9106      	str	r1, [sp, #24]
 800730e:	ee10 aa10 	vmov	sl, s0
 8007312:	4604      	mov	r4, r0
 8007314:	9209      	str	r2, [sp, #36]	; 0x24
 8007316:	930c      	str	r3, [sp, #48]	; 0x30
 8007318:	46bb      	mov	fp, r7
 800731a:	b975      	cbnz	r5, 800733a <_dtoa_r+0x42>
 800731c:	2010      	movs	r0, #16
 800731e:	f000 fddd 	bl	8007edc <malloc>
 8007322:	4602      	mov	r2, r0
 8007324:	6260      	str	r0, [r4, #36]	; 0x24
 8007326:	b920      	cbnz	r0, 8007332 <_dtoa_r+0x3a>
 8007328:	4ba7      	ldr	r3, [pc, #668]	; (80075c8 <_dtoa_r+0x2d0>)
 800732a:	21ea      	movs	r1, #234	; 0xea
 800732c:	48a7      	ldr	r0, [pc, #668]	; (80075cc <_dtoa_r+0x2d4>)
 800732e:	f001 fbd1 	bl	8008ad4 <__assert_func>
 8007332:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007336:	6005      	str	r5, [r0, #0]
 8007338:	60c5      	str	r5, [r0, #12]
 800733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	b151      	cbz	r1, 8007356 <_dtoa_r+0x5e>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	604a      	str	r2, [r1, #4]
 8007344:	2301      	movs	r3, #1
 8007346:	4093      	lsls	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fe1c 	bl	8007f88 <_Bfree>
 8007350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	1e3b      	subs	r3, r7, #0
 8007358:	bfaa      	itet	ge
 800735a:	2300      	movge	r3, #0
 800735c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007360:	f8c8 3000 	strge.w	r3, [r8]
 8007364:	4b9a      	ldr	r3, [pc, #616]	; (80075d0 <_dtoa_r+0x2d8>)
 8007366:	bfbc      	itt	lt
 8007368:	2201      	movlt	r2, #1
 800736a:	f8c8 2000 	strlt.w	r2, [r8]
 800736e:	ea33 030b 	bics.w	r3, r3, fp
 8007372:	d11b      	bne.n	80073ac <_dtoa_r+0xb4>
 8007374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007376:	f242 730f 	movw	r3, #9999	; 0x270f
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007380:	4333      	orrs	r3, r6
 8007382:	f000 8592 	beq.w	8007eaa <_dtoa_r+0xbb2>
 8007386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007388:	b963      	cbnz	r3, 80073a4 <_dtoa_r+0xac>
 800738a:	4b92      	ldr	r3, [pc, #584]	; (80075d4 <_dtoa_r+0x2dc>)
 800738c:	e022      	b.n	80073d4 <_dtoa_r+0xdc>
 800738e:	4b92      	ldr	r3, [pc, #584]	; (80075d8 <_dtoa_r+0x2e0>)
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	3308      	adds	r3, #8
 8007394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	9801      	ldr	r0, [sp, #4]
 800739a:	b013      	add	sp, #76	; 0x4c
 800739c:	ecbd 8b04 	vpop	{d8-d9}
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	4b8b      	ldr	r3, [pc, #556]	; (80075d4 <_dtoa_r+0x2dc>)
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	3303      	adds	r3, #3
 80073aa:	e7f3      	b.n	8007394 <_dtoa_r+0x9c>
 80073ac:	2200      	movs	r2, #0
 80073ae:	2300      	movs	r3, #0
 80073b0:	4650      	mov	r0, sl
 80073b2:	4659      	mov	r1, fp
 80073b4:	f7f9 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b8:	ec4b ab19 	vmov	d9, sl, fp
 80073bc:	4680      	mov	r8, r0
 80073be:	b158      	cbz	r0, 80073d8 <_dtoa_r+0xe0>
 80073c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c2:	2301      	movs	r3, #1
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 856b 	beq.w	8007ea4 <_dtoa_r+0xbac>
 80073ce:	4883      	ldr	r0, [pc, #524]	; (80075dc <_dtoa_r+0x2e4>)
 80073d0:	6018      	str	r0, [r3, #0]
 80073d2:	1e43      	subs	r3, r0, #1
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	e7df      	b.n	8007398 <_dtoa_r+0xa0>
 80073d8:	ec4b ab10 	vmov	d0, sl, fp
 80073dc:	aa10      	add	r2, sp, #64	; 0x40
 80073de:	a911      	add	r1, sp, #68	; 0x44
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 f8b9 	bl	8008558 <__d2b>
 80073e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073ea:	ee08 0a10 	vmov	s16, r0
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	f000 8084 	beq.w	80074fc <_dtoa_r+0x204>
 80073f4:	ee19 3a90 	vmov	r3, s19
 80073f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007400:	4656      	mov	r6, sl
 8007402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800740a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800740e:	4b74      	ldr	r3, [pc, #464]	; (80075e0 <_dtoa_r+0x2e8>)
 8007410:	2200      	movs	r2, #0
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f8 ff37 	bl	8000288 <__aeabi_dsub>
 800741a:	a365      	add	r3, pc, #404	; (adr r3, 80075b0 <_dtoa_r+0x2b8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f9 f8ea 	bl	80005f8 <__aeabi_dmul>
 8007424:	a364      	add	r3, pc, #400	; (adr r3, 80075b8 <_dtoa_r+0x2c0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f8 ff2f 	bl	800028c <__adddf3>
 800742e:	4606      	mov	r6, r0
 8007430:	4628      	mov	r0, r5
 8007432:	460f      	mov	r7, r1
 8007434:	f7f9 f876 	bl	8000524 <__aeabi_i2d>
 8007438:	a361      	add	r3, pc, #388	; (adr r3, 80075c0 <_dtoa_r+0x2c8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f8db 	bl	80005f8 <__aeabi_dmul>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f8 ff1f 	bl	800028c <__adddf3>
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	f7f9 fb81 	bl	8000b58 <__aeabi_d2iz>
 8007456:	2200      	movs	r2, #0
 8007458:	9000      	str	r0, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 fb3c 	bl	8000adc <__aeabi_dcmplt>
 8007464:	b150      	cbz	r0, 800747c <_dtoa_r+0x184>
 8007466:	9800      	ldr	r0, [sp, #0]
 8007468:	f7f9 f85c 	bl	8000524 <__aeabi_i2d>
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	f7f9 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007474:	b910      	cbnz	r0, 800747c <_dtoa_r+0x184>
 8007476:	9b00      	ldr	r3, [sp, #0]
 8007478:	3b01      	subs	r3, #1
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	2b16      	cmp	r3, #22
 8007480:	d85a      	bhi.n	8007538 <_dtoa_r+0x240>
 8007482:	9a00      	ldr	r2, [sp, #0]
 8007484:	4b57      	ldr	r3, [pc, #348]	; (80075e4 <_dtoa_r+0x2ec>)
 8007486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	ec51 0b19 	vmov	r0, r1, d9
 8007492:	f7f9 fb23 	bl	8000adc <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d050      	beq.n	800753c <_dtoa_r+0x244>
 800749a:	9b00      	ldr	r3, [sp, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074a6:	1b5d      	subs	r5, r3, r5
 80074a8:	1e6b      	subs	r3, r5, #1
 80074aa:	9305      	str	r3, [sp, #20]
 80074ac:	bf45      	ittet	mi
 80074ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80074b2:	9304      	strmi	r3, [sp, #16]
 80074b4:	2300      	movpl	r3, #0
 80074b6:	2300      	movmi	r3, #0
 80074b8:	bf4c      	ite	mi
 80074ba:	9305      	strmi	r3, [sp, #20]
 80074bc:	9304      	strpl	r3, [sp, #16]
 80074be:	9b00      	ldr	r3, [sp, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db3d      	blt.n	8007540 <_dtoa_r+0x248>
 80074c4:	9b05      	ldr	r3, [sp, #20]
 80074c6:	9a00      	ldr	r2, [sp, #0]
 80074c8:	920a      	str	r2, [sp, #40]	; 0x28
 80074ca:	4413      	add	r3, r2
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2b09      	cmp	r3, #9
 80074d6:	f200 8089 	bhi.w	80075ec <_dtoa_r+0x2f4>
 80074da:	2b05      	cmp	r3, #5
 80074dc:	bfc4      	itt	gt
 80074de:	3b04      	subgt	r3, #4
 80074e0:	9306      	strgt	r3, [sp, #24]
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	f1a3 0302 	sub.w	r3, r3, #2
 80074e8:	bfcc      	ite	gt
 80074ea:	2500      	movgt	r5, #0
 80074ec:	2501      	movle	r5, #1
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f200 8087 	bhi.w	8007602 <_dtoa_r+0x30a>
 80074f4:	e8df f003 	tbb	[pc, r3]
 80074f8:	59383a2d 	.word	0x59383a2d
 80074fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007500:	441d      	add	r5, r3
 8007502:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007506:	2b20      	cmp	r3, #32
 8007508:	bfc1      	itttt	gt
 800750a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800750e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007512:	fa0b f303 	lslgt.w	r3, fp, r3
 8007516:	fa26 f000 	lsrgt.w	r0, r6, r0
 800751a:	bfda      	itte	le
 800751c:	f1c3 0320 	rsble	r3, r3, #32
 8007520:	fa06 f003 	lslle.w	r0, r6, r3
 8007524:	4318      	orrgt	r0, r3
 8007526:	f7f8 ffed 	bl	8000504 <__aeabi_ui2d>
 800752a:	2301      	movs	r3, #1
 800752c:	4606      	mov	r6, r0
 800752e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007532:	3d01      	subs	r5, #1
 8007534:	930e      	str	r3, [sp, #56]	; 0x38
 8007536:	e76a      	b.n	800740e <_dtoa_r+0x116>
 8007538:	2301      	movs	r3, #1
 800753a:	e7b2      	b.n	80074a2 <_dtoa_r+0x1aa>
 800753c:	900b      	str	r0, [sp, #44]	; 0x2c
 800753e:	e7b1      	b.n	80074a4 <_dtoa_r+0x1ac>
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	9a00      	ldr	r2, [sp, #0]
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	4253      	negs	r3, r2
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	2300      	movs	r3, #0
 800754e:	930a      	str	r3, [sp, #40]	; 0x28
 8007550:	e7bf      	b.n	80074d2 <_dtoa_r+0x1da>
 8007552:	2300      	movs	r3, #0
 8007554:	9308      	str	r3, [sp, #32]
 8007556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	dc55      	bgt.n	8007608 <_dtoa_r+0x310>
 800755c:	2301      	movs	r3, #1
 800755e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007562:	461a      	mov	r2, r3
 8007564:	9209      	str	r2, [sp, #36]	; 0x24
 8007566:	e00c      	b.n	8007582 <_dtoa_r+0x28a>
 8007568:	2301      	movs	r3, #1
 800756a:	e7f3      	b.n	8007554 <_dtoa_r+0x25c>
 800756c:	2300      	movs	r3, #0
 800756e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	4413      	add	r3, r2
 8007576:	9302      	str	r3, [sp, #8]
 8007578:	3301      	adds	r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	bfb8      	it	lt
 8007580:	2301      	movlt	r3, #1
 8007582:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007584:	2200      	movs	r2, #0
 8007586:	6042      	str	r2, [r0, #4]
 8007588:	2204      	movs	r2, #4
 800758a:	f102 0614 	add.w	r6, r2, #20
 800758e:	429e      	cmp	r6, r3
 8007590:	6841      	ldr	r1, [r0, #4]
 8007592:	d93d      	bls.n	8007610 <_dtoa_r+0x318>
 8007594:	4620      	mov	r0, r4
 8007596:	f000 fcb7 	bl	8007f08 <_Balloc>
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	2800      	cmp	r0, #0
 800759e:	d13b      	bne.n	8007618 <_dtoa_r+0x320>
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <_dtoa_r+0x2f0>)
 80075a2:	4602      	mov	r2, r0
 80075a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075a8:	e6c0      	b.n	800732c <_dtoa_r+0x34>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e7df      	b.n	800756e <_dtoa_r+0x276>
 80075ae:	bf00      	nop
 80075b0:	636f4361 	.word	0x636f4361
 80075b4:	3fd287a7 	.word	0x3fd287a7
 80075b8:	8b60c8b3 	.word	0x8b60c8b3
 80075bc:	3fc68a28 	.word	0x3fc68a28
 80075c0:	509f79fb 	.word	0x509f79fb
 80075c4:	3fd34413 	.word	0x3fd34413
 80075c8:	080097f1 	.word	0x080097f1
 80075cc:	08009808 	.word	0x08009808
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	080097ed 	.word	0x080097ed
 80075d8:	080097e4 	.word	0x080097e4
 80075dc:	080097c1 	.word	0x080097c1
 80075e0:	3ff80000 	.word	0x3ff80000
 80075e4:	080098f8 	.word	0x080098f8
 80075e8:	08009863 	.word	0x08009863
 80075ec:	2501      	movs	r5, #1
 80075ee:	2300      	movs	r3, #0
 80075f0:	9306      	str	r3, [sp, #24]
 80075f2:	9508      	str	r5, [sp, #32]
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295
 80075f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2312      	movs	r3, #18
 8007600:	e7b0      	b.n	8007564 <_dtoa_r+0x26c>
 8007602:	2301      	movs	r3, #1
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	e7f5      	b.n	80075f4 <_dtoa_r+0x2fc>
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800760e:	e7b8      	b.n	8007582 <_dtoa_r+0x28a>
 8007610:	3101      	adds	r1, #1
 8007612:	6041      	str	r1, [r0, #4]
 8007614:	0052      	lsls	r2, r2, #1
 8007616:	e7b8      	b.n	800758a <_dtoa_r+0x292>
 8007618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761a:	9a01      	ldr	r2, [sp, #4]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	2b0e      	cmp	r3, #14
 8007622:	f200 809d 	bhi.w	8007760 <_dtoa_r+0x468>
 8007626:	2d00      	cmp	r5, #0
 8007628:	f000 809a 	beq.w	8007760 <_dtoa_r+0x468>
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd32      	ble.n	8007698 <_dtoa_r+0x3a0>
 8007632:	4ab7      	ldr	r2, [pc, #732]	; (8007910 <_dtoa_r+0x618>)
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	05d8      	lsls	r0, r3, #23
 8007644:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007648:	d516      	bpl.n	8007678 <_dtoa_r+0x380>
 800764a:	4bb2      	ldr	r3, [pc, #712]	; (8007914 <_dtoa_r+0x61c>)
 800764c:	ec51 0b19 	vmov	r0, r1, d9
 8007650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007654:	f7f9 f8fa 	bl	800084c <__aeabi_ddiv>
 8007658:	f007 070f 	and.w	r7, r7, #15
 800765c:	4682      	mov	sl, r0
 800765e:	468b      	mov	fp, r1
 8007660:	2503      	movs	r5, #3
 8007662:	4eac      	ldr	r6, [pc, #688]	; (8007914 <_dtoa_r+0x61c>)
 8007664:	b957      	cbnz	r7, 800767c <_dtoa_r+0x384>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	4650      	mov	r0, sl
 800766c:	4659      	mov	r1, fp
 800766e:	f7f9 f8ed 	bl	800084c <__aeabi_ddiv>
 8007672:	4682      	mov	sl, r0
 8007674:	468b      	mov	fp, r1
 8007676:	e028      	b.n	80076ca <_dtoa_r+0x3d2>
 8007678:	2502      	movs	r5, #2
 800767a:	e7f2      	b.n	8007662 <_dtoa_r+0x36a>
 800767c:	07f9      	lsls	r1, r7, #31
 800767e:	d508      	bpl.n	8007692 <_dtoa_r+0x39a>
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007688:	f7f8 ffb6 	bl	80005f8 <__aeabi_dmul>
 800768c:	3501      	adds	r5, #1
 800768e:	4680      	mov	r8, r0
 8007690:	4689      	mov	r9, r1
 8007692:	107f      	asrs	r7, r7, #1
 8007694:	3608      	adds	r6, #8
 8007696:	e7e5      	b.n	8007664 <_dtoa_r+0x36c>
 8007698:	f000 809b 	beq.w	80077d2 <_dtoa_r+0x4da>
 800769c:	9b00      	ldr	r3, [sp, #0]
 800769e:	4f9d      	ldr	r7, [pc, #628]	; (8007914 <_dtoa_r+0x61c>)
 80076a0:	425e      	negs	r6, r3
 80076a2:	4b9b      	ldr	r3, [pc, #620]	; (8007910 <_dtoa_r+0x618>)
 80076a4:	f006 020f 	and.w	r2, r6, #15
 80076a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	ec51 0b19 	vmov	r0, r1, d9
 80076b4:	f7f8 ffa0 	bl	80005f8 <__aeabi_dmul>
 80076b8:	1136      	asrs	r6, r6, #4
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	2300      	movs	r3, #0
 80076c0:	2502      	movs	r5, #2
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d17a      	bne.n	80077bc <_dtoa_r+0x4c4>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1d3      	bne.n	8007672 <_dtoa_r+0x37a>
 80076ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8082 	beq.w	80077d6 <_dtoa_r+0x4de>
 80076d2:	4b91      	ldr	r3, [pc, #580]	; (8007918 <_dtoa_r+0x620>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4650      	mov	r0, sl
 80076d8:	4659      	mov	r1, fp
 80076da:	f7f9 f9ff 	bl	8000adc <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d079      	beq.n	80077d6 <_dtoa_r+0x4de>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d076      	beq.n	80077d6 <_dtoa_r+0x4de>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd36      	ble.n	800775c <_dtoa_r+0x464>
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	4650      	mov	r0, sl
 80076f2:	4659      	mov	r1, fp
 80076f4:	1e5f      	subs	r7, r3, #1
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <_dtoa_r+0x624>)
 80076fa:	f7f8 ff7d 	bl	80005f8 <__aeabi_dmul>
 80076fe:	9e02      	ldr	r6, [sp, #8]
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	3501      	adds	r5, #1
 8007706:	4628      	mov	r0, r5
 8007708:	f7f8 ff0c 	bl	8000524 <__aeabi_i2d>
 800770c:	4652      	mov	r2, sl
 800770e:	465b      	mov	r3, fp
 8007710:	f7f8 ff72 	bl	80005f8 <__aeabi_dmul>
 8007714:	4b82      	ldr	r3, [pc, #520]	; (8007920 <_dtoa_r+0x628>)
 8007716:	2200      	movs	r2, #0
 8007718:	f7f8 fdb8 	bl	800028c <__adddf3>
 800771c:	46d0      	mov	r8, sl
 800771e:	46d9      	mov	r9, fp
 8007720:	4682      	mov	sl, r0
 8007722:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007726:	2e00      	cmp	r6, #0
 8007728:	d158      	bne.n	80077dc <_dtoa_r+0x4e4>
 800772a:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <_dtoa_r+0x62c>)
 800772c:	2200      	movs	r2, #0
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fda9 	bl	8000288 <__aeabi_dsub>
 8007736:	4652      	mov	r2, sl
 8007738:	465b      	mov	r3, fp
 800773a:	4680      	mov	r8, r0
 800773c:	4689      	mov	r9, r1
 800773e:	f7f9 f9eb 	bl	8000b18 <__aeabi_dcmpgt>
 8007742:	2800      	cmp	r0, #0
 8007744:	f040 8295 	bne.w	8007c72 <_dtoa_r+0x97a>
 8007748:	4652      	mov	r2, sl
 800774a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	f040 8289 	bne.w	8007c6e <_dtoa_r+0x976>
 800775c:	ec5b ab19 	vmov	sl, fp, d9
 8007760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007762:	2b00      	cmp	r3, #0
 8007764:	f2c0 8148 	blt.w	80079f8 <_dtoa_r+0x700>
 8007768:	9a00      	ldr	r2, [sp, #0]
 800776a:	2a0e      	cmp	r2, #14
 800776c:	f300 8144 	bgt.w	80079f8 <_dtoa_r+0x700>
 8007770:	4b67      	ldr	r3, [pc, #412]	; (8007910 <_dtoa_r+0x618>)
 8007772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007776:	e9d3 8900 	ldrd	r8, r9, [r3]
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	f280 80d5 	bge.w	800792c <_dtoa_r+0x634>
 8007782:	9b03      	ldr	r3, [sp, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f300 80d1 	bgt.w	800792c <_dtoa_r+0x634>
 800778a:	f040 826f 	bne.w	8007c6c <_dtoa_r+0x974>
 800778e:	4b65      	ldr	r3, [pc, #404]	; (8007924 <_dtoa_r+0x62c>)
 8007790:	2200      	movs	r2, #0
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	4652      	mov	r2, sl
 800779c:	465b      	mov	r3, fp
 800779e:	f7f9 f9b1 	bl	8000b04 <__aeabi_dcmpge>
 80077a2:	9e03      	ldr	r6, [sp, #12]
 80077a4:	4637      	mov	r7, r6
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 8245 	bne.w	8007c36 <_dtoa_r+0x93e>
 80077ac:	9d01      	ldr	r5, [sp, #4]
 80077ae:	2331      	movs	r3, #49	; 0x31
 80077b0:	f805 3b01 	strb.w	r3, [r5], #1
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	e240      	b.n	8007c3e <_dtoa_r+0x946>
 80077bc:	07f2      	lsls	r2, r6, #31
 80077be:	d505      	bpl.n	80077cc <_dtoa_r+0x4d4>
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	f7f8 ff18 	bl	80005f8 <__aeabi_dmul>
 80077c8:	3501      	adds	r5, #1
 80077ca:	2301      	movs	r3, #1
 80077cc:	1076      	asrs	r6, r6, #1
 80077ce:	3708      	adds	r7, #8
 80077d0:	e777      	b.n	80076c2 <_dtoa_r+0x3ca>
 80077d2:	2502      	movs	r5, #2
 80077d4:	e779      	b.n	80076ca <_dtoa_r+0x3d2>
 80077d6:	9f00      	ldr	r7, [sp, #0]
 80077d8:	9e03      	ldr	r6, [sp, #12]
 80077da:	e794      	b.n	8007706 <_dtoa_r+0x40e>
 80077dc:	9901      	ldr	r1, [sp, #4]
 80077de:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <_dtoa_r+0x618>)
 80077e0:	4431      	add	r1, r6
 80077e2:	910d      	str	r1, [sp, #52]	; 0x34
 80077e4:	9908      	ldr	r1, [sp, #32]
 80077e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d043      	beq.n	800787a <_dtoa_r+0x582>
 80077f2:	494d      	ldr	r1, [pc, #308]	; (8007928 <_dtoa_r+0x630>)
 80077f4:	2000      	movs	r0, #0
 80077f6:	f7f9 f829 	bl	800084c <__aeabi_ddiv>
 80077fa:	4652      	mov	r2, sl
 80077fc:	465b      	mov	r3, fp
 80077fe:	f7f8 fd43 	bl	8000288 <__aeabi_dsub>
 8007802:	9d01      	ldr	r5, [sp, #4]
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	4649      	mov	r1, r9
 800780a:	4640      	mov	r0, r8
 800780c:	f7f9 f9a4 	bl	8000b58 <__aeabi_d2iz>
 8007810:	4606      	mov	r6, r0
 8007812:	f7f8 fe87 	bl	8000524 <__aeabi_i2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 fd33 	bl	8000288 <__aeabi_dsub>
 8007822:	3630      	adds	r6, #48	; 0x30
 8007824:	f805 6b01 	strb.w	r6, [r5], #1
 8007828:	4652      	mov	r2, sl
 800782a:	465b      	mov	r3, fp
 800782c:	4680      	mov	r8, r0
 800782e:	4689      	mov	r9, r1
 8007830:	f7f9 f954 	bl	8000adc <__aeabi_dcmplt>
 8007834:	2800      	cmp	r0, #0
 8007836:	d163      	bne.n	8007900 <_dtoa_r+0x608>
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	4936      	ldr	r1, [pc, #216]	; (8007918 <_dtoa_r+0x620>)
 800783e:	2000      	movs	r0, #0
 8007840:	f7f8 fd22 	bl	8000288 <__aeabi_dsub>
 8007844:	4652      	mov	r2, sl
 8007846:	465b      	mov	r3, fp
 8007848:	f7f9 f948 	bl	8000adc <__aeabi_dcmplt>
 800784c:	2800      	cmp	r0, #0
 800784e:	f040 80b5 	bne.w	80079bc <_dtoa_r+0x6c4>
 8007852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007854:	429d      	cmp	r5, r3
 8007856:	d081      	beq.n	800775c <_dtoa_r+0x464>
 8007858:	4b30      	ldr	r3, [pc, #192]	; (800791c <_dtoa_r+0x624>)
 800785a:	2200      	movs	r2, #0
 800785c:	4650      	mov	r0, sl
 800785e:	4659      	mov	r1, fp
 8007860:	f7f8 feca 	bl	80005f8 <__aeabi_dmul>
 8007864:	4b2d      	ldr	r3, [pc, #180]	; (800791c <_dtoa_r+0x624>)
 8007866:	4682      	mov	sl, r0
 8007868:	468b      	mov	fp, r1
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	2200      	movs	r2, #0
 8007870:	f7f8 fec2 	bl	80005f8 <__aeabi_dmul>
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	e7c6      	b.n	8007808 <_dtoa_r+0x510>
 800787a:	4650      	mov	r0, sl
 800787c:	4659      	mov	r1, fp
 800787e:	f7f8 febb 	bl	80005f8 <__aeabi_dmul>
 8007882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007884:	9d01      	ldr	r5, [sp, #4]
 8007886:	930f      	str	r3, [sp, #60]	; 0x3c
 8007888:	4682      	mov	sl, r0
 800788a:	468b      	mov	fp, r1
 800788c:	4649      	mov	r1, r9
 800788e:	4640      	mov	r0, r8
 8007890:	f7f9 f962 	bl	8000b58 <__aeabi_d2iz>
 8007894:	4606      	mov	r6, r0
 8007896:	f7f8 fe45 	bl	8000524 <__aeabi_i2d>
 800789a:	3630      	adds	r6, #48	; 0x30
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4640      	mov	r0, r8
 80078a2:	4649      	mov	r1, r9
 80078a4:	f7f8 fcf0 	bl	8000288 <__aeabi_dsub>
 80078a8:	f805 6b01 	strb.w	r6, [r5], #1
 80078ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ae:	429d      	cmp	r5, r3
 80078b0:	4680      	mov	r8, r0
 80078b2:	4689      	mov	r9, r1
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	d124      	bne.n	8007904 <_dtoa_r+0x60c>
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <_dtoa_r+0x630>)
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	f7f8 fce4 	bl	800028c <__adddf3>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f9 f924 	bl	8000b18 <__aeabi_dcmpgt>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d173      	bne.n	80079bc <_dtoa_r+0x6c4>
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	4913      	ldr	r1, [pc, #76]	; (8007928 <_dtoa_r+0x630>)
 80078da:	2000      	movs	r0, #0
 80078dc:	f7f8 fcd4 	bl	8000288 <__aeabi_dsub>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f8f8 	bl	8000adc <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f af35 	beq.w	800775c <_dtoa_r+0x464>
 80078f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078f4:	1e6b      	subs	r3, r5, #1
 80078f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078fc:	2b30      	cmp	r3, #48	; 0x30
 80078fe:	d0f8      	beq.n	80078f2 <_dtoa_r+0x5fa>
 8007900:	9700      	str	r7, [sp, #0]
 8007902:	e049      	b.n	8007998 <_dtoa_r+0x6a0>
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <_dtoa_r+0x624>)
 8007906:	f7f8 fe77 	bl	80005f8 <__aeabi_dmul>
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	e7bd      	b.n	800788c <_dtoa_r+0x594>
 8007910:	080098f8 	.word	0x080098f8
 8007914:	080098d0 	.word	0x080098d0
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	40240000 	.word	0x40240000
 8007920:	401c0000 	.word	0x401c0000
 8007924:	40140000 	.word	0x40140000
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	9d01      	ldr	r5, [sp, #4]
 800792e:	4656      	mov	r6, sl
 8007930:	465f      	mov	r7, fp
 8007932:	4642      	mov	r2, r8
 8007934:	464b      	mov	r3, r9
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 ff87 	bl	800084c <__aeabi_ddiv>
 800793e:	f7f9 f90b 	bl	8000b58 <__aeabi_d2iz>
 8007942:	4682      	mov	sl, r0
 8007944:	f7f8 fdee 	bl	8000524 <__aeabi_i2d>
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	f805 6b01 	strb.w	r6, [r5], #1
 8007964:	9e01      	ldr	r6, [sp, #4]
 8007966:	9f03      	ldr	r7, [sp, #12]
 8007968:	1bae      	subs	r6, r5, r6
 800796a:	42b7      	cmp	r7, r6
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	d135      	bne.n	80079de <_dtoa_r+0x6e6>
 8007972:	f7f8 fc8b 	bl	800028c <__adddf3>
 8007976:	4642      	mov	r2, r8
 8007978:	464b      	mov	r3, r9
 800797a:	4606      	mov	r6, r0
 800797c:	460f      	mov	r7, r1
 800797e:	f7f9 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8007982:	b9d0      	cbnz	r0, 80079ba <_dtoa_r+0x6c2>
 8007984:	4642      	mov	r2, r8
 8007986:	464b      	mov	r3, r9
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007990:	b110      	cbz	r0, 8007998 <_dtoa_r+0x6a0>
 8007992:	f01a 0f01 	tst.w	sl, #1
 8007996:	d110      	bne.n	80079ba <_dtoa_r+0x6c2>
 8007998:	4620      	mov	r0, r4
 800799a:	ee18 1a10 	vmov	r1, s16
 800799e:	f000 faf3 	bl	8007f88 <_Bfree>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9800      	ldr	r0, [sp, #0]
 80079a6:	702b      	strb	r3, [r5, #0]
 80079a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079aa:	3001      	adds	r0, #1
 80079ac:	6018      	str	r0, [r3, #0]
 80079ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f43f acf1 	beq.w	8007398 <_dtoa_r+0xa0>
 80079b6:	601d      	str	r5, [r3, #0]
 80079b8:	e4ee      	b.n	8007398 <_dtoa_r+0xa0>
 80079ba:	9f00      	ldr	r7, [sp, #0]
 80079bc:	462b      	mov	r3, r5
 80079be:	461d      	mov	r5, r3
 80079c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079c4:	2a39      	cmp	r2, #57	; 0x39
 80079c6:	d106      	bne.n	80079d6 <_dtoa_r+0x6de>
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d1f7      	bne.n	80079be <_dtoa_r+0x6c6>
 80079ce:	9901      	ldr	r1, [sp, #4]
 80079d0:	2230      	movs	r2, #48	; 0x30
 80079d2:	3701      	adds	r7, #1
 80079d4:	700a      	strb	r2, [r1, #0]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	3201      	adds	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e790      	b.n	8007900 <_dtoa_r+0x608>
 80079de:	4ba6      	ldr	r3, [pc, #664]	; (8007c78 <_dtoa_r+0x980>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	f7f9 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d09d      	beq.n	8007932 <_dtoa_r+0x63a>
 80079f6:	e7cf      	b.n	8007998 <_dtoa_r+0x6a0>
 80079f8:	9a08      	ldr	r2, [sp, #32]
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	f000 80d7 	beq.w	8007bae <_dtoa_r+0x8b6>
 8007a00:	9a06      	ldr	r2, [sp, #24]
 8007a02:	2a01      	cmp	r2, #1
 8007a04:	f300 80ba 	bgt.w	8007b7c <_dtoa_r+0x884>
 8007a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	f000 80b2 	beq.w	8007b74 <_dtoa_r+0x87c>
 8007a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a14:	9e07      	ldr	r6, [sp, #28]
 8007a16:	9d04      	ldr	r5, [sp, #16]
 8007a18:	9a04      	ldr	r2, [sp, #16]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	9204      	str	r2, [sp, #16]
 8007a1e:	9a05      	ldr	r2, [sp, #20]
 8007a20:	2101      	movs	r1, #1
 8007a22:	441a      	add	r2, r3
 8007a24:	4620      	mov	r0, r4
 8007a26:	9205      	str	r2, [sp, #20]
 8007a28:	f000 fb66 	bl	80080f8 <__i2b>
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	dd0c      	ble.n	8007a4c <_dtoa_r+0x754>
 8007a32:	9b05      	ldr	r3, [sp, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd09      	ble.n	8007a4c <_dtoa_r+0x754>
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	9a04      	ldr	r2, [sp, #16]
 8007a3c:	bfa8      	it	ge
 8007a3e:	462b      	movge	r3, r5
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	9204      	str	r2, [sp, #16]
 8007a44:	9a05      	ldr	r2, [sp, #20]
 8007a46:	1aed      	subs	r5, r5, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	9b07      	ldr	r3, [sp, #28]
 8007a4e:	b31b      	cbz	r3, 8007a98 <_dtoa_r+0x7a0>
 8007a50:	9b08      	ldr	r3, [sp, #32]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80af 	beq.w	8007bb6 <_dtoa_r+0x8be>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	dd13      	ble.n	8007a84 <_dtoa_r+0x78c>
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fc09 	bl	8008278 <__pow5mult>
 8007a66:	ee18 2a10 	vmov	r2, s16
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 fb58 	bl	8008124 <__multiply>
 8007a74:	ee18 1a10 	vmov	r1, s16
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fa84 	bl	8007f88 <_Bfree>
 8007a80:	ee08 8a10 	vmov	s16, r8
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	1b9a      	subs	r2, r3, r6
 8007a88:	d006      	beq.n	8007a98 <_dtoa_r+0x7a0>
 8007a8a:	ee18 1a10 	vmov	r1, s16
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 fbf2 	bl	8008278 <__pow5mult>
 8007a94:	ee08 0a10 	vmov	s16, r0
 8007a98:	2101      	movs	r1, #1
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fb2c 	bl	80080f8 <__i2b>
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	f340 8088 	ble.w	8007bba <_dtoa_r+0x8c2>
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4601      	mov	r1, r0
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 fbe2 	bl	8008278 <__pow5mult>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	4606      	mov	r6, r0
 8007aba:	f340 8081 	ble.w	8007bc0 <_dtoa_r+0x8c8>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	6933      	ldr	r3, [r6, #16]
 8007ac4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ac8:	6918      	ldr	r0, [r3, #16]
 8007aca:	f000 fac5 	bl	8008058 <__hi0bits>
 8007ace:	f1c0 0020 	rsb	r0, r0, #32
 8007ad2:	9b05      	ldr	r3, [sp, #20]
 8007ad4:	4418      	add	r0, r3
 8007ad6:	f010 001f 	ands.w	r0, r0, #31
 8007ada:	f000 8092 	beq.w	8007c02 <_dtoa_r+0x90a>
 8007ade:	f1c0 0320 	rsb	r3, r0, #32
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	f340 808a 	ble.w	8007bfc <_dtoa_r+0x904>
 8007ae8:	f1c0 001c 	rsb	r0, r0, #28
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	4403      	add	r3, r0
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	9b05      	ldr	r3, [sp, #20]
 8007af4:	4403      	add	r3, r0
 8007af6:	4405      	add	r5, r0
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd07      	ble.n	8007b10 <_dtoa_r+0x818>
 8007b00:	ee18 1a10 	vmov	r1, s16
 8007b04:	461a      	mov	r2, r3
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fc10 	bl	800832c <__lshift>
 8007b0c:	ee08 0a10 	vmov	s16, r0
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd05      	ble.n	8007b22 <_dtoa_r+0x82a>
 8007b16:	4631      	mov	r1, r6
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 fc06 	bl	800832c <__lshift>
 8007b20:	4606      	mov	r6, r0
 8007b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d06e      	beq.n	8007c06 <_dtoa_r+0x90e>
 8007b28:	ee18 0a10 	vmov	r0, s16
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	f000 fc6d 	bl	800840c <__mcmp>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	da67      	bge.n	8007c06 <_dtoa_r+0x90e>
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	ee18 1a10 	vmov	r1, s16
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	220a      	movs	r2, #10
 8007b42:	2300      	movs	r3, #0
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fa41 	bl	8007fcc <__multadd>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	ee08 0a10 	vmov	s16, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 81b1 	beq.w	8007eb8 <_dtoa_r+0xbc0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	4639      	mov	r1, r7
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fa35 	bl	8007fcc <__multadd>
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	4607      	mov	r7, r0
 8007b68:	f300 808e 	bgt.w	8007c88 <_dtoa_r+0x990>
 8007b6c:	9b06      	ldr	r3, [sp, #24]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dc51      	bgt.n	8007c16 <_dtoa_r+0x91e>
 8007b72:	e089      	b.n	8007c88 <_dtoa_r+0x990>
 8007b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b7a:	e74b      	b.n	8007a14 <_dtoa_r+0x71c>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	1e5e      	subs	r6, r3, #1
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	42b3      	cmp	r3, r6
 8007b84:	bfbf      	itttt	lt
 8007b86:	9b07      	ldrlt	r3, [sp, #28]
 8007b88:	9607      	strlt	r6, [sp, #28]
 8007b8a:	1af2      	sublt	r2, r6, r3
 8007b8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b8e:	bfb6      	itet	lt
 8007b90:	189b      	addlt	r3, r3, r2
 8007b92:	1b9e      	subge	r6, r3, r6
 8007b94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	bfb8      	it	lt
 8007b9a:	2600      	movlt	r6, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfb7      	itett	lt
 8007ba0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ba4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ba8:	1a9d      	sublt	r5, r3, r2
 8007baa:	2300      	movlt	r3, #0
 8007bac:	e734      	b.n	8007a18 <_dtoa_r+0x720>
 8007bae:	9e07      	ldr	r6, [sp, #28]
 8007bb0:	9d04      	ldr	r5, [sp, #16]
 8007bb2:	9f08      	ldr	r7, [sp, #32]
 8007bb4:	e73b      	b.n	8007a2e <_dtoa_r+0x736>
 8007bb6:	9a07      	ldr	r2, [sp, #28]
 8007bb8:	e767      	b.n	8007a8a <_dtoa_r+0x792>
 8007bba:	9b06      	ldr	r3, [sp, #24]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	dc18      	bgt.n	8007bf2 <_dtoa_r+0x8fa>
 8007bc0:	f1ba 0f00 	cmp.w	sl, #0
 8007bc4:	d115      	bne.n	8007bf2 <_dtoa_r+0x8fa>
 8007bc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bca:	b993      	cbnz	r3, 8007bf2 <_dtoa_r+0x8fa>
 8007bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	b183      	cbz	r3, 8007bf8 <_dtoa_r+0x900>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	3301      	adds	r3, #1
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	f04f 0801 	mov.w	r8, #1
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f47f af6a 	bne.w	8007ac2 <_dtoa_r+0x7ca>
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e76f      	b.n	8007ad2 <_dtoa_r+0x7da>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	e7f6      	b.n	8007be6 <_dtoa_r+0x8ee>
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	e7f4      	b.n	8007be6 <_dtoa_r+0x8ee>
 8007bfc:	f43f af7d 	beq.w	8007afa <_dtoa_r+0x802>
 8007c00:	4618      	mov	r0, r3
 8007c02:	301c      	adds	r0, #28
 8007c04:	e772      	b.n	8007aec <_dtoa_r+0x7f4>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc37      	bgt.n	8007c7c <_dtoa_r+0x984>
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	dd34      	ble.n	8007c7c <_dtoa_r+0x984>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	b96b      	cbnz	r3, 8007c36 <_dtoa_r+0x93e>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f9d4 	bl	8007fcc <__multadd>
 8007c24:	4601      	mov	r1, r0
 8007c26:	4606      	mov	r6, r0
 8007c28:	ee18 0a10 	vmov	r0, s16
 8007c2c:	f000 fbee 	bl	800840c <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f73f adbb 	bgt.w	80077ac <_dtoa_r+0x4b4>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	9d01      	ldr	r5, [sp, #4]
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	4631      	mov	r1, r6
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 f99f 	bl	8007f88 <_Bfree>
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	f43f aea4 	beq.w	8007998 <_dtoa_r+0x6a0>
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	d005      	beq.n	8007c62 <_dtoa_r+0x96a>
 8007c56:	45b8      	cmp	r8, r7
 8007c58:	d003      	beq.n	8007c62 <_dtoa_r+0x96a>
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 f993 	bl	8007f88 <_Bfree>
 8007c62:	4639      	mov	r1, r7
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 f98f 	bl	8007f88 <_Bfree>
 8007c6a:	e695      	b.n	8007998 <_dtoa_r+0x6a0>
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	4637      	mov	r7, r6
 8007c70:	e7e1      	b.n	8007c36 <_dtoa_r+0x93e>
 8007c72:	9700      	str	r7, [sp, #0]
 8007c74:	4637      	mov	r7, r6
 8007c76:	e599      	b.n	80077ac <_dtoa_r+0x4b4>
 8007c78:	40240000 	.word	0x40240000
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80ca 	beq.w	8007e18 <_dtoa_r+0xb20>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	dd05      	ble.n	8007c98 <_dtoa_r+0x9a0>
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fb4b 	bl	800832c <__lshift>
 8007c96:	4607      	mov	r7, r0
 8007c98:	f1b8 0f00 	cmp.w	r8, #0
 8007c9c:	d05b      	beq.n	8007d56 <_dtoa_r+0xa5e>
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 f931 	bl	8007f08 <_Balloc>
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <_dtoa_r+0x9be>
 8007caa:	4b87      	ldr	r3, [pc, #540]	; (8007ec8 <_dtoa_r+0xbd0>)
 8007cac:	4602      	mov	r2, r0
 8007cae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cb2:	f7ff bb3b 	b.w	800732c <_dtoa_r+0x34>
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	3202      	adds	r2, #2
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	f107 010c 	add.w	r1, r7, #12
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f000 f913 	bl	8007eec <memcpy>
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fb2e 	bl	800832c <__lshift>
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	f103 0901 	add.w	r9, r3, #1
 8007cd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	f00a 0301 	and.w	r3, sl, #1
 8007ce2:	46b8      	mov	r8, r7
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	4631      	mov	r1, r6
 8007cea:	ee18 0a10 	vmov	r0, s16
 8007cee:	f7ff fa75 	bl	80071dc <quorem>
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	9002      	str	r0, [sp, #8]
 8007cf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cfa:	ee18 0a10 	vmov	r0, s16
 8007cfe:	f000 fb85 	bl	800840c <__mcmp>
 8007d02:	463a      	mov	r2, r7
 8007d04:	9003      	str	r0, [sp, #12]
 8007d06:	4631      	mov	r1, r6
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 fb9b 	bl	8008444 <__mdiff>
 8007d0e:	68c2      	ldr	r2, [r0, #12]
 8007d10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d14:	4605      	mov	r5, r0
 8007d16:	bb02      	cbnz	r2, 8007d5a <_dtoa_r+0xa62>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	ee18 0a10 	vmov	r0, s16
 8007d1e:	f000 fb75 	bl	800840c <__mcmp>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4629      	mov	r1, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	f000 f92d 	bl	8007f88 <_Bfree>
 8007d2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d32:	ea43 0102 	orr.w	r1, r3, r2
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	464d      	mov	r5, r9
 8007d3c:	d10f      	bne.n	8007d5e <_dtoa_r+0xa66>
 8007d3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d42:	d02a      	beq.n	8007d9a <_dtoa_r+0xaa2>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dd02      	ble.n	8007d50 <_dtoa_r+0xa58>
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d50:	f88b a000 	strb.w	sl, [fp]
 8007d54:	e775      	b.n	8007c42 <_dtoa_r+0x94a>
 8007d56:	4638      	mov	r0, r7
 8007d58:	e7ba      	b.n	8007cd0 <_dtoa_r+0x9d8>
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	e7e2      	b.n	8007d24 <_dtoa_r+0xa2c>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db04      	blt.n	8007d6e <_dtoa_r+0xa76>
 8007d64:	9906      	ldr	r1, [sp, #24]
 8007d66:	430b      	orrs	r3, r1
 8007d68:	9904      	ldr	r1, [sp, #16]
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	d122      	bne.n	8007db4 <_dtoa_r+0xabc>
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	ddee      	ble.n	8007d50 <_dtoa_r+0xa58>
 8007d72:	ee18 1a10 	vmov	r1, s16
 8007d76:	2201      	movs	r2, #1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fad7 	bl	800832c <__lshift>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	ee08 0a10 	vmov	s16, r0
 8007d84:	f000 fb42 	bl	800840c <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dc03      	bgt.n	8007d94 <_dtoa_r+0xa9c>
 8007d8c:	d1e0      	bne.n	8007d50 <_dtoa_r+0xa58>
 8007d8e:	f01a 0f01 	tst.w	sl, #1
 8007d92:	d0dd      	beq.n	8007d50 <_dtoa_r+0xa58>
 8007d94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d98:	d1d7      	bne.n	8007d4a <_dtoa_r+0xa52>
 8007d9a:	2339      	movs	r3, #57	; 0x39
 8007d9c:	f88b 3000 	strb.w	r3, [fp]
 8007da0:	462b      	mov	r3, r5
 8007da2:	461d      	mov	r5, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007daa:	2a39      	cmp	r2, #57	; 0x39
 8007dac:	d071      	beq.n	8007e92 <_dtoa_r+0xb9a>
 8007dae:	3201      	adds	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	e746      	b.n	8007c42 <_dtoa_r+0x94a>
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	dd07      	ble.n	8007dc8 <_dtoa_r+0xad0>
 8007db8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dbc:	d0ed      	beq.n	8007d9a <_dtoa_r+0xaa2>
 8007dbe:	f10a 0301 	add.w	r3, sl, #1
 8007dc2:	f88b 3000 	strb.w	r3, [fp]
 8007dc6:	e73c      	b.n	8007c42 <_dtoa_r+0x94a>
 8007dc8:	9b05      	ldr	r3, [sp, #20]
 8007dca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007dce:	4599      	cmp	r9, r3
 8007dd0:	d047      	beq.n	8007e62 <_dtoa_r+0xb6a>
 8007dd2:	ee18 1a10 	vmov	r1, s16
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	220a      	movs	r2, #10
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f8f6 	bl	8007fcc <__multadd>
 8007de0:	45b8      	cmp	r8, r7
 8007de2:	ee08 0a10 	vmov	s16, r0
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	f04f 020a 	mov.w	r2, #10
 8007dee:	4641      	mov	r1, r8
 8007df0:	4620      	mov	r0, r4
 8007df2:	d106      	bne.n	8007e02 <_dtoa_r+0xb0a>
 8007df4:	f000 f8ea 	bl	8007fcc <__multadd>
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	f109 0901 	add.w	r9, r9, #1
 8007e00:	e772      	b.n	8007ce8 <_dtoa_r+0x9f0>
 8007e02:	f000 f8e3 	bl	8007fcc <__multadd>
 8007e06:	4639      	mov	r1, r7
 8007e08:	4680      	mov	r8, r0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f8dc 	bl	8007fcc <__multadd>
 8007e14:	4607      	mov	r7, r0
 8007e16:	e7f1      	b.n	8007dfc <_dtoa_r+0xb04>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	9d01      	ldr	r5, [sp, #4]
 8007e1e:	ee18 0a10 	vmov	r0, s16
 8007e22:	4631      	mov	r1, r6
 8007e24:	f7ff f9da 	bl	80071dc <quorem>
 8007e28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e2c:	9b01      	ldr	r3, [sp, #4]
 8007e2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007e32:	1aea      	subs	r2, r5, r3
 8007e34:	9b02      	ldr	r3, [sp, #8]
 8007e36:	4293      	cmp	r3, r2
 8007e38:	dd09      	ble.n	8007e4e <_dtoa_r+0xb56>
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	2300      	movs	r3, #0
 8007e40:	220a      	movs	r2, #10
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f8c2 	bl	8007fcc <__multadd>
 8007e48:	ee08 0a10 	vmov	s16, r0
 8007e4c:	e7e7      	b.n	8007e1e <_dtoa_r+0xb26>
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfc8      	it	gt
 8007e54:	461d      	movgt	r5, r3
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	bfd8      	it	le
 8007e5a:	2501      	movle	r5, #1
 8007e5c:	441d      	add	r5, r3
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	ee18 1a10 	vmov	r1, s16
 8007e66:	2201      	movs	r2, #1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fa5f 	bl	800832c <__lshift>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	ee08 0a10 	vmov	s16, r0
 8007e74:	f000 faca 	bl	800840c <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	dc91      	bgt.n	8007da0 <_dtoa_r+0xaa8>
 8007e7c:	d102      	bne.n	8007e84 <_dtoa_r+0xb8c>
 8007e7e:	f01a 0f01 	tst.w	sl, #1
 8007e82:	d18d      	bne.n	8007da0 <_dtoa_r+0xaa8>
 8007e84:	462b      	mov	r3, r5
 8007e86:	461d      	mov	r5, r3
 8007e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e8c:	2a30      	cmp	r2, #48	; 0x30
 8007e8e:	d0fa      	beq.n	8007e86 <_dtoa_r+0xb8e>
 8007e90:	e6d7      	b.n	8007c42 <_dtoa_r+0x94a>
 8007e92:	9a01      	ldr	r2, [sp, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d184      	bne.n	8007da2 <_dtoa_r+0xaaa>
 8007e98:	9b00      	ldr	r3, [sp, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2331      	movs	r3, #49	; 0x31
 8007ea0:	7013      	strb	r3, [r2, #0]
 8007ea2:	e6ce      	b.n	8007c42 <_dtoa_r+0x94a>
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <_dtoa_r+0xbd4>)
 8007ea6:	f7ff ba95 	b.w	80073d4 <_dtoa_r+0xdc>
 8007eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f47f aa6e 	bne.w	800738e <_dtoa_r+0x96>
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_dtoa_r+0xbd8>)
 8007eb4:	f7ff ba8e 	b.w	80073d4 <_dtoa_r+0xdc>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dcae      	bgt.n	8007e1c <_dtoa_r+0xb24>
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f73f aea8 	bgt.w	8007c16 <_dtoa_r+0x91e>
 8007ec6:	e7a9      	b.n	8007e1c <_dtoa_r+0xb24>
 8007ec8:	08009863 	.word	0x08009863
 8007ecc:	080097c0 	.word	0x080097c0
 8007ed0:	080097e4 	.word	0x080097e4

08007ed4 <_localeconv_r>:
 8007ed4:	4800      	ldr	r0, [pc, #0]	; (8007ed8 <_localeconv_r+0x4>)
 8007ed6:	4770      	bx	lr
 8007ed8:	20000164 	.word	0x20000164

08007edc <malloc>:
 8007edc:	4b02      	ldr	r3, [pc, #8]	; (8007ee8 <malloc+0xc>)
 8007ede:	4601      	mov	r1, r0
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	f000 bc17 	b.w	8008714 <_malloc_r>
 8007ee6:	bf00      	nop
 8007ee8:	20000010 	.word	0x20000010

08007eec <memcpy>:
 8007eec:	440a      	add	r2, r1
 8007eee:	4291      	cmp	r1, r2
 8007ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef4:	d100      	bne.n	8007ef8 <memcpy+0xc>
 8007ef6:	4770      	bx	lr
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f02:	4291      	cmp	r1, r2
 8007f04:	d1f9      	bne.n	8007efa <memcpy+0xe>
 8007f06:	bd10      	pop	{r4, pc}

08007f08 <_Balloc>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	b976      	cbnz	r6, 8007f30 <_Balloc+0x28>
 8007f12:	2010      	movs	r0, #16
 8007f14:	f7ff ffe2 	bl	8007edc <malloc>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007f1c:	b920      	cbnz	r0, 8007f28 <_Balloc+0x20>
 8007f1e:	4b18      	ldr	r3, [pc, #96]	; (8007f80 <_Balloc+0x78>)
 8007f20:	4818      	ldr	r0, [pc, #96]	; (8007f84 <_Balloc+0x7c>)
 8007f22:	2166      	movs	r1, #102	; 0x66
 8007f24:	f000 fdd6 	bl	8008ad4 <__assert_func>
 8007f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f2c:	6006      	str	r6, [r0, #0]
 8007f2e:	60c6      	str	r6, [r0, #12]
 8007f30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f32:	68f3      	ldr	r3, [r6, #12]
 8007f34:	b183      	cbz	r3, 8007f58 <_Balloc+0x50>
 8007f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f3e:	b9b8      	cbnz	r0, 8007f70 <_Balloc+0x68>
 8007f40:	2101      	movs	r1, #1
 8007f42:	fa01 f605 	lsl.w	r6, r1, r5
 8007f46:	1d72      	adds	r2, r6, #5
 8007f48:	0092      	lsls	r2, r2, #2
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 fb60 	bl	8008610 <_calloc_r>
 8007f50:	b160      	cbz	r0, 8007f6c <_Balloc+0x64>
 8007f52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f56:	e00e      	b.n	8007f76 <_Balloc+0x6e>
 8007f58:	2221      	movs	r2, #33	; 0x21
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fb57 	bl	8008610 <_calloc_r>
 8007f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f64:	60f0      	str	r0, [r6, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e4      	bne.n	8007f36 <_Balloc+0x2e>
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	6802      	ldr	r2, [r0, #0]
 8007f72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f76:	2300      	movs	r3, #0
 8007f78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f7c:	e7f7      	b.n	8007f6e <_Balloc+0x66>
 8007f7e:	bf00      	nop
 8007f80:	080097f1 	.word	0x080097f1
 8007f84:	08009874 	.word	0x08009874

08007f88 <_Bfree>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b976      	cbnz	r6, 8007fb0 <_Bfree+0x28>
 8007f92:	2010      	movs	r0, #16
 8007f94:	f7ff ffa2 	bl	8007edc <malloc>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6268      	str	r0, [r5, #36]	; 0x24
 8007f9c:	b920      	cbnz	r0, 8007fa8 <_Bfree+0x20>
 8007f9e:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <_Bfree+0x3c>)
 8007fa0:	4809      	ldr	r0, [pc, #36]	; (8007fc8 <_Bfree+0x40>)
 8007fa2:	218a      	movs	r1, #138	; 0x8a
 8007fa4:	f000 fd96 	bl	8008ad4 <__assert_func>
 8007fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fac:	6006      	str	r6, [r0, #0]
 8007fae:	60c6      	str	r6, [r0, #12]
 8007fb0:	b13c      	cbz	r4, 8007fc2 <_Bfree+0x3a>
 8007fb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fb4:	6862      	ldr	r2, [r4, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fbc:	6021      	str	r1, [r4, #0]
 8007fbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	080097f1 	.word	0x080097f1
 8007fc8:	08009874 	.word	0x08009874

08007fcc <__multadd>:
 8007fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	690d      	ldr	r5, [r1, #16]
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	461e      	mov	r6, r3
 8007fd8:	f101 0c14 	add.w	ip, r1, #20
 8007fdc:	2000      	movs	r0, #0
 8007fde:	f8dc 3000 	ldr.w	r3, [ip]
 8007fe2:	b299      	uxth	r1, r3
 8007fe4:	fb02 6101 	mla	r1, r2, r1, r6
 8007fe8:	0c1e      	lsrs	r6, r3, #16
 8007fea:	0c0b      	lsrs	r3, r1, #16
 8007fec:	fb02 3306 	mla	r3, r2, r6, r3
 8007ff0:	b289      	uxth	r1, r1
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ff8:	4285      	cmp	r5, r0
 8007ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8007ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008002:	dcec      	bgt.n	8007fde <__multadd+0x12>
 8008004:	b30e      	cbz	r6, 800804a <__multadd+0x7e>
 8008006:	68a3      	ldr	r3, [r4, #8]
 8008008:	42ab      	cmp	r3, r5
 800800a:	dc19      	bgt.n	8008040 <__multadd+0x74>
 800800c:	6861      	ldr	r1, [r4, #4]
 800800e:	4638      	mov	r0, r7
 8008010:	3101      	adds	r1, #1
 8008012:	f7ff ff79 	bl	8007f08 <_Balloc>
 8008016:	4680      	mov	r8, r0
 8008018:	b928      	cbnz	r0, 8008026 <__multadd+0x5a>
 800801a:	4602      	mov	r2, r0
 800801c:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <__multadd+0x84>)
 800801e:	480d      	ldr	r0, [pc, #52]	; (8008054 <__multadd+0x88>)
 8008020:	21b5      	movs	r1, #181	; 0xb5
 8008022:	f000 fd57 	bl	8008ad4 <__assert_func>
 8008026:	6922      	ldr	r2, [r4, #16]
 8008028:	3202      	adds	r2, #2
 800802a:	f104 010c 	add.w	r1, r4, #12
 800802e:	0092      	lsls	r2, r2, #2
 8008030:	300c      	adds	r0, #12
 8008032:	f7ff ff5b 	bl	8007eec <memcpy>
 8008036:	4621      	mov	r1, r4
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff ffa5 	bl	8007f88 <_Bfree>
 800803e:	4644      	mov	r4, r8
 8008040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008044:	3501      	adds	r5, #1
 8008046:	615e      	str	r6, [r3, #20]
 8008048:	6125      	str	r5, [r4, #16]
 800804a:	4620      	mov	r0, r4
 800804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008050:	08009863 	.word	0x08009863
 8008054:	08009874 	.word	0x08009874

08008058 <__hi0bits>:
 8008058:	0c03      	lsrs	r3, r0, #16
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	b9d3      	cbnz	r3, 8008094 <__hi0bits+0x3c>
 800805e:	0400      	lsls	r0, r0, #16
 8008060:	2310      	movs	r3, #16
 8008062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008066:	bf04      	itt	eq
 8008068:	0200      	lsleq	r0, r0, #8
 800806a:	3308      	addeq	r3, #8
 800806c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008070:	bf04      	itt	eq
 8008072:	0100      	lsleq	r0, r0, #4
 8008074:	3304      	addeq	r3, #4
 8008076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800807a:	bf04      	itt	eq
 800807c:	0080      	lsleq	r0, r0, #2
 800807e:	3302      	addeq	r3, #2
 8008080:	2800      	cmp	r0, #0
 8008082:	db05      	blt.n	8008090 <__hi0bits+0x38>
 8008084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008088:	f103 0301 	add.w	r3, r3, #1
 800808c:	bf08      	it	eq
 800808e:	2320      	moveq	r3, #32
 8008090:	4618      	mov	r0, r3
 8008092:	4770      	bx	lr
 8008094:	2300      	movs	r3, #0
 8008096:	e7e4      	b.n	8008062 <__hi0bits+0xa>

08008098 <__lo0bits>:
 8008098:	6803      	ldr	r3, [r0, #0]
 800809a:	f013 0207 	ands.w	r2, r3, #7
 800809e:	4601      	mov	r1, r0
 80080a0:	d00b      	beq.n	80080ba <__lo0bits+0x22>
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d423      	bmi.n	80080ee <__lo0bits+0x56>
 80080a6:	0798      	lsls	r0, r3, #30
 80080a8:	bf49      	itett	mi
 80080aa:	085b      	lsrmi	r3, r3, #1
 80080ac:	089b      	lsrpl	r3, r3, #2
 80080ae:	2001      	movmi	r0, #1
 80080b0:	600b      	strmi	r3, [r1, #0]
 80080b2:	bf5c      	itt	pl
 80080b4:	600b      	strpl	r3, [r1, #0]
 80080b6:	2002      	movpl	r0, #2
 80080b8:	4770      	bx	lr
 80080ba:	b298      	uxth	r0, r3
 80080bc:	b9a8      	cbnz	r0, 80080ea <__lo0bits+0x52>
 80080be:	0c1b      	lsrs	r3, r3, #16
 80080c0:	2010      	movs	r0, #16
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	b90a      	cbnz	r2, 80080ca <__lo0bits+0x32>
 80080c6:	3008      	adds	r0, #8
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	071a      	lsls	r2, r3, #28
 80080cc:	bf04      	itt	eq
 80080ce:	091b      	lsreq	r3, r3, #4
 80080d0:	3004      	addeq	r0, #4
 80080d2:	079a      	lsls	r2, r3, #30
 80080d4:	bf04      	itt	eq
 80080d6:	089b      	lsreq	r3, r3, #2
 80080d8:	3002      	addeq	r0, #2
 80080da:	07da      	lsls	r2, r3, #31
 80080dc:	d403      	bmi.n	80080e6 <__lo0bits+0x4e>
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	f100 0001 	add.w	r0, r0, #1
 80080e4:	d005      	beq.n	80080f2 <__lo0bits+0x5a>
 80080e6:	600b      	str	r3, [r1, #0]
 80080e8:	4770      	bx	lr
 80080ea:	4610      	mov	r0, r2
 80080ec:	e7e9      	b.n	80080c2 <__lo0bits+0x2a>
 80080ee:	2000      	movs	r0, #0
 80080f0:	4770      	bx	lr
 80080f2:	2020      	movs	r0, #32
 80080f4:	4770      	bx	lr
	...

080080f8 <__i2b>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	2101      	movs	r1, #1
 80080fe:	f7ff ff03 	bl	8007f08 <_Balloc>
 8008102:	4602      	mov	r2, r0
 8008104:	b928      	cbnz	r0, 8008112 <__i2b+0x1a>
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <__i2b+0x24>)
 8008108:	4805      	ldr	r0, [pc, #20]	; (8008120 <__i2b+0x28>)
 800810a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800810e:	f000 fce1 	bl	8008ad4 <__assert_func>
 8008112:	2301      	movs	r3, #1
 8008114:	6144      	str	r4, [r0, #20]
 8008116:	6103      	str	r3, [r0, #16]
 8008118:	bd10      	pop	{r4, pc}
 800811a:	bf00      	nop
 800811c:	08009863 	.word	0x08009863
 8008120:	08009874 	.word	0x08009874

08008124 <__multiply>:
 8008124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	4691      	mov	r9, r2
 800812a:	690a      	ldr	r2, [r1, #16]
 800812c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008130:	429a      	cmp	r2, r3
 8008132:	bfb8      	it	lt
 8008134:	460b      	movlt	r3, r1
 8008136:	460c      	mov	r4, r1
 8008138:	bfbc      	itt	lt
 800813a:	464c      	movlt	r4, r9
 800813c:	4699      	movlt	r9, r3
 800813e:	6927      	ldr	r7, [r4, #16]
 8008140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008144:	68a3      	ldr	r3, [r4, #8]
 8008146:	6861      	ldr	r1, [r4, #4]
 8008148:	eb07 060a 	add.w	r6, r7, sl
 800814c:	42b3      	cmp	r3, r6
 800814e:	b085      	sub	sp, #20
 8008150:	bfb8      	it	lt
 8008152:	3101      	addlt	r1, #1
 8008154:	f7ff fed8 	bl	8007f08 <_Balloc>
 8008158:	b930      	cbnz	r0, 8008168 <__multiply+0x44>
 800815a:	4602      	mov	r2, r0
 800815c:	4b44      	ldr	r3, [pc, #272]	; (8008270 <__multiply+0x14c>)
 800815e:	4845      	ldr	r0, [pc, #276]	; (8008274 <__multiply+0x150>)
 8008160:	f240 115d 	movw	r1, #349	; 0x15d
 8008164:	f000 fcb6 	bl	8008ad4 <__assert_func>
 8008168:	f100 0514 	add.w	r5, r0, #20
 800816c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008170:	462b      	mov	r3, r5
 8008172:	2200      	movs	r2, #0
 8008174:	4543      	cmp	r3, r8
 8008176:	d321      	bcc.n	80081bc <__multiply+0x98>
 8008178:	f104 0314 	add.w	r3, r4, #20
 800817c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008180:	f109 0314 	add.w	r3, r9, #20
 8008184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008188:	9202      	str	r2, [sp, #8]
 800818a:	1b3a      	subs	r2, r7, r4
 800818c:	3a15      	subs	r2, #21
 800818e:	f022 0203 	bic.w	r2, r2, #3
 8008192:	3204      	adds	r2, #4
 8008194:	f104 0115 	add.w	r1, r4, #21
 8008198:	428f      	cmp	r7, r1
 800819a:	bf38      	it	cc
 800819c:	2204      	movcc	r2, #4
 800819e:	9201      	str	r2, [sp, #4]
 80081a0:	9a02      	ldr	r2, [sp, #8]
 80081a2:	9303      	str	r3, [sp, #12]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d80c      	bhi.n	80081c2 <__multiply+0x9e>
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	dd03      	ble.n	80081b4 <__multiply+0x90>
 80081ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d05a      	beq.n	800826a <__multiply+0x146>
 80081b4:	6106      	str	r6, [r0, #16]
 80081b6:	b005      	add	sp, #20
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	f843 2b04 	str.w	r2, [r3], #4
 80081c0:	e7d8      	b.n	8008174 <__multiply+0x50>
 80081c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80081c6:	f1ba 0f00 	cmp.w	sl, #0
 80081ca:	d024      	beq.n	8008216 <__multiply+0xf2>
 80081cc:	f104 0e14 	add.w	lr, r4, #20
 80081d0:	46a9      	mov	r9, r5
 80081d2:	f04f 0c00 	mov.w	ip, #0
 80081d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081da:	f8d9 1000 	ldr.w	r1, [r9]
 80081de:	fa1f fb82 	uxth.w	fp, r2
 80081e2:	b289      	uxth	r1, r1
 80081e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80081e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081ec:	f8d9 2000 	ldr.w	r2, [r9]
 80081f0:	4461      	add	r1, ip
 80081f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80081fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081fe:	b289      	uxth	r1, r1
 8008200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008204:	4577      	cmp	r7, lr
 8008206:	f849 1b04 	str.w	r1, [r9], #4
 800820a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800820e:	d8e2      	bhi.n	80081d6 <__multiply+0xb2>
 8008210:	9a01      	ldr	r2, [sp, #4]
 8008212:	f845 c002 	str.w	ip, [r5, r2]
 8008216:	9a03      	ldr	r2, [sp, #12]
 8008218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800821c:	3304      	adds	r3, #4
 800821e:	f1b9 0f00 	cmp.w	r9, #0
 8008222:	d020      	beq.n	8008266 <__multiply+0x142>
 8008224:	6829      	ldr	r1, [r5, #0]
 8008226:	f104 0c14 	add.w	ip, r4, #20
 800822a:	46ae      	mov	lr, r5
 800822c:	f04f 0a00 	mov.w	sl, #0
 8008230:	f8bc b000 	ldrh.w	fp, [ip]
 8008234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008238:	fb09 220b 	mla	r2, r9, fp, r2
 800823c:	4492      	add	sl, r2
 800823e:	b289      	uxth	r1, r1
 8008240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008244:	f84e 1b04 	str.w	r1, [lr], #4
 8008248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800824c:	f8be 1000 	ldrh.w	r1, [lr]
 8008250:	0c12      	lsrs	r2, r2, #16
 8008252:	fb09 1102 	mla	r1, r9, r2, r1
 8008256:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800825a:	4567      	cmp	r7, ip
 800825c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008260:	d8e6      	bhi.n	8008230 <__multiply+0x10c>
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	50a9      	str	r1, [r5, r2]
 8008266:	3504      	adds	r5, #4
 8008268:	e79a      	b.n	80081a0 <__multiply+0x7c>
 800826a:	3e01      	subs	r6, #1
 800826c:	e79c      	b.n	80081a8 <__multiply+0x84>
 800826e:	bf00      	nop
 8008270:	08009863 	.word	0x08009863
 8008274:	08009874 	.word	0x08009874

08008278 <__pow5mult>:
 8008278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800827c:	4615      	mov	r5, r2
 800827e:	f012 0203 	ands.w	r2, r2, #3
 8008282:	4606      	mov	r6, r0
 8008284:	460f      	mov	r7, r1
 8008286:	d007      	beq.n	8008298 <__pow5mult+0x20>
 8008288:	4c25      	ldr	r4, [pc, #148]	; (8008320 <__pow5mult+0xa8>)
 800828a:	3a01      	subs	r2, #1
 800828c:	2300      	movs	r3, #0
 800828e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008292:	f7ff fe9b 	bl	8007fcc <__multadd>
 8008296:	4607      	mov	r7, r0
 8008298:	10ad      	asrs	r5, r5, #2
 800829a:	d03d      	beq.n	8008318 <__pow5mult+0xa0>
 800829c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800829e:	b97c      	cbnz	r4, 80082c0 <__pow5mult+0x48>
 80082a0:	2010      	movs	r0, #16
 80082a2:	f7ff fe1b 	bl	8007edc <malloc>
 80082a6:	4602      	mov	r2, r0
 80082a8:	6270      	str	r0, [r6, #36]	; 0x24
 80082aa:	b928      	cbnz	r0, 80082b8 <__pow5mult+0x40>
 80082ac:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <__pow5mult+0xac>)
 80082ae:	481e      	ldr	r0, [pc, #120]	; (8008328 <__pow5mult+0xb0>)
 80082b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082b4:	f000 fc0e 	bl	8008ad4 <__assert_func>
 80082b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082bc:	6004      	str	r4, [r0, #0]
 80082be:	60c4      	str	r4, [r0, #12]
 80082c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082c8:	b94c      	cbnz	r4, 80082de <__pow5mult+0x66>
 80082ca:	f240 2171 	movw	r1, #625	; 0x271
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ff12 	bl	80080f8 <__i2b>
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80082da:	4604      	mov	r4, r0
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	f04f 0900 	mov.w	r9, #0
 80082e2:	07eb      	lsls	r3, r5, #31
 80082e4:	d50a      	bpl.n	80082fc <__pow5mult+0x84>
 80082e6:	4639      	mov	r1, r7
 80082e8:	4622      	mov	r2, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff ff1a 	bl	8008124 <__multiply>
 80082f0:	4639      	mov	r1, r7
 80082f2:	4680      	mov	r8, r0
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff fe47 	bl	8007f88 <_Bfree>
 80082fa:	4647      	mov	r7, r8
 80082fc:	106d      	asrs	r5, r5, #1
 80082fe:	d00b      	beq.n	8008318 <__pow5mult+0xa0>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	b938      	cbnz	r0, 8008314 <__pow5mult+0x9c>
 8008304:	4622      	mov	r2, r4
 8008306:	4621      	mov	r1, r4
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ff0b 	bl	8008124 <__multiply>
 800830e:	6020      	str	r0, [r4, #0]
 8008310:	f8c0 9000 	str.w	r9, [r0]
 8008314:	4604      	mov	r4, r0
 8008316:	e7e4      	b.n	80082e2 <__pow5mult+0x6a>
 8008318:	4638      	mov	r0, r7
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831e:	bf00      	nop
 8008320:	080099c0 	.word	0x080099c0
 8008324:	080097f1 	.word	0x080097f1
 8008328:	08009874 	.word	0x08009874

0800832c <__lshift>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	460c      	mov	r4, r1
 8008332:	6849      	ldr	r1, [r1, #4]
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	4607      	mov	r7, r0
 800833e:	4691      	mov	r9, r2
 8008340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008344:	f108 0601 	add.w	r6, r8, #1
 8008348:	42b3      	cmp	r3, r6
 800834a:	db0b      	blt.n	8008364 <__lshift+0x38>
 800834c:	4638      	mov	r0, r7
 800834e:	f7ff fddb 	bl	8007f08 <_Balloc>
 8008352:	4605      	mov	r5, r0
 8008354:	b948      	cbnz	r0, 800836a <__lshift+0x3e>
 8008356:	4602      	mov	r2, r0
 8008358:	4b2a      	ldr	r3, [pc, #168]	; (8008404 <__lshift+0xd8>)
 800835a:	482b      	ldr	r0, [pc, #172]	; (8008408 <__lshift+0xdc>)
 800835c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008360:	f000 fbb8 	bl	8008ad4 <__assert_func>
 8008364:	3101      	adds	r1, #1
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	e7ee      	b.n	8008348 <__lshift+0x1c>
 800836a:	2300      	movs	r3, #0
 800836c:	f100 0114 	add.w	r1, r0, #20
 8008370:	f100 0210 	add.w	r2, r0, #16
 8008374:	4618      	mov	r0, r3
 8008376:	4553      	cmp	r3, sl
 8008378:	db37      	blt.n	80083ea <__lshift+0xbe>
 800837a:	6920      	ldr	r0, [r4, #16]
 800837c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008380:	f104 0314 	add.w	r3, r4, #20
 8008384:	f019 091f 	ands.w	r9, r9, #31
 8008388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800838c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008390:	d02f      	beq.n	80083f2 <__lshift+0xc6>
 8008392:	f1c9 0e20 	rsb	lr, r9, #32
 8008396:	468a      	mov	sl, r1
 8008398:	f04f 0c00 	mov.w	ip, #0
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	fa02 f209 	lsl.w	r2, r2, r9
 80083a2:	ea42 020c 	orr.w	r2, r2, ip
 80083a6:	f84a 2b04 	str.w	r2, [sl], #4
 80083aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ae:	4298      	cmp	r0, r3
 80083b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083b4:	d8f2      	bhi.n	800839c <__lshift+0x70>
 80083b6:	1b03      	subs	r3, r0, r4
 80083b8:	3b15      	subs	r3, #21
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	3304      	adds	r3, #4
 80083c0:	f104 0215 	add.w	r2, r4, #21
 80083c4:	4290      	cmp	r0, r2
 80083c6:	bf38      	it	cc
 80083c8:	2304      	movcc	r3, #4
 80083ca:	f841 c003 	str.w	ip, [r1, r3]
 80083ce:	f1bc 0f00 	cmp.w	ip, #0
 80083d2:	d001      	beq.n	80083d8 <__lshift+0xac>
 80083d4:	f108 0602 	add.w	r6, r8, #2
 80083d8:	3e01      	subs	r6, #1
 80083da:	4638      	mov	r0, r7
 80083dc:	612e      	str	r6, [r5, #16]
 80083de:	4621      	mov	r1, r4
 80083e0:	f7ff fdd2 	bl	8007f88 <_Bfree>
 80083e4:	4628      	mov	r0, r5
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80083ee:	3301      	adds	r3, #1
 80083f0:	e7c1      	b.n	8008376 <__lshift+0x4a>
 80083f2:	3904      	subs	r1, #4
 80083f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80083fc:	4298      	cmp	r0, r3
 80083fe:	d8f9      	bhi.n	80083f4 <__lshift+0xc8>
 8008400:	e7ea      	b.n	80083d8 <__lshift+0xac>
 8008402:	bf00      	nop
 8008404:	08009863 	.word	0x08009863
 8008408:	08009874 	.word	0x08009874

0800840c <__mcmp>:
 800840c:	b530      	push	{r4, r5, lr}
 800840e:	6902      	ldr	r2, [r0, #16]
 8008410:	690c      	ldr	r4, [r1, #16]
 8008412:	1b12      	subs	r2, r2, r4
 8008414:	d10e      	bne.n	8008434 <__mcmp+0x28>
 8008416:	f100 0314 	add.w	r3, r0, #20
 800841a:	3114      	adds	r1, #20
 800841c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800842c:	42a5      	cmp	r5, r4
 800842e:	d003      	beq.n	8008438 <__mcmp+0x2c>
 8008430:	d305      	bcc.n	800843e <__mcmp+0x32>
 8008432:	2201      	movs	r2, #1
 8008434:	4610      	mov	r0, r2
 8008436:	bd30      	pop	{r4, r5, pc}
 8008438:	4283      	cmp	r3, r0
 800843a:	d3f3      	bcc.n	8008424 <__mcmp+0x18>
 800843c:	e7fa      	b.n	8008434 <__mcmp+0x28>
 800843e:	f04f 32ff 	mov.w	r2, #4294967295
 8008442:	e7f7      	b.n	8008434 <__mcmp+0x28>

08008444 <__mdiff>:
 8008444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	4606      	mov	r6, r0
 800844c:	4611      	mov	r1, r2
 800844e:	4620      	mov	r0, r4
 8008450:	4690      	mov	r8, r2
 8008452:	f7ff ffdb 	bl	800840c <__mcmp>
 8008456:	1e05      	subs	r5, r0, #0
 8008458:	d110      	bne.n	800847c <__mdiff+0x38>
 800845a:	4629      	mov	r1, r5
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff fd53 	bl	8007f08 <_Balloc>
 8008462:	b930      	cbnz	r0, 8008472 <__mdiff+0x2e>
 8008464:	4b3a      	ldr	r3, [pc, #232]	; (8008550 <__mdiff+0x10c>)
 8008466:	4602      	mov	r2, r0
 8008468:	f240 2132 	movw	r1, #562	; 0x232
 800846c:	4839      	ldr	r0, [pc, #228]	; (8008554 <__mdiff+0x110>)
 800846e:	f000 fb31 	bl	8008ad4 <__assert_func>
 8008472:	2301      	movs	r3, #1
 8008474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	bfa4      	itt	ge
 800847e:	4643      	movge	r3, r8
 8008480:	46a0      	movge	r8, r4
 8008482:	4630      	mov	r0, r6
 8008484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008488:	bfa6      	itte	ge
 800848a:	461c      	movge	r4, r3
 800848c:	2500      	movge	r5, #0
 800848e:	2501      	movlt	r5, #1
 8008490:	f7ff fd3a 	bl	8007f08 <_Balloc>
 8008494:	b920      	cbnz	r0, 80084a0 <__mdiff+0x5c>
 8008496:	4b2e      	ldr	r3, [pc, #184]	; (8008550 <__mdiff+0x10c>)
 8008498:	4602      	mov	r2, r0
 800849a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800849e:	e7e5      	b.n	800846c <__mdiff+0x28>
 80084a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084a4:	6926      	ldr	r6, [r4, #16]
 80084a6:	60c5      	str	r5, [r0, #12]
 80084a8:	f104 0914 	add.w	r9, r4, #20
 80084ac:	f108 0514 	add.w	r5, r8, #20
 80084b0:	f100 0e14 	add.w	lr, r0, #20
 80084b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084bc:	f108 0210 	add.w	r2, r8, #16
 80084c0:	46f2      	mov	sl, lr
 80084c2:	2100      	movs	r1, #0
 80084c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80084c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084cc:	fa1f f883 	uxth.w	r8, r3
 80084d0:	fa11 f18b 	uxtah	r1, r1, fp
 80084d4:	0c1b      	lsrs	r3, r3, #16
 80084d6:	eba1 0808 	sub.w	r8, r1, r8
 80084da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084e2:	fa1f f888 	uxth.w	r8, r8
 80084e6:	1419      	asrs	r1, r3, #16
 80084e8:	454e      	cmp	r6, r9
 80084ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084ee:	f84a 3b04 	str.w	r3, [sl], #4
 80084f2:	d8e7      	bhi.n	80084c4 <__mdiff+0x80>
 80084f4:	1b33      	subs	r3, r6, r4
 80084f6:	3b15      	subs	r3, #21
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3304      	adds	r3, #4
 80084fe:	3415      	adds	r4, #21
 8008500:	42a6      	cmp	r6, r4
 8008502:	bf38      	it	cc
 8008504:	2304      	movcc	r3, #4
 8008506:	441d      	add	r5, r3
 8008508:	4473      	add	r3, lr
 800850a:	469e      	mov	lr, r3
 800850c:	462e      	mov	r6, r5
 800850e:	4566      	cmp	r6, ip
 8008510:	d30e      	bcc.n	8008530 <__mdiff+0xec>
 8008512:	f10c 0203 	add.w	r2, ip, #3
 8008516:	1b52      	subs	r2, r2, r5
 8008518:	f022 0203 	bic.w	r2, r2, #3
 800851c:	3d03      	subs	r5, #3
 800851e:	45ac      	cmp	ip, r5
 8008520:	bf38      	it	cc
 8008522:	2200      	movcc	r2, #0
 8008524:	441a      	add	r2, r3
 8008526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800852a:	b17b      	cbz	r3, 800854c <__mdiff+0x108>
 800852c:	6107      	str	r7, [r0, #16]
 800852e:	e7a3      	b.n	8008478 <__mdiff+0x34>
 8008530:	f856 8b04 	ldr.w	r8, [r6], #4
 8008534:	fa11 f288 	uxtah	r2, r1, r8
 8008538:	1414      	asrs	r4, r2, #16
 800853a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800853e:	b292      	uxth	r2, r2
 8008540:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008544:	f84e 2b04 	str.w	r2, [lr], #4
 8008548:	1421      	asrs	r1, r4, #16
 800854a:	e7e0      	b.n	800850e <__mdiff+0xca>
 800854c:	3f01      	subs	r7, #1
 800854e:	e7ea      	b.n	8008526 <__mdiff+0xe2>
 8008550:	08009863 	.word	0x08009863
 8008554:	08009874 	.word	0x08009874

08008558 <__d2b>:
 8008558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800855c:	4689      	mov	r9, r1
 800855e:	2101      	movs	r1, #1
 8008560:	ec57 6b10 	vmov	r6, r7, d0
 8008564:	4690      	mov	r8, r2
 8008566:	f7ff fccf 	bl	8007f08 <_Balloc>
 800856a:	4604      	mov	r4, r0
 800856c:	b930      	cbnz	r0, 800857c <__d2b+0x24>
 800856e:	4602      	mov	r2, r0
 8008570:	4b25      	ldr	r3, [pc, #148]	; (8008608 <__d2b+0xb0>)
 8008572:	4826      	ldr	r0, [pc, #152]	; (800860c <__d2b+0xb4>)
 8008574:	f240 310a 	movw	r1, #778	; 0x30a
 8008578:	f000 faac 	bl	8008ad4 <__assert_func>
 800857c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008584:	bb35      	cbnz	r5, 80085d4 <__d2b+0x7c>
 8008586:	2e00      	cmp	r6, #0
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	d028      	beq.n	80085de <__d2b+0x86>
 800858c:	4668      	mov	r0, sp
 800858e:	9600      	str	r6, [sp, #0]
 8008590:	f7ff fd82 	bl	8008098 <__lo0bits>
 8008594:	9900      	ldr	r1, [sp, #0]
 8008596:	b300      	cbz	r0, 80085da <__d2b+0x82>
 8008598:	9a01      	ldr	r2, [sp, #4]
 800859a:	f1c0 0320 	rsb	r3, r0, #32
 800859e:	fa02 f303 	lsl.w	r3, r2, r3
 80085a2:	430b      	orrs	r3, r1
 80085a4:	40c2      	lsrs	r2, r0
 80085a6:	6163      	str	r3, [r4, #20]
 80085a8:	9201      	str	r2, [sp, #4]
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	61a3      	str	r3, [r4, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf14      	ite	ne
 80085b2:	2202      	movne	r2, #2
 80085b4:	2201      	moveq	r2, #1
 80085b6:	6122      	str	r2, [r4, #16]
 80085b8:	b1d5      	cbz	r5, 80085f0 <__d2b+0x98>
 80085ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085be:	4405      	add	r5, r0
 80085c0:	f8c9 5000 	str.w	r5, [r9]
 80085c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085c8:	f8c8 0000 	str.w	r0, [r8]
 80085cc:	4620      	mov	r0, r4
 80085ce:	b003      	add	sp, #12
 80085d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085d8:	e7d5      	b.n	8008586 <__d2b+0x2e>
 80085da:	6161      	str	r1, [r4, #20]
 80085dc:	e7e5      	b.n	80085aa <__d2b+0x52>
 80085de:	a801      	add	r0, sp, #4
 80085e0:	f7ff fd5a 	bl	8008098 <__lo0bits>
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	6163      	str	r3, [r4, #20]
 80085e8:	2201      	movs	r2, #1
 80085ea:	6122      	str	r2, [r4, #16]
 80085ec:	3020      	adds	r0, #32
 80085ee:	e7e3      	b.n	80085b8 <__d2b+0x60>
 80085f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085f8:	f8c9 0000 	str.w	r0, [r9]
 80085fc:	6918      	ldr	r0, [r3, #16]
 80085fe:	f7ff fd2b 	bl	8008058 <__hi0bits>
 8008602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008606:	e7df      	b.n	80085c8 <__d2b+0x70>
 8008608:	08009863 	.word	0x08009863
 800860c:	08009874 	.word	0x08009874

08008610 <_calloc_r>:
 8008610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008612:	fba1 2402 	umull	r2, r4, r1, r2
 8008616:	b94c      	cbnz	r4, 800862c <_calloc_r+0x1c>
 8008618:	4611      	mov	r1, r2
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	f000 f87a 	bl	8008714 <_malloc_r>
 8008620:	9a01      	ldr	r2, [sp, #4]
 8008622:	4605      	mov	r5, r0
 8008624:	b930      	cbnz	r0, 8008634 <_calloc_r+0x24>
 8008626:	4628      	mov	r0, r5
 8008628:	b003      	add	sp, #12
 800862a:	bd30      	pop	{r4, r5, pc}
 800862c:	220c      	movs	r2, #12
 800862e:	6002      	str	r2, [r0, #0]
 8008630:	2500      	movs	r5, #0
 8008632:	e7f8      	b.n	8008626 <_calloc_r+0x16>
 8008634:	4621      	mov	r1, r4
 8008636:	f7fe f93f 	bl	80068b8 <memset>
 800863a:	e7f4      	b.n	8008626 <_calloc_r+0x16>

0800863c <_free_r>:
 800863c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800863e:	2900      	cmp	r1, #0
 8008640:	d044      	beq.n	80086cc <_free_r+0x90>
 8008642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008646:	9001      	str	r0, [sp, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f1a1 0404 	sub.w	r4, r1, #4
 800864e:	bfb8      	it	lt
 8008650:	18e4      	addlt	r4, r4, r3
 8008652:	f000 fa9b 	bl	8008b8c <__malloc_lock>
 8008656:	4a1e      	ldr	r2, [pc, #120]	; (80086d0 <_free_r+0x94>)
 8008658:	9801      	ldr	r0, [sp, #4]
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	b933      	cbnz	r3, 800866c <_free_r+0x30>
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	6014      	str	r4, [r2, #0]
 8008662:	b003      	add	sp, #12
 8008664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008668:	f000 ba96 	b.w	8008b98 <__malloc_unlock>
 800866c:	42a3      	cmp	r3, r4
 800866e:	d908      	bls.n	8008682 <_free_r+0x46>
 8008670:	6825      	ldr	r5, [r4, #0]
 8008672:	1961      	adds	r1, r4, r5
 8008674:	428b      	cmp	r3, r1
 8008676:	bf01      	itttt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	e7ed      	b.n	800865e <_free_r+0x22>
 8008682:	461a      	mov	r2, r3
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b10b      	cbz	r3, 800868c <_free_r+0x50>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d9fa      	bls.n	8008682 <_free_r+0x46>
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	1855      	adds	r5, r2, r1
 8008690:	42a5      	cmp	r5, r4
 8008692:	d10b      	bne.n	80086ac <_free_r+0x70>
 8008694:	6824      	ldr	r4, [r4, #0]
 8008696:	4421      	add	r1, r4
 8008698:	1854      	adds	r4, r2, r1
 800869a:	42a3      	cmp	r3, r4
 800869c:	6011      	str	r1, [r2, #0]
 800869e:	d1e0      	bne.n	8008662 <_free_r+0x26>
 80086a0:	681c      	ldr	r4, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	6053      	str	r3, [r2, #4]
 80086a6:	4421      	add	r1, r4
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	e7da      	b.n	8008662 <_free_r+0x26>
 80086ac:	d902      	bls.n	80086b4 <_free_r+0x78>
 80086ae:	230c      	movs	r3, #12
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	e7d6      	b.n	8008662 <_free_r+0x26>
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	1961      	adds	r1, r4, r5
 80086b8:	428b      	cmp	r3, r1
 80086ba:	bf04      	itt	eq
 80086bc:	6819      	ldreq	r1, [r3, #0]
 80086be:	685b      	ldreq	r3, [r3, #4]
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	bf04      	itt	eq
 80086c4:	1949      	addeq	r1, r1, r5
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	6054      	str	r4, [r2, #4]
 80086ca:	e7ca      	b.n	8008662 <_free_r+0x26>
 80086cc:	b003      	add	sp, #12
 80086ce:	bd30      	pop	{r4, r5, pc}
 80086d0:	200003d8 	.word	0x200003d8

080086d4 <sbrk_aligned>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4e0e      	ldr	r6, [pc, #56]	; (8008710 <sbrk_aligned+0x3c>)
 80086d8:	460c      	mov	r4, r1
 80086da:	6831      	ldr	r1, [r6, #0]
 80086dc:	4605      	mov	r5, r0
 80086de:	b911      	cbnz	r1, 80086e6 <sbrk_aligned+0x12>
 80086e0:	f000 f9e8 	bl	8008ab4 <_sbrk_r>
 80086e4:	6030      	str	r0, [r6, #0]
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 f9e3 	bl	8008ab4 <_sbrk_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d00a      	beq.n	8008708 <sbrk_aligned+0x34>
 80086f2:	1cc4      	adds	r4, r0, #3
 80086f4:	f024 0403 	bic.w	r4, r4, #3
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d007      	beq.n	800870c <sbrk_aligned+0x38>
 80086fc:	1a21      	subs	r1, r4, r0
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f9d8 	bl	8008ab4 <_sbrk_r>
 8008704:	3001      	adds	r0, #1
 8008706:	d101      	bne.n	800870c <sbrk_aligned+0x38>
 8008708:	f04f 34ff 	mov.w	r4, #4294967295
 800870c:	4620      	mov	r0, r4
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	200003dc 	.word	0x200003dc

08008714 <_malloc_r>:
 8008714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	1ccd      	adds	r5, r1, #3
 800871a:	f025 0503 	bic.w	r5, r5, #3
 800871e:	3508      	adds	r5, #8
 8008720:	2d0c      	cmp	r5, #12
 8008722:	bf38      	it	cc
 8008724:	250c      	movcc	r5, #12
 8008726:	2d00      	cmp	r5, #0
 8008728:	4607      	mov	r7, r0
 800872a:	db01      	blt.n	8008730 <_malloc_r+0x1c>
 800872c:	42a9      	cmp	r1, r5
 800872e:	d905      	bls.n	800873c <_malloc_r+0x28>
 8008730:	230c      	movs	r3, #12
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	2600      	movs	r6, #0
 8008736:	4630      	mov	r0, r6
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	4e2e      	ldr	r6, [pc, #184]	; (80087f8 <_malloc_r+0xe4>)
 800873e:	f000 fa25 	bl	8008b8c <__malloc_lock>
 8008742:	6833      	ldr	r3, [r6, #0]
 8008744:	461c      	mov	r4, r3
 8008746:	bb34      	cbnz	r4, 8008796 <_malloc_r+0x82>
 8008748:	4629      	mov	r1, r5
 800874a:	4638      	mov	r0, r7
 800874c:	f7ff ffc2 	bl	80086d4 <sbrk_aligned>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	4604      	mov	r4, r0
 8008754:	d14d      	bne.n	80087f2 <_malloc_r+0xde>
 8008756:	6834      	ldr	r4, [r6, #0]
 8008758:	4626      	mov	r6, r4
 800875a:	2e00      	cmp	r6, #0
 800875c:	d140      	bne.n	80087e0 <_malloc_r+0xcc>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	4631      	mov	r1, r6
 8008762:	4638      	mov	r0, r7
 8008764:	eb04 0803 	add.w	r8, r4, r3
 8008768:	f000 f9a4 	bl	8008ab4 <_sbrk_r>
 800876c:	4580      	cmp	r8, r0
 800876e:	d13a      	bne.n	80087e6 <_malloc_r+0xd2>
 8008770:	6821      	ldr	r1, [r4, #0]
 8008772:	3503      	adds	r5, #3
 8008774:	1a6d      	subs	r5, r5, r1
 8008776:	f025 0503 	bic.w	r5, r5, #3
 800877a:	3508      	adds	r5, #8
 800877c:	2d0c      	cmp	r5, #12
 800877e:	bf38      	it	cc
 8008780:	250c      	movcc	r5, #12
 8008782:	4629      	mov	r1, r5
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff ffa5 	bl	80086d4 <sbrk_aligned>
 800878a:	3001      	adds	r0, #1
 800878c:	d02b      	beq.n	80087e6 <_malloc_r+0xd2>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	442b      	add	r3, r5
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	e00e      	b.n	80087b4 <_malloc_r+0xa0>
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	1b52      	subs	r2, r2, r5
 800879a:	d41e      	bmi.n	80087da <_malloc_r+0xc6>
 800879c:	2a0b      	cmp	r2, #11
 800879e:	d916      	bls.n	80087ce <_malloc_r+0xba>
 80087a0:	1961      	adds	r1, r4, r5
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	6025      	str	r5, [r4, #0]
 80087a6:	bf18      	it	ne
 80087a8:	6059      	strne	r1, [r3, #4]
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	bf08      	it	eq
 80087ae:	6031      	streq	r1, [r6, #0]
 80087b0:	5162      	str	r2, [r4, r5]
 80087b2:	604b      	str	r3, [r1, #4]
 80087b4:	4638      	mov	r0, r7
 80087b6:	f104 060b 	add.w	r6, r4, #11
 80087ba:	f000 f9ed 	bl	8008b98 <__malloc_unlock>
 80087be:	f026 0607 	bic.w	r6, r6, #7
 80087c2:	1d23      	adds	r3, r4, #4
 80087c4:	1af2      	subs	r2, r6, r3
 80087c6:	d0b6      	beq.n	8008736 <_malloc_r+0x22>
 80087c8:	1b9b      	subs	r3, r3, r6
 80087ca:	50a3      	str	r3, [r4, r2]
 80087cc:	e7b3      	b.n	8008736 <_malloc_r+0x22>
 80087ce:	6862      	ldr	r2, [r4, #4]
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	bf0c      	ite	eq
 80087d4:	6032      	streq	r2, [r6, #0]
 80087d6:	605a      	strne	r2, [r3, #4]
 80087d8:	e7ec      	b.n	80087b4 <_malloc_r+0xa0>
 80087da:	4623      	mov	r3, r4
 80087dc:	6864      	ldr	r4, [r4, #4]
 80087de:	e7b2      	b.n	8008746 <_malloc_r+0x32>
 80087e0:	4634      	mov	r4, r6
 80087e2:	6876      	ldr	r6, [r6, #4]
 80087e4:	e7b9      	b.n	800875a <_malloc_r+0x46>
 80087e6:	230c      	movs	r3, #12
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4638      	mov	r0, r7
 80087ec:	f000 f9d4 	bl	8008b98 <__malloc_unlock>
 80087f0:	e7a1      	b.n	8008736 <_malloc_r+0x22>
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	e7de      	b.n	80087b4 <_malloc_r+0xa0>
 80087f6:	bf00      	nop
 80087f8:	200003d8 	.word	0x200003d8

080087fc <__ssputs_r>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	688e      	ldr	r6, [r1, #8]
 8008802:	429e      	cmp	r6, r3
 8008804:	4682      	mov	sl, r0
 8008806:	460c      	mov	r4, r1
 8008808:	4690      	mov	r8, r2
 800880a:	461f      	mov	r7, r3
 800880c:	d838      	bhi.n	8008880 <__ssputs_r+0x84>
 800880e:	898a      	ldrh	r2, [r1, #12]
 8008810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008814:	d032      	beq.n	800887c <__ssputs_r+0x80>
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	6909      	ldr	r1, [r1, #16]
 800881a:	eba5 0901 	sub.w	r9, r5, r1
 800881e:	6965      	ldr	r5, [r4, #20]
 8008820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008828:	3301      	adds	r3, #1
 800882a:	444b      	add	r3, r9
 800882c:	106d      	asrs	r5, r5, #1
 800882e:	429d      	cmp	r5, r3
 8008830:	bf38      	it	cc
 8008832:	461d      	movcc	r5, r3
 8008834:	0553      	lsls	r3, r2, #21
 8008836:	d531      	bpl.n	800889c <__ssputs_r+0xa0>
 8008838:	4629      	mov	r1, r5
 800883a:	f7ff ff6b 	bl	8008714 <_malloc_r>
 800883e:	4606      	mov	r6, r0
 8008840:	b950      	cbnz	r0, 8008858 <__ssputs_r+0x5c>
 8008842:	230c      	movs	r3, #12
 8008844:	f8ca 3000 	str.w	r3, [sl]
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	464a      	mov	r2, r9
 800885c:	f7ff fb46 	bl	8007eec <memcpy>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886a:	81a3      	strh	r3, [r4, #12]
 800886c:	6126      	str	r6, [r4, #16]
 800886e:	6165      	str	r5, [r4, #20]
 8008870:	444e      	add	r6, r9
 8008872:	eba5 0509 	sub.w	r5, r5, r9
 8008876:	6026      	str	r6, [r4, #0]
 8008878:	60a5      	str	r5, [r4, #8]
 800887a:	463e      	mov	r6, r7
 800887c:	42be      	cmp	r6, r7
 800887e:	d900      	bls.n	8008882 <__ssputs_r+0x86>
 8008880:	463e      	mov	r6, r7
 8008882:	6820      	ldr	r0, [r4, #0]
 8008884:	4632      	mov	r2, r6
 8008886:	4641      	mov	r1, r8
 8008888:	f000 f966 	bl	8008b58 <memmove>
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	1b9b      	subs	r3, r3, r6
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	4433      	add	r3, r6
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	2000      	movs	r0, #0
 800889a:	e7db      	b.n	8008854 <__ssputs_r+0x58>
 800889c:	462a      	mov	r2, r5
 800889e:	f000 f981 	bl	8008ba4 <_realloc_r>
 80088a2:	4606      	mov	r6, r0
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d1e1      	bne.n	800886c <__ssputs_r+0x70>
 80088a8:	6921      	ldr	r1, [r4, #16]
 80088aa:	4650      	mov	r0, sl
 80088ac:	f7ff fec6 	bl	800863c <_free_r>
 80088b0:	e7c7      	b.n	8008842 <__ssputs_r+0x46>
	...

080088b4 <_svfiprintf_r>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	4698      	mov	r8, r3
 80088ba:	898b      	ldrh	r3, [r1, #12]
 80088bc:	061b      	lsls	r3, r3, #24
 80088be:	b09d      	sub	sp, #116	; 0x74
 80088c0:	4607      	mov	r7, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	4614      	mov	r4, r2
 80088c6:	d50e      	bpl.n	80088e6 <_svfiprintf_r+0x32>
 80088c8:	690b      	ldr	r3, [r1, #16]
 80088ca:	b963      	cbnz	r3, 80088e6 <_svfiprintf_r+0x32>
 80088cc:	2140      	movs	r1, #64	; 0x40
 80088ce:	f7ff ff21 	bl	8008714 <_malloc_r>
 80088d2:	6028      	str	r0, [r5, #0]
 80088d4:	6128      	str	r0, [r5, #16]
 80088d6:	b920      	cbnz	r0, 80088e2 <_svfiprintf_r+0x2e>
 80088d8:	230c      	movs	r3, #12
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e0d1      	b.n	8008a86 <_svfiprintf_r+0x1d2>
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	616b      	str	r3, [r5, #20]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9309      	str	r3, [sp, #36]	; 0x24
 80088ea:	2320      	movs	r3, #32
 80088ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80088f4:	2330      	movs	r3, #48	; 0x30
 80088f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008aa0 <_svfiprintf_r+0x1ec>
 80088fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088fe:	f04f 0901 	mov.w	r9, #1
 8008902:	4623      	mov	r3, r4
 8008904:	469a      	mov	sl, r3
 8008906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800890a:	b10a      	cbz	r2, 8008910 <_svfiprintf_r+0x5c>
 800890c:	2a25      	cmp	r2, #37	; 0x25
 800890e:	d1f9      	bne.n	8008904 <_svfiprintf_r+0x50>
 8008910:	ebba 0b04 	subs.w	fp, sl, r4
 8008914:	d00b      	beq.n	800892e <_svfiprintf_r+0x7a>
 8008916:	465b      	mov	r3, fp
 8008918:	4622      	mov	r2, r4
 800891a:	4629      	mov	r1, r5
 800891c:	4638      	mov	r0, r7
 800891e:	f7ff ff6d 	bl	80087fc <__ssputs_r>
 8008922:	3001      	adds	r0, #1
 8008924:	f000 80aa 	beq.w	8008a7c <_svfiprintf_r+0x1c8>
 8008928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892a:	445a      	add	r2, fp
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	f89a 3000 	ldrb.w	r3, [sl]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80a2 	beq.w	8008a7c <_svfiprintf_r+0x1c8>
 8008938:	2300      	movs	r3, #0
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008942:	f10a 0a01 	add.w	sl, sl, #1
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	9307      	str	r3, [sp, #28]
 800894a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800894e:	931a      	str	r3, [sp, #104]	; 0x68
 8008950:	4654      	mov	r4, sl
 8008952:	2205      	movs	r2, #5
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	4851      	ldr	r0, [pc, #324]	; (8008aa0 <_svfiprintf_r+0x1ec>)
 800895a:	f7f7 fc41 	bl	80001e0 <memchr>
 800895e:	9a04      	ldr	r2, [sp, #16]
 8008960:	b9d8      	cbnz	r0, 800899a <_svfiprintf_r+0xe6>
 8008962:	06d0      	lsls	r0, r2, #27
 8008964:	bf44      	itt	mi
 8008966:	2320      	movmi	r3, #32
 8008968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800896c:	0711      	lsls	r1, r2, #28
 800896e:	bf44      	itt	mi
 8008970:	232b      	movmi	r3, #43	; 0x2b
 8008972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008976:	f89a 3000 	ldrb.w	r3, [sl]
 800897a:	2b2a      	cmp	r3, #42	; 0x2a
 800897c:	d015      	beq.n	80089aa <_svfiprintf_r+0xf6>
 800897e:	9a07      	ldr	r2, [sp, #28]
 8008980:	4654      	mov	r4, sl
 8008982:	2000      	movs	r0, #0
 8008984:	f04f 0c0a 	mov.w	ip, #10
 8008988:	4621      	mov	r1, r4
 800898a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800898e:	3b30      	subs	r3, #48	; 0x30
 8008990:	2b09      	cmp	r3, #9
 8008992:	d94e      	bls.n	8008a32 <_svfiprintf_r+0x17e>
 8008994:	b1b0      	cbz	r0, 80089c4 <_svfiprintf_r+0x110>
 8008996:	9207      	str	r2, [sp, #28]
 8008998:	e014      	b.n	80089c4 <_svfiprintf_r+0x110>
 800899a:	eba0 0308 	sub.w	r3, r0, r8
 800899e:	fa09 f303 	lsl.w	r3, r9, r3
 80089a2:	4313      	orrs	r3, r2
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	46a2      	mov	sl, r4
 80089a8:	e7d2      	b.n	8008950 <_svfiprintf_r+0x9c>
 80089aa:	9b03      	ldr	r3, [sp, #12]
 80089ac:	1d19      	adds	r1, r3, #4
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9103      	str	r1, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bfbb      	ittet	lt
 80089b6:	425b      	neglt	r3, r3
 80089b8:	f042 0202 	orrlt.w	r2, r2, #2
 80089bc:	9307      	strge	r3, [sp, #28]
 80089be:	9307      	strlt	r3, [sp, #28]
 80089c0:	bfb8      	it	lt
 80089c2:	9204      	strlt	r2, [sp, #16]
 80089c4:	7823      	ldrb	r3, [r4, #0]
 80089c6:	2b2e      	cmp	r3, #46	; 0x2e
 80089c8:	d10c      	bne.n	80089e4 <_svfiprintf_r+0x130>
 80089ca:	7863      	ldrb	r3, [r4, #1]
 80089cc:	2b2a      	cmp	r3, #42	; 0x2a
 80089ce:	d135      	bne.n	8008a3c <_svfiprintf_r+0x188>
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	9203      	str	r2, [sp, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfb8      	it	lt
 80089dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80089e0:	3402      	adds	r4, #2
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ab0 <_svfiprintf_r+0x1fc>
 80089e8:	7821      	ldrb	r1, [r4, #0]
 80089ea:	2203      	movs	r2, #3
 80089ec:	4650      	mov	r0, sl
 80089ee:	f7f7 fbf7 	bl	80001e0 <memchr>
 80089f2:	b140      	cbz	r0, 8008a06 <_svfiprintf_r+0x152>
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	eba0 000a 	sub.w	r0, r0, sl
 80089fa:	fa03 f000 	lsl.w	r0, r3, r0
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	4303      	orrs	r3, r0
 8008a02:	3401      	adds	r4, #1
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0a:	4826      	ldr	r0, [pc, #152]	; (8008aa4 <_svfiprintf_r+0x1f0>)
 8008a0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a10:	2206      	movs	r2, #6
 8008a12:	f7f7 fbe5 	bl	80001e0 <memchr>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d038      	beq.n	8008a8c <_svfiprintf_r+0x1d8>
 8008a1a:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <_svfiprintf_r+0x1f4>)
 8008a1c:	bb1b      	cbnz	r3, 8008a66 <_svfiprintf_r+0x1b2>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	3307      	adds	r3, #7
 8008a22:	f023 0307 	bic.w	r3, r3, #7
 8008a26:	3308      	adds	r3, #8
 8008a28:	9303      	str	r3, [sp, #12]
 8008a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2c:	4433      	add	r3, r6
 8008a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a30:	e767      	b.n	8008902 <_svfiprintf_r+0x4e>
 8008a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a36:	460c      	mov	r4, r1
 8008a38:	2001      	movs	r0, #1
 8008a3a:	e7a5      	b.n	8008988 <_svfiprintf_r+0xd4>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	3401      	adds	r4, #1
 8008a40:	9305      	str	r3, [sp, #20]
 8008a42:	4619      	mov	r1, r3
 8008a44:	f04f 0c0a 	mov.w	ip, #10
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a4e:	3a30      	subs	r2, #48	; 0x30
 8008a50:	2a09      	cmp	r2, #9
 8008a52:	d903      	bls.n	8008a5c <_svfiprintf_r+0x1a8>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0c5      	beq.n	80089e4 <_svfiprintf_r+0x130>
 8008a58:	9105      	str	r1, [sp, #20]
 8008a5a:	e7c3      	b.n	80089e4 <_svfiprintf_r+0x130>
 8008a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a60:	4604      	mov	r4, r0
 8008a62:	2301      	movs	r3, #1
 8008a64:	e7f0      	b.n	8008a48 <_svfiprintf_r+0x194>
 8008a66:	ab03      	add	r3, sp, #12
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <_svfiprintf_r+0x1f8>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7fd ffc9 	bl	8006a08 <_printf_float>
 8008a76:	1c42      	adds	r2, r0, #1
 8008a78:	4606      	mov	r6, r0
 8008a7a:	d1d6      	bne.n	8008a2a <_svfiprintf_r+0x176>
 8008a7c:	89ab      	ldrh	r3, [r5, #12]
 8008a7e:	065b      	lsls	r3, r3, #25
 8008a80:	f53f af2c 	bmi.w	80088dc <_svfiprintf_r+0x28>
 8008a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a86:	b01d      	add	sp, #116	; 0x74
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	ab03      	add	r3, sp, #12
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	462a      	mov	r2, r5
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <_svfiprintf_r+0x1f8>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	4638      	mov	r0, r7
 8008a98:	f7fe fa5a 	bl	8006f50 <_printf_i>
 8008a9c:	e7eb      	b.n	8008a76 <_svfiprintf_r+0x1c2>
 8008a9e:	bf00      	nop
 8008aa0:	080099cc 	.word	0x080099cc
 8008aa4:	080099d6 	.word	0x080099d6
 8008aa8:	08006a09 	.word	0x08006a09
 8008aac:	080087fd 	.word	0x080087fd
 8008ab0:	080099d2 	.word	0x080099d2

08008ab4 <_sbrk_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d06      	ldr	r5, [pc, #24]	; (8008ad0 <_sbrk_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7f8 ffb8 	bl	8001a34 <_sbrk>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_sbrk_r+0x1a>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_sbrk_r+0x1a>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	200003e0 	.word	0x200003e0

08008ad4 <__assert_func>:
 8008ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <__assert_func+0x2c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4605      	mov	r5, r0
 8008ae0:	68d8      	ldr	r0, [r3, #12]
 8008ae2:	b14c      	cbz	r4, 8008af8 <__assert_func+0x24>
 8008ae4:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <__assert_func+0x30>)
 8008ae6:	9100      	str	r1, [sp, #0]
 8008ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aec:	4906      	ldr	r1, [pc, #24]	; (8008b08 <__assert_func+0x34>)
 8008aee:	462b      	mov	r3, r5
 8008af0:	f000 f80e 	bl	8008b10 <fiprintf>
 8008af4:	f000 faac 	bl	8009050 <abort>
 8008af8:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <__assert_func+0x38>)
 8008afa:	461c      	mov	r4, r3
 8008afc:	e7f3      	b.n	8008ae6 <__assert_func+0x12>
 8008afe:	bf00      	nop
 8008b00:	20000010 	.word	0x20000010
 8008b04:	080099dd 	.word	0x080099dd
 8008b08:	080099ea 	.word	0x080099ea
 8008b0c:	08009a18 	.word	0x08009a18

08008b10 <fiprintf>:
 8008b10:	b40e      	push	{r1, r2, r3}
 8008b12:	b503      	push	{r0, r1, lr}
 8008b14:	4601      	mov	r1, r0
 8008b16:	ab03      	add	r3, sp, #12
 8008b18:	4805      	ldr	r0, [pc, #20]	; (8008b30 <fiprintf+0x20>)
 8008b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b1e:	6800      	ldr	r0, [r0, #0]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	f000 f897 	bl	8008c54 <_vfiprintf_r>
 8008b26:	b002      	add	sp, #8
 8008b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b2c:	b003      	add	sp, #12
 8008b2e:	4770      	bx	lr
 8008b30:	20000010 	.word	0x20000010

08008b34 <__ascii_mbtowc>:
 8008b34:	b082      	sub	sp, #8
 8008b36:	b901      	cbnz	r1, 8008b3a <__ascii_mbtowc+0x6>
 8008b38:	a901      	add	r1, sp, #4
 8008b3a:	b142      	cbz	r2, 8008b4e <__ascii_mbtowc+0x1a>
 8008b3c:	b14b      	cbz	r3, 8008b52 <__ascii_mbtowc+0x1e>
 8008b3e:	7813      	ldrb	r3, [r2, #0]
 8008b40:	600b      	str	r3, [r1, #0]
 8008b42:	7812      	ldrb	r2, [r2, #0]
 8008b44:	1e10      	subs	r0, r2, #0
 8008b46:	bf18      	it	ne
 8008b48:	2001      	movne	r0, #1
 8008b4a:	b002      	add	sp, #8
 8008b4c:	4770      	bx	lr
 8008b4e:	4610      	mov	r0, r2
 8008b50:	e7fb      	b.n	8008b4a <__ascii_mbtowc+0x16>
 8008b52:	f06f 0001 	mvn.w	r0, #1
 8008b56:	e7f8      	b.n	8008b4a <__ascii_mbtowc+0x16>

08008b58 <memmove>:
 8008b58:	4288      	cmp	r0, r1
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	eb01 0402 	add.w	r4, r1, r2
 8008b60:	d902      	bls.n	8008b68 <memmove+0x10>
 8008b62:	4284      	cmp	r4, r0
 8008b64:	4623      	mov	r3, r4
 8008b66:	d807      	bhi.n	8008b78 <memmove+0x20>
 8008b68:	1e43      	subs	r3, r0, #1
 8008b6a:	42a1      	cmp	r1, r4
 8008b6c:	d008      	beq.n	8008b80 <memmove+0x28>
 8008b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b76:	e7f8      	b.n	8008b6a <memmove+0x12>
 8008b78:	4402      	add	r2, r0
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	428a      	cmp	r2, r1
 8008b7e:	d100      	bne.n	8008b82 <memmove+0x2a>
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b8a:	e7f7      	b.n	8008b7c <memmove+0x24>

08008b8c <__malloc_lock>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__malloc_lock+0x8>)
 8008b8e:	f000 bc1f 	b.w	80093d0 <__retarget_lock_acquire_recursive>
 8008b92:	bf00      	nop
 8008b94:	200003e4 	.word	0x200003e4

08008b98 <__malloc_unlock>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__malloc_unlock+0x8>)
 8008b9a:	f000 bc1a 	b.w	80093d2 <__retarget_lock_release_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	200003e4 	.word	0x200003e4

08008ba4 <_realloc_r>:
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4614      	mov	r4, r2
 8008bac:	460e      	mov	r6, r1
 8008bae:	b921      	cbnz	r1, 8008bba <_realloc_r+0x16>
 8008bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	f7ff bdad 	b.w	8008714 <_malloc_r>
 8008bba:	b92a      	cbnz	r2, 8008bc8 <_realloc_r+0x24>
 8008bbc:	f7ff fd3e 	bl	800863c <_free_r>
 8008bc0:	4625      	mov	r5, r4
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	f000 fc6a 	bl	80094a0 <_malloc_usable_size_r>
 8008bcc:	4284      	cmp	r4, r0
 8008bce:	4607      	mov	r7, r0
 8008bd0:	d802      	bhi.n	8008bd8 <_realloc_r+0x34>
 8008bd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bd6:	d812      	bhi.n	8008bfe <_realloc_r+0x5a>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff fd9a 	bl	8008714 <_malloc_r>
 8008be0:	4605      	mov	r5, r0
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d0ed      	beq.n	8008bc2 <_realloc_r+0x1e>
 8008be6:	42bc      	cmp	r4, r7
 8008be8:	4622      	mov	r2, r4
 8008bea:	4631      	mov	r1, r6
 8008bec:	bf28      	it	cs
 8008bee:	463a      	movcs	r2, r7
 8008bf0:	f7ff f97c 	bl	8007eec <memcpy>
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	f7ff fd20 	bl	800863c <_free_r>
 8008bfc:	e7e1      	b.n	8008bc2 <_realloc_r+0x1e>
 8008bfe:	4635      	mov	r5, r6
 8008c00:	e7df      	b.n	8008bc2 <_realloc_r+0x1e>

08008c02 <__sfputc_r>:
 8008c02:	6893      	ldr	r3, [r2, #8]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	b410      	push	{r4}
 8008c0a:	6093      	str	r3, [r2, #8]
 8008c0c:	da08      	bge.n	8008c20 <__sfputc_r+0x1e>
 8008c0e:	6994      	ldr	r4, [r2, #24]
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	db01      	blt.n	8008c18 <__sfputc_r+0x16>
 8008c14:	290a      	cmp	r1, #10
 8008c16:	d103      	bne.n	8008c20 <__sfputc_r+0x1e>
 8008c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c1c:	f000 b94a 	b.w	8008eb4 <__swbuf_r>
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	1c58      	adds	r0, r3, #1
 8008c24:	6010      	str	r0, [r2, #0]
 8008c26:	7019      	strb	r1, [r3, #0]
 8008c28:	4608      	mov	r0, r1
 8008c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <__sfputs_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	4614      	mov	r4, r2
 8008c38:	18d5      	adds	r5, r2, r3
 8008c3a:	42ac      	cmp	r4, r5
 8008c3c:	d101      	bne.n	8008c42 <__sfputs_r+0x12>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e007      	b.n	8008c52 <__sfputs_r+0x22>
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	463a      	mov	r2, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffda 	bl	8008c02 <__sfputc_r>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d1f3      	bne.n	8008c3a <__sfputs_r+0xa>
 8008c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c54 <_vfiprintf_r>:
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c58:	460d      	mov	r5, r1
 8008c5a:	b09d      	sub	sp, #116	; 0x74
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	4698      	mov	r8, r3
 8008c60:	4606      	mov	r6, r0
 8008c62:	b118      	cbz	r0, 8008c6c <_vfiprintf_r+0x18>
 8008c64:	6983      	ldr	r3, [r0, #24]
 8008c66:	b90b      	cbnz	r3, 8008c6c <_vfiprintf_r+0x18>
 8008c68:	f000 fb14 	bl	8009294 <__sinit>
 8008c6c:	4b89      	ldr	r3, [pc, #548]	; (8008e94 <_vfiprintf_r+0x240>)
 8008c6e:	429d      	cmp	r5, r3
 8008c70:	d11b      	bne.n	8008caa <_vfiprintf_r+0x56>
 8008c72:	6875      	ldr	r5, [r6, #4]
 8008c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c76:	07d9      	lsls	r1, r3, #31
 8008c78:	d405      	bmi.n	8008c86 <_vfiprintf_r+0x32>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	059a      	lsls	r2, r3, #22
 8008c7e:	d402      	bmi.n	8008c86 <_vfiprintf_r+0x32>
 8008c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c82:	f000 fba5 	bl	80093d0 <__retarget_lock_acquire_recursive>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	071b      	lsls	r3, r3, #28
 8008c8a:	d501      	bpl.n	8008c90 <_vfiprintf_r+0x3c>
 8008c8c:	692b      	ldr	r3, [r5, #16]
 8008c8e:	b9eb      	cbnz	r3, 8008ccc <_vfiprintf_r+0x78>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f96e 	bl	8008f74 <__swsetup_r>
 8008c98:	b1c0      	cbz	r0, 8008ccc <_vfiprintf_r+0x78>
 8008c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c9c:	07dc      	lsls	r4, r3, #31
 8008c9e:	d50e      	bpl.n	8008cbe <_vfiprintf_r+0x6a>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b01d      	add	sp, #116	; 0x74
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	4b7b      	ldr	r3, [pc, #492]	; (8008e98 <_vfiprintf_r+0x244>)
 8008cac:	429d      	cmp	r5, r3
 8008cae:	d101      	bne.n	8008cb4 <_vfiprintf_r+0x60>
 8008cb0:	68b5      	ldr	r5, [r6, #8]
 8008cb2:	e7df      	b.n	8008c74 <_vfiprintf_r+0x20>
 8008cb4:	4b79      	ldr	r3, [pc, #484]	; (8008e9c <_vfiprintf_r+0x248>)
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	bf08      	it	eq
 8008cba:	68f5      	ldreq	r5, [r6, #12]
 8008cbc:	e7da      	b.n	8008c74 <_vfiprintf_r+0x20>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	0598      	lsls	r0, r3, #22
 8008cc2:	d4ed      	bmi.n	8008ca0 <_vfiprintf_r+0x4c>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cc6:	f000 fb84 	bl	80093d2 <__retarget_lock_release_recursive>
 8008cca:	e7e9      	b.n	8008ca0 <_vfiprintf_r+0x4c>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cda:	2330      	movs	r3, #48	; 0x30
 8008cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ea0 <_vfiprintf_r+0x24c>
 8008ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce4:	f04f 0901 	mov.w	r9, #1
 8008ce8:	4623      	mov	r3, r4
 8008cea:	469a      	mov	sl, r3
 8008cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf0:	b10a      	cbz	r2, 8008cf6 <_vfiprintf_r+0xa2>
 8008cf2:	2a25      	cmp	r2, #37	; 0x25
 8008cf4:	d1f9      	bne.n	8008cea <_vfiprintf_r+0x96>
 8008cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfa:	d00b      	beq.n	8008d14 <_vfiprintf_r+0xc0>
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ff94 	bl	8008c30 <__sfputs_r>
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f000 80aa 	beq.w	8008e62 <_vfiprintf_r+0x20e>
 8008d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d10:	445a      	add	r2, fp
 8008d12:	9209      	str	r2, [sp, #36]	; 0x24
 8008d14:	f89a 3000 	ldrb.w	r3, [sl]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 80a2 	beq.w	8008e62 <_vfiprintf_r+0x20e>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f04f 32ff 	mov.w	r2, #4294967295
 8008d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d34:	931a      	str	r3, [sp, #104]	; 0x68
 8008d36:	4654      	mov	r4, sl
 8008d38:	2205      	movs	r2, #5
 8008d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3e:	4858      	ldr	r0, [pc, #352]	; (8008ea0 <_vfiprintf_r+0x24c>)
 8008d40:	f7f7 fa4e 	bl	80001e0 <memchr>
 8008d44:	9a04      	ldr	r2, [sp, #16]
 8008d46:	b9d8      	cbnz	r0, 8008d80 <_vfiprintf_r+0x12c>
 8008d48:	06d1      	lsls	r1, r2, #27
 8008d4a:	bf44      	itt	mi
 8008d4c:	2320      	movmi	r3, #32
 8008d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d52:	0713      	lsls	r3, r2, #28
 8008d54:	bf44      	itt	mi
 8008d56:	232b      	movmi	r3, #43	; 0x2b
 8008d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d60:	2b2a      	cmp	r3, #42	; 0x2a
 8008d62:	d015      	beq.n	8008d90 <_vfiprintf_r+0x13c>
 8008d64:	9a07      	ldr	r2, [sp, #28]
 8008d66:	4654      	mov	r4, sl
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f04f 0c0a 	mov.w	ip, #10
 8008d6e:	4621      	mov	r1, r4
 8008d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d74:	3b30      	subs	r3, #48	; 0x30
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d94e      	bls.n	8008e18 <_vfiprintf_r+0x1c4>
 8008d7a:	b1b0      	cbz	r0, 8008daa <_vfiprintf_r+0x156>
 8008d7c:	9207      	str	r2, [sp, #28]
 8008d7e:	e014      	b.n	8008daa <_vfiprintf_r+0x156>
 8008d80:	eba0 0308 	sub.w	r3, r0, r8
 8008d84:	fa09 f303 	lsl.w	r3, r9, r3
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	46a2      	mov	sl, r4
 8008d8e:	e7d2      	b.n	8008d36 <_vfiprintf_r+0xe2>
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	1d19      	adds	r1, r3, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	9103      	str	r1, [sp, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfbb      	ittet	lt
 8008d9c:	425b      	neglt	r3, r3
 8008d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8008da2:	9307      	strge	r3, [sp, #28]
 8008da4:	9307      	strlt	r3, [sp, #28]
 8008da6:	bfb8      	it	lt
 8008da8:	9204      	strlt	r2, [sp, #16]
 8008daa:	7823      	ldrb	r3, [r4, #0]
 8008dac:	2b2e      	cmp	r3, #46	; 0x2e
 8008dae:	d10c      	bne.n	8008dca <_vfiprintf_r+0x176>
 8008db0:	7863      	ldrb	r3, [r4, #1]
 8008db2:	2b2a      	cmp	r3, #42	; 0x2a
 8008db4:	d135      	bne.n	8008e22 <_vfiprintf_r+0x1ce>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	9203      	str	r2, [sp, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfb8      	it	lt
 8008dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dc6:	3402      	adds	r4, #2
 8008dc8:	9305      	str	r3, [sp, #20]
 8008dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008eb0 <_vfiprintf_r+0x25c>
 8008dce:	7821      	ldrb	r1, [r4, #0]
 8008dd0:	2203      	movs	r2, #3
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	f7f7 fa04 	bl	80001e0 <memchr>
 8008dd8:	b140      	cbz	r0, 8008dec <_vfiprintf_r+0x198>
 8008dda:	2340      	movs	r3, #64	; 0x40
 8008ddc:	eba0 000a 	sub.w	r0, r0, sl
 8008de0:	fa03 f000 	lsl.w	r0, r3, r0
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	4303      	orrs	r3, r0
 8008de8:	3401      	adds	r4, #1
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df0:	482c      	ldr	r0, [pc, #176]	; (8008ea4 <_vfiprintf_r+0x250>)
 8008df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df6:	2206      	movs	r2, #6
 8008df8:	f7f7 f9f2 	bl	80001e0 <memchr>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d03f      	beq.n	8008e80 <_vfiprintf_r+0x22c>
 8008e00:	4b29      	ldr	r3, [pc, #164]	; (8008ea8 <_vfiprintf_r+0x254>)
 8008e02:	bb1b      	cbnz	r3, 8008e4c <_vfiprintf_r+0x1f8>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	3307      	adds	r3, #7
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e12:	443b      	add	r3, r7
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	e767      	b.n	8008ce8 <_vfiprintf_r+0x94>
 8008e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	2001      	movs	r0, #1
 8008e20:	e7a5      	b.n	8008d6e <_vfiprintf_r+0x11a>
 8008e22:	2300      	movs	r3, #0
 8008e24:	3401      	adds	r4, #1
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e34:	3a30      	subs	r2, #48	; 0x30
 8008e36:	2a09      	cmp	r2, #9
 8008e38:	d903      	bls.n	8008e42 <_vfiprintf_r+0x1ee>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c5      	beq.n	8008dca <_vfiprintf_r+0x176>
 8008e3e:	9105      	str	r1, [sp, #20]
 8008e40:	e7c3      	b.n	8008dca <_vfiprintf_r+0x176>
 8008e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e46:	4604      	mov	r4, r0
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7f0      	b.n	8008e2e <_vfiprintf_r+0x1da>
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	462a      	mov	r2, r5
 8008e52:	4b16      	ldr	r3, [pc, #88]	; (8008eac <_vfiprintf_r+0x258>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	4630      	mov	r0, r6
 8008e58:	f7fd fdd6 	bl	8006a08 <_printf_float>
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	1c78      	adds	r0, r7, #1
 8008e60:	d1d6      	bne.n	8008e10 <_vfiprintf_r+0x1bc>
 8008e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e64:	07d9      	lsls	r1, r3, #31
 8008e66:	d405      	bmi.n	8008e74 <_vfiprintf_r+0x220>
 8008e68:	89ab      	ldrh	r3, [r5, #12]
 8008e6a:	059a      	lsls	r2, r3, #22
 8008e6c:	d402      	bmi.n	8008e74 <_vfiprintf_r+0x220>
 8008e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e70:	f000 faaf 	bl	80093d2 <__retarget_lock_release_recursive>
 8008e74:	89ab      	ldrh	r3, [r5, #12]
 8008e76:	065b      	lsls	r3, r3, #25
 8008e78:	f53f af12 	bmi.w	8008ca0 <_vfiprintf_r+0x4c>
 8008e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e7e:	e711      	b.n	8008ca4 <_vfiprintf_r+0x50>
 8008e80:	ab03      	add	r3, sp, #12
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	462a      	mov	r2, r5
 8008e86:	4b09      	ldr	r3, [pc, #36]	; (8008eac <_vfiprintf_r+0x258>)
 8008e88:	a904      	add	r1, sp, #16
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7fe f860 	bl	8006f50 <_printf_i>
 8008e90:	e7e4      	b.n	8008e5c <_vfiprintf_r+0x208>
 8008e92:	bf00      	nop
 8008e94:	08009b44 	.word	0x08009b44
 8008e98:	08009b64 	.word	0x08009b64
 8008e9c:	08009b24 	.word	0x08009b24
 8008ea0:	080099cc 	.word	0x080099cc
 8008ea4:	080099d6 	.word	0x080099d6
 8008ea8:	08006a09 	.word	0x08006a09
 8008eac:	08008c31 	.word	0x08008c31
 8008eb0:	080099d2 	.word	0x080099d2

08008eb4 <__swbuf_r>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	460e      	mov	r6, r1
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4605      	mov	r5, r0
 8008ebc:	b118      	cbz	r0, 8008ec6 <__swbuf_r+0x12>
 8008ebe:	6983      	ldr	r3, [r0, #24]
 8008ec0:	b90b      	cbnz	r3, 8008ec6 <__swbuf_r+0x12>
 8008ec2:	f000 f9e7 	bl	8009294 <__sinit>
 8008ec6:	4b21      	ldr	r3, [pc, #132]	; (8008f4c <__swbuf_r+0x98>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d12b      	bne.n	8008f24 <__swbuf_r+0x70>
 8008ecc:	686c      	ldr	r4, [r5, #4]
 8008ece:	69a3      	ldr	r3, [r4, #24]
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	071a      	lsls	r2, r3, #28
 8008ed6:	d52f      	bpl.n	8008f38 <__swbuf_r+0x84>
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b36b      	cbz	r3, 8008f38 <__swbuf_r+0x84>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	1ac0      	subs	r0, r0, r3
 8008ee2:	6963      	ldr	r3, [r4, #20]
 8008ee4:	b2f6      	uxtb	r6, r6
 8008ee6:	4283      	cmp	r3, r0
 8008ee8:	4637      	mov	r7, r6
 8008eea:	dc04      	bgt.n	8008ef6 <__swbuf_r+0x42>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f93c 	bl	800916c <_fflush_r>
 8008ef4:	bb30      	cbnz	r0, 8008f44 <__swbuf_r+0x90>
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	6022      	str	r2, [r4, #0]
 8008f02:	701e      	strb	r6, [r3, #0]
 8008f04:	6963      	ldr	r3, [r4, #20]
 8008f06:	3001      	adds	r0, #1
 8008f08:	4283      	cmp	r3, r0
 8008f0a:	d004      	beq.n	8008f16 <__swbuf_r+0x62>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	07db      	lsls	r3, r3, #31
 8008f10:	d506      	bpl.n	8008f20 <__swbuf_r+0x6c>
 8008f12:	2e0a      	cmp	r6, #10
 8008f14:	d104      	bne.n	8008f20 <__swbuf_r+0x6c>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 f927 	bl	800916c <_fflush_r>
 8008f1e:	b988      	cbnz	r0, 8008f44 <__swbuf_r+0x90>
 8008f20:	4638      	mov	r0, r7
 8008f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <__swbuf_r+0x9c>)
 8008f26:	429c      	cmp	r4, r3
 8008f28:	d101      	bne.n	8008f2e <__swbuf_r+0x7a>
 8008f2a:	68ac      	ldr	r4, [r5, #8]
 8008f2c:	e7cf      	b.n	8008ece <__swbuf_r+0x1a>
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <__swbuf_r+0xa0>)
 8008f30:	429c      	cmp	r4, r3
 8008f32:	bf08      	it	eq
 8008f34:	68ec      	ldreq	r4, [r5, #12]
 8008f36:	e7ca      	b.n	8008ece <__swbuf_r+0x1a>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 f81a 	bl	8008f74 <__swsetup_r>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d0cb      	beq.n	8008edc <__swbuf_r+0x28>
 8008f44:	f04f 37ff 	mov.w	r7, #4294967295
 8008f48:	e7ea      	b.n	8008f20 <__swbuf_r+0x6c>
 8008f4a:	bf00      	nop
 8008f4c:	08009b44 	.word	0x08009b44
 8008f50:	08009b64 	.word	0x08009b64
 8008f54:	08009b24 	.word	0x08009b24

08008f58 <__ascii_wctomb>:
 8008f58:	b149      	cbz	r1, 8008f6e <__ascii_wctomb+0x16>
 8008f5a:	2aff      	cmp	r2, #255	; 0xff
 8008f5c:	bf85      	ittet	hi
 8008f5e:	238a      	movhi	r3, #138	; 0x8a
 8008f60:	6003      	strhi	r3, [r0, #0]
 8008f62:	700a      	strbls	r2, [r1, #0]
 8008f64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f68:	bf98      	it	ls
 8008f6a:	2001      	movls	r0, #1
 8008f6c:	4770      	bx	lr
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4770      	bx	lr
	...

08008f74 <__swsetup_r>:
 8008f74:	4b32      	ldr	r3, [pc, #200]	; (8009040 <__swsetup_r+0xcc>)
 8008f76:	b570      	push	{r4, r5, r6, lr}
 8008f78:	681d      	ldr	r5, [r3, #0]
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	b125      	cbz	r5, 8008f8a <__swsetup_r+0x16>
 8008f80:	69ab      	ldr	r3, [r5, #24]
 8008f82:	b913      	cbnz	r3, 8008f8a <__swsetup_r+0x16>
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f985 	bl	8009294 <__sinit>
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <__swsetup_r+0xd0>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d10f      	bne.n	8008fb0 <__swsetup_r+0x3c>
 8008f90:	686c      	ldr	r4, [r5, #4]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f98:	0719      	lsls	r1, r3, #28
 8008f9a:	d42c      	bmi.n	8008ff6 <__swsetup_r+0x82>
 8008f9c:	06dd      	lsls	r5, r3, #27
 8008f9e:	d411      	bmi.n	8008fc4 <__swsetup_r+0x50>
 8008fa0:	2309      	movs	r3, #9
 8008fa2:	6033      	str	r3, [r6, #0]
 8008fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
 8008fae:	e03e      	b.n	800902e <__swsetup_r+0xba>
 8008fb0:	4b25      	ldr	r3, [pc, #148]	; (8009048 <__swsetup_r+0xd4>)
 8008fb2:	429c      	cmp	r4, r3
 8008fb4:	d101      	bne.n	8008fba <__swsetup_r+0x46>
 8008fb6:	68ac      	ldr	r4, [r5, #8]
 8008fb8:	e7eb      	b.n	8008f92 <__swsetup_r+0x1e>
 8008fba:	4b24      	ldr	r3, [pc, #144]	; (800904c <__swsetup_r+0xd8>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	bf08      	it	eq
 8008fc0:	68ec      	ldreq	r4, [r5, #12]
 8008fc2:	e7e6      	b.n	8008f92 <__swsetup_r+0x1e>
 8008fc4:	0758      	lsls	r0, r3, #29
 8008fc6:	d512      	bpl.n	8008fee <__swsetup_r+0x7a>
 8008fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fca:	b141      	cbz	r1, 8008fde <__swsetup_r+0x6a>
 8008fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	d002      	beq.n	8008fda <__swsetup_r+0x66>
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff fb31 	bl	800863c <_free_r>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f043 0308 	orr.w	r3, r3, #8
 8008ff4:	81a3      	strh	r3, [r4, #12]
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	b94b      	cbnz	r3, 800900e <__swsetup_r+0x9a>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009004:	d003      	beq.n	800900e <__swsetup_r+0x9a>
 8009006:	4621      	mov	r1, r4
 8009008:	4630      	mov	r0, r6
 800900a:	f000 fa09 	bl	8009420 <__smakebuf_r>
 800900e:	89a0      	ldrh	r0, [r4, #12]
 8009010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009014:	f010 0301 	ands.w	r3, r0, #1
 8009018:	d00a      	beq.n	8009030 <__swsetup_r+0xbc>
 800901a:	2300      	movs	r3, #0
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6963      	ldr	r3, [r4, #20]
 8009020:	425b      	negs	r3, r3
 8009022:	61a3      	str	r3, [r4, #24]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	b943      	cbnz	r3, 800903a <__swsetup_r+0xc6>
 8009028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800902c:	d1ba      	bne.n	8008fa4 <__swsetup_r+0x30>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	0781      	lsls	r1, r0, #30
 8009032:	bf58      	it	pl
 8009034:	6963      	ldrpl	r3, [r4, #20]
 8009036:	60a3      	str	r3, [r4, #8]
 8009038:	e7f4      	b.n	8009024 <__swsetup_r+0xb0>
 800903a:	2000      	movs	r0, #0
 800903c:	e7f7      	b.n	800902e <__swsetup_r+0xba>
 800903e:	bf00      	nop
 8009040:	20000010 	.word	0x20000010
 8009044:	08009b44 	.word	0x08009b44
 8009048:	08009b64 	.word	0x08009b64
 800904c:	08009b24 	.word	0x08009b24

08009050 <abort>:
 8009050:	b508      	push	{r3, lr}
 8009052:	2006      	movs	r0, #6
 8009054:	f000 fa54 	bl	8009500 <raise>
 8009058:	2001      	movs	r0, #1
 800905a:	f7f8 fc73 	bl	8001944 <_exit>
	...

08009060 <__sflush_r>:
 8009060:	898a      	ldrh	r2, [r1, #12]
 8009062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009066:	4605      	mov	r5, r0
 8009068:	0710      	lsls	r0, r2, #28
 800906a:	460c      	mov	r4, r1
 800906c:	d458      	bmi.n	8009120 <__sflush_r+0xc0>
 800906e:	684b      	ldr	r3, [r1, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	dc05      	bgt.n	8009080 <__sflush_r+0x20>
 8009074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009076:	2b00      	cmp	r3, #0
 8009078:	dc02      	bgt.n	8009080 <__sflush_r+0x20>
 800907a:	2000      	movs	r0, #0
 800907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009082:	2e00      	cmp	r6, #0
 8009084:	d0f9      	beq.n	800907a <__sflush_r+0x1a>
 8009086:	2300      	movs	r3, #0
 8009088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800908c:	682f      	ldr	r7, [r5, #0]
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	d032      	beq.n	80090f8 <__sflush_r+0x98>
 8009092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	075a      	lsls	r2, r3, #29
 8009098:	d505      	bpl.n	80090a6 <__sflush_r+0x46>
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	1ac0      	subs	r0, r0, r3
 800909e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090a0:	b10b      	cbz	r3, 80090a6 <__sflush_r+0x46>
 80090a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090a4:	1ac0      	subs	r0, r0, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	4602      	mov	r2, r0
 80090aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ac:	6a21      	ldr	r1, [r4, #32]
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b0      	blx	r6
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	d106      	bne.n	80090c6 <__sflush_r+0x66>
 80090b8:	6829      	ldr	r1, [r5, #0]
 80090ba:	291d      	cmp	r1, #29
 80090bc:	d82c      	bhi.n	8009118 <__sflush_r+0xb8>
 80090be:	4a2a      	ldr	r2, [pc, #168]	; (8009168 <__sflush_r+0x108>)
 80090c0:	40ca      	lsrs	r2, r1
 80090c2:	07d6      	lsls	r6, r2, #31
 80090c4:	d528      	bpl.n	8009118 <__sflush_r+0xb8>
 80090c6:	2200      	movs	r2, #0
 80090c8:	6062      	str	r2, [r4, #4]
 80090ca:	04d9      	lsls	r1, r3, #19
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	d504      	bpl.n	80090dc <__sflush_r+0x7c>
 80090d2:	1c42      	adds	r2, r0, #1
 80090d4:	d101      	bne.n	80090da <__sflush_r+0x7a>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	b903      	cbnz	r3, 80090dc <__sflush_r+0x7c>
 80090da:	6560      	str	r0, [r4, #84]	; 0x54
 80090dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090de:	602f      	str	r7, [r5, #0]
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d0ca      	beq.n	800907a <__sflush_r+0x1a>
 80090e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090e8:	4299      	cmp	r1, r3
 80090ea:	d002      	beq.n	80090f2 <__sflush_r+0x92>
 80090ec:	4628      	mov	r0, r5
 80090ee:	f7ff faa5 	bl	800863c <_free_r>
 80090f2:	2000      	movs	r0, #0
 80090f4:	6360      	str	r0, [r4, #52]	; 0x34
 80090f6:	e7c1      	b.n	800907c <__sflush_r+0x1c>
 80090f8:	6a21      	ldr	r1, [r4, #32]
 80090fa:	2301      	movs	r3, #1
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b0      	blx	r6
 8009100:	1c41      	adds	r1, r0, #1
 8009102:	d1c7      	bne.n	8009094 <__sflush_r+0x34>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0c4      	beq.n	8009094 <__sflush_r+0x34>
 800910a:	2b1d      	cmp	r3, #29
 800910c:	d001      	beq.n	8009112 <__sflush_r+0xb2>
 800910e:	2b16      	cmp	r3, #22
 8009110:	d101      	bne.n	8009116 <__sflush_r+0xb6>
 8009112:	602f      	str	r7, [r5, #0]
 8009114:	e7b1      	b.n	800907a <__sflush_r+0x1a>
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	e7ad      	b.n	800907c <__sflush_r+0x1c>
 8009120:	690f      	ldr	r7, [r1, #16]
 8009122:	2f00      	cmp	r7, #0
 8009124:	d0a9      	beq.n	800907a <__sflush_r+0x1a>
 8009126:	0793      	lsls	r3, r2, #30
 8009128:	680e      	ldr	r6, [r1, #0]
 800912a:	bf08      	it	eq
 800912c:	694b      	ldreq	r3, [r1, #20]
 800912e:	600f      	str	r7, [r1, #0]
 8009130:	bf18      	it	ne
 8009132:	2300      	movne	r3, #0
 8009134:	eba6 0807 	sub.w	r8, r6, r7
 8009138:	608b      	str	r3, [r1, #8]
 800913a:	f1b8 0f00 	cmp.w	r8, #0
 800913e:	dd9c      	ble.n	800907a <__sflush_r+0x1a>
 8009140:	6a21      	ldr	r1, [r4, #32]
 8009142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009144:	4643      	mov	r3, r8
 8009146:	463a      	mov	r2, r7
 8009148:	4628      	mov	r0, r5
 800914a:	47b0      	blx	r6
 800914c:	2800      	cmp	r0, #0
 800914e:	dc06      	bgt.n	800915e <__sflush_r+0xfe>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	e78e      	b.n	800907c <__sflush_r+0x1c>
 800915e:	4407      	add	r7, r0
 8009160:	eba8 0800 	sub.w	r8, r8, r0
 8009164:	e7e9      	b.n	800913a <__sflush_r+0xda>
 8009166:	bf00      	nop
 8009168:	20400001 	.word	0x20400001

0800916c <_fflush_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	690b      	ldr	r3, [r1, #16]
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	b913      	cbnz	r3, 800917c <_fflush_r+0x10>
 8009176:	2500      	movs	r5, #0
 8009178:	4628      	mov	r0, r5
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	b118      	cbz	r0, 8009186 <_fflush_r+0x1a>
 800917e:	6983      	ldr	r3, [r0, #24]
 8009180:	b90b      	cbnz	r3, 8009186 <_fflush_r+0x1a>
 8009182:	f000 f887 	bl	8009294 <__sinit>
 8009186:	4b14      	ldr	r3, [pc, #80]	; (80091d8 <_fflush_r+0x6c>)
 8009188:	429c      	cmp	r4, r3
 800918a:	d11b      	bne.n	80091c4 <_fflush_r+0x58>
 800918c:	686c      	ldr	r4, [r5, #4]
 800918e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0ef      	beq.n	8009176 <_fflush_r+0xa>
 8009196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009198:	07d0      	lsls	r0, r2, #31
 800919a:	d404      	bmi.n	80091a6 <_fflush_r+0x3a>
 800919c:	0599      	lsls	r1, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_fflush_r+0x3a>
 80091a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091a2:	f000 f915 	bl	80093d0 <__retarget_lock_acquire_recursive>
 80091a6:	4628      	mov	r0, r5
 80091a8:	4621      	mov	r1, r4
 80091aa:	f7ff ff59 	bl	8009060 <__sflush_r>
 80091ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091b0:	07da      	lsls	r2, r3, #31
 80091b2:	4605      	mov	r5, r0
 80091b4:	d4e0      	bmi.n	8009178 <_fflush_r+0xc>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	059b      	lsls	r3, r3, #22
 80091ba:	d4dd      	bmi.n	8009178 <_fflush_r+0xc>
 80091bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091be:	f000 f908 	bl	80093d2 <__retarget_lock_release_recursive>
 80091c2:	e7d9      	b.n	8009178 <_fflush_r+0xc>
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <_fflush_r+0x70>)
 80091c6:	429c      	cmp	r4, r3
 80091c8:	d101      	bne.n	80091ce <_fflush_r+0x62>
 80091ca:	68ac      	ldr	r4, [r5, #8]
 80091cc:	e7df      	b.n	800918e <_fflush_r+0x22>
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <_fflush_r+0x74>)
 80091d0:	429c      	cmp	r4, r3
 80091d2:	bf08      	it	eq
 80091d4:	68ec      	ldreq	r4, [r5, #12]
 80091d6:	e7da      	b.n	800918e <_fflush_r+0x22>
 80091d8:	08009b44 	.word	0x08009b44
 80091dc:	08009b64 	.word	0x08009b64
 80091e0:	08009b24 	.word	0x08009b24

080091e4 <std>:
 80091e4:	2300      	movs	r3, #0
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	e9c0 3300 	strd	r3, r3, [r0]
 80091ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091f2:	6083      	str	r3, [r0, #8]
 80091f4:	8181      	strh	r1, [r0, #12]
 80091f6:	6643      	str	r3, [r0, #100]	; 0x64
 80091f8:	81c2      	strh	r2, [r0, #14]
 80091fa:	6183      	str	r3, [r0, #24]
 80091fc:	4619      	mov	r1, r3
 80091fe:	2208      	movs	r2, #8
 8009200:	305c      	adds	r0, #92	; 0x5c
 8009202:	f7fd fb59 	bl	80068b8 <memset>
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <std+0x38>)
 8009208:	6263      	str	r3, [r4, #36]	; 0x24
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <std+0x3c>)
 800920c:	62a3      	str	r3, [r4, #40]	; 0x28
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <std+0x40>)
 8009210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <std+0x44>)
 8009214:	6224      	str	r4, [r4, #32]
 8009216:	6323      	str	r3, [r4, #48]	; 0x30
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop
 800921c:	08009539 	.word	0x08009539
 8009220:	0800955b 	.word	0x0800955b
 8009224:	08009593 	.word	0x08009593
 8009228:	080095b7 	.word	0x080095b7

0800922c <_cleanup_r>:
 800922c:	4901      	ldr	r1, [pc, #4]	; (8009234 <_cleanup_r+0x8>)
 800922e:	f000 b8af 	b.w	8009390 <_fwalk_reent>
 8009232:	bf00      	nop
 8009234:	0800916d 	.word	0x0800916d

08009238 <__sfmoreglue>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	2268      	movs	r2, #104	; 0x68
 800923c:	1e4d      	subs	r5, r1, #1
 800923e:	4355      	muls	r5, r2
 8009240:	460e      	mov	r6, r1
 8009242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009246:	f7ff fa65 	bl	8008714 <_malloc_r>
 800924a:	4604      	mov	r4, r0
 800924c:	b140      	cbz	r0, 8009260 <__sfmoreglue+0x28>
 800924e:	2100      	movs	r1, #0
 8009250:	e9c0 1600 	strd	r1, r6, [r0]
 8009254:	300c      	adds	r0, #12
 8009256:	60a0      	str	r0, [r4, #8]
 8009258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800925c:	f7fd fb2c 	bl	80068b8 <memset>
 8009260:	4620      	mov	r0, r4
 8009262:	bd70      	pop	{r4, r5, r6, pc}

08009264 <__sfp_lock_acquire>:
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__sfp_lock_acquire+0x8>)
 8009266:	f000 b8b3 	b.w	80093d0 <__retarget_lock_acquire_recursive>
 800926a:	bf00      	nop
 800926c:	200003e5 	.word	0x200003e5

08009270 <__sfp_lock_release>:
 8009270:	4801      	ldr	r0, [pc, #4]	; (8009278 <__sfp_lock_release+0x8>)
 8009272:	f000 b8ae 	b.w	80093d2 <__retarget_lock_release_recursive>
 8009276:	bf00      	nop
 8009278:	200003e5 	.word	0x200003e5

0800927c <__sinit_lock_acquire>:
 800927c:	4801      	ldr	r0, [pc, #4]	; (8009284 <__sinit_lock_acquire+0x8>)
 800927e:	f000 b8a7 	b.w	80093d0 <__retarget_lock_acquire_recursive>
 8009282:	bf00      	nop
 8009284:	200003e6 	.word	0x200003e6

08009288 <__sinit_lock_release>:
 8009288:	4801      	ldr	r0, [pc, #4]	; (8009290 <__sinit_lock_release+0x8>)
 800928a:	f000 b8a2 	b.w	80093d2 <__retarget_lock_release_recursive>
 800928e:	bf00      	nop
 8009290:	200003e6 	.word	0x200003e6

08009294 <__sinit>:
 8009294:	b510      	push	{r4, lr}
 8009296:	4604      	mov	r4, r0
 8009298:	f7ff fff0 	bl	800927c <__sinit_lock_acquire>
 800929c:	69a3      	ldr	r3, [r4, #24]
 800929e:	b11b      	cbz	r3, 80092a8 <__sinit+0x14>
 80092a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a4:	f7ff bff0 	b.w	8009288 <__sinit_lock_release>
 80092a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092ac:	6523      	str	r3, [r4, #80]	; 0x50
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <__sinit+0x68>)
 80092b0:	4a13      	ldr	r2, [pc, #76]	; (8009300 <__sinit+0x6c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	bf04      	itt	eq
 80092ba:	2301      	moveq	r3, #1
 80092bc:	61a3      	streq	r3, [r4, #24]
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 f820 	bl	8009304 <__sfp>
 80092c4:	6060      	str	r0, [r4, #4]
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 f81c 	bl	8009304 <__sfp>
 80092cc:	60a0      	str	r0, [r4, #8]
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 f818 	bl	8009304 <__sfp>
 80092d4:	2200      	movs	r2, #0
 80092d6:	60e0      	str	r0, [r4, #12]
 80092d8:	2104      	movs	r1, #4
 80092da:	6860      	ldr	r0, [r4, #4]
 80092dc:	f7ff ff82 	bl	80091e4 <std>
 80092e0:	68a0      	ldr	r0, [r4, #8]
 80092e2:	2201      	movs	r2, #1
 80092e4:	2109      	movs	r1, #9
 80092e6:	f7ff ff7d 	bl	80091e4 <std>
 80092ea:	68e0      	ldr	r0, [r4, #12]
 80092ec:	2202      	movs	r2, #2
 80092ee:	2112      	movs	r1, #18
 80092f0:	f7ff ff78 	bl	80091e4 <std>
 80092f4:	2301      	movs	r3, #1
 80092f6:	61a3      	str	r3, [r4, #24]
 80092f8:	e7d2      	b.n	80092a0 <__sinit+0xc>
 80092fa:	bf00      	nop
 80092fc:	080097ac 	.word	0x080097ac
 8009300:	0800922d 	.word	0x0800922d

08009304 <__sfp>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	4607      	mov	r7, r0
 8009308:	f7ff ffac 	bl	8009264 <__sfp_lock_acquire>
 800930c:	4b1e      	ldr	r3, [pc, #120]	; (8009388 <__sfp+0x84>)
 800930e:	681e      	ldr	r6, [r3, #0]
 8009310:	69b3      	ldr	r3, [r6, #24]
 8009312:	b913      	cbnz	r3, 800931a <__sfp+0x16>
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff ffbd 	bl	8009294 <__sinit>
 800931a:	3648      	adds	r6, #72	; 0x48
 800931c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009320:	3b01      	subs	r3, #1
 8009322:	d503      	bpl.n	800932c <__sfp+0x28>
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	b30b      	cbz	r3, 800936c <__sfp+0x68>
 8009328:	6836      	ldr	r6, [r6, #0]
 800932a:	e7f7      	b.n	800931c <__sfp+0x18>
 800932c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009330:	b9d5      	cbnz	r5, 8009368 <__sfp+0x64>
 8009332:	4b16      	ldr	r3, [pc, #88]	; (800938c <__sfp+0x88>)
 8009334:	60e3      	str	r3, [r4, #12]
 8009336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800933a:	6665      	str	r5, [r4, #100]	; 0x64
 800933c:	f000 f847 	bl	80093ce <__retarget_lock_init_recursive>
 8009340:	f7ff ff96 	bl	8009270 <__sfp_lock_release>
 8009344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800934c:	6025      	str	r5, [r4, #0]
 800934e:	61a5      	str	r5, [r4, #24]
 8009350:	2208      	movs	r2, #8
 8009352:	4629      	mov	r1, r5
 8009354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009358:	f7fd faae 	bl	80068b8 <memset>
 800935c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009364:	4620      	mov	r0, r4
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009368:	3468      	adds	r4, #104	; 0x68
 800936a:	e7d9      	b.n	8009320 <__sfp+0x1c>
 800936c:	2104      	movs	r1, #4
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff ff62 	bl	8009238 <__sfmoreglue>
 8009374:	4604      	mov	r4, r0
 8009376:	6030      	str	r0, [r6, #0]
 8009378:	2800      	cmp	r0, #0
 800937a:	d1d5      	bne.n	8009328 <__sfp+0x24>
 800937c:	f7ff ff78 	bl	8009270 <__sfp_lock_release>
 8009380:	230c      	movs	r3, #12
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	e7ee      	b.n	8009364 <__sfp+0x60>
 8009386:	bf00      	nop
 8009388:	080097ac 	.word	0x080097ac
 800938c:	ffff0001 	.word	0xffff0001

08009390 <_fwalk_reent>:
 8009390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009394:	4606      	mov	r6, r0
 8009396:	4688      	mov	r8, r1
 8009398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800939c:	2700      	movs	r7, #0
 800939e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a2:	f1b9 0901 	subs.w	r9, r9, #1
 80093a6:	d505      	bpl.n	80093b4 <_fwalk_reent+0x24>
 80093a8:	6824      	ldr	r4, [r4, #0]
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	d1f7      	bne.n	800939e <_fwalk_reent+0xe>
 80093ae:	4638      	mov	r0, r7
 80093b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b4:	89ab      	ldrh	r3, [r5, #12]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d907      	bls.n	80093ca <_fwalk_reent+0x3a>
 80093ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093be:	3301      	adds	r3, #1
 80093c0:	d003      	beq.n	80093ca <_fwalk_reent+0x3a>
 80093c2:	4629      	mov	r1, r5
 80093c4:	4630      	mov	r0, r6
 80093c6:	47c0      	blx	r8
 80093c8:	4307      	orrs	r7, r0
 80093ca:	3568      	adds	r5, #104	; 0x68
 80093cc:	e7e9      	b.n	80093a2 <_fwalk_reent+0x12>

080093ce <__retarget_lock_init_recursive>:
 80093ce:	4770      	bx	lr

080093d0 <__retarget_lock_acquire_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <__retarget_lock_release_recursive>:
 80093d2:	4770      	bx	lr

080093d4 <__swhatbuf_r>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	460e      	mov	r6, r1
 80093d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093dc:	2900      	cmp	r1, #0
 80093de:	b096      	sub	sp, #88	; 0x58
 80093e0:	4614      	mov	r4, r2
 80093e2:	461d      	mov	r5, r3
 80093e4:	da08      	bge.n	80093f8 <__swhatbuf_r+0x24>
 80093e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	061a      	lsls	r2, r3, #24
 80093f0:	d410      	bmi.n	8009414 <__swhatbuf_r+0x40>
 80093f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f6:	e00e      	b.n	8009416 <__swhatbuf_r+0x42>
 80093f8:	466a      	mov	r2, sp
 80093fa:	f000 f903 	bl	8009604 <_fstat_r>
 80093fe:	2800      	cmp	r0, #0
 8009400:	dbf1      	blt.n	80093e6 <__swhatbuf_r+0x12>
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800940c:	425a      	negs	r2, r3
 800940e:	415a      	adcs	r2, r3
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	e7ee      	b.n	80093f2 <__swhatbuf_r+0x1e>
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	2000      	movs	r0, #0
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	b016      	add	sp, #88	; 0x58
 800941c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009420 <__smakebuf_r>:
 8009420:	898b      	ldrh	r3, [r1, #12]
 8009422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009424:	079d      	lsls	r5, r3, #30
 8009426:	4606      	mov	r6, r0
 8009428:	460c      	mov	r4, r1
 800942a:	d507      	bpl.n	800943c <__smakebuf_r+0x1c>
 800942c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	2301      	movs	r3, #1
 8009436:	6163      	str	r3, [r4, #20]
 8009438:	b002      	add	sp, #8
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	ab01      	add	r3, sp, #4
 800943e:	466a      	mov	r2, sp
 8009440:	f7ff ffc8 	bl	80093d4 <__swhatbuf_r>
 8009444:	9900      	ldr	r1, [sp, #0]
 8009446:	4605      	mov	r5, r0
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff f963 	bl	8008714 <_malloc_r>
 800944e:	b948      	cbnz	r0, 8009464 <__smakebuf_r+0x44>
 8009450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009454:	059a      	lsls	r2, r3, #22
 8009456:	d4ef      	bmi.n	8009438 <__smakebuf_r+0x18>
 8009458:	f023 0303 	bic.w	r3, r3, #3
 800945c:	f043 0302 	orr.w	r3, r3, #2
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	e7e3      	b.n	800942c <__smakebuf_r+0xc>
 8009464:	4b0d      	ldr	r3, [pc, #52]	; (800949c <__smakebuf_r+0x7c>)
 8009466:	62b3      	str	r3, [r6, #40]	; 0x28
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	6020      	str	r0, [r4, #0]
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	9b00      	ldr	r3, [sp, #0]
 8009474:	6163      	str	r3, [r4, #20]
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	6120      	str	r0, [r4, #16]
 800947a:	b15b      	cbz	r3, 8009494 <__smakebuf_r+0x74>
 800947c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009480:	4630      	mov	r0, r6
 8009482:	f000 f8d1 	bl	8009628 <_isatty_r>
 8009486:	b128      	cbz	r0, 8009494 <__smakebuf_r+0x74>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f023 0303 	bic.w	r3, r3, #3
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	89a0      	ldrh	r0, [r4, #12]
 8009496:	4305      	orrs	r5, r0
 8009498:	81a5      	strh	r5, [r4, #12]
 800949a:	e7cd      	b.n	8009438 <__smakebuf_r+0x18>
 800949c:	0800922d 	.word	0x0800922d

080094a0 <_malloc_usable_size_r>:
 80094a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a4:	1f18      	subs	r0, r3, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfbc      	itt	lt
 80094aa:	580b      	ldrlt	r3, [r1, r0]
 80094ac:	18c0      	addlt	r0, r0, r3
 80094ae:	4770      	bx	lr

080094b0 <_raise_r>:
 80094b0:	291f      	cmp	r1, #31
 80094b2:	b538      	push	{r3, r4, r5, lr}
 80094b4:	4604      	mov	r4, r0
 80094b6:	460d      	mov	r5, r1
 80094b8:	d904      	bls.n	80094c4 <_raise_r+0x14>
 80094ba:	2316      	movs	r3, #22
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	f04f 30ff 	mov.w	r0, #4294967295
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094c6:	b112      	cbz	r2, 80094ce <_raise_r+0x1e>
 80094c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094cc:	b94b      	cbnz	r3, 80094e2 <_raise_r+0x32>
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f830 	bl	8009534 <_getpid_r>
 80094d4:	462a      	mov	r2, r5
 80094d6:	4601      	mov	r1, r0
 80094d8:	4620      	mov	r0, r4
 80094da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094de:	f000 b817 	b.w	8009510 <_kill_r>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d00a      	beq.n	80094fc <_raise_r+0x4c>
 80094e6:	1c59      	adds	r1, r3, #1
 80094e8:	d103      	bne.n	80094f2 <_raise_r+0x42>
 80094ea:	2316      	movs	r3, #22
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	2001      	movs	r0, #1
 80094f0:	e7e7      	b.n	80094c2 <_raise_r+0x12>
 80094f2:	2400      	movs	r4, #0
 80094f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094f8:	4628      	mov	r0, r5
 80094fa:	4798      	blx	r3
 80094fc:	2000      	movs	r0, #0
 80094fe:	e7e0      	b.n	80094c2 <_raise_r+0x12>

08009500 <raise>:
 8009500:	4b02      	ldr	r3, [pc, #8]	; (800950c <raise+0xc>)
 8009502:	4601      	mov	r1, r0
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	f7ff bfd3 	b.w	80094b0 <_raise_r>
 800950a:	bf00      	nop
 800950c:	20000010 	.word	0x20000010

08009510 <_kill_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d07      	ldr	r5, [pc, #28]	; (8009530 <_kill_r+0x20>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	f7f8 fa01 	bl	8001924 <_kill>
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	d102      	bne.n	800952c <_kill_r+0x1c>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	b103      	cbz	r3, 800952c <_kill_r+0x1c>
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	bd38      	pop	{r3, r4, r5, pc}
 800952e:	bf00      	nop
 8009530:	200003e0 	.word	0x200003e0

08009534 <_getpid_r>:
 8009534:	f7f8 b9ee 	b.w	8001914 <_getpid>

08009538 <__sread>:
 8009538:	b510      	push	{r4, lr}
 800953a:	460c      	mov	r4, r1
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	f000 f894 	bl	800966c <_read_r>
 8009544:	2800      	cmp	r0, #0
 8009546:	bfab      	itete	ge
 8009548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800954a:	89a3      	ldrhlt	r3, [r4, #12]
 800954c:	181b      	addge	r3, r3, r0
 800954e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009552:	bfac      	ite	ge
 8009554:	6563      	strge	r3, [r4, #84]	; 0x54
 8009556:	81a3      	strhlt	r3, [r4, #12]
 8009558:	bd10      	pop	{r4, pc}

0800955a <__swrite>:
 800955a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	461f      	mov	r7, r3
 8009560:	898b      	ldrh	r3, [r1, #12]
 8009562:	05db      	lsls	r3, r3, #23
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	4616      	mov	r6, r2
 800956a:	d505      	bpl.n	8009578 <__swrite+0x1e>
 800956c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009570:	2302      	movs	r3, #2
 8009572:	2200      	movs	r2, #0
 8009574:	f000 f868 	bl	8009648 <_lseek_r>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800957e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	4632      	mov	r2, r6
 8009586:	463b      	mov	r3, r7
 8009588:	4628      	mov	r0, r5
 800958a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800958e:	f000 b817 	b.w	80095c0 <_write_r>

08009592 <__sseek>:
 8009592:	b510      	push	{r4, lr}
 8009594:	460c      	mov	r4, r1
 8009596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959a:	f000 f855 	bl	8009648 <_lseek_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	bf15      	itete	ne
 80095a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80095a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095ae:	81a3      	strheq	r3, [r4, #12]
 80095b0:	bf18      	it	ne
 80095b2:	81a3      	strhne	r3, [r4, #12]
 80095b4:	bd10      	pop	{r4, pc}

080095b6 <__sclose>:
 80095b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ba:	f000 b813 	b.w	80095e4 <_close_r>
	...

080095c0 <_write_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_write_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f8 f9df 	bl	8001992 <_write>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_write_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_write_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	200003e0 	.word	0x200003e0

080095e4 <_close_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	; (8009600 <_close_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f8 f9eb 	bl	80019ca <_close>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_close_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_close_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	200003e0 	.word	0x200003e0

08009604 <_fstat_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_fstat_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f7f8 f9e6 	bl	80019e2 <_fstat>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_fstat_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_fstat_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	200003e0 	.word	0x200003e0

08009628 <_isatty_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d06      	ldr	r5, [pc, #24]	; (8009644 <_isatty_r+0x1c>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	f7f8 f9e5 	bl	8001a02 <_isatty>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_isatty_r+0x1a>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_isatty_r+0x1a>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	200003e0 	.word	0x200003e0

08009648 <_lseek_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	; (8009668 <_lseek_r+0x20>)
 800964c:	4604      	mov	r4, r0
 800964e:	4608      	mov	r0, r1
 8009650:	4611      	mov	r1, r2
 8009652:	2200      	movs	r2, #0
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f7f8 f9de 	bl	8001a18 <_lseek>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_lseek_r+0x1e>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_lseek_r+0x1e>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	200003e0 	.word	0x200003e0

0800966c <_read_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	; (800968c <_read_r+0x20>)
 8009670:	4604      	mov	r4, r0
 8009672:	4608      	mov	r0, r1
 8009674:	4611      	mov	r1, r2
 8009676:	2200      	movs	r2, #0
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f8 f96c 	bl	8001958 <_read>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_read_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_read_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	200003e0 	.word	0x200003e0

08009690 <_init>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr

0800969c <_fini>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr
